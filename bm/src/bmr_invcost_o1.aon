rem --- Inventory Costing
rem --- Program bmr_invcost_o1 v8.0.0 07Jan2008 (bmr_fb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/07/2008 11:28:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error


rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$


rem --- printer Open

        if printorcost$<>"C" then
            call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
            if status then goto std_exit
        endif

rem --- Init Data
  
        i0=0
        more=1
        dim tmpcosts[3]
        tmatcost=0
        tdircost=0,tohcost=0,tsubcost=0
        precision p6

        call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMWHSE","PRIMARY",ivm02a_key_tpl$,rd_table_chans$[all],status$
        dim ivm02a_key$:ivm02a_key_tpl$
        if printorcost$="C" then
            call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,status
        endif
        extractrecord (bmm01_dev,key=firm_id$+billfrom$,dom=*next) bmm01a$

rem --- Read Master
while more
        read record (bmm01_dev,end=done) bmm01a$
        bill_no$=bmm01a.bill_no$
        if billthru$<>"" then
                if bmm01a.firm_id$+bmm01a.bill_no$>firm_id$+billthru$ then goto std_exit
        endif

        find (ivm02_dev,key=firm_id$+whs$+bmm01a.bill_no$,dom=*continue); rem "Skip if not in specified whse
        h=0
        i0=0
        parent$=bill_no$
        if printorcost$="C" then
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        endif
        gosub explode

rem --- Print Material Information

while more
        
        if cvs(bill_list$,3)="" then break
        ivm02a_key$=firm_id$+whs$+bill_list$(len(bill_list$)-20+1,20)
        gosub get_nonphantom
        if parent$=ivm02a_key.item_id$ then
            let parentout$=parent$
        else
            let parentout$=""
        endif
        if printorcost$<>"C" then
            call pgmdir$+"bmc_printbill.aon",1,printer_dev,bill_no$,h,comments$,ivm02a_key.item_id$+parentout$,whs$,select$,pdate$,status
            if status<>0 then
                if printorcost$="P" then goto std_exit
                printorcost$="C"
                call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,status
            endif
        endif

        if len(bill_list$)>20 then
            let bill_list$=bill_list$(1,len(bill_list$)-20)
        else
            if len(bill_list$)=20 then let bill_list$=""
        endif
        read record (bmm01_dev,key=firm_id$+ivm02a_key.item_id$,dom=*next) bmm01a$
        a6=0
        tmatcost=0
        tdircost=0,tohcost=0,tsubcost=0
        read (bmm02_dev,key=firm_id$+ivm02a_key.item_id$,dom=*next)

        while more
            read record (bmm02_dev,end=get_op_info) bmm02a$
            if pos(firm_id$+ivm02a_key.item_id$=bmm02a.firm_id$+bmm02a.bill_no$+bmm02a.material_seq$)<>1 then break
            if cvs(bmm02a.effect_date$,3)<>"" and bmm02a.effect_date$>pdate$ then continue
            if cvs(bmm02a.obsolt_date$,3)<>"" and bmm02a.obsolt_date$<=pdate$ then continue            
            find record (ivm02_dev,key=firm_id$+whs$+bmm02a.item_id$,dom=*continue) ivm02a$
            tmatcost=tmatcost+ivm02a.UNIT_COST*fnqty(bmm02a.QTY_REQUIRED,bmm02a.ALT_FACTOR,bmm02a.DIVISOR,bmm01a.EST_YIELD,bmm02a.SCRAP_FACTOR)
        wend

get_op_info: rem --- Get Operation Information

        read (bmm03_dev,key=firm_id$+ivm02a_key.item_id$,dom=*next)

        while more
            read record (bmm03_dev,end=get_sub_info) bmm03a$
            if pos(firm_id$+ivm02a_key.item_id$=bmm03a.firm_id$+bmm03a.bill_no$+bmm03a.op_seq$)<>1 then break
            if cvs(bmm03a.effect_date$,3)<>"" and bmm03a.effect_date$>pdate$ then continue
            if cvs(bmm03a.obsolt_date$,3)<>"" and bmm03a.obsolt_date$<=pdate$ then continue
            let bmm08a.code_desc$="Not On File"
            bmm08a.DIRECT_RATE=0
            read record (bmm08_dev,key=bmm03a.firm_id$+bmm03a.op_code$,dom=*next) bmm08a$
            if bmm01a.STD_LOT_SIZE=0 then bmm01a.STD_LOT_SIZE=1
            if bmm03a.PCS_PER_HOUR<>0 then
                let directcost=fnop1(bmm03a.HRS_PER_PCE,bmm08a.DIRECT_RATE,bmm03a.PCS_PER_HOUR,bmm01a.EST_YIELD,bmm03a.SETUP_TIME,bmm01a.STD_LOT_SIZE)
            else
                let directcost=0
            endif
            ohlabcost=directcost*bmm08a.OVHD_FACTOR
            tdircost=tdircost+directcost
            tohcost=tohcost+ohlabcost
        wend

get_sub_info: rem --- Get Subcontract Information

        if ap$<>"N" then
            read (bmm05_dev,key=firm_id$+ivm02a_key.item_id$,dom=*next)
            while more
                read record (bmm05_dev,end=print_total) bmm05a$
                if pos(firm_id$+ivm02a_key.item_id$=bmm05a.firm_id$+bmm05a.bill_no$+bmm05a.subcont_seq$)<>1 then break
                if cvs(bmm05a.effect_date$,3)<>"" and bmm05a.effect_date$>pdate$ then continue
                if cvs(bmm05a.obsolt_date$,3)<>"" and bmm05a.obsolt_date$<=pdate$ then continue
                if bmm05a.DIVISOR*bmm01a.EST_YIELD<>0 then
                    let tsubcost=tsubcost+bmm05a.UNIT_COST*fnsub(bmm05a.QTY_REQUIRED,bmm05a.ALT_FACTOR,bmm05a.DIVISOR)
                endif
            wend
        endif

print_total: rem --- Print Total Information
    
        if printorcost$="P" then continue

        if (bmm01a.firm_id$+bmm01a.bill_no$)=firm_id$+ivm02a_key.item_id$ then
             bmm01_fields$=fattr(bmm01a$,"")
             xfer$=bmm01_fields$(1,pos("DEALER_NUM_01"=bmm01_fields$)-1)
             while xfer$<>""
                xfield$=xfer$(1,pos($0A$=xfer$)-1)
                xfer$=xfer$(pos($0A$=xfer$)+1)
                field bmm01a$,xfield$ = field (bmm01a$,xfield$)
             wend
         else
             find record (bmm01_dev,key=firm_id$+bmm01a.bill_no$,dom=*break)bmm01a$
        endif
        write record (bmm01_dev,key=firm_id$+ivm02a_key.item_id$) bmm01a$

rem --- Write Inventory Record - with new cost for Finished Good

    if cost_param$<>"S" then
        if !(cost_param$="R" and pos(ivm02a_key.item_id$=bmm01a.bill_no$)=1) then
            if bmm01a.phantom_bill$<>"Y" continue
        endif
    endif
    
    extract record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a2$
    tcost=tmatcost+tdircost+tohcost+tsubcost
    gosub calc_costs
    write record (ivm02_dev,key=ivm02a_key$) ivm02a2$

rem Main Loop Ends

Wend

wend

done: rem --- End

    goto std_exit

explode: rem --- Explode

   
    bill_list$=bmm01a.bill_no$
    billseq_list$=""
    savea0$=bmm01a.firm_id$+bmm01a.bill_no$

    while more
        read (bmm02_dev,key=savea0$,dom=*next)
        while more
            begin_flag=0
            read record (bmm02_dev,end=*break) bmm02a$
            if pos(bmm01a.firm_id$+bmm01a.bill_no$=bmm02a.firm_id$+bmm02a.bill_no$)<>1 then break
            if pos(bmm02a.item_id$=bill_list$)<>0 then gosub check_circular_ref
            find (bmm01_dev,key=firm_id$+bmm02a.item_id$,dom=*continue)
            if pos(bmm02a.item_id$=bill_list$)<>0 then continue
            if cvs(bmm02a.effect_date$,3)<>"" and bmm02a.effect_date$>pdate$ then continue
            if cvs(bmm02a.obsolt_date$,2)<>"" and bmm02a.obsolt_date$<=pdate$ then continue
            bill_list$=bill_list$+bmm02a.item_id$
            billseq_list$=billseq_list$+bmm01a.bill_no$+bmm02a.material_seq$
            savea0$=firm_id$+bmm02a.item_id$
            begin_flag=1
            break
        wend
        if begin_flag=1 then continue
        if billseq_list$="" then break
        savea0$=firm_id$+billseq_list$(len(billseq_list$)-22,23)
        billseq_list$=billseq_list$(1,len(billseq_list$)-23)
    wend
return

get_nonphantom: rem --- Get Non-Phantom information

    find record (bmm01_dev,key=firm_id$+ivm02a_key.item_id$,dom=*return) bmm01a$
    if bmm01a.PHANTOM_BILL$<>"Y" then parent$=ivm02a_key.item_id$

return

calc_costs: rem --- Calc IVM02 costs

rem --- Set Average cost

    ivm02a.AVG_COST=tcost

rem --- Set replacement cost

    if tcost<>0 then ivm02a.REP_COST=tcost

rem --- Set Standard Cost

    ivm02a.STD_COST=tcost

rem --- Set unit cost

    if cost_param$="A"
        ivm02a.UNIT_COST=ivm02a.AVG_COST; rem "Average Costing
    endif
    if cost_param$="S"
        ivm02a.UNIT_COST=ivm02a.STD_COST; rem "Standard Costing
    endif
    if cost_param$="R"
        ivm02a.UNIT_COST=ivm02a.REP_COST; rem "Replacement Costing
    endif
return

check_circular_ref: rem --- Circular Reference

    rem i0=i0+1
    i0=200
    escape
    if i0<100 then
        return
    endif
    dim message$[1]
    message$[0]="Circular Reference Found For This Bill Number"
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
    print @(v1,v2),'rb',
    if v3=4 then exitto std_exit
    i0=0
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))
    def fnop1(q1,q2,q3,q4,q5,q6)=100*(q1*q2/q3)/q4+q5*q2/q6
    def fnsub(q1,q2,q3)=q1*q2/q3

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- #include "./aon/lib/std_input.src

std_input: rem --- standard input routine (12-mar-2003)

    if restart and vaction$="s" then let vaction$="sp",restart=0
    if vaction$="g" then let compare_control=num(str(grid_id)+str(grid_row:"000")+str(grid_col:"000")) else let compare_control=control_id
    if compare_control=old_control_id then let validate=0 else let old_control_id=compare_control
    dim vdata$[10],vdata[10],vinfo$[20],vinfo[20]
    vdata$[0]=v0$
    vdata$[1]=v1$,vdata$[2]=v2$,vdata$[3]=v3$,vdata$[4]=v4$
    vdata[0]=v0
    vdata[1]=v1,vdata[2]=v2,vdata[3]=v3,vdata[4]=v
    vinfo$[0]=pgm(-2)
    vinfo$[4]=event$,vinfo[2]=control_id,vinfo[3]=i0
    vinfo[4]=i0_nonkey1
    vinfo[5]=i0_done,vinfo[6]=my_context
    vinfo[7]=validate
    vinfo[8]=statusbar_context,vinfo[9]=parent_context
    vinfo[10]=tab_control_id
    vinfo[11]=tab_index,vinfo[12]=done_context
    vinfo[14]=grid_col
    vinfo[15]=grid_row
    vinfo$[11]=vtoken1$
    vinfo$[12]=vtoken2$,vinfo$[13]=vtoken3$
    vinfo$[14]=vtoken4$
    vinfo$[15]=vtoken5$,vinfo$[16]=vtoken6$
    vinfo$[17]=vtoken7$
    vinfo$[18]=vtoken8$,vinfo$[19]=vtoken9$

rem --- call standard input routine

    call pgmdir$+"syc_ig.bbx",vaction$,vdata$[all],vdata[all],vinfo$[all],vinfo[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],vstatus
    if vstatus=127 then goto std_input_escape
    if vstatus=999 then goto std_input_error
    goto std_input_exit

std_input_escape: rem --- escape during input

    call pgmdir$+"syc_es.bbx",err=std_input_error,pgm(-2),tcb(8),e$,e2,v3
    if v3<>127 then goto std_input
    print @(0,e2),'cl','cursor'("ON"),e$,'lf'

rem --- error during input
std_input_error:
     goto std_input
std_input_exit: rem --- assign local variables and return
    let v$=vinfo$[1],event$=vinfo$[4],v=vinfo[0],v3=vinfo[1]
    let next_control=vinfo[2],i0=vinfo[3],next_context=vinfo[6]
    let validate=vinfo[7],grid_col=vinfo[14],grid_row=vinfo[15]
    let wants_to_edit_cell=vinfo[16],next_tab_index=vinfo[18]
    if wants_to_edit_cell then dim vnotice$:vinfo$[3]; let vnotice$=vinfo$[2]
    return

rem --- #end include
rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
