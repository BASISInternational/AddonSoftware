rem --- Bill Material Availability Hard Copy
rem --- Program bmr_ic v8.0.0 15Jan2008 (bmr_ic)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/15/2008 10:16:00)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+sysinfo",err=*next)
        milestone=num(stbl("+milestone",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$


rem --- Init Data
        more=1
        l9=59
        l=l9+1,h0=132,h=0,headings=3,when$=sysinfo.system_date$,clock$=""
        dim headings$[headings]
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$+" - Availability Of Components Inquiry"
        headings$[2]="As Of "+fndate$(pdate$)
        call pgmdir$+"adc_sizemask.aon",ivs01a.cost_mask$,p8,5,15
        m2$=ivs01a.cost_mask$
        p1=len(bms01a.hrqty_mask$)
        m2=len(m2$)
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
        dim bmm02a_key$:bmm02a_key_tpl$
rem --- Init Data

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto done
        call pgmdir$+"adc_progress.aon","N","","","","",0,bmm02_dev,meter_num,status

rem --- Background

        find record (ivm01_dev,key=firm_id$+a0$(3,p[0]),dom=*next) ivm01a$
        bill_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        find record (ivm10_dev,key=firm_id$+"C"+x0$,dom=*next) ivm10c$
        x1$=ivm10c.short_name$
        gosub display_fields

rem --- Key

        precision num(ivs01a.precision$)
        dim b[10]
        read (bmm02_dev,key=a0$(1,2+p[0]),dom=*next)
while more  
        bmm02a_key$=key(bmm02_dev,end=*break)
        if pos(a0$(1,2+p[0])=bmm02a_key$)<>1 then break
        read record (bmm02_dev) bmm02a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if bmm02a.line_type$<>"S" then continue
        if bmm02a.effect_date$<>"   " and bmm02a.effect_date$>pdate$ then continue
        if bmm02a.obsolt_date$<>"   " and bmm02a.obsolt_date$<=pdate$ then continue

rem --- Find Item Record

        find record (ivm01_dev,key=firm_id$+bmm02a.item_id$,dom=*next) ivm01a$
        ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        dim c[20]
        find record (ivm02_dev,key=firm_id$+x0$+bmm02a.item_id$,dom=assign) ivm02a$
        gosub Detail
assign:
        ivm02a.warehouse_id$="  "

        gosub Detail
wend

done: rem --- Overlay

        close (printer_dev,err=*next)
        o1=3
        print @(0,22),'cl',
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
        run pgmdir$+"bmm_ma.bbx"

display_fields: rem --- Display Fields

        l=headings+1
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
        if status then exitto done
        print (printer_dev)@(0),"For Bill Number: ",a0$(3,p[0])," ",bill_desc$
        print (printer_dev)@(6),"Warehouse: ",x0$," ",x1$,@(50),"Finished Quantity: ",x0:m2$,'lf'
        print (printer_dev)@(0),"Seq",@(5),"Wh",@(9),"Item",@(130-4*m2-4),"Qty",@(130-3*m2-8),"On Hand",@(130-2*m2-7),"Commit",@(130-m2-6),"Avail",@(130-7),"On Ord"
        print (printer_dev)@(9),"Description",'lf'
        l=l+6
        return

Detail: rem --- Detail

        gosub verify_bill_no
        if l+2>l9 then gosub display_fields
        print (printer_dev)@(0),bmm02a_key.bill_no$,3,
        if x0*b[0]>c[0]-c[2] then print (printer_dev)@(3),"**",
        print (printer_dev)@(5),ivm02a.warehouse_id$,@(8),r0$,@(9),bmm02a.item_id$,@(130-4*m2-p1),x0*fnqty(b[0],bmm02a.alt_factor,bmm02a.divisor,a[4],bmm02a.scrap_factor):p1$,@(130-4*m2),c[0]:m2$,@(130-3*m2),c[2]:m2$,@(130-2*m2),c[0]-c[2]:m2$,@(130-m2),c[1]:m2$
        print (printer_dev)@(9),ivm01a.item_desc$(1,30)
        l=l+2
        return

verify_bill_no: rem --- Verify if Item is a Bill Number

        r0$=" "
        find (bmm01_dev,key=firm_id$+bmm02a.item_id$,dom=return_back)
        r0$="*"
return_back:
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
