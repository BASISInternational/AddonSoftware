rem --- rem bmr Indented BOM Listing II
rem --- Program bmr_indentedbill_o1 v8.0.0 09Jan2008 (bmr_zb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/09/2008 03:22:26)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    precision 5

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open Printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Initializations
    call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,rd_table_chans$[all],status$
    dim bmm02a_key$:bmm02a_key_tpl$
    dim bmm03a_key$:bmm03a_key_tpl$
    dim junk[10],z[11],ivdesc$(desc[0])
    more=1

rem --- Build Headings and Set Print Positions

    h0=132
    h=0,headings=3,when$=sysinfo.system_date$,clock$=""
    dim headings$[headings],o[11],headline1$(h0),headline2$(h0)
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]="Level Selection: "
    if level$="" then headings$[2]=headings$[2]+"All Levels Selected" else headings$[2]=headings$[2]+"All Levels Up To "+level$
    if showcost$="N" then let m1=0,m3=0,thead$=""
    minlen=m2+m3-1
    mhead$=fill(max(minlen,8),"-")+" "
    mhead$(int((len(mhead$)-8)/2)+1,8)="Material"
    lhead$=fill(max(minlen,5),"-")+" "
    lhead$(int((len(lhead$)-5)/2)+1,5)="Labor"
    shead$=fill(max(minlen,11),"-")+" "
    shead$(int((len(shead$)-11)/2)+1,11)="Subcontract"
    if showcost$="Y" then let thead$=fill(max(m1,5),"-")+" ",thead$(int((len(thead$)-5)/2)+1,5)="Total"
    mlsthead$=mhead$+lhead$+shead$+thead$
    dim o[11]
    o[0]=0
    o[1]=o[0]+4,o[2]=o[1]+max(level+1,7),o[3]=o[2]+p[0]+1,o[4]=o[3]+desc[0]+1
    o[11]=h0-max(m1,len(thead$))
    o[10]=o[11]-m3,o[9]=o[11]-max(m3+m2,len(shead$)),o[8]=o[9]-m3,o[7]=o[9]-max(m3+m2,len(lhead$)),o[6]=o[7]-m3,o[5]=o[7]-max(m3+m2,len(mhead$))
    if o[4]+3>o[5] then let lines=2,o[4]=o[5]-3 else let lines=1
    
    headline1$(o[0]+1)="Seq"
    headline1$(o[1]+1)="Level",headline1$(o[2]+1)="Item #",headline1$(o[3]+1)="Description",headline1$(o[5]+1)=mlsthead$
    headline2$(o[4]+1)="UM"
    headline2$(o[5]+1+m2-6)="Units",headline2$(o[7]+1+m2-6)="Units",headline2$(o[9]+1+m2-6)="Units"
    if showcost$="Y" then let headline2$(o[6]+1+m3-5,4)="Cost",headline2$(o[8]+1+m3-5,4)="Cost",headline2$(o[10]+1+m3-5,4)="Cost"

rem --- Background

    call pgmdir$+"adc_progress.aon","NC","","","","",p[0],bmm01_dev,1,meter_num,status

rem --- Options

    dim l9$(40,$0a$)

rem --- Init Read

    extractrecord (bmm01_dev,key=firm_id$+billfrom$,dom=*next) bmm01a$

main_read: rem --- Main Read
while more
    read record (bmm01_dev,end=done) bmm01a$
    if bmm01a.firm_id$<>firm_id$ then goto done
    x0$=bmm01a.firm_id$+bmm01a.bill_no$
    lot=bmm01a.std_lot_size,yield=bmm01a.est_yield
    if billthru$<>"" then if bmm01a.bill_no$>pad(billthru$,20) then goto done

rem --- Breaks

    gosub find_description
    rem if x0$="NONE" then goto main_read
    if x0$="NONE" then continue
    call pgmdir$+"adc_progress.aon","S","","","",bmm01a.bill_no$,0,0,1,meter_num,status
    dim lab_cost[9],mat_cost[9],lab_qty[9],mat_qty[9],sub_qty[9],sub_cost[9],k9$(9*25)
    k$=bmm01a.firm_id$+bmm01a.bill_no$
    cur_level=1,mat_qty[cur_level]=1
    if level<>1 then print (printer_dev)'lf'; let l=l+2

get_subcontractors: rem --- Get Subcontracts

    x$=k$
    levelprinted=0
    gosub subcontractors

rem --- Find Labor

    x$=k$
    gosub add_labor
    cur_level=cur_level+1

rem --- Find Parts

    read (bmm02_dev,key=k$,dom=*next)
    while more
        bmm02a_key$=key(bmm02_dev,end=sub_totals)
        if pos(firm_id$=bmm02a_key$)=1 then 
          read record (bmm02_dev,key=bmm02a_key$) bmm02a$
          if bmm02a.firm_id$+bmm02a.bill_no$=k$ then 
            if bmm02a.line_type$<>"S" then continue
            if bmm02a.effect_date$<>"   " then if bmm02a.effect_date$>pdate$ then continue
            if bmm02a.obsolt_date$<>"   " then if bmm02a.obsolt_date$<=pdate$ then continue
            x0$=bmm02a.firm_id$+bmm02a.item_id$
            gosub find_description

rem --- Any Pieces??

            find (bmm01_dev,key=bmm02a.firm_id$+bmm02a.item_id$,dom=print_parts)
            if cur_level>9 then goto circular_reference
            k9$(((cur_level-1)*25)+1,25)=bmm02a.firm_id$+bmm02a.bill_no$+bmm02a.material_seq$
            k$=bmm02a.firm_id$+bmm02a.item_id$,mat_qty[cur_level]=fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)
            if cur_level=2 and level>=2 then print (printer_dev)@(o[0]),bmm02a.material_seq$,
            goto get_subcontractors

print_parts: rem --- Print Parts

            if cur_level<=level then 
                if l+lines>l9 then gosub report_heading
                dim dots$(cur_level-1,".")
                if cur_level=1 then let um$=bmm01a.unit_measure$ else let um$=bmm02a.unit_measure$
                if cur_level=2 and level>=2 then print (printer_dev)@(o[0]),bmm02a.material_seq$,
                if bmm02a.divisor=0 then let bmm02a.divisor=1
                print (printer_dev)@(o[1]),dots$,cur_level:"0",@(o[2]+1),bmm02a.item_id$,
                if lines=1 then print (printer_dev)@(o[3]+(cur_level-1)*2),ivdesc$(1,desc[0]-(cur_level-1)*2), else print (printer_dev)@(o[3]+(cur_level-1)*2),ivdesc$
                print (printer_dev)@(o[4]),um$,@(o[5]),fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor):m2$,
                if showcost$="Y" then print (printer_dev)@(o[6]),bms01a.mat_factor*ivm02a.unit_cost*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor):m3$ else print (printer_dev)""
                l=l+lines
            endif    

            mat_cost[cur_level-1]=mat_cost[cur_level-1]+bms01a.mat_factor*ivm02a.unit_cost*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)
            continue
          endif
        endif

sub_totals: rem --- Sub Totals
        
        cur_level=cur_level-1
        if cur_level<=level then 
            if l+1>l9 then gosub report_heading
            dim dots$(cur_level-1,".")
            print (printer_dev)@(o[1]),dots$,cur_level:"0",@(o[5]),mat_qty[cur_level]:m2$,@(o[7]),lab_qty[cur_level]*mat_qty[cur_level]:m2$,@(o[9]),sub_qty[cur_level]:m2$,
            if showcost$="Y" then print (printer_dev)@(o[6]),mat_cost[cur_level]*mat_qty[cur_level]:m3$,@(o[8]),lab_cost[cur_level]*mat_qty[cur_level]:m3$,@(o[10]),sub_cost[cur_level]:m3$,@(o[11]),mat_cost[cur_level]*mat_qty[cur_level]+lab_cost[cur_level]*mat_qty[cur_level]+sub_cost[cur_level]:m3$,
            if cur_level<level then print (printer_dev)@(o[3]+(cur_level-1)*2),"Total:" else print (printer_dev)""
            l=l+1
            if bms01a.mat_factor<>1 and cur_level<>1 then 
                if cur_level<level then print (printer_dev)@(o[3]+(cur_level-1)*2),"Factored Total:",@(o[7]),lab_qty[cur_level]*mat_qty[cur_level]:m2$,@(o[9]),sub_qty[cur_level]:m2$,
                if showcost$="Y" then if cur_level<level then print (printer_dev)@(o[6]),bms01a.mat_factor*mat_cost[cur_level]*mat_qty[cur_level]:m3$,@(o[8]),bms01a.mat_factor*lab_cost[cur_level]*mat_qty[cur_level]:m3$,@(o[10]),sub_cost[cur_level]:m3$,@(o[11]),bms01a.mat_factor*(mat_cost[cur_level]*mat_qty[cur_level]+lab_cost[cur_level]*mat_qty[cur_level]+sub_cost[cur_level]):m3$ else print (printer_dev)""
                l=l+1
            endif
        endif

rem --- Do the Next Level
        
        if cur_level=1 then goto main_read
        lab_cost[cur_level-1]=lab_cost[cur_level-1]+bms01a.mat_factor*lab_cost[cur_level]*mat_qty[cur_level]
        mat_cost[cur_level-1]=mat_cost[cur_level-1]+bms01a.mat_factor*mat_cost[cur_level]*mat_qty[cur_level]
        lab_qty[cur_level-1]=lab_qty[cur_level-1]+lab_qty[cur_level]*mat_qty[cur_level]*bms01a.mat_factor
        sub_cost[cur_level-1]=sub_cost[cur_level-1]+sub_cost[cur_level]
        lab_cost[cur_level]=0
        mat_cost[cur_level]=0,lab_qty[cur_level]=0
        mat_qty[cur_level]=0
        sub_qty[cur_level]=0,sub_cost[cur_level]=0
        k$=k9$(((cur_level-1)*25)+1,25)
        k9$(((cur_level-1)*25)+1,25)=""
        x0$=k$(1,22)
        find record (bmm01_dev2,key=x0$,dom=unit_cost) bmm01a2$
        if bmm01a2.phantom_bill$<>"Y" then let lot=bmm01a2.std_lot_size,yield=bmm01a2.est_yield

unit_cost:
        gosub find_description
        read (bmm02_dev,key=k$)
        k$=k$(1,22)
    wend
wend

done: rem --- End of File

        goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)@(0),headline1$
    print (printer_dev)@(0),headline2$
    print (printer_dev)""
    l=l+3
    return

add_labor: rem --- Add Labor

    find record (bmm01_dev2,key=x$,dom=add_labor_dom) bmm01a2$
    if bmm01a2.phantom_bill$<>"Y" then let lot=bmm01a2.std_lot_size,yield=bmm01a2.est_yield
    if bmm01a2.phantom_bill$="Y" then let yield=bmm01a2.est_yield
add_labor_dom:
    read (bmm03_dev,key=x$,dom=*next)

    while more
        bmm03a_key$=key(bmm03_dev,end=*break)
        if pos(firm_id$=bmm03a_key$)<>1 then break
        read record (bmm03_dev,key=bmm03a_key$) bmm03a$
        if bmm03a.firm_id$+bmm03a.bill_no$<>bmm01a.firm_id$+bmm01a.bill_no$ then break
        if bmm03a.effect_date$<>"   " then if bmm03a.effect_date$>pdate$ then continue
        if bmm03a.obsolt_date$<>"   " then if bmm03a.obsolt_date$<=pdate$ then continue
        if bmm03a.pcs_per_hour=0 then continue
        dim w[13]
        read record (bmm08_dev,key=firm_id$+bmm03a.op_code$,dom=*next) bmm08a$
        if lot=0 then let lot=1
        directcost=fnop1(bmm03a.hrs_per_pce,bmm08a.direct_rate,bmm03a.pcs_per_hour,yield,bmm03a.setup_time,lot)
        ohcost=directcost*bmm08a.ovhd_factor
        if bmm03a.hrs_per_pce<>0 then let lab_cost[cur_level]=lab_cost[cur_level]+directcost+ohcost
        lab_qty[cur_level]=lab_qty[cur_level]+fnopqty(bmm03a.hrs_per_pce,bmm03a.pcs_per_hour,yield,bmm03a.setup_time,lot)
    wend

    if cur_level<=level then 
        if l+lines>l9 then gosub report_heading
        dim dots$(cur_level-1,".")
        if cur_level=1 then let um$=bmm01a.unit_measure$ else let um$=bmm02a.unit_measure$
        if !levelprinted then 
            subbill$=" "
            find (bmm01_dev,key=firm_id$+k$(3),dom=printing)
            subbill$="*"
printing:
            print (printer_dev)@(o[1]),dots$,cur_level:"0",@(o[2]),subbill$,k$(3),; let levelprinted=1
            if lines=1 then print (printer_dev)@(o[3]+(cur_level-1)*2),ivdesc$(1,desc[0]-(cur_level-1)*2),
        endif        
        print (printer_dev)@(o[4]),um$,@(o[7]),lab_qty[cur_level]:m2$,; if showcost$="Y" then print (printer_dev)@(o[8]),lab_cost[cur_level]:m3$,
        if cur_level<level or showcost$="N" then print (printer_dev)""; let l=l+1
    endif
return

circular_reference: rem --- Circular Reference

    dim messages$[1]
    messages$[0]="More Than 9 Levels Detected In This Bill, Check For Possible"
    messages$[1]="Circular References, <Enter> To Return To Menu: "
    call pgmdir$+"adc_stdmessage.aon",2,messages$[all],1,22,-1,v$,v3
    goto std_exit

subcontractors: rem --- Add Subcontracts

    read (bmm05_dev,key=x$,dom=*next)
    while more
        bmm05a_key$=key(bmm05_dev,end=*break)
        if pos(firm_id$=bmm05a_key$)<>1 then break
        read record (bmm05_dev,key=bmm05a_key$) bmm05a$
        if bmm05a.firm_id$+bmm05a.bill_no$<>x$ then break
        if bmm05a.effect_date$<>"   " then if bmm05a.effect_date$>pdate$ then continue
        if bmm05a.obsolt_date$<>"   " then if bmm05a.obsolt_date$<=pdate$ then continue
        sub_qty[cur_level]=sub_qty[cur_level]+bmm05a.qty_required
        if bmm05a.divisor<>0 then let sub_cost[cur_level]=sub_cost[cur_level]+bmm05a.qty_required*bmm05a.alt_factor*bmm05a.unit_cost/bmm05a.divisor else let sub_cost[cur_level]=0
    wend

    if cur_level<=level then 
        if l+lines>l9 then gosub report_heading
        dim dots$(cur_level-1,".")
        if cur_level=1 then let um$=bmm01a.unit_measure$ else let um$=bmm02a.unit_measure$
        if !levelprinted then 
            subbill$=" "
            find (bmm01_dev,key=firm_id$+k$(3),dom=printing_dom)
            subbill$="*"
printing_dom:
            print (printer_dev)@(o[1]),dots$,cur_level:"0",@(o[2]),subbill$,k$(3),; let levelprinted=1
            if lines=1 then print (printer_dev)@(o[3]+(cur_level-1)*2),ivdesc$(1,desc[0]-(cur_level-1)*2), else print (printer_dev)@(o[3]+(cur_level-1)*2),ivdesc$; let l=l+1
        endif

        print (printer_dev)@(o[4]),um$,@(o[9]),sub_qty[cur_level]:m2$,; if showcost$="Y" then print (printer_dev)@(o[10]),sub_cost[cur_level]:m3$,
    endif
return

find_description: rem --- Find Description & UnitCost
    dim ivdesc$(60)
    unitcost=0
    ivm01a.item_desc$="***Not On File***"
    find record (ivm01_dev,key=x0$,dom=*next) ivm01a$
    ivdesc$(1)=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
    find record (ivm02_dev,key=firm_id$+whs$+x0$(3,20),dom=*next) ivm02a$
return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnqty(q1,q2,q3,q4,qQ5)=10000*q1*q2/(q3*q4*(100-q5))
    def fnop1(q1,q2,q3,q4,q5,q6)=100*(q1*q2/q3)/q4+q5*q2/q6
    def fnopqty(q1,q2,q3,q4,q5)=100*(q1/q2)/q3+q4/q5

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
