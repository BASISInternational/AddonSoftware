rem --- Materials Where Used Listing
rem --- Program bmr_bb v8.0.0 04Jan2008 (bmr_bb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:43:20)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error


rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
        precision num(ivs01a.precision$)


rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$



rem --- Init Data

        h0=132
        more=1
        h=0,headings=2,when$=sysinfo.system_date$,clock$=""
        dim d1$(60),headings$[headings]
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
        dim qtyreq[0]
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMX_BILLMAT","PRIMARY",bmm04a_key_tpl$,rd_table_chans$[all],status$
rem --- Open printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Background

   
        call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,status

rem --- Initial Read

        read (bmm04_dev,key=firm_id$+itemfrom$,dom=*next)

rem --- Main Loop

While more
        dim bmm04a_key$:bmm04a_key_tpl$
        bmm04a_key$=key(bmm04_dev,end=done)
        read (bmm04_dev)

rem --- Breaks

        if bmm04a_key.FIRM_ID$<>firm_id$ then
            break
        endif
        if itemthru$<>"" then
            if bmm04a_key.ITEM_ID$(1,len(itemthru$))>itemthru$ then
                break
            endif
        endif
        read record (bmm01_dev,key=(bmm04a_key.ITEM_ID$+bmm04a_key.BILL_NO$),dom=*continue) bmm01a$
        read record (bmm02_dev,key=(bmm01a.FIRM_ID$+bmm01a.BILL_NO$)+bmm04a_key.MATERIAL_SEQ$,dom=*continue) bmm02a$

        if (bmm04a.FIRM_ID$+bmm04a.ITEM_ID$)<>t0$ then gosub item_break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        let ivm01a.ITEM_DESC$="*** Not On File ***"
        find record (ivm01_dev,key=(bmm01a.FIRM_ID$+bmm01a.BILL_NO$),dom=Print_Head) ivm01a$
        d1$=fnitem$(ivm01a.ITEM_DESC$,desc[1],desc[2],desc[3])+fill(60)
        d1$=ivm01a.ITEM_DESC$

Print_Head: rem --- Print

        if l>l9 then gosub report_heading; gosub print_item
        print (printer_dev)@(32+m0),bmm01a.BILL_NO$(1,p[0]),@(33+2*m0),ivm01a.ITEM_DESC$(1,30),
:                      @(110-p1),fndate$(bmm02a.EFFECT_DATE$)," ",fndate$(bmm02a.OBSOLT_DATE$),fnqty(bmm02a.QTY_REQUIRED,bmm02a.ALT_FACTOR,bmm02a.DIVISOR,bmm01a.EST_YIELD,bmm02a.SCRAP_FACTOR):p1$,
:                      @(128),bmm02a.MATERIAL_SEQ$
        t0=t0+1
        l=l+1,l1=l1+1
        qtyreq[0]=qtyreq[0]+bmm02a.QTY_REQUIRED

rem Main Loop Ends

Wend

done: rem --- Totals

        t9$="E"
        gosub item_break
        if h=0 then gosub report_heading
        print (printer_dev)'lf',@(10),"Total Records:",t0
        goto std_exit

report_heading: rem --- Report Heading

        l=headings+1
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
        if status then exitto std_exit
        print (printer_dev)
:                           @(0),"Item",
:                           @(32+m0),"Bill",
:                           @(111-p1),"Effect",
:                           @(119-p1),"Obsolete",
:                           @(123),"Qty"
        print (printer_dev)
:                           @(0),"No.",
:                           @(m0+1),"Description",
:                           @(m0+32),"No.",
:                           @(33+2*m0),"Description",
:                           @(112-p1),"Date",
:                           @(121-p1),"Date",
:                           @(121),"Req'd",
:                           @(128),"Seq",'lf'
        l=l+3
        return

print_item: rem --- Print Item

        r0$=" "
        find (bmm01_dev,key=firm_id$+bmm04.item_id$,dom=Print_Desc)
        r0$="*"

Print_Desc:

        print (printer_dev)
:                           @(0),r0$,t0$(3),
:                           @(1+m0),description$,
        return

item_break: rem --- Item Break

    if bmm04a_key$<>"" then
            if l1<2 then
                if l>l9 then
                    gosub report_heading
                else
                    print (printer_dev)""; let l=l+1
                endif
            else

                if l+2>l9 then gosub report_heading; gosub print_item
                print (printer_dev)@(127-p1),fill(p1,"-"),'lf',@(11),"Item Total",
:                                  @(127-p1),qtyreq[0]:p1$,'lf'
                l=l+3
            endif
    endif

new_item: rem --- Setup New Item

    if t9$="" then
            t0$=bmm04a_key.FIRM_ID$+bmm04a_key.ITEM_ID$
            description$="***Not On File***",l1=0
            dim qtyreq[0]
            find record (ivm01_dev,key=bmm04a_key.FIRM_ID$+bmm04a_key.ITEM_ID$,dom=Prnt_Item) ivm01a$
            description$=fnitem$(ivm01a.ITEM_DESC$,desc[1],desc[2],desc[3])+fill(30)
            description$=description$(1,30)
            if l>l9 then gosub report_heading
        Prnt_Item:
            gosub print_item
    endif
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
