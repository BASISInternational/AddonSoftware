rem --- Purchase Order History By Item Report
rem --- Program por_qb v8.0.0 17Jul2007 (por_qb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:50:44)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    begwhse$=fnget_fld_data$(table$,"beg_warehouse")
    endwhse$=fnget_fld_data$(table$,"end_warehouse")
    begprod$=fnget_fld_data$(table$,"beg_product")
    endprod$=fnget_fld_data$(table$,"end_product")
    begitem$=fnget_fld_data$(table$,"beg_item")
    enditem$=fnget_fld_data$(table$,"end_item")
    type$=fnget_fld_data$(table$,"item_type")

rem --- Print positions

    o[1]=itemlen+1
    o[2]=o[1]+3
    o[3]=o[2]+7
    o[11]=width-m1
    o[10]=o[11]-m3
    o[9]=o[10]-m2
    o[8]=o[9]-m2
    o[7]=o[8]-3
    o[6]=o[7]-9
    o[5]=o[6]-9
    o[4]=o[5]-8
    vendnamelen=width-(width-o[4]+o[3])
    if vendnamelen>30 vendnamelen=30
    gosub initheads

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,0,1,meter_num,status
    first$=firm_id$+begitem$+begwhse$
    read (pot24_dev,key=first$,dom=*next)

rem --- Get next sort record

    while more

        pot24a_key$=key(pot24_dev,end=*break)
        if pos(firm_id$=pot24a_key$)<>1 break
        item$=pot24a_key.item_id$
        whse$=pot24a_key.warehouse_id$
        vendor$=pot24a_key.vendor_id$
        recptdate$=pot24a_key.recpt_date$
        ponum$=pot24a_key.po_no$
        receiver$=pot24a_key.receiver_no$
        linenum$=pot24a_key.po_line_no$
        product$=""
        find record (ivm01_dev,key=firm_id$+item$,dom=brnch1) ivm01a$
        product$=ivm01a.product_type$

brnch1: rem --- Valid Item/Wh/Product/Type?

        if enditem$<>"" if item$>enditem$ break
        if begwhse$="" or whse$>=begwhse$

            if endwhse$="" or whse$<=endwhse$

                read (pot24_dev)
                if begprod$<>"" if product$<begprod$ continue
                if endprod$<>"" if product$>endprod$ continue
                if type$<>"" if ivm01a.item_type$<>type$ continue
                call pgmdir$+"adc_progress.aon","S","","","",0,0,0,1,meter_num,status

            endif

        else

rem --- Skip to beginning whse for this item

            read (pot24_dev,key=pot24a.firm_id$+pot24a.item_id$+begwhse$,dom=*continue)
            continue

rem --- Skip to next item

            read (pot24_dev,key=pot24a.firm_id$+pot24a.item_id$+$FF$,dom=*continue)
            continue

        endif

rem --- Breaks?

        if vendor$<>lastvend$ gosub vendbreak
        if item$<>lastitem$ gosub itembreak

rem --- Retrieve history detail

        pot14a_key$=firm_id$+vendor$+ponum$+receiver$+linenum$
        find record (pot14_dev,key=pot14a_key$,dom=*continue) pot14a$
        required$=pot14a.reqd_date$
        unitmeas$=pot14a.unit_measure$
        qtyord=pot14a.qty_ordered
        qtyrec=pot14a.qty_received
        unitcost=pot14a.unit_cost
        extension=qtyrec*unitcost

rem --- Print detail line

        needed=1
        if h9$<>"" needed=2
        if l+needed>l9 gosub report_heading
        if h9$<>"" gosub item_subheading
        print (printer_dev) @(o[1]),whse$,
:                           @(o[2]),fnmask$(vendor$(1,vendlen),vendomask$),
:                           @(o[3]),vendname$,
:                           @(o[4]),ponum$,

    if required$<>fill(6) print (printer_dev) @(o[5]),fndate$(required$),
    if recptdate$<>fill(6) print (printer_dev) @(o[6]),fndate$(recptdate$),
    print (printer_dev)     @(o[7]),unitmeas$,
:                           @(o[8]),qtyord:m2$,
:                           @(o[9]),qtyrec:m2$,
:                           @(o[10]),unitcost:m3$,
:                           @(o[11]),extension:m1$
        l=l+1

rem --- Accumulate totals

        itemtot[2]=itemtot[2]+qtyrec
        itemtot[3]=itemtot[3]+unitcost
        itemtot[4]=itemtot[4]+extension
        reporttot[2]=reporttot[2]+qtyrec
        reporttot[3]=reporttot[3]+unitcost
        reporttot[4]=reporttot[4]+extension
        if pos(pot14a.vendor_id$+pot14a.po_no$+pot14a.po_line_no$=totaledpo$,16)=0 
            totaledpo$=totaledpo$+pot14a.vendor_id$+pot14a.po_no$+pot14a.po_line_no$,
:           itemtot[1]=itemtot[1]+qtyord,reporttot[1]=reporttot[1]+qtyord

rem --- Loop back for next record

    wend

done: rem --- All done

    done=1
    gosub itembreak
    total$="Report"
    for cnt=1 to 4
        total[cnt]=reporttot[cnt]
    next cnt
    gosub printtot
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    return

item_subheading: rem --- Item subheading

    if l+1>l9 gosub report_heading
    print (printer_dev)h9$
    l=l+1
    h9$=""
    return

initheads: rem --- Initialize HEADINGS$[]

    dim h1$(width),h2$(width),h3$(width),h5$(width),h6$(width)
    h1$="All Item Types"
    if type$<>"" h1$="Item Type "+type$
    x1$="First"
    x2$="First"
    x2=5
x3$="From Warehouse: First"
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$,x2=3
    if endprod$="" if x2=3 x2=4
    if begwhse$<>"" x3$="From Warehouse: "+begwhse$
    h2$(1)="From Item: "+x1$
    h2$(fncenter(x3$,width))=x3$
    h2$(width-x2-13)="From Product: "+x2$
    x1$="Last"
    x2$="Last"
x3$="To Warehouse: Last"
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if endwhse$<>"" x3$="  To Warehouse: "+endwhse$
    h3$(1)="  To Item: "+x1$
    h3$(fncenter(x3$,width))=x3$
    h3$(width-x2-13)="  To Product: "+x2$
    h5$(o[4]+1)="PO"
    h5$(o[5]+1)="Date"
    h5$(o[6]+1)="Date"
    h5$(o[8]+m2-8)="Quantity"
    h5$(o[9]+m2-8)="Quantity"
    h5$(o[10]+m2-4)="Unit"
    h6$(o[0]+1)="Item"
    h6$(o[1]+1)="Wh"
    h6$(o[2]+1)="Vendor"
    h6$(o[4]+1)="Number"
    h6$(o[5]+1)="Required"
    h6$(o[6]+1)="Received"
    h6$(o[7]+1)="UM"
    h6$(o[8]+m2-7)="Ordered"
    h6$(o[9]+m2-8)="Received"
    h6$(o[10]+m2-4)="Cost"
    h6$(o[11]+m1-9)="Extension"
    headings$[2]=h1$
    headings$[4]=h2$
    headings$[5]=h3$
    headings$[7]=h5$
    headings$[8]=h6$
    return

itembreak: rem --- Item Break

    if lastitem$<>""
        gosub vendbreak
        total$="Item "+lastitem$
        for cnt=1 to 4
            total[cnt]=itemtot[cnt]
        next cnt
        gosub printtot
    endif

    if !done
        dim c0$(22),c1$(60),itemtot[4]
        lastitem$=item$
        ivm01a.item_desc$="(Not on File)"
        find record (ivm01_dev,key=firm_id$+lastitem$,dom=*next) ivm01a$
        h9$=lastitem$(1,itemlen)+" "+fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])
        let totaledpo$=""
    return

vendbreak: rem --- Vendor break

    if !done
        dim vendname$(30)
        let lastvend$=vendor$,apm01a.vendor_name$="(Not on File)"
        find record (apm01_dev,key=firm_id$+lastvend$,dom=*next) apm01a$
        let vendname$=apm01a.vendor_name$(1,vendnamelen)
    endif

    return

printtot: rem --- Print total line

    if l+1>l9 gosub report_heading
    if total$="Report" print (printer_dev)""
    let l=l+1,total$="Total For "+cvs(total$,2)
    print (printer_dev) @(o[8]-len(total$)),total$,
:                       @(o[8]),total[1]:m2$,
:                       @(o[9]),total[2]:m2$,
:                       @(o[10]),total[3]:m3$,
:                       @(o[11]),total[4]:m1$

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
