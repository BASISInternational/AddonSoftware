rem --- Purchase Order Receipt Register (Stock Receipts Overlay)
rem --- Program por_db v8.0.0 17Jul2007 (por_db)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:47:07)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- BBx reference ["por_dc.bbx"] (Line 0297)

rem --- The following IOLIST's were removed from this program:

rem --- ivm01a: iolist c0$(1),c1$(1)
rem --- ivm02a: iolist d0$(1),d1$(1),d2$,d[all]
rem --- ivm10c: iolist x0$(1)
rem --- poe04a: iolist a0$(1),a1$(1),a2$,a3$,a[all]
rem --- poe14a: iolist w0$(1),w1$(1),w2$(1),w3$(1),w4$(1),w5$,w6$,w[all]
rem --- pom02a: iolist y0$(1),y1$(1)

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)
rem --- pow04a: Channel reference (Line 0190)
rem --- pow05a: Channel reference (Line 0198)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-10"
    files$[5]="poe-04"
    files$[6]="poe-14"
    files$[7]="pom-02"
    files$[8]="pow-04"
    files$[9]="pow-05"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm10_dev=channels[4]
    poe04_dev=channels[5]
    poe14_dev=channels[6]
    pom02_dev=channels[7]
    pow04_dev=channels[8]
    pow05_dev=channels[9]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm10a$:templates$[4],
:       poe04a$:templates$[5],poe14a$:templates$[6],pom02a$:templates$[7],
:       pow04a$:templates$[8],pow05a$:templates$[9]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

    precision i[1]
    dim x0$(32)
    headings=3
    headings$[2]="Stock Inventory Receipts"
    avail=width-70
    x=2
    m=max(m0,6)
    nonstock=0

rem --- Report initializations and print positions

    gosub l6700
    o[0]=0
    o[12]=width-5
    o[11]=o[12]-12
    o[10]=o[11]-8
    o[9]=o[10]-m-1
    o[8]=o[9]-11
    o[7]=o[8]-m1
    o[6]=o[7]-m3
    o[5]=o[6]-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    o[2]=o[3]-3
    o[1]=o[2]-5

rem --- Background

    call pgmdir$+"adc_progress.aon","S","","Stock Inventory Receipts","Printing","",30,0,1,0,ignore_status

rem --- Position files

    read (pow04_dev,key=firm_id$,dom=*next)

l1000: rem --- Get next sort record

    k$=key(pow04_dev,end=l2000)
    if pos(firm_id$=k$)<>1 goto l2000
    read (pow04_dev)
    call pgmdir$+"adc_progress.aon","S","","","",k$(3,2)+" "+fndate$(k$(5,6))+" "+k$(11,i[0]),0,0,1,0,ignore_status

rem --- Level breaks?

    if t0$<>k$(3,2) gosub l6000
    if t1$<>k$(5,6) gosub l6200
    if subhead$<>"" gosub l5400

rem --- Read receipt header and detail

    a0$(1)=k$(1,2)+k$(31)
    w0$(1)=k$(1,2)+k$(31)
    gosub l6400
    if status goto l1900

rem --- Calculate extension

    precision 2
    po_extension=w[1]*w[7]
    iv_extension=d[11]*w[7]*w[0]
    precision i[1]

rem --- Print detail line

    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[0]),w3$(3,i[0]),@(o[1]),code$,@(o[2]),w1$(22,2),@(o[3]),w[7]:m2$,@(o[4]),d[11]*w[0]:m3$,@(o[5]),iv_extension:m1$,@(o[6]),w[1]:m3$,@(o[7]),po_extension:m1$,@(o[8]),w1$(24,10),@(o[9]),fnmask$(a0$(3,vendlen),m0$),@(o[10]),a0$(9,7),@(o[11]),w0$(16,7),"-",w0$(23,3),@(o[12]),complete$
    print (printer_dev)@(o[0]+3),description$
    l=l+2

rem --- Accumulate totals

    receipt[0]=receipt[0]+iv_extension
    receipt[1]=receipt[1]+po_extension
    whse[0]=whse[0]+iv_extension
    whse[1]=whse[1]+po_extension
    report[0]=report[0]+iv_extension
    report[1]=report[1]+po_extension
    number=number+1

l1900: rem --- Loop back for next sort record

    goto l1000

l2000: rem --- Done with stock receipts

    done=1
    if number=0 goto l2500
    gosub l6000
    totals$="Total For Register"
    totals[all]=report[all]
    gosub l6900

l2500: rem --- Non-stock receipt initializations

    avail=width-91
    x=1
    gosub l6700
    nonstock=1
    headings$[2]="Non-Stock Inventory And Other Receipts"

rem --- Print positions

    o[10]=width-11
    o[9]=o[10]-6
    o[8]=o[9]-12
    o[7]=o[8]-9
    o[6]=o[7]-m-1
    o[5]=o[6]-11
    o[4]=o[5]-m1
    o[3]=o[4]-m3
    o[2]=o[3]-m2
    o[1]=o[2]-3

rem --- Position files

    call pgmdir$+"adc_progress.aon","S","","Non-Stock Inventory Receipts","Printing","",30,0,1,0,ignore_status
    read (pow05_dev,key=firm_id$,dom=*next)

l3000: rem --- Get next sort record

    k$=key(pow05_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read (pow05_dev)
    call pgmdir$+"adc_progress.aon","S","","","",k$(3,2)+" "+fndate$(k$(5,6))+" "+k$(11,20),0,0,1,0,ignore_status

rem --- Level breaks?

    if t0$<>k$(3,2) gosub l6000
    if t1$<>k$(5,6) gosub l6200
    if subhead$<>"" gosub l5400

rem --- Read receipt header, detail and line code

    a0$(1)=k$(1,2)+k$(71)
    w0$(1)=k$(1,2)+k$(71)
    gosub l6400
    if status goto l3900

rem --- Set remaining fields

    wo$=""
    if cvs(w2$(1,7),2)="" goto l3400
    wo$=w2$(1,7)
    if cvs(w2$(8,3),2)<>"" wo$=wo$+"-"+w2$(8,3)

l3400: rem --- Calculate extensions

    qty=w[7]
    if y1$(21,1)="O" qty=1
    precision 2
    po_extension=w[1]*qty
    precision i[1]

rem --- Print non-stock detail line

    if l+2>l9 gosub report_heading
    if y1$(21,1)<>"N" goto l3600
    print (printer_dev)@(o[0]),w3$(3,i[0]),@(o[1]),w1$(22,2),@(o[2]),w[7]:m2$,@(o[3]),w[1]:m3$,@(o[4]),po_extension:m1$,@(o[5]),w1$(24,10),@(o[6]),fnmask$(a0$(3,vendlen),m0$),@(o[7]),a0$(9,7),@(o[8]),w0$(16,7),"-",w0$(23,3),@(o[9]),complete$,@(o[10]),wo$
    goto l3700

l3600: rem --- Print other charge detail line

    print (printer_dev)@(o[3]),w[1]:m3$,@(o[4]),po_extension:m1$,@(o[5]),w1$(24,10),@(o[6]),fnmask$(a0$(3,vendlen),m0$),@(o[7]),a0$(9,7),@(o[8]),w0$(16,7),"-",w0$(23,3),@(o[9]),complete$

l3700: rem --- Print non-stock/other charge description

    print (printer_dev)@(o[0]+3),w4$
    l=l+2

rem --- Accumulate totals

    receipt[1]=receipt[1]+po_extension
    number=number+1
    whse[1]=whse[1]+po_extension
    report[1]=report[1]+po_extension

l3900: rem --- Loop back for next sort record

    goto l3000

done: rem --- All done

    done=1
    if number=0 goto l4900
    gosub l6000
    totals$="Total For Register"
    totals[all]=report[all]
    gosub l6900

l4900: rem --- Run next overlay

    run pgmdir$+"por_dc.bbx"

report_heading: rem --- Report Heading

    l=headings+3
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if nonstock goto l5200

rem --- Heading for stock receipts

    print (printer_dev)@(o[1]),"Dist",@(o[3]+m2-9),"Quantity",@(o[4]+m3-5),cost$,@(o[5]+m1-10),cost$,@(o[6]+m3-5),"PO",@(o[7]+m1-10),"PO",@(o[8]),"Receiving",@(o[12]),"Rec'd"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Code",@(o[2]),"UM",@(o[3]+m2-9),"Received",@(o[4]+m3-5),"Cost",@(o[5]+m1-10),"Extension",@(o[6]+m3-5),"Cost",@(o[7]+m1-10),"Extension",@(o[8]),"Location",@(o[9]),"Vendor",@(o[10]),"Rec #",@(o[11]),"PO Number",@(o[12]),"Comp?"
    return

l5200: rem --- Heading for non-stock receipts

    print (printer_dev)@(o[2]+m2-9),"Quantity",@(o[3]+m3-5),"PO",@(o[4]+m1-10),"PO",@(o[5]),"Receiving",@(o[9]),"Rec'd"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"UM",@(o[2]+m2-9),"Received",@(o[3]+m3-5),"Cost",@(o[4]+m1-10),"Extension",@(o[5]),"Location",@(o[6]),"Vendor",@(o[7]),"Rec #",@(o[8]),"PO Number",@(o[9]),"Comp?",@(o[10]),"Work Order"
    return

l5400: rem --- Subheading

    if l+4>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)subhead$
    print (printer_dev)""
    l=l+3
    subhead$=""
    return

l6000: rem --- Warehouse break

    if t0$="" goto l6100
    gosub l6200
    totals$="Total For Warehouse "+cvs(whse$,2)
    totals[all]=whse[all]
    gosub l6900
l6100:
    if done goto l6190
    dim whse[1]
    t0$=k$(3,2)
    x0$(1)=firm_id$+"C"+t0$+nf$
    find record (ivm10_dev,key=x0$(1,5),dom=*next) ivm10c$
    whse$=x0$(4,2)+" "+x0$(6,24)
    if t1$="" gosub l6200
    subhead$="Warehouse "+cvs(whse$,2)+" - Receipt Date "+fndate$(t1$)
l6190:
    return

l6200: rem --- Receipt date break

    if t1$="" goto l6300
    totals$="Total For "+fndate$(t1$)
    totals[all]=receipt[all]
    gosub l6900
l6300:
    if done goto l6390
    dim receipt[1]
    t1$=k$(5,6)
    subhead$="Warehouse "+cvs(whse$,2)+" - Receipt Date "+fndate$(t1$)
l6390:
    return

l6400: rem --- Read receipt header and detail

    status=11
    find record (poe04_dev,key=a0$,dom=l6690) poe04a$
    find record (poe14_dev,key=w0$,dom=l6690) poe14a$
    if y0$(1,4)=firm_id$+w1$(1,2) goto l6500
    y0$(1)=firm_id$+w1$(1,2)
    find record (pom02_dev,key=y0$,dom=l6690) pom02a$

l6500: rem --- Retrieve inventory item and warehouse

    c0$(1)=firm_id$+w3$(3)
    c1$(1)=""
    description$(1)=w4$
    d0$(1)=firm_id$+w3$
    d1$(1)=""
    d[11]=0
    code$=""
    if y1$(21,1)<>"S" goto l6600
    find record (ivm01_dev,key=c0$,dom=l6690) ivm01a$
    find record (ivm02_dev,key=d0$,dom=l6690) ivm02a$
    description$(1)=fnitem$(c1$,i[3],i[4],i[5])
    code$=d1$(13,2)

l6600: rem --- Format detail line fields

    x=w[3]-w[4]-w[7]
    complete$="No"
    status=0
    if a1$(134,1)="Y" complete$="Yes"
    if x<=0 complete$="Yes"
l6690:
    return

l6700: rem --- Report Initializations

    dim receipt[1],whse[1],report[1],totals[1]
    let m1$=i6$,m2$=i7$,m3$=i8$,m1=len(m1$),m2=len(m2$),m3=len(m3$),done=0
    let number=0,maxm1=15,maxm2=12,maxm3=12,l=l9+1,subhead$="",t0$="",t1$=""
rem --- Print positions
l6800:
    if m+(m1*x)+m2+(m3*x)<avail goto l6890
    let maxm1=maxm1-1,maxm2=maxm2-1,maxm3=maxm3-1
    call pgmdir$+"adc_sizemask.aon",m1$,m1,11,maxm1
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,maxm2
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,maxm3
    goto l6800
l6890:
    return
rem --- Print totals
l6900:
    if l+1>l9 gosub report_heading
    if nonstock goto l6950
    print (printer_dev)@(o[5]-len(totals$)),totals$,@(o[5]),totals[0]:m1$,@(o[7]),totals[1]:m1$
    goto l6980
l6950:
    print (printer_dev)@(o[4]-len(totals$)),totals$,@(o[4]),totals[1]:m1$
l6980:
    let l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
