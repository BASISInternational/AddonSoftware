rem --- Purchase Order Cash Requirements Report (Print Overlay)
rem --- Program por_mb v8.0.0 17Jul2007 (por_mb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:49:18)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    datefrom$=fnget_fld_data$(table$,"beg_date")
    perordays$=fnget_fld_data$(table$,"period_or_days")
    num_days=num(fnget_fld_data$(table$,"number_of_days"))
    whse$=fnget_fld_data$(table$,"warehouse")
    summordet$=fnget_fld_data$(table$,"summary_or_detail")


rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8],potot[5],vendtot[5],grandtot[5],vendor$(6)
    printvtot$="N"
    gosub calc_heads
    more=1

rem --- Headings and print positions

    headings=5
    dim headings$[headings],o[11]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=sord_desc$+" Report Starting From "
    if datefrom$=fill(6) headings$[2]=headings$[2]+"First Date" else headings$[2]=headings$[2]+fndate$(datefrom$)
    if whse$="" headings$[3]="For All Warehouses"
    if whse$<>"" headings$[3]="For Warehouse "+whse$+" "+cvs(whsename$,2)

positions:
    o[1]=o[0]+7
    o[2]=o[1]+4
    o[3]=o[2]+21
    o[4]=o[3]+9
    o[5]=o[4]+9
    o[6]=o[5]+9
    o[7]=o[6]+m1+1
    o[8]=o[7]+m1+1
    o[9]=o[8]+m1+1
    o[10]=o[9]+m1+1
    o[11]=o[10]+m1+1

    if o[11]+12>=width
        o[11]=width-m1
        o[10]=o[11]-m1-1
        o[9]=o[10]-m1
        o[8]=o[9]-m1
        o[7]=o[8]-m1
        o[6]=o[7]-m1
    endif

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,0,1,meter_num,status

rem --- Init read

    read (poe02_dev,key=firm_id$,dom=*next)

rem --- Read through PO headers

    while more

        poe02a_key$=key(poe02_dev,end=*break)
        if poe02a_key.firm_id$<>firm_id$ break
        read record (poe02_dev,key=poe02a_key$) poe02a$

rem --- Init detail file

        headprinted$="N"
        p12_key$=poe02a.firm_id$+poe02a.vendor_id$+poe02a.po_no$
        read (poe12_dev,key=p12_key$,dom=*next)

rem --- Read through detail records

        while more

            poe12a_key$=key(poe12_dev,end=*break)
            if poe12a_key.firm_id$+poe12a_key.vendor_id$+poe12a_key.po_no$<>poe02a.firm_id$+poe02a.vendor_id$+poe02a.po_no$ break
            read record (poe12_dev,key=poe12a_key$) poe12a$

rem --- Test PO Detail for warehouse & line type

            if whse$<>"" and poe12a.warehouse_id$=whse$

                gosub getlinetype
                if pos(linetype$="SON")<>0

rem --- Detail passed, so print header if nec & print detail

                    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Header rec prints if at least one detail passes date & whse

                    if headprinted$<>"Y"
                        gosub testbreaks
                        headprinted$="Y"
                    endif

                    gosub printdetail

                 endif
                
             endif

rem --- Accumulate totals; get next detail

            potot[prntcol]=potot[prntcol]+amount
            potot[5]=potot[5]+amount
            vendtot[prntcol]=vendtot[prntcol]+amount
            vendtot[5]=vendtot[5]+amount
            grandtot[prntcol]=grandtot[prntcol]+amount
            grandtot[5]=grandtot[5]+amount
            amount=0

        wend
    
rem --- Done w/detail for this PO

    if headprinted$="Y" gosub pototals

rem --- Loop up for next header record

    wend

done: rem --- All Done

    if l+2>l9 gosub report_heading
    gosub vendtotals
    print (printer_dev)@(40),"Total For Report",
    for col=0 to 5
        print (printer_dev)@(o[col+6]),grandtot[col]:m1$,
    next col
    print (printer_dev)""
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    itemnum$=poe12a.item_id$
    memo$=poe12a.order_memo(1,20)
    if poe12a.reqd_date$<>fill(6) datereq$=fndate$(poe12a.reqd_date$)
    if poe12a.promise_date$<>fill(6) dateprom$=fndate$(poe12a.promise_date$)
    if poe12a.not_b4_date$<>fill(6) notb4date$=fndate$(poe12a.not_b4_date$)

rem --- Get the columns in which to print

    gosub whichcolumn

rem --- Figure amount to print

    qty=poe12a.qty_ordered-poe12a.qty_received
    amount=qty*poe12a.unit_cost

rem --- Print detail line

    if summordet$<>"D" goto done_printdetail
    dim pline$(132)
    pline$(o[1]+1)=poe12a.po_line_no$+" "
    if linetype$="O" pline$(o[2]+1)=memo$ else pline$(o[2]+1)=itemnum$(1,itemlen)
    if l+1>l9 gosub report_heading
    print (printer_dev)pline$,  @(o[3]),datereq$,
:                               @(o[4]),dateprom$,
:                               @(o[5]),notb4date$,

    print (printer_dev) @(o[prntcol+6]),amount:m1$,
:                       @(o[11]),amount:m1$
    l=l+1
done_printdetail:
    return

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    for col=1 to 4
        if perdatef$[col]<>fill(6) print (printer_dev)@(o[col+6]+m1-9),fndate$(perdatef$[col]),
    next col
    print (printer_dev)""
    print (printer_dev) @(o[0]),"Vendor",
:                       @(o[3]),"Date",
:                       @(o[4]),"Date",
:                       @(o[5]),"Not",
:                       @(o[7]+m1-7),"Thru",
:                       @(o[8]+m1-7),"Thru",
:                       @(o[9]+m1-7),"Thru",
:                       @(o[10]+m1-7),"Thru"

    print (printer_dev) @(o[0]),"Number",
:                       @(o[1]),"Name",
:                       @(o[3]),"Required",
:                       @(o[4]),"Promised",
:                       @(o[5]),"Before",
:                       @(o[6]+m1-9),"Past Due",
    for col=1 to 3
        if perdatet$[col]<>fill(6) print (printer_dev)@(o[col+6]+m1-9),fndate$(perdatet$[col]),
    next col
    print (printer_dev)@(o[10]+m1-8),"Future",@(o[11]+m1-6),"Total"
    print (printer_dev)""
    l=l+4
    return

calc_heads: rem --- Calculate from/thru date column headings

    dim perdatef$[4],perdatet$[4]
    if perordays$="D" gosub daysheadings;return
    yearfrom=fnyy_year(datefrom$(1,2))

rem --- Get Current Period

    call pgmdir$+"adc_peryear.aon",firm_id$,sys01_dev,datefrom$,fisc_per$,fisc_yr$
    fiscyrfrom=yearfrom
    fiscyrfrom=num(fnyy$(fisc_yr$),err=*next)
    fiscperfrom=num(fisc_per$,err=*next)
    v=fiscperfrom
    v9=fiscyrfrom
    col=1; rem "Date from/thru column heading count; one-based
    call pgmdir$+"adc_perioddates.aon",sys01_dev,v,v9,v0$,v9$,status
    perdatef$[col]=fnyy_yy21$(fndate$(fndate$(v0$)))
    perdatet$[col]=fnyy_yy21$(fndate$(fndate$(v9$)))

rem --- Get Next Periods

    for y=1 to 3
        v=fiscperfrom+y
        v9=fiscyrfrom
        col=col+1
        if v>totalperiods v=v-totalperiods,v9=v9+1
        call pgmdir$+"adc_perioddates.aon",sys01_dev,v,v9,v0$,v9$,status
        perdatef$[col]=fnyy_yy21$(fndate$(fndate$(v0$)))
        perdatet$[col]=fnyy_yy21$(fndate$(fndate$(v9$)))
        if perdatef$[col]<perdatef$[col-1] perdatef$[col](5,2)=str(num(perdatef$[col](5,2))+1)
        if perdatet$[col]<perdatet$[col-1] perdatet$[col](5,2)=str(num(perdatet$[col](5,2))+1)
    next y
    perdatet$[4]="A91231"
    return

daysheadings: rem --- Headings calculated w/user-entered days

    v$=datefrom$
    v=num_days
    v1$=""
    for col=1 to 4
        call pgmdir$+"adc_daydates.aon",v$,v1$,v
        perdatef$[col]=v$
        perdatet$[col]=v1$
        v$=v1$
        v1$=""
    
        rem --- Get day after date thru for next column's date from
    
        call pgmdir$+"adc_daydates.aon",v$,v1$,1
        v$=v1$
        v1$=""
        v=num_days
    next col
    perdatet$[4]="A91231"
    return

testbreaks: rem --- Test for Breaks

    if poe02a.vendor_id$<>vendor$
        if printvtot$="Y" gosub vendtotals
        gosub newvendor
        gosub newpo
        return
    endif
    if poe02a.po_no$<>ponum$ gosub newpo
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195),vendtot[5]
    vendname$="Not On File"
    vendor$=poe02a.vendor_id$
    printvtot$="Y"
    a01_key$=firm_id$+vendor$
    find record (apm01_dev,key=a01_key$,dom=brnch1) apm01a$
    vendname$=apm01a.vendor_name$

brnch1:

    if l+2>l9 gosub report_heading
    print (printer_dev) @(0),fnmask$(vendor$(1,vendlen),vendomask$),
:                       @(o[1]),vendname$,
    return

newpo: rem --- New PO

    dim potot[5]
    ponum$=poe02a.po_no$
    apm10c.item_desc$="Not On File"
    apm10c.prox_or_days$="D"
    apm10c.due_days=0
    a10_key$=firm_id$+"C"+poe02a.terms_code$
    find record (apm10_dev,key=a10_key$,dom=brnch2) apm10c$
    termsdesc$=apm10c.item_desc$

brnch2:

    type$=apm10c.prox_or_days$
    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[4]-1),"PO #: ",ponum$," Terms ",termsdesc$
    l=l+1
    return

vendtotals: rem --- Print Vendor total

    if l+2>l9 gosub report_heading
    print (printer_dev)@(33),"Total For Vendor ",fnmask$(vendor$(1,vendlen),vendomask$),
    for col=0 to 5
        print (printer_dev)@(o[col+6]),vendtot[col]:m1$,
    next col
    print (printer_dev)""
    l=l+2
    return

pototals: rem --- Print Purchase Order total

    if l+2>l9 gosub report_heading
    print (printer_dev)@(34),"Total For PO # ",ponum$,
    for col=0 to 5
        print (printer_dev)@(o[col+6]),potot[col]:m1$,
    next col
    if summordet$="D" print (printer_dev)'LF'; let l=l+2
    if summordet$="S" print (printer_dev)""; let l=l+1
    return

getlinetype: rem --- Get Line Type

    linetype$="N"
    p02_key$=poe12a.firm_id$+poe12a.po_line_code$
    find record (pom02_dev,key=p02_key$,dom=brnch3) pom02a$
    let linetype$=pom02a.line_type$

brnch3:
    return

rem --- Determine which column to print amt in
whichcolumn: rem --- PRNTCOL=0=>Past Due....PRNTCOL=4=>Last from/thru date column
rem --- Calc date based on terms' due days

    let from$=poe12a.reqd_date$,days=apm10c.due_days,calcd_date$=""
    if type$<>"D" from$=fndate$(fndate$(from$))
    call pgmdir$+"adc_duedate.aon",type$,from$,days,calcd_date$,status
    if len(calcd_date$)=3 calcd_date$=fnyy_yy21$(fndate$(fndate$(calcd_date$)))
    let prntcol=0
    if calcd_date$<>fill(6) and calcd_date$>=perdatef$[1]
        for prntcol=1 to 4
            if calcd_date$<=perdatet$[prntcol] return
        next prntcol
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
