rem --- Print Overlay
rem --- Program por_replenreg_o1.aon v8.0.0 17Jul2007 (por_fb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:44:36)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    rem --- Document initializations
	OutVect!=bbjAPI().getSysGui().makeVector()
	HdrVect!=bbjAPI().getSysGui().makeVector()
	BrkVect!=bbjAPI().getSysGui().makeVector()
	TotVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")


rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init data

    footnum=5
    l9=59-footnum
    headings=3
    page=0
    width=132
    when$=sysinfo.system_date$
    dim vendor$(6),prevvend$(6),headings$[headings]
    headings$[0]=n1$
    headings$[1]=n3$
    headings1len=len(headings$[1])
    dim lf$(60,$0A$)
    printbtot$="N"
    printvtot$="N"
    printptot$="N"
    dopagebrk$="N"
    printtotline$="N"
    dim buyertots[2],vendtots[2],prodtots[2]
    dim review$(30)
    therearebuyers=1; rem "Used to print sel criteria when no poe-17
    more=1

rem --- Headings and print positions

    columns = 15
    dim columns$[columns,10]
    columns$[0,0]="",                   columns$[0,1]="C",columns$[0,2]="4"
    columns$[1,0]="",                   columns$[1,1]="C",columns$[1,2]="3"
    columns$[2,0]="",                   columns$[2,1]="C",columns$[2,2]="4"
    columns$[3,0]="",                   columns$[3,1]="C",columns$[3,2]="21"
    columns$[4,0]="Date Orderd",        columns$[4,1]="C",columns$[4,2]="24"


rem --- open printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status



rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,poe_ordhdr_dev,1,meter_num,status

rem --- Init Read

    read (poe_ordhdr_dev,key=firm_id$,dom=*next)

    while more; rem --- Main Read

        poe06a_key$=key(poe_ordhdr_dev,end=*break)
        if pos(firm_id$=poe06a_key$)<>1 break
        read record (poe_ordhdr_dev,end=*break) poe_ordhdr$
        buyer$=poe_ordhdr.buyer_code$
        vendor$=poe_ordhdr.vendor_id$
        review$="Through Review Date: "+fndate$(poe_ordhdr.cycle_date$)
        comment$=poe_ordhdr.rep_comments$
        call pgmdir$+"adc_progress.aon","S","","","","",0,poe_ordhdr_dev,1,meter_num,status
        gosub testbreaks
        printptot$="N"
        prevprodtype$=""
        previtem$=""

rem --- Init detail ptr
        p06_key$=poe_ordhdr.firm_id$+poe_ordhdr.buyer_code$+poe_ordhdr.vendor_id$
        read (poe_orddet_dev,key=p06_key$,dom=*next)

        while more; rem --- Line item details

            dim linepoint$(0),ordpoint$(0),avail$(0),onorder$(0)
            dim eoq$(0),safety$(0),max$(0),lead$(0),weight$(0),cost$(0),sugg$(0)
            dim annualusage$(0),avgusage$(0),extension$(0)

            poe16a_key$=key(poe_orddet_dev,end=*break)
            if pos(p06_key$=poe16a_key$)<>1 break
            read record (poe_orddet_dev) poe_orddet$
            prodtype$=poe_orddet.product_type$

            gosub testprod; rem TESTBREAK

            itemnum$=poe_orddet.item_id$
            whse$=poe_orddet.warehouse_id$
            stocklevel$=poe_orddet.stock_level$
            if poe_orddet.usage_is_est$="Y" estimated$="**"
            annualusage$=str(poe_orddet.annual_usage:m2$)
            avgusage$=str(poe_orddet.avg_usage:m2$)
            avail$=str(poe_orddet.qty_avail:m2$)
            onorder$=str(poe_orddet.qty_on_order:m2$)

            if stocklevel$<>"I"
            
                if suggonly$="Y" 
                
                	if itemnum$<>prevwitem$

						csugg=0
						p16_key$=poe_orddet.firm_id$+poe_orddet.buyer_code$+poe_orddet.vendor_id$+poe_orddet.product_type$+poe_orddet.item_id$
						find record (poe_ordtot_dev,key=p16_key$,dom=*continue) poe_ordtot$
						if poe_ordtot.sugg_ord_qty=0 continue
						csugg=poe_ordtot.sugg_ord_qty
						prevminusannuse=minusannuse
						prevminusavguse=minusavguse
						prevminusavail=minusavail
						prevminusonord=minusonord
						minusannuse=0
						minusavguse=0
						minusavail=0
						minusonord=0
						prevwitem$=itemnum$
						
					endif
					
                endif

                sugg=num(poe_orddet.sugg_ord_qty$)

rem --- Skip whse detail if NOT INCLUDEWHS$

                if includewhse$<>"Y"

                    gosub newitem
                    read (poe_orddet_dev,key=p16_key$+$FF$,dom=*continue)

                endif

rem --- Accum amts to subtract from total line for sugg=0 'W' items

                if suggonly$="Y" 
                
                	if sugg=0

						minusannuse=minusannuse+poe_orddet.annual_usage
						minusavguse=minusavguse+poe_orddet.avg_usage
						minusavail=minusavail+poe_orddet.qty_avail
						minusonord=minusonord+poe_orddet.qty_on_order
						if itemnum$<>previtem$ gosub newitem
						continue
						
					endif
					
                endif

                linepoint$=str(poe_orddet.line_point:m2$)
                ordpoint$=str(poe_orddet.order_point:m2$)
                eoq$=str(poe_orddet.eoq:m2$)
                safety$=str(poe_orddet.safety_stock:m2$)
                max$=str(poe_orddet.maximum_qty:m2$)
                lead$=str(poe_orddet.lead_time:m9$)
                sugg$=str(sugg:m2$)
                weight$=str(poe_orddet.weight:m6$)
                cost$=str(poe_orddet.est_unit_cst:m3$)
                extension$=str(poe_orddet.extended_amt:m1$)

            else

rem --- Check suggested qty of total for stocked by 'I'

                minusannuse=0
                minusavguse=0
                minusavail=0
                minusonord=0
                prevminusannuse=0
                prevminusavguse=0
                prevminusavail=0
                prevminusonord=0
                find record (poe_ordtot_dev,key=p06_key$+prodtype$+itemnum$,dom=testinclude) poe_ordtot$
                sugg=poe_ordtot.sugg_ord_qty

testinclude:

                if includewhse$<>"Y"
                    gosub newitem
                    read (poe_orddet_dev,key=p16_key$+$FF$,dom=*continue)
                endif

rem --- Skip all whses for items by 'I' w/no sugg qty

                if suggonly$="Y" if sugg=0 
                    read (poe_orddet_dev,key=p16_key$+$FF$,dom=*continue)
                endif

            endif

rem --- Test for new item

            if itemnum$<>previtem$ gosub newitem

rem --- Print

            if l+1>l9 printvtot$="N"; gosub newvendor
            print (printer_dev) @(o[0]),whse$," ",@(o[1]),annualusage$,@(o[2]),avgusage$,@(o[3]),safety$,@(o[4]),lead$,@(o[5]),avail$,@(o[6]),onorder$,@(o[7]),ordpoint$,@(o[8]),max$,@(o[9]),eoq$,@(o[10]),linepoint$,@(o[11]),cost$,@(o[12]),sugg$,@(o[13]),weight$,@(o[14]),extension$
            l=l+1
            if stocklevel$="W" gosub dosurplus

        wend; rem --- Loop up for next detail

    wend; rem --- Loop up for next Suggested Order header

done: rem --- Done

    if !page
        gosub report_heading
        therearebuyers=0
    endif

    if printtotline$="Y" gosub totalline
    gosub vendtotals
    gosub buyertotals
    gosub printfooter
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,meter_num,status
rem --- temp goto std_exit until update is completed
	goto std_exit;rem temp
    run pgmdir$+"pou_ba.bbx"

report_heading: rem --- Report Heading

    if page gosub printfooter
    l=headings+1
    if review$<>fill(30) and pos(review$=headings$[1])=0 headings$[1]=headings$[1](1,headings1len)+" "+review$
    headings$[2]=buyerhead$
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if comment$=fill(30) return
    comment$=cvs(comment$,3); rem "Strip leading & trailing spaces
    print (printer_dev) @(fncenter(comment$,width)),comment$
    l=l+1
    return

newvendor: rem --- New Vendor

    if printvtot$="Y" gosub vendtotals
    if dopagebrk$="Y" dopagebrk$="N"; gosub report_heading
    if l+12>l9 gosub report_heading
    gosub vaddress
    dim vendline$(132),targettype$(10)
    vendline$(1)="Vendor: "+fnmask$(vendor$(1,vendlen),vendomask$)
    vendline$(17)=name$
    if pos(" "<>vendor$)=0 vendline$(17)="No Stocking Vendor"
    if apm_vendrepl.purch_addr$<>"  " vendline$(48)="Addr: "+apm_vendrepl.purch_addr$
    if apm_vendrepl.pri_rev_date$=fill(8) prirev$="None" else prirev$=fndate$(apm_vendrepl.pri_rev_date$)
    if apm_vendrepl.nxt_rev_date$=fill(8) nxtrev$="None" else nxtrev$=fndate$(apm_vendrepl.nxt_rev_date$)

    action=pos(apm_vendrepl.pur_tgt_type$="NDWU")
    type_none=1
    type_dollars=2
    type_weight=3
    type_units=4

        switch action
        case type_none
            targettype$="N None"
            break
        case type_dollars
            targettype$="D Dollars"
            break
        case type_weight
            targettype$="W Weight"
            break
        case type_units
            targettype$="U Units"
            break
         case default
            break
    swend

        if apm_vendrepl.lstrec_date$=fill(8) lastrcpt$="None" else lastrcpt$=fndate$(apm_vendrepl.lstrec_date$)
    vendline$(59)="Next Review: "+nxtrev$
    vendline$(83)="Target Type: "+targettype$
    vendline$(107)="Target Units: "+str(apm_vendrepl.pur_tgt_unit:m2$)
    if apm_vendrepl.lstrec_date$=fill(8) lastrcpt$="None" else lastrcpt$=fndate$(apm_vendrepl.lstrec_date$)

    print (printer_dev)""
    print (printer_dev) @(0),vendline$
    print (printer_dev) @(16),addr1$,@(57),"Prior Review: ",prirev$,@(83),"Cycle Days: ",apm_vendrepl.rev_days:"##0",@(105),"Target Weight: ",apm_vendrepl.pur_targ_lbs:m6$

    print (printer_dev) @(16),addr2$,@(57),"Last Receipt: ",lastrcpt$,@(104),"Target Dollars: ",apm_vendrepl.pur_targ_amt:m1$

    if pos(" "<>addr3$)<>0 print (printer_dev)@(16),addr3$; let l=l+1

    print (printer_dev) @(0),"Contact: ",contact$,@(57),"Phone:  ",phone$,@(90),"Fax:  ",fax$

    print (printer_dev)dashes$

    print (printer_dev) @(h[1]),"Act Annl",@(h[2]),"Wgt Per",@(h[3]),"Safety",@(h[4]),"Lead",@(h[6]),"On",@(h[7]),"Order",@(h[8]),"Max",@(h[10]),"Line",@(h[11]),"Unit",@(h[12]),"Suggested",@(h[13]),"Total"

    print (printer_dev) @(h[0]),"Whs",@(h[1]),"Usage",@(h[2]),"Usage",@(h[3]),"Stock",@(h[4]),"Time",@(h[5]),"Avail",@(h[6]),"Order",@(h[7]),"Point",@(h[8]),"Qty",@(h[9]),"EOQ",@(h[10]),"Point",@(h[11]),"Cost",@(h[12]),"Order Qty",@(h[13]),"Weight",@(h[14]),"Extension"
    print (printer_dev)dashes$
    l=l+9
    printvtot$="Y"
    prevvend$=vendor$
    return

vaddress: rem --- Get Vendor's address etc

    dim vdata$(195),vdata2$(160),s1$(25),s[11]

    ap01_key$=firm_id$+vendor$
    ap06_key$=firm_id$+vendor$+buyer$
    read record (apm_vendmast_dev,key=ap01_key$,dom=*next) apm_vendmast$
    read record (apm_vendrepl_dev,key=ap06_key$,dom=brnch4) apm_vendrepl$

    if apm_vendrepl.purch_addr$="  "
        gosub useapm01addr
        return
    endif

brnch4:
        ap05_key$=firm_id$+vendor$+apm_vendrepl.purch_addr$
        read record (apm_vendaddr_dev,key=ap05_key$,dom=brnch5) apm_vendaddr$
        apm_vendmast.vendor_name$=apm_vendaddr.name$
        apm_vendmast.addr_line_1$=apm_vendaddr.addr_line_1$
        apm_vendmast.addr_line_2$=apm_vendaddr.addr_line_2$
        apm_vendmast.city$=apm_vendaddr.city$
        apm_vendmast.state_code$=apm_vendaddr.state_code$
        apm_vendmast.zip_code$=apm_vendaddr.zip_code$
        apm_vendmast.phone_no$=apm_vendaddr.phone_no$
        apm_vendmast.phone_exten$=apm_vendaddr.phone_exten$
        apm_vendmast.fax_no$=apm_vendaddr.fax_no$
        apm_vendmast.contact_name$=apm_vendaddr.contact_name$

brnch5:
        gosub useapm01addr

    return

useapm01addr:

    name$=apm_vendmast.vendor_name$
    addr1$=apm_vendmast.addr_line_1$
    addr2$=apm_vendmast.addr_line_2$
    addr3$=cvs(apm_vendmast.city$,51)+", "+apm_vendmast.state_code$
    call stbl("+DIR_SYP")+"bac_getmask.bbj","P",cvs(apm_vendmast.zip_code$,2),"",postal_mask$
    postal$=cvs(apm_vendmast.zip_code$,2)
    postal$=str(postal$:postal_mask$,err=*next)
    zip$=postal$
    call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(apm_vendmast.phone_no$,2),"",phone_mask$
    phone$=cvs(apm_vendmast.phone_no$,2)
    phone$=str(phone$:phone_mask$,err=*next)
    call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(apm_vendmast.fax_no$,2),"",fax_mask$
    fax$=cvs(apm_vendmast.fax_no$,2)
    fax$=str(fax$:fax_mask$,err=*next)
    contact$=apm_vendmast.contact_name$
    if pos(" "<>addr3$)>0 addr3$=cvs(addr3$,2)+"  "+zip$ else addr2$=cvs(addr2$,2)+"  "+zip$
    return

newprodtype: rem --- New Product Type

    if printptot$="Y" gosub prodtotals
    dim prodtots[2]
    proddesc$="**Not On File**"
    iv10_key$=firm_id$+"A"+prodtype$
    find record (ivc_prodcode_dev,key=iv10_key$,dom=brnch3) ivc_prodcode$
    proddesc$=ivc_prodcode.code_desc$

brnch3:
    if l+2>l9 printvtot$="N"; gosub newvendor
    print (printer_dev) ""
    print (printer_dev) @(0),"Product: ",prodtype$," ",proddesc$
    l=l+2
    printptot$="Y"
    prevprodtype$=prodtype$
    return

newitem: rem --- New Item

    if printtotline$="Y" gosub totalline
    prevminusannuse=0
    prevminusavguse=0
    prevminusavail=0
    prevminusonord=0
rem dim itemdesc$(desclen)
rem ivm01a.item_desc$="** Not on File **"
    iv01_key$=firm_id$+itemnum$
    find record (ivm_itemmast_dev,key=iv01_key$,dom=*next) ivm_itemmast$
    itemdesc$=fnitem$(ivm_itemmast.item_desc$,desclen[1],desclen[2],desclen[3])

    if suggonly$<>"Y" or sugg<>0 or csugg<>0

            if l+1>l9 printptot$="N"; gosub newprodtype
        print (printer_dev) estimated$,"  ",itemnum$(1,itemlen),"  ",itemdesc$,@(50),"Stocked by: ",stocklevel$
        l=l+1
        printtotline$="Y"

    endif

    previtem$=itemnum$
    return

printfooter: rem --- Print the 'footers' here

    if l<l9 print (printer_dev)lf$(1,l9-l)
    print (printer_dev) dashes$

    print (printer_dev) @(0),"** Indicates period usage is estimated",@(40),"M - Suggested Buy Based on Maximum",@(85),"R - Suggested Buy Based on Reorder Point"

        print (printer_dev) @(0),"O - Indicates On Hand Greater than Max",@(40),"E - Suggested Buy Rounded to EOQ Amount",@(85),"Y - Suggested Buy Limited to One Year's Usage"

        print (printer_dev) @(0),"U - Indicates Unusual Monthly Usage   ",@(40),"L - Suggested Buy Based on Line Point",@(85),"2 - Suggested Buy Increased 1/2 Month's Usage"
    return

testbreaks: rem --- Test for Breaks

    if buyer$<>prevbuyer$

        if printptot$="Y" gosub prodtotals
        if printvtot$="Y" gosub vendtotals
        if printbtot$="Y" gosub buyertotals
        gosub newbuyer
        gosub newvendor
    else 
        if vendor$<>prevvend$ gosub newvendor
    else
        gosub testprod
    fi
    return

testprod:
    if prodtype$<>prevprodtype$ gosub newprodtype
    return

newbuyer: rem --- New Buyer

    dim buyertots[2],buyerhead$(30),r0$(30)
    iv10_key$=firm_id$+"F"+buyer$
    find record (ivc_buycode_dev,key=iv10_key$,dom=*next) ivc_buycode$
    buyerhead$="Buyer Code: "+buyer$+" "+ivc_buycode.code_desc$
    buyerhead$=buyerhead$(1,pos(" "<>buyerhead$,-1))
    gosub report_heading
    printbtot$="Y"
    prevbuyer$=buyer$
    dopagebrk$="N"
    return

buyertotals: rem --- Print buyer totals

    gosub report_heading
    print (printer_dev) @(h[12]),"Suggested",                       @(h[13]),"Total"

    print (printer_dev) @(h[12]),"Order Qty",@(h[13]),"Weight",@(h[14]),"Extension"

    print (printer_dev) @(h[12]),dashes$(1,132-h[12])
    print (printer_dev) @(o[12]-21),"Total For Buyer ",prevbuyer$,@(o[12]),buyertots[0]:m2$,@(o[13]-1),buyertots[1]:"#"+m6$,@(o[14]-1),buyertots[2]:"#"+m1$

    print (printer_dev)""
    l=l+5

rem --- Print selection critera for this buyer

    print (printer_dev) "Selection Criteria:",@(hsel[1]),"Beg",@(hsel[2]),"End",@(hsel[3]),"Beg",@(hsel[4]),"End",@(hsel[5]),"Beg",@(hsel[6]),"End",@(hsel[7]),"Beg",@(hsel[8]),"End"

    print (printer_dev) @(hsel[0]),"Seq",@(hsel[1]),"Buyer",@(hsel[2]),"Buyer",@(hsel[3]),"Vendor",@(hsel[4]),"Vendor",@(hsel[5]),"Date",@(hsel[6]),"Date",@(hsel[7]),"Whs",@(hsel[8]),"Whs",@(hsel[9]),"Comment"

        l=l+2
    dim w0$(4),w1$(75)

    p17_key$=firm_id$+prevbuyer$
    read (poe_repxref_dev,key=p17_key$,dom=*next)

    while more

        if !therearebuyers

            poe07a_key$=key(poe_repsel_dev,end=*break)
            if pos(firm_id$=poe07a_key$)<>1 break

        else

            poe17a_key$=key(poe_repxref_dev,end=*break)
            if pos(p17_key$=poe17a_key$)<>1 break
            read record (poe_repxref_dev) poe_repxref$
            poe07a_key$=poe_repxref.firm_id$+poe_repxref.sequence_num$

        endif

        read record (poe_repsel_dev,key=poe07a_key$,dom=*continue) poe_repsel$
        seqnum$=str(poe_repsel.sequence_num$:"00")
        comment$=poe_repsel.rep_comments$
        if poe_repsel.beg_buyer$=fill(3) buyerfrom$="First" else buyerfrom$=poe_repsel.beg_buyer$
        if poe_repsel.end_buyer$=fill(3) buyerthru$="Last" else buyerthru$=poe_repsel.end_buyer$
        if poe_repsel.begin_vend$=fill(6) vendfrom$="First" else vendfrom$=fnmask$(poe_repsel.begin_vend$,vendomask$)
        if poe_repsel.ending_vend$=fill(6) vendthru$="Last" else vendthru$=fnmask$(poe_repsel.ending_vend$,vendomask$)
        if poe_repsel.from_whse$=fill(2) whsfrom$="First" else whsfrom$=poe_repsel.from_whse$
        if poe_repsel.thru_whse$=fill(2) whsthru$="Last" else whsthru$=poe_repsel.thru_whse$
        if poe_repsel.begrev_date$=fill(8) datefrom$="First" else datefrom$=fndate$(poe_repsel.begrev_date$)
        if poe_repsel.endrev_date$=fill(8) datethru$="Last" else datethru$=fndate$(poe_repsel.endrev_date$)
        if l+1>l9 gosub report_heading
        print (printer_dev) @(hsel[0]),seqnum$,@(hsel[1]),buyerfrom$,@(hsel[2]),buyerthru$,@(hsel[3]),vendfrom$,@(hsel[4]),vendthru$,@(hsel[5]),datefrom$,@(hsel[6]),datethru$,@(hsel[7]),whsfrom$,@(hsel[8]),whsthru$,@(hsel[9]),comment$
        l=l+1

    wend

    return

vendtotals: rem --- Print Vendor Totals

    if printtotline$="Y" gosub totalline
    printtotline$="N"
    vendtotwt$=str(vendtots[1]:"#"+m6$)
    minimumwt$=str(apm_vendrepl.pur_targ_lbs:"#"+m6$)
    totwtdiff$=str(vendtots[1]-apm_vendrepl.pur_targ_lbs:"#"+m6$)
    if printptot$="Y" gosub prodtotals
    if l+4>l9 printvtot$="N"; gosub newvendor

    print (printer_dev)""
    print (printer_dev) @(o[12]-20-vendlen),"Total For Vendor ",fnmask$(prevvend$(1,vendlen),vendomask$),@(o[12]),vendtots[0]:m2$,@(o[13]-1),vendtotwt$,@(o[14]-1),vendtots[2]:"#"+m1$

    print (printer_dev) @(o[12]-17),"Target Minimum ",@(o[12]),apm_vendrepl.pur_tgt_unit:m2$,@(o[13]-1),minimumwt$,@(o[14]-1),apm_vendrepl.pur_targ_amt:"#"+m1$

    print (printer_dev) ""
    print (printer_dev) @(o[12]-13),"Over/Under",@(o[12]),vendtots[1]-apm_vendrepl.pur_tgt_unit:m2$,@(o[13]-1),totwtdiff$,@(o[14]-1),vendtots[2]-apm_vendrepl.pur_targ_amt:"#"+m1$

    print (printer_dev) ""
    l=l+6
    dim vendtots[2]
    printvtot$="N"
    dopagebrk$="Y"
    return

prodtotals: rem --- Print product type Subtotal

    if printtotline$="Y" gosub totalline
    printtotline$="N"
    totprodwt$=str(prodtots[1]:"#"+m6$)
    print (printer_dev) ""
    print (printer_dev) @(o[12]-29),"Total For Product Type ",prevprodtype$,@(o[12]),prodtots[0]:m2$,@(o[13]-1),totprodwt$,@(o[14]-1),prodtots[2]:"#"+m1$

    l=l+2
    printptot$="N"
    dim prodtots[2]
    return

dosurplus: rem --- Print surplus of other whses for items stocked by 'W'

    dim d0$(24),d[2],surplus$(132)
    surplus$(o[1])="Surplus Other Whses: "
    col=4
    p36_key$=firm_id$(1,2)+itemnum$
    read record (poe_repsurp_dev,key=p36_key$,dom=*next) poe_repsurp$

readpoe36:

    while more

        poe36a_key$=key(poe_repsurp_dev,end=*break)
        if pos(p36_key$=poe36a_key$)<>1 break
        if col>12 break
        read record (poe_repsurp_dev) poe_repsurp$
        if poe_repsurp.warehouse_id$<>whse$
            surplus$(o[col])=poe_repsurp.warehouse_id$+": "+str(poe_repsurp.surplus_qty:m2$)
            col=col+2
        endif

    wend

printsurplus:

    if col>4
        print (printer_dev)surplus$
        let l=l+1
    endif
    return

totalline: rem --- Print total line

    if l+1>l9 printvtot$="N"; gosub newvendor
    dim adjustcodes$(8),tlinepoint$(0),tordpoint$(0)
    dim tavail$(0),tonorder$(0),teoq$(0),tsafety$(0),tmax$(0),tlead$(0)
    dim tsugg$(0),tweight$(0),tcost$(0),tannualusage$(0),tavgusage$(0)
    dim textension$(0)

    p26a_key$=firm_id$+prevbuyer$+prevvend$+prevprodtype$+previtem$
    find record (poe_ordtot_dev,key=p26a_key$,dom=nototal) poe_ordtot$
    let tstocklevel$=poe_ordtot.stock_level$,textension$=str(poe_ordtot.extended_amt:m1$)
    for x=1 to 8
    	adjustcodes$(x)=field(poe_ordtot$,"ADJUST_CODE_"+str(x:"00"))
    next x
    let tavail$=str(poe_ordtot.qty_avail-prevminusavail:m2$),tweight$=str(poe_ordtot.weight:m6$)
    let tonorder$=str(poe_ordtot.qty_on_order-prevminusonord:m2$),tsugg$=str(poe_ordtot.sugg_ord_qty:m2$)
    let tannualusage$=str(poe_ordtot.annual_usage-prevminusannuse:m2$)
    let tavgusage$=str(poe_ordtot.avg_usage-prevminusavguse:m2$)
    if tstocklevel$<>"W"

        let tlinepoint$=str(poe_ordtot.line_point:m2$),tordpoint$=str(poe_ordtot.order_point:m2$),teoq$=str(poe_ordtot.eoq:m2$)
        let tsafety$=str(poe_ordtot.safety_stock:m2$),tmax$=str(poe_ordtot.maximum_qty:m2$),tlead$=str(poe_ordtot.lead_time:m9$)
        let tcost$=str(poe_ordtot.est_unit_cst:m3$)

    endif

    print (printer_dev) @(0),adjustcodes$,@(o[1]),tannualusage$,@(o[2]),tavgusage$,@(o[3]),tsafety$,@(o[4]),tlead$,@(o[5]),tavail$,@(o[6]),tonorder$,@(o[7]),tordpoint$,@(o[8]),tmax$,@(o[9]),teoq$,@(o[10]),tlinepoint$,@(o[11]),tcost$,@(o[12]),tsugg$,@(o[13]),tweight$,@(o[14]),textension$

    let tsugg=poe_ordtot.sugg_ord_qty,tweight=poe_ordtot.weight,textension=poe_ordtot.extended_amt
    let buyertots[0]=buyertots[0]+tsugg,buyertots[1]=buyertots[1]+tweight
    let buyertots[2]=buyertots[2]+textension,vendtots[0]=vendtots[0]+tsugg
    let vendtots[1]=vendtots[1]+tweight,vendtots[2]=vendtots[2]+textension
    let prodtots[0]=prodtots[0]+tsugg,prodtots[1]=prodtots[1]+tweight
    let prodtots[2]=prodtots[2]+textension
    gosub donetotal
    return

nototal:
    print (printer_dev) @(1),"*** Total Line Not On File ***"
    gosub donetotal
    return

donetotal:
    let printtotline$="N",l=l+1
    return

    rem --- Line Feed: Determine number of cells to add to OutVect!

    line_feed:
        tmp=mod(OutVect!.size(),columns+1)
        if tmp then xwk = fnblank (columns+1-tmp)
    return

    rem --- fnBlank : Create blank cells in OutVect!. No return value

       def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call STBL("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end