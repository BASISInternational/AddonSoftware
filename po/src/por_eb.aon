rem --- Purchase Order Invoice Register (Purchase Price Variance)
rem --- Program por_eb v8.0.0 17Jul2007 (por_eb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:47:23)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- BBx reference ["pou_ea.bbx"] (Line 0332)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist b0$(1),b1$(1)
rem --- ivm01a: iolist s0$(1),s1$(1),s2$(1),s3$(1),s4$(1),s5$,s6$(1),s[all]
rem --- poe05a: iolist a0$(1),a1$(1),a2$,a3$,a[all]
rem --- poe15a: iolist d0$(1),d1$(1),d2$,d[all]
rem --- poe25a: iolist w0$(1),w1$(1),w2$,w[all]
rem --- pom02a: iolist y0$(1),y1$(1),y2$(1)
rem --- pot04a: iolist c0$(1),c1$(1),c[8]
rem --- pot14a: iolist l0$(1),l1$(1),l2$(1),l3$(1),l4$(1),l5$,l6$,l[all]
rem --- pow17a: iolist u0$(1),u[all]

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="ivm-01"
    files$[4]="poe-05"
    files$[5]="poe-15"
    files$[6]="poe-25"
    files$[7]="pom-02"
    files$[8]="pot-04"
    files$[9]="pot-14"
    files$[10]="pow-17"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    ivm01_dev=channels[3]
    poe05_dev=channels[4]
    poe15_dev=channels[5]
    poe25_dev=channels[6]
    pom02_dev=channels[7]
    pot04_dev=channels[8]
    pot14_dev=channels[9]
    pow17_dev=channels[10]

rem --- Dimension string templates

    dim apm01a$:templates$[2],ivm01a$:templates$[3],poe05a$:templates$[4],
:       poe15a$:templates$[5],poe25a$:templates$[6],pom02a$:templates$[7],
:       pot04a$:templates$[8],pot14a$:templates$[9],pow17a$:templates$[10]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    detlevel$=fnget_fld_data$(table$,"detail_level")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

    precision i[1]
    dim o[11]
    headings$[2]="Purchase Price Variance"
    headings$[3]=""
    headings=3
    done=0
    vendor=0
    report=0
    l=l9+1
    t0$=""
    t1$=""
    xm1=15
    xm2=12
    xm3=12
    dw=max(i[3]+i[4]+i[5],40)
    more=1

rem --- Resize masks if needed

    o[0]=0
    o[1]=m0+1
    o[2]=o[1]+12
    o[3]=o[2]+8
    o[4]=max(o[0]+m0+31,o[3]+9)
rem l620:
resize_mask:
    o[11]=width-m1
    o[10]=o[11]-m1
    o[9]=o[10]-m3
    o[8]=o[9]-m1-1
    o[7]=o[8]-m3
    o[6]=o[7]-m2-3
    o[5]=o[6]-9
    po=o[9]-o[7]
    iv=o[11]-o[9]
rem if o[5]>o[4]+12 if o[5]>o[3]+i[0] goto l700
    if o[5]>o[4]+12 if o[5]>o[3]+i[0] goto subhead
    xm1=xm1-1
    xm2=xm2-1
    xm3=xm3-1
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,xm1
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,xm2
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,xm3
rem goto l620
    goto resize_mask

rem l700: rem --- Subheadings
subhead: rem --- Subheadings

    dim po$(po-1,"-"),iv$(iv-1,"-")
    x$=" PO "
    po$(fncenter(x$,po),4)=x$
    dw=min(dw,o[6]-o[3])
    x$=" Invoice "
    iv$(fncenter(x$,iv),9)=x$

rem --- Position file

rem call pgmdir$+"adc_progress.aon","S","","Purchase Price Variance","Printing","",17,0,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    read (poe05_dev,key=firm_id$,dom=*next)

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem l1000: rem --- Read next header
    while more

    k$=key(poe05_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read record (poe05_dev) poe05a$
    x$=fnmask$(a0$(5,p[0]),m0$)+" "+a0$(11,10)
    if aptype x$=a0$(3,2)+" "+x$
rem call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Position poe-25 PO Detail

    additional=0
    invamt=0
    invqty=0
    read (poe25_dev,key=a0$,dom=*next)

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem l1500: rem --- Read next PO Detail record
    while more

rem k$=key(poe25_dev,end=l2500)
rem if pos(a0$=k$)<>1 goto l2500
    k$=key(poe25_dev,end=update_cost)
    if pos(a0$=k$)<>1 goto update_cost
    read record (poe25_dev) poe25a$

rem --- Retrieve line code

rem gosub l6400
    gosub line_code
rem if pos(y1$(21,1)="MV") goto l2400
    if pos(y1$(21,1)="MV") continue

rem --- Calculate variance

    qty=w[1]
    if y1$(21,1)="O" qty=1
    precision 2
    po_extension=w[2]*qty
    iv_extension=w[0]*qty
    precision i[1]
    variance=iv_extension-po_extension

rem --- Accumulate totals needed for landed cost

rem if pos(r3$(55,1)="QC")=0 goto l1900
rem if y1$(24,1)<>"Y" goto l1900
    if pos(r3$(55,1)="QC")=0 goto detail_rec
    if y1$(24,1)<>"Y" goto detail_rec
rem if cvs(w1$(1,7),2)="" goto l1850
    if cvs(w1$(1,7),2)="" goto brnch2
    invamt=invamt+iv_extension
    invqty=invqty+qty
rem goto l1900
    goto detail_rec
rem l1850:
brnch2:
    additional=additional+iv_extension

rem l1900: rem --- Retrieve receipt detail record
detail_rec: rem --- Retrieve receipt detail record

rem if w[0]=w[2] goto l2400
    if w[0]=w[2] continue
    dim l0$(25),l1$(64),l2$(32),l3$(22),l4$(40),l[12],description$(dw)
    l0$(1)=firm_id$+w0$(5,6)+w1$(1,7)+w1$(11,7)+w1$(8,3)
    received$=""
rem find record (pot14_dev,key=l0$,dom=l2000) pot14a$
rem if l0$(1,22)=c0$(1,22) goto l2000
    find record (pot14_dev,key=l0$,dom=inv_item) pot14a$
    if l0$(1,22)=c0$(1,22) goto inv_item
    c0$(1)=l0$
rem find record (pot04_dev,key=c0$,dom=l2000) pot04a$
    find record (pot04_dev,key=c0$,dom=inv_item) pot04a$
    if cvs(c1$(29,6),2)<>"" received$=fndate$(c1$(29,6))

rem l2000: rem --- Retrieve inventory item
inv_item: rem --- Retrieve inventory item

    dim s0$(22),s1$(60),s2$(64),s3$(40),s4$(21),s6$(g[4]*6),s[12]
    description$(1)=w1$(20,40)
rem if y1$(21,1)<>"S" goto l2100
    if y1$(21,1)<>"S" goto level_brk
    s0$(1)=firm_id$+l3$(3)
    s1$(1)=nf$
    s2$(1)=""
    find record (ivm01_dev,key=s0$,dom=*next) ivm01a$
    description$(1)=fnitem$(s1$,i[3],i[4],i[5])

rem l2100: rem --- Level breaks?
    level_brk: rem --- Level breaks?

rem if t0$<>w0$(5,6) gosub l6000
    if t0$<>w0$(5,6) gosub vend_brk
rem if t1$<>w0$(11,10) gosub l6200
    if t1$<>w0$(11,10) gosub invoice_brk
    if l+2>l9 gosub report_heading
    l=l+2
    vendor=vendor+variance
    report=report+variance
rem on pos(y1$(21,1)="SNO") goto l2400,l2200,l2200,l2300
    if(pos(y1$(21,1)="")) continue
    else if(pos(y1$(21,1)="S"))
rem l2200: rem --- Standard or Non-stock line

        print (printer_dev) @(o[1]),w1$(1,7),"-",w1$(8,3),
        :                   @(o[2]),w1$(11,7),
        :                   @(o[3]),s0$(3,i[0]),
        :                   @(o[5]),received$,
        :                   @(o[6]),w[1]:m2$," ",l1$(22,2),
        :                   @(o[7]),w[2]:m3$,
        :                   @(o[8]),po_extension:m1$,
        :                   @(o[9]),w[0]:m3$,
        :                   @(o[10]),iv_extension:m1$,
        :                   @(o[11]),variance:m1$
        print (printer_dev) @(o[3]),description$
rem     goto l2400

    else if(pos(y1$(21,1)="N"))
rem l2300: rem --- Other line

        print (printer_dev) @(o[1]),w1$(1,7),"-",w1$(8,3),
        :                   @(o[2]),w1$(11,7),
        :                   @(o[5]),received$,
        :                   @(o[7]),w[2]:m3$,
        :                   @(o[8]),po_extension:m1$,
        :                   @(o[9]),w[0]:m3$,
        :                   @(o[10]),iv_extension:m1$,
        :                   @(o[11]),variance:m1$
        print (printer_dev) @(o[3]),description$
    fi

rem l2400: rem --- Loop back for next line item

rem goto l1500
    wend

rem l2500: rem --- Done with price variances. Update landed cost?
update_cost: rem --- Done with price variances. Update landed cost?

rem if pos(r3$(55,1)="QC")=0 goto l3900
rem if r3$(55,1)="Q" if invqty=0 goto l3900
rem if r3$(55,1)="C" if invamt=0 goto l3900

    if pos(r3$(55,1)="QC")=0 continue
    if r3$(55,1)="Q" if invqty=0 continue
    if r3$(55,1)="C" if invamt=0 continue

rem --- Postion detail file for landed cost pass

rem call pgmdir$+"adc_progress.aon","S","","Landed Cost Calculation","Printing","",23,0,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    read (poe25_dev,key=a0$,dom=*next)

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem l3000: rem --- Read next detail
    while more

rem k$=key(poe25_dev,end=l3900)
rem if pos(a0$=k$)<>1 goto l3900
    k$=key(poe25_dev,end=*continue)
    if pos(a0$=k$)<>1 continue
    read record (poe25_dev) poe25a$
rem call pgmdir$+"adc_progress.aon","S","","","",k$,0,0,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Retrieve line code

rem if cvs(w1$(1,7),2)="" goto l3800
    if cvs(w1$(1,7),2)="" continue
rem gosub l6400
    gosub line_code
rem if pos(y1$(21,1)="MV") goto l3800
rem if y1$(24,1)<>"Y" goto l3800
    if pos(y1$(21,1)="MV") continue
    if y1$(24,1)<>"Y" continue

rem --- Retrieve detail record

    dim l0$(25),l1$(64),l2$(32),l3$(22),l4$(40),l[12]
    l0$(1)=firm_id$+w0$(5,6)+w1$(1,7)+w1$(11,7)+w1$(8,3)
rem find record (pot14_dev,key=l0$,dom=l3800) pot14a$
rem if l[0]=0 if pos(y1$(21,1)="ON") l[0]=1 else goto l3800
    find record (pot14_dev,key=l0$,dom=*continue) pot14a$
    if l[0]=0 if pos(y1$(21,1)="ON") l[0]=1 else continue

rem --- Calculate allocation

    cost=w[0]
    qty=w[1]
rem if qty=0 if y1$(21,1)="O" qty=1 else goto l3800
    if qty=0 if y1$(21,1)="O" qty=1 else continue
    precision 2
    iv_extension=qty*cost
    precision i[1]
    if r3$(55,1)="C" percent=(iv_extension*100)/invamt
    if r3$(55,1)="Q" percent=(qty*100)/invqty
    amount=additional*percent/100
    landed=(iv_extension+amount)/qty

rem --- Write work file record

    dim u0$(24),u[1]
    u0$(1)=firm_id$+l3$
    u[0]=landed/l[0]
    write record (pow17_dev,key=u0$) pow17a$

rem l3800: rem --- Loop back for next detail

rem goto l3000
    wend

rem l3900: rem --- Loop back for next header

rem goto l1000
    wend

done: rem --- All done

    done=1
rem gosub l6000
    gosub vend_brk
    if l+2>l9 gosub report_heading
    print (printer_dev)""
    total$="Register"
    total=report
rem gosub l6800
    gosub print_total
rem call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,meter_num,status
    update$="pou_ea.bbx"
    if gl$<>"Y" run update$,err=std_exit
    run pgmdir$+"glr_recap.aon"

report_heading: rem --- Report Heading

    l=headings+3
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[7]),po$,
    :                   @(o[9]),iv$
    print (printer_dev) @(o[0]),"Vendor",
    :                   @(o[1]),"PO #",
    :                   @(o[2]),"Rec #",
    :                   @(o[3]),"Item",
    :                   @(o[4]),"Invoice",
    :                   @(o[5]),"Received",
    :                   @(o[6]+m2-9),"Quantity UM",
    :                   @(o[7]+m3-5),"Cost",
    :                   @(o[8]+m1-10),"Extension",
    :                   @(o[9]+m3-5),"Cost",
    :                   @(o[10]+m1-10),"Extension",
    :                   @(o[11]+m1-9),"Variance"
    return

rem l6000: rem --- Vendor Break
vend_brk: rem --- Vendor Break

rem if t0$="" goto l6100
    if t0$="" goto brnch1
    total$="Vendor "+vendor$
    total=vendor
rem if vendor<>0 gosub l6800
    if vendor<>0 gosub print_total

rem l6100:
brnch1:
rem if done goto l6190
    if done return
    dim b0$(8),b1$(30),vendor$(31+m0)
    t0$=w0$(5,6)
    b0$(1)=firm_id$+t0$
    b1$(1)=nf$
    vendor=0
    find record (apm01_dev,key=b0$,dom=*next) apm01a$
    vendor$(1)=fnmask$(b0$(3,p[0]),m0$)+" "+b1$
rem l6190:
    return

rem l6200: rem --- Invoice Break
invoice_brk: rem --- Invoice Break

    if l+5>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(o[0]),vendor$,@(o[4]),w0$(11,10)
    print (printer_dev)""
    let t1$=w0$(11,10),l=l+3
    return

rem l6400: rem --- Retrieve line code
line_code: rem --- Retrieve line code

rem if firm_id$+w1$(18,2)=y0$ goto l6490
    if firm_id$+w1$(18,2)=y0$ return
    let y0$(1)=firm_id$+w1$(18,2),y1$(1)=""
    find record (pom02_dev,key=y0$,dom=*next) pom02a$
rem l6490:
    return
rem --- Print total line
rem l6800:
print_total:
    if l+1>l9 gosub report_heading
    let l=l+1,total$="Purchase Price Variance Total For "+cvs(total$,2)
    print (printer_dev)@(o[11]-len(total$)),total$,@(o[11]),total:m1$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem comment unused functions
    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
rem def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

rem def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
rem def fnyy$(q$)=q$(3,2)
rem def fnclock$(q$)=date(0:"%hz:%mz %p")
rem def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
         if q2$="" q2$=fill(len(q1$),"0")
         return str(-num(q1$,err=*next):q2$,err=*next)
         q=1
         q0=0
         while len(q2$(q))
               if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
               q=q+1
         wend
         if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
         return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

rem def fnbasename$(q$,q0$)
rem     q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
rem     if q then q$=q$(q+1)
rem     if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
rem return q$

rem --- fnglobal: Return numeric value of passed stbl variable

rem def fnglobal(q$,q1)
rem     q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
rem     return q1
rem fnend

rem --- fnglobal$: Return string value of passed STBL variable

rem def fnglobal$(q$,q1$)
rem     q1$=stbl(q$,err=*next)
rem     return q1$
rem fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
