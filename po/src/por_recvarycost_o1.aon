rem --- PO Receipt Cost Variance Report (Print Overlay)
rem --- Program por_recvarycost_o1.aon v8.0.0 17Jul2007 (por_ob)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:50:15)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    precision ivprecision
    dim vendtot[3],prevk$(31),vendor$(6),prevvend$(6)
    printvtot$="N"
    printptot$="N"
    more=1
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","ALT_KEY_01",pot14a_key_alttpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    headings=4
    dim headings$[headings],o[14]
    width=132
    page=0
    l9=59
    l=l9+1
    gosub assignheads

positions:
    o[1]=o[0]+3
    o[2]=o[1]+3
    o[3]=o[2]+4
    o[4]=o[3]+3
    o[5]=o[4]+3
    o[6]=o[5]+21
    o[7]=o[6]+9
    o[8]=o[7]+9
    o[9]=o[8]+3
    o[10]=o[9]+m2
    o[11]=o[10]+m2
    o[12]=o[11]+m1
    o[13]=o[12]+m1
    o[14]=o[13]+m1
    if o[14]+8>=width
        o[14]=width-mpcnt
        o[13]=o[14]-m1
        o[12]=o[13]-m1
        o[11]=o[12]-m1
        o[10]=o[11]-m2
        o[9]=o[10]-m2
    endif

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","","","","",0,pot04a_dev,1,meter_num,status

rem --- Init Read

    p44_key$=firm_id$+vendfrom$+datefrom$
    read (pot14_dev2,key=p44_key$,dom=*next)

rem --- Read through Sort file

dim pot44_key$:pot14a_key_alttpl$
    while more

        pot44_key$=key(pot14_dev2,end=done)
        if pot44_key.firm_id$<>firm_id$ break
        read (pot14_dev2); rem "Move ptr

rem --- Valid Vendor/Receipt Date?

        if vendthru$<>"" and pot44_key.vendor_id$>vendthru$ break
        if datefrom$="" or pot44_key.recpt_date$>=datefrom$

            if datethru$="" or pot44_key.recpt_date$<=datethru$

                vendor$=pot44_key.vendor_id$
                ponum$=pot44_key.po_no$
                recnum$=pot44_key.receiver_no$
                linenum$=pot44_key.po_line_no$

            else

                rem --- Skip to next vendor

                read (pot14_dev2,key=pot44_key.firm_id$+pot44_key.vendor_id$+$FF$,dom=*next)
                continue

            endif

        else
rem --- Skip to first receipt date for vendor

        
            read (pot14_dev2,key=pot44_key.firm_id$+pot44_key.vendor_id$+datefrom$,dom=*next)
            continue

        endif

rem --- Get Header & assign variables

        if pot44_key.firm_id$+pot44_key.vendor_id$+pot44_key.recpt_date$+pot44_key.po_no$+pot44_key.receiver_no$<>prevk$(1,28)

            prevk$(1)=pot44_key$
            p04_key$=firm_id$+vendor$+ponum$+recnum$
            find record (pot04a_dev,key=p04_key$,dom=*continue) pot04a$
            dim rcptdate$(8),orddate$(8)
            if pot04a.recpt_date$<>fill(8) rcptdate$=fndate$(pot04a.recpt_date$)
            if pot04a.ord_date$<>fill(8) orddate$=fndate$(pot04a.ord_date$)

        endif

rem --- Get detail
ESCAPE; REM NOT A0$ IN 130
        p14_key$=a0$+linenum$
        find record (pot14a_dev,key=p14_key$,dom=*continue) pot14a$
        whse$=pot14a.warehouse_id$
        item$=pot14a.item_id$

rem --- Valid Whse/Item?

        if whsefor$<>"" if whse$<>whsefor$ continue
        if itemfrom$<>"" if item$<itemfrom$ continue
        if itemthru$<>"" if item$>itemthru$ continue

rem --- Valid line type (ie S or N)?

        gosub getlinetype
        if pos(linetype$="SN")=0 continue

rem --- Valid, so assign vars

        call pgmdir$+"adc_progress.aon","S","","","",0,pot04a_dev,1,meter_num,status
        linecode$=pot14a.po_line_code$
        unitmeas$=pot14a.unit_measure$
        dim dateprom$(8),reqdate$(8)
        if pot14a.promise_date$<>fill(8) dateprom$=fndate$(pot14a.promise_date$)
        if pot14a.reqd_date$<>fill(8) reqdate$=fndate$(pot14a.reqd_date$)
        precision 2
        qtyord=pot14a.qty_ordered
        qtyrec=pot14a.qty_received
        unitcost=pot14a.unit_cost
        ordval=unitcost*qtyord
        rcptval=unitcost*qtyrec
        variance=rcptval-ordval
        if ordval<>0 varipcnt=rcptval*100/ordval else varipcnt=0
        precision ivprecision
        if varipcnt<minvari continue

rem --- Go test breaks

        gosub testbreaks

rem --- Get Item Desc

        dim itemdesc$(60),x1$(60)
        if linetype$="N"

            itemdesc$(1)="(Not On File)"
            find record (ivm01a_dev,key=firm_id$+b3$(3,20),dom=brnch1) ivm01a$
            itemdesc$(1)=fnitem$(x1$,desclen[1],desclen[2],desclen[3])

        else
rem --- Nonstock description

            itemdesc$(1)=b4$

        endif

brnch1: rem --- Go print the data

        gosub printline

rem --- Accumulate totals; then get next detail

        rec_oval=rec_oval+ordval
        rec_rval=rec_rval+rcptval
        po_rval=po_rval+rcptval
        vendrval=vendrval+rcptval
        grandrval=grandrval+rcptval

rem --- Loop up for next header record via sort files

    wend

done: rem --- All Done

    if l+1>l9 gosub report_heading
    gosub pototals
    gosub vendtotals
    grandvari=grandrval-grandoval
    if grandoval>0 grandvpcnt=grandrval*100/grandoval
    print (printer_dev) @(o[11]-17),"Total For Report",
:                       @(o[11]),grandoval:m1$,
:                       @(o[12]),grandrval:m1$,
:                       @(o[13]),grandvari:m1$,
:                       @(o[14]),grandvpcnt:mpcnt$
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[6]),"Date",
:                       @(o[7]),"Date",
:                       @(o[9]+m2-10),"Quantity",
:                       @(o[10]+m2-10),"Quantity",
:                       @(o[11]+m1-7),"Order",
:                       @(o[12]+m1-9),"Receipt",
:                       @(o[14]+mpcnt-7),"Vari"

    print (printer_dev) @(o[2]),"Seq",
:                       @(o[3]),"Cd",
:                       @(o[4]),"Wh",
:                       @(o[5]),"Item",
:                       @(o[6]),"Required",
:                       @(o[7]),"Promised",
:                       @(o[8]),"UM",
:                       @(o[9]+m2-10),"Ordered",
:                       @(o[10]+m2-10),"Received",
:                       @(o[11]+m1-7),"Value",
:                       @(o[12]+m1-9),"Value",
:                       @(o[13]+m1-9),"Variance",
:                       @(o[14]+mpcnt-7),"Ratio"

    print (printer_dev)""
    l=l+3
    return

assignheads: rem --- Assign headings variables

    dim tmph3$(width),tmph4$(width)
    if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
    if itemfrom$="" itemf$="First" else itemf$=itemfrom$(1,itemlen)
    if itemthru$="" itemt$="Last" else itemt$=itemthru$(1,itemlen)
    midh3$="From Item "+itemf$+" Through "+itemt$
    tmph3$(1)="From Vendor: "+vendf$
    tmph3$(fncenter(midh3$,width))=midh3$
    tmph3$(width-len(datef$)-18)="From Receipt Date: "+datef$
    if whsefor$="" midh4$="All Warehouses" else midh4$="For Warehouse "+whsefor$
    tmph4$(1)="  To Vendor: "+vendt$
    tmph4$(fncenter(midh4$,width))=midh4$
    tmph4$(width-len(datef$)-18)="  To Receipt Date: "+datet$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" For Variances Greater Than "+str(minvari:mpcnt$)
    headings$[2]=tmph3$
    headings$[3]=tmph4$
    return

testbreaks: rem --- Test breaks

    if vendor$<>prevvend$

        if printptot$="Y" gosub pototals
        if printvtot$="Y" gosub vendtotals
        gosub newvendor
        gosub newpo
        return

    else

        if ponum$<>prevpo$

            if printrtot$="Y" gosub rectotals
            if printptot$="Y" gosub pototals
            gosub newpo
            return

        endif

    endif

    if recnum$=prevrec$

        if printrtot$="Y" gosub rectotals
        gosub newrec

    endif
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195),vendtot[3]
    vendname$="Not On File"
    prevvend$=vendor$
    printvtot$="Y"
    vendoval=0
    vendrval=0
    vendvari=0
    vendvpcnt=0
    find record (apm01a_dev,key=firm_id$+vendor$,dom=brnch2) apm01a$
    vendname$=apm01a.vendor_name$

brnch2:

    if l+4>l9 gosub report_heading
    print (printer_dev) @(0),fnmask$(vendor$(1,vendlen),vendomask$)," ",vendname$
    l=l+1
    return

newrec: rem --- New Receiver

    rec_oval=0
    rec_rval=0
    rec_vari=0
    rec_vpcnt=0
    prevrec$=recnum$
    printrtot$="Y"
    if fromnewpo

        if l+3>l9 gosub report_heading
        print (printer_dev) @(o[1]),"PO #: ",ponum$,
:                           @(18),"Receiver #:",recnum$,
:                           @(40),"Ordered: ",orddate$,
:                           @(59),"Received: ",rcptdate$

        l=l+1

    endif

    return

newpo: rem --- New PO

    po_oval=0
    po_rval=0
    po_vari=0
    po_vpcnt=0
    prevpo$=ponum$
    printptot$="Y"
    if l+3>l9 gosub report_heading
    print (printer_dev) @(o[1]),"PO #: ",ponum$, 
:                       @(18),"Receiver #:",recnum$, 
:                       @(40),"Ordered: ",orddate$, 
:                       @(59),"Received: ",rcptdate$

    l=l+1
    fromnewpo=1
    gosub newrec
    fromnewpo=0
    return

vendtotals: rem --- Print Vendor total

    if vendoval>0 vendvpcnt=vendrval*100/vendoval
    vendvari=vendrval-vendoval
    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[11]-18-len(vendomask$)),"Total For Vendor ",fnmask$(prevvend$(1,vendlen),vendomask$),
:                       @(o[11]),vendoval:m1$,
:                       @(o[12]),vendrval:m1$,
:                       @(o[13]),vendvari:m1$,
:                       @(o[14]),vendvpcnt:mpcnt$
    l=l+1
    return

pototals: rem --- Print PO total

    dim wfkey$(18)
    start18$=firm_id$+prevvend$+prevpo$
    read (pow18_dev,key=start18$,dom=*next)

    while more
        k18$=key(pow18_dev,end=*break)
        if pos(start18$=k18$)=1
            read record (pow18_dev) pow18a$
            precision 2
            poamt=poamt+wfpoamt
            precision ivprecision
        endif
    wend

    po_oval=po_oval+poamt
    vendoval=vendoval+poamt
    grandoval=grandoval+poamt
    poamt=0
    if po_oval>0 po_vpcnt=po_rval*100/po_oval
    po_vari=po_rval-po_oval
    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[11]-23),"Total For PO # ",prevpo$,
:                       @(o[11]),po_oval:m1$,
:                       @(o[12]),po_rval:m1$,
:                       @(o[13]),po_vari:m1$,
:                       @(o[14]),po_vpcnt:mpcnt$
    let l=l+1
    return

rectotals: rem --- Print Rec total

    if rec_oval>0 rec_vpcnt=rec_rval*100/rec_oval
    let rec_vari=rec_rval-rec_oval
    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[11]-25),"Total For Rcpt # ",prevrec$,
:                       @(o[11]),rec_oval:m1$,
:                       @(o[12]),rec_rval:m1$,
:                       @(o[13]),rec_vari:m1$,
:                       @(o[14]),rec_vpcnt:mpcnt$
    let l=l+1
    return

getlinetype: rem --- Get Line Type

    let linetype$="N"
    p02_key$=pot14a.firm_id$+pot14a.po_line_code$
    find record (pom02a_dev,key=p02_key$,dom=brnch4) pom02a$
    let linetype$=pom02a.line_type$

brnch4:
    return

rem --- Print data line
printline:
    if l+2>l9 gosub report_heading
    print (printer_dev) @(o[2]),linenum$,
:                       @(o[3]),linecode$,
:                       @(o[4]),whse$,
:                       @(o[5]),item$(1,itemlen),
:                       @(o[6]),reqdate$,
:                       @(o[7]),dateprom$,
:                       @(o[8]),unitmeas$,
:                       @(o[9]),qtyord:m2$,
:                       @(o[10]),qtyrec:m2$,
:                       @(o[11]),ordval:m1$,
:                       @(o[12]),rcptval:m1$,
:                       @(o[13]),variance:m1$,
:                       @(o[14]),varipcnt:mpcnt$

    print (printer_dev)@(o[5]),itemdesc$
    let l=l+2
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

   def fndate$(q$) 
        
        if cvs(q$,2)="" return ""

        testdate$=""

        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)

        if testdate$<>"" 

            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

        endif

        return testdate$

    fnend    


    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
