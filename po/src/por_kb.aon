rem --- Purchase Order Expediting Report (Print Overlay)
rem --- Program por_kb v8.0.0 17Jul2007 (por_kb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:48:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
rem 23Oct96 Caj: Was printing date required on memos (4460)
rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fname$ (Line 0342)

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file poe-32 referenced (Line 0088)
rem --- Cross-reference file poe-32 referenced (Line 0164)
rem --- Cross-reference file poe-32 referenced (Line 0168)
rem --- Cross-reference file poe-32 referenced (Line 0172)
rem --- Cross-reference file poe-32 referenced (Line 0174)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record poe32a replaced by index on opt-01 (Line 0095)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist c0$(1),c1$(1)
rem --- apm10c: iolist d0$(1)
rem --- arm01a: iolist *,custinfo$(1)
rem --- arm03a: iolist *,shipinfo$(1)
rem --- ivm01a: iolist *,x1$(1)
rem --- poe02a: iolist a0$(1),a1$(1),a2$,a3$,a[all]
rem --- poe12a: iolist b0$(1),b1$(1),b2$(1),b3$(1),b4$(1),b5$,b6$,b[all]
rem --- pom02a: iolist s0$(1),s1$(1)

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)
rem --- poe32a: Channel reference (Line 0203)

rem --- 18Nov97 JWK: Phone number displayed in wrong format (6450)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="apm-10"
    files$[4]="arm-01"
    files$[5]="arm-03"
    files$[6]="ivm-01"
    files$[7]="poe-02"
    files$[8]="poe-12"
    files$[9]="poe-32"
    files$[10]="pom-02"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    apm10_dev=channels[3]
    arm01_dev=channels[4]
    arm03_dev=channels[5]
    ivm01_dev=channels[6]
    poe02_dev=channels[7]
    poe12_dev=channels[8]
    poe32_dev=channels[9]
    pom02_dev=channels[10]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm10a$:templates$[3],arm01a$:templates$[4],
:       arm03a$:templates$[5],ivm01a$:templates$[6],poe02a$:templates$[7],
:       poe12a$:templates$[8],poe32a$:templates$[9],pom02a$:templates$[10]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8]
    grandtot=0

rem --- Headings and print positions

    headings=2
    dim headings$[headings],o[11]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads
    headings$[1]=headings$[1]+" Through "+fndate$(datethru$)
positions:
    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+itemlen+1
    o[4]=o[3]+28
    o[5]=o[4]+3
    o[6]=o[5]+9
    o[7]=o[6]+m2+1
    o[8]=o[7]+m2+1
    o[9]=o[8]+m2+1
    o[10]=o[9]+m2+1
    o[11]=o[10]+m3+1
    if o[11]+13<width goto l950
    o[11]=width-m1
    o[10]=o[11]-m3
    o[9]=o[10]-m2
    o[8]=o[9]-m2
    o[7]=o[8]-m2
    o[6]=o[7]-m2

l950: rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","Printing","",14,poe32_dev,1,meter_num,status

rem --- Sort by Purchase Order

    read (poe32_dev,key=firm_id$+pofrom$+vendfrom$,dom=*next)

readsort: rem --- Read through sort file

    k32$=key(poe32_dev,end=done)
    k$=k32$(1,2)+k32$(10,6)+k32$(3,7)
    read (poe32_dev)
    if k$(1,2)<>firm_id$ goto done
    find record (poe02_dev,key=k$,dom=nextheader) poe02a$

rem --- Test Ranges

    printit$="N"
    if pofrom$<>fill(7) and a0$(9,7)<pofrom$ goto nextheader
    if pothru$<>fill(7) and a0$(9,7)>pothru$ goto nextheader
    if vendfrom$<>fill(6) and a0$(3,6)<vendfrom$ goto nextheader
    if vendthru$<>fill(6) and a0$(3,6)>vendthru$ goto nextheader
    if whse$<>"" and a1$(1,2)<>whse$ goto nextheader
    if datethru$<>"" and a1$(23,6)>datethru$ goto testdetail

testdetail: rem --- If req'd date of any detail is w/in date range, print whole PO

    dim b0$(18),b1$(48),b2$(32),b3$(22),b4$(40),b[12]
    read (poe12_dev,key=a0$(1,15),dom=*next)

testpoe12: rem --- Test PO Detail date range

    k11$=key(poe12_dev,end=donetestd)
    if k11$(1,15)<>a0$ goto donetestd
    read record (poe12_dev,key=k11$) poe12a$
    if b1$(3,6)>datethru$ goto nexttestd

rem --- Detail passed, so go print header & whole PO

    printit$="Y"
    goto donetestd

nexttestd: rem --- Loop up to test next detail record

    goto testpoe12

donetestd: rem --- Done testing detail records

    if printit$<>"Y" goto nextheader
    gosub testbreaks
    gosub printdetail

nextheader: rem --- Loop up for next header record via sort file

    goto readsort

done: rem --- All Done

    if l+2>l9 gosub report_heading
    gosub pototals
    print (printer_dev)@(o[11]-17),"Total For Report",@(o[11]),grandtot:m1$
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Re-loop through detail & print whole PO

    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(3,vendlen),vendomask$)+" "+a0$(9,7),0,0,1,meter_num,status
    read (poe12_dev,key=a0$,dom=*next)
read_detail:
    k12$=key(poe12_dev,end=doneprintdetail)
    if k12$(1,15)<>a0$ goto doneprintdetail
    read record (poe12_dev,key=k12$) poe12a$

rem --- Set up variables

    dim datereq$(8)
    whse_detail$=b3$(1,2)
    itemnum$=b3$(3,20)
    memo$=b4$
    unitmeas$=b1$(22,2)
    if b1$(3,6)<>fill(6) datereq$=fndate$(b1$(3,6))
    qtyord$=str(b[3]:m2$)
    qtyinqa$=str(b[4]:m2$)
    qtyrec$=str(b[7]:m2$)
    baldue$=str(b[3]-b[7]:m2$)
    unitcost$=str(b[1]:m3$)

rem --- Get Drop Ship flag & Line Type

    dim s0$(4),s1$(32)
    linetype$="N"
    dropship$="N"
    find record (pom02_dev,key=b0$(1,2)+b1$(1,2),dom=l4310) pom02a$
    linetype$=s1$(21,1)
    dropship$=s1$(22,1)

l4310: rem --- Get Item Desc for S and N type lines

    if linetype$="N" itemdesc$=memo$; goto l4370
    dim itemdesc$(60),x1$(60)
    itemdesc$(1)="Not On File"
    find record (ivm01_dev,key=firm_id$+b3$(3,20),dom=l4370) ivm01a$
    itemdesc$(1)=fnitem$(x1$,desclen[1],desclen[2],desclen[3])

l4370: rem --- Get extension

    gosub calc_extension

rem --- Format common part of print line

    dim pline$(132)
    pline$(1)=b0$(16,3)+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")=0 goto not_mov
    if linetype$="V" pline$(o[2]+1)=memo$(1,20) else pline$(o[2]+1)=memo$
    if linetype$<>"M" pline$(o[5]+1)=datereq$
    if linetype$="O" pline$(o[10]+1,m3)=unitcost$,pline$(o[11]+1)=extension$
    if l+2>l9 gosub report_heading
    print (printer_dev)pline$
    l=l+1
    goto nextprintdetail

not_mov: rem --- Print Line Types 'S' & 'N'

    if pos(linetype$="SN")=0 goto nextprintdetail
    if l+2>l9 gosub report_heading
    print (printer_dev)pline$,@(o[2]),itemnum$(1,itemlen),@(o[3]),itemdesc$(1,27),@(o[4]),unitmeas$,@(o[5]),datereq$,@(o[6]),qtyord$,@(o[7]),qtyinqa$,@(o[8]),qtyrec$,@(o[9]),baldue$,@(o[10]),unitcost$,@(o[11]),extension$
    l=l+1

dropship: rem --- Print drop ship info if applicable

    if dropship$<>"Y" or ar$="N" goto nextprintdetail
    dim custinfo$(321),shipinfo$(173),custaddr$(120),shipaddr$(120)
    custname$="Not On File"
    shipname$="Not On File"
    find record (arm01_dev,key=b0$(1,2)+b2$(11,6),dom=l4670) arm01a$
    custname$=custinfo$(1,30)
    custaddr$=custinfo$(31,72)+custinfo$(203,24)+custinfo$(103,9)
    call pgmdir$+"adc_address.aon",custaddr$,24,4,9,30
l4670:
    find record (arm03_dev,key=b0$(1,2)+b2$(11,6)+b2$(27,6),dom=l4695) arm03a$
    shipname$=shipinfo$(1,30)
    shipaddr$=shipinfo$(31,72)+shipinfo$(127,24)+shipinfo$(151,9)
    call pgmdir$+"adc_address.aon",shipaddr$,24,4,9,30

l4695: rem --- Use Shipto address info if available else, use cust addr info

    dropaddr$=custaddr$
    dropname$=custname$
    if shipaddr$<>fill(120) dropaddr$=shipaddr$,dropname$=shipname$
    if l+6>l9 gosub report_heading
    print (printer_dev)@(o[2]),"Drop Ship To Customer",@(o[3]+1),fnmask$(b2$(11,custlen),customask$),"    Order ",b2$(17,7)," ",b2$(24,3)
    print (printer_dev)@(o[3]-4),"Name",@(o[3]+1),dropname$
    print (printer_dev)@(o[3]-7),"Address",@(o[3]+1),dropaddr$(1,30)
    print (printer_dev)@(o[3]+1),dropaddr$(31,30)
    print (printer_dev)@(o[3]+1),dropaddr$(61,30)
    print (printer_dev)@(o[3]+1),dropaddr$(91,30)
    l=l+6

nextprintdetail: rem --- Get next detail record to print

    potot=potot+extension
    grandtot=grandtot+extension
    extension=0
    extension$=""
    goto read_detail

doneprintdetail: rem --- Done printing detail

    return

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(0),"From Vendor: ",vendf$," ",vendfname$(1,20),@(fncenter(whsepagehead$,width)),whsepagehead$,@(104),"From Purchase Order: ",pof$
    print (printer_dev)@(2),"To Vendor: ",vendt$," ",vendtname$(1,20),@(106),"To Purchase Order: ",pot$
    print (printer_dev)""
    print (printer_dev)@(o[5]),"Date",@(o[6]+m2-9),"Quantity",@(o[7]+m2-9),"Quantity",@(o[8]+m2-9),"Quantity",@(o[9]+m2-9),"Balance",@(o[10]+m3-5),"Unit"
    print (printer_dev)@(o[0]),"Seq",@(o[1]),"Wh",@(o[2]),"Item",@(o[3]),"Description",@(o[4]),"UM",@(o[5]),"Required",@(o[6]+m2-9),"Ordered",@(o[7]+m2-9),"In QA",@(o[8]+m2-9),"Received",@(o[9]+m2-9),"Due",@(o[10]+m3-4),"Cost",@(o[11]+m1-10),"Extension"
    print (printer_dev)""
    l=l+6
    return

assignheads: rem --- Assign headings variables

    if vendfrom$=fill(6) vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendthru$=fill(6) vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    if pofrom$=fill(7) pof$="First" else pof$=pofrom$
    if pothru$=fill(7) pot$="Last" else pot$=pothru$
    if whse$="" whsepagehead$="For All Warehouses" else whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)
    return

testbreaks: rem --- Test for Breaks

    if a0$(9,7)=ponum$ goto l6090
    if printptot$="Y" gosub pototals
    gosub newpo
l6090:
    return

newpo: rem --- New PO

    potot=0
    ponum$=a0$(9,7)
    printptot$="Y"
    vendor$=a0$(3,6)
    termsdesc$="Not On File"
    vendname$="Not On File"
    dim c0$(8),c1$(195),d0$(26)
    find record (apm01_dev,key=firm_id$+vendor$,dom=l6250) apm01a$
    vendname$=c1$(1,30)
    contact$=c1$(126,20)
    phone$=fnmask$(c1$(112,10),"(###) ###-####")
l6250:
    find record (apm10_dev,key=firm_id$+"C"+a1$(38,2),dom=l6410) apm10c$
    termsdesc$=d0$(6,18)
l6410:
    if l+5>l9 gosub report_heading
    dim dateord$(8),dateprom$(8)
    if a1$(5,6)<>fill(6) dateord$=fndate$(a1$(5,6))
    if a1$(11,6)<>fill(6) dateprom$=fndate$(a1$(11,6))
    print (printer_dev)@(0),"PO#: ",ponum$,@(14),"Ordered ",dateord$,@(33),"Vendor ",fnmask$(vendor$(1,vendlen),vendomask$)," ",vendname$,@(74),"Contact ",contact$,@(104),"Ack By ",a1$(74,20)
    print (printer_dev)@(13),"Promised ",dateprom$,@(66),"Phone ",phone$,@(105),"Terms ",a1$(38,2)," ",termsdesc$
    print (printer_dev)""
    l=l+3
    return

pototals: rem --- Print Purchase Order total

    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[11]-23),"Total For PO # ",ponum$,@(o[11]),potot:m1$
    print (printer_dev)""
    let l=l+2
    return
rem --- Calc extension for S, N and O types
calc_extension:
    if pos(linetype$="SNO")=0 goto l6990
    let qty=b[3]-b[7]
    if linetype$="O" qty=1
    precision 2
    let extension=b[1]*qty,extension$=str(extension:m1$)
    precision ivprecision
l6990:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
