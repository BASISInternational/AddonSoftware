rem --- Purchase Order Expediting Report (Print Overlay)
rem --- Program por_kb v8.0.0 17Jul2007 (por_kb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:48:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
rem 23Oct96 Caj: Was printing date required on memos (4460)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    pofrom$=fnget_fld_data$(table$,"begin_purchase_order")
    pothru$=fnget_fld_data$(table$,"end_purchase_order")
    vendfrom$=fnget_fld_data$(table$,"beginning_vendor")
    vendthru$=fnget_fld_data$(table$,"ending_vendor")
    pofrom$=fnget_fld_data$(table$,"begin_purchase_order")
    datethru$=fnget_fld_data$(table$,"expedite_thru_date")
    whse$=fnget_fld_data$(table$,"warehouse")

rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8]
    grandtot=0

rem --- Headings and print positions

    headings=2
    dim headings$[headings],o[11]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads
    headings$[1]=headings$[1]+" Through "+fndate$(datethru$)

positions:

    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+itemlen+1
    o[4]=o[3]+28
    o[5]=o[4]+3
    o[6]=o[5]+9
    o[7]=o[6]+m2+1
    o[8]=o[7]+m2+1
    o[9]=o[8]+m2+1
    o[10]=o[9]+m2+1
    o[11]=o[10]+m3+1

    if o[11]+13>=width
        o[11]=width-m1
        o[10]=o[11]-m3
        o[9]=o[10]-m2
        o[8]=o[9]-m2
        o[7]=o[8]-m2
        o[6]=o[7]-m2
    endif

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","Printing","",14,poe32_dev,1,meter_num,status

rem --- Sort by Purchase Order

    read (poe32_dev,key=firm_id$+pofrom$+vendfrom$,dom=*next)

rem --- Read through sort file

    while more

        poe32a_key$=key(poe32_dev,end=*break)
        k$=poe32a_key.firm_id$+poe32a_key.vendor_id$+poe32a_key.po_no$
        read (poe32_dev)
        if poe32a_key.firm_id$<>firm_id$ break
        find record (poe02_dev,key=k$,dom=*continue) poe02a$

rem --- Test Ranges

        printit$="N"
        if pofrom$<>fill(7) and poe02a.po_no$<pofrom$ continue
        if pothru$<>fill(7) and poe02a.po_no$>pothru$ continue
        if vendfrom$<>fill(6) and poe02a.vendor_id$<vendfrom$ continue
        if vendthru$<>fill(6) and poe02a.vendor_id$>vendthru$ continue
        if whse$<>"" and poe02a.warehouse_id$<>whse$ continue

rem if datethru$<>"" and poe02a.reqd_date$>datethru$ goto testdetail...testdetail pointed
rem to the next statement so this condition need not be checked.

rem --- If req'd date of any detail is w/in date range, print whole PO

        p12_key$=poe02a.firms_id$+poe02a.vendor_id$+poe02a.po_no$
        read (poe12_dev,key=p12_key$,dom=*next)

rem --- Test PO Detail date range

        while more

            poe12a_key$=key(poe12_dev,end=*break)
            if poe12a_key.firm_id$+poe12a_key.vendor_id$+poe12a_key.po_no$<>poe02a_key.firm_id$+poe02a_key.vendor_id$+poe02a_key.po_no$ break
            read record (poe12_dev,key=poe12a_key$) poe12a$
            if poe12a.reqd_date$<=datethru$

rem --- Detail passed, so go print header & whole PO
                printit$="Y"
                break

            endif

rem --- Loop up to test next detail record

        wend

rem --- Done testing detail records

        if printit$="Y"
            gosub testbreaks
            gosub printdetail
        endif

rem --- Loop up for next header record via sort file

    wend

done: rem --- All Done

    if l+2>l9 gosub report_heading
    gosub pototals
    print (printer_dev) @(o[11]-17),"Total For Report", 
:                       @(o[11]),grandtot:m1$
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Re-loop through detail & print whole PO

    call pgmdir$+"adc_progress.aon","S","","","",0,0,0,1,meter_num,status
    p12_key$=poe02a_key.firm_id$+poe02a_key.vendor_id$+poe02a_key.po_no$
    read (poe12_dev,key=a0$,dom=*next)

    while more

        poe12a_key$=key(poe12_dev,end=*break)
        if poe12a_key.firm_id$+poe12a_key.vendor_id$+poe12a_key.po_no$<>p12_key$ break
        read record (poe12_dev,key=poe12a_key$) poe12a$

rem --- Set up variables

        dim datereq$(8)
        whse_detail$=poe12a.warehouse_id$
        itemnum$=poe12a.item_id$
        memo$=b4$
        unitmeas$=poe12a.unit_measure$
        if poe12a.reqd_date$<>fill(6) datereq$=fndate$(poe12a.reqd_date$)
        qtyord$=str(poe12a.qty_ordered:m2$)
        qtyinqa$=str(poe12a.qa_wip_qty:m2$)
        qtyrec$=str(poe12a.qty_received:m2$)
        baldue$=str(poe12a.qty_ordered-poe12a.qty_received:m2$)
        unitcost$=str(poe12a.unit_cost:m3$)

rem --- Get Drop Ship flag & Line Type

        linetype$="N"
        dropship$="N"
        find record (pom02_dev,key=poe12a.firm_id$+poe12a.po_line_code$,dom=brnch1) pom02a$
        linetype$=pom02a.line_type$
        dropship$=pom02a.dropship$

brnch1: rem --- Get Item Desc for S and N type lines

        if linetype$="N"

            itemdesc$=memo$
            dim itemdesc$(60),x1$(60)
            ivm01a.item_desc$="Not On File"
            i01_key$=firm_id$+poe12a.item_id$
            find record (ivm01_dev,key=i01_key$,dom=brnch2) ivm01a$
            ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])

        endif

brnch2: rem --- Get extension

        gosub calc_extension

rem --- Format common part of print line

        dim pline$(132)
        pline$(1)=poe12a.po_line_no$+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

        if pos(linetype$="MOV")<>0

            if linetype$="V" pline$(o[2]+1)=memo$(1,20) else pline$(o[2]+1)=memo$
            if linetype$<>"M" pline$(o[5]+1)=datereq$
            if linetype$="O" pline$(o[10]+1,m3)=unitcost$,pline$(o[11]+1)=extension$
            if l+2>l9 gosub report_heading
            print (printer_dev)pline$
            l=l+1

        else

rem --- Print Line Types 'S' & 'N'

            if pos(linetype$="SN")<>0

                if l+2>l9 gosub report_heading
                print (printer_dev)pline$,  @(o[2]),itemnum$(1,itemlen),
:                                           @(o[3]),ivm01a.item_desc$(1,27),
:                                           @(o[4]),unitmeas$,
:                                           @(o[5]),datereq$,
:                                           @(o[6]),qtyord$,
:                                           @(o[7]),qtyinqa$,
:                                           @(o[8]),qtyrec$,
:                                           @(o[9]),baldue$,
:                                           @(o[10]),unitcost$,
:                                           @(o[11]),extension$
                l=l+1

dropship: rem --- Print drop ship info if applicable

                if dropship$<>"Y" or ar$<>"N"
                
                    dim custinfo$(321),shipinfo$(173),custaddr$(120),shipaddr$(120)
                    custname$="Not On File"
                    shipname$="Not On File"
                    find record (arm01_dev,key=poe12a.firm_id$+poe12a.customer_id$,dom=brnch3) arm01a$
                    custname$=arm01a.customer_name$
                    custaddr$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+
:                               arm01a.city$+arm01a.state_code$+arm01a.zip_code$
                    call pgmdir$+"adc_address.aon",custaddr$,24,4,9,30

brnch3:

                    find record (arm03_dev,key=poe12a.firm_id$+poe12a.customer_id$+poe12a.shipto_no$,dom=brnch4) arm03a$
                    shipname$=arm03a.name$
                    shipaddr$=arm03a.addr_line_1$+arm03a.addr_line_2$+arm03a.addr_line_3$+
:                               arm03a.city$+arm03a.state_code$+arm03a.zip_code$
                    call pgmdir$+"adc_address.aon",shipaddr$,24,4,9,30

brnch4: rem --- Use Shipto address info if available else, use cust addr info

                    dropaddr$=custaddr$
                    dropname$=custname$
                    if shipaddr$<>fill(120) dropaddr$=shipaddr$,dropname$=shipname$
                    if l+6>l9 gosub report_heading
                    print (printer_dev) @(o[2]),"Drop Ship To Customer",
:                                       @(o[3]+1),fnmask$(poe12a.customer_id$,customask$),
:                                       "    Order ",poe12a.order_no$," ",poe12a.line_no$

                    print (printer_dev) @(o[3]-4),"Name",
:                                       @(o[3]+1),dropname$

                    print (printer_dev) @(o[3]-7),"Address",
:                                       @(o[3]+1),dropaddr$(1,30)

                    print (printer_dev) @(o[3]+1),dropaddr$(31,30)
                    print (printer_dev) @(o[3]+1),dropaddr$(61,30)
                    print (printer_dev) @(o[3]+1),dropaddr$(91,30)
                    l=l+6

                endif

            endif
            
        endif

rem --- Get next detail record to print

        potot=potot+extension
        grandtot=grandtot+extension
        extension=0
        extension$=""

    wend

rem --- Done printing detail

    return

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(0),"From Vendor: ",vendf$," ",vendfname$(1,20),
:                       @(fncenter(whsepagehead$,width)),whsepagehead$,
:                       @(104),"From Purchase Order: ",pof$

    print (printer_dev) @(2),"To Vendor: ",vendt$," ",vendtname$(1,20),
:                       @(106),"To Purchase Order: ",pot$
    print (printer_dev)""
    print (printer_dev) @(o[5]),"Date",
:                       @(o[6]+m2-9),"Quantity",
:                       @(o[7]+m2-9),"Quantity",
:                       @(o[8]+m2-9),"Quantity",
:                       @(o[9]+m2-9),"Balance",
:                       @(o[10]+m3-5),"Unit"

    print (printer_dev) @(o[0]),"Seq",
:                       @(o[1]),"Wh",
:                       @(o[2]),"Item",
:                       @(o[3]),"Description",
:                       @(o[4]),"UM",
:                       @(o[5]),"Required",
:                       @(o[6]+m2-9),"Ordered",
:                       @(o[7]+m2-9),"In QA",
:                       @(o[8]+m2-9),"Received",
:                       @(o[9]+m2-9),"Due",
:                       @(o[10]+m3-4),"Cost",
:                       @(o[11]+m1-10),"Extension"

    print (printer_dev)""
    l=l+6
    return

assignheads: rem --- Assign headings variables

    if vendfrom$=fill(6) vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendthru$=fill(6) vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    if pofrom$=fill(7) pof$="First" else pof$=pofrom$
    if pothru$=fill(7) pot$="Last" else pot$=pothru$
    if whse$="" whsepagehead$="For All Warehouses" else whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)
    return

testbreaks: rem --- Test for Breaks

    if poe02a.po_no$=ponum$
        if printptot$="Y" gosub pototals
        gosub newpo
    endif
    return

newpo: rem --- New PO

    potot=0
    ponum$=poe02a.po_no$
    printptot$="Y"
    vendor$=poe02a.vendor_id$
    termsdesc$="Not On File"
    vendname$="Not On File"
    find record (apm01_dev,key=firm_id$+vendor$,dom=brnch5) apm01a$
    vendname$=apm01a.vendor_name$
    contact$=apm01a.contact_name$
    phone$=fnmask$(apm01a.phone_no$,"(###) ###-####")

brnch5:

    find record (apm10_dev,key=firm_id$+"C"+poe02a.terms_code$,dom=brnch6) apm10c$
    termsdesc$=apm10c.code_desc$(6,18)

brnch6:

    if l+5>l9 gosub report_heading
    dim dateord$(8),dateprom$(8)
    if poe02a.ord_date$<>fill(6) dateord$=fndate$(poe02a.ord_date$)
    if poe02a.promise_date$<>fill(6) dateprom$=fndate$(poe02a.promise_date$)
    print (printer_dev) @(0),"PO#: ",ponum$,
:                       @(14),"Ordered ",dateord$,
:                       @(33),"Vendor ",fnmask$(vendor$(1,vendlen),vendomask$)," ",vendname$,
:                       @(74),"Contact ",contact$,
:                       @(104),"Ack By ",poe02a.acknowledge$
    print (printer_dev) @(13),"Promised ",dateprom$,
:                       @(66),"Phone ",phone$,
:                       @(105),"Terms ",poe02a.terms_code$," ",termsdesc$
    print (printer_dev)""
    l=l+3
    return

pototals: rem --- Print Purchase Order total

    if l+2>l9 gosub report_heading
    print (printer_dev) @(o[11]-23),"Total For PO # ",ponum$,
:                       @(o[11]),potot:m1$
    print (printer_dev)""
    let l=l+2
    return

rem --- Calc extension for S, N and O types
calc_extension:

    if pos(linetype$="SNO")<>0
        let qty=poe12a.qty_ordered-poe12a.qty_received
        if linetype$="O" qty=1
        precision 2
        let extension=poe12a.unit_cost*qty,extension$=str(extension:m1$)
        precision ivprecision
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
