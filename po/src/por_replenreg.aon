rem --- PO Replenishment Report
rem --- Program por_replen.aon (por_fa)
rem --- Adapted from the original single-column DocOut version to use Jasper report

rem --- AddonSoftware
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    setesc std_error
    seterr std_error

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

    use ::ado_rptControl.src::ReportControl
    use ::ado_func.src::func
    use ::ado_util.src::util
    use ::sys/prog/bao_utilities.bbj::BarUtils

    declare BBJasperReport BBjReport!
    
    params! = Option!.getOptionMap()
        
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 200; rem keep it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 100

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$

rem --- Assign form input values to local variables

    whse_detail$=option!.getOptionData("WHSE_DETAIL")
    sugg_itemsonly$=option!.getOptionData("SUGG_ITEMSONLY")

rem --- Open files

    num_files=6
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="POE_ORDHDR",   open_opts$[1]="OTA"
    open_tables$[2]="POE_ORDDET",   open_opts$[2]="OTA"
    open_tables$[3]="POE_ORDTOT",   open_opts$[3]="OTA"
    open_tables$[4]="POE_REPSEL",   open_opts$[4]="OTA"
    open_tables$[5]="POE_REPSURP",  open_opts$[5]="OTA"
    open_tables$[6]="POE_REPXREF",  open_opts$[6]="OTA"

    gosub open_tables

rem --- Close files after ensuring they exist

    num_files=6
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="POE_ORDHDR",   open_opts$[1]="CX"
    open_tables$[2]="POE_ORDDET",   open_opts$[2]="CX"
    open_tables$[3]="POE_ORDTOT",   open_opts$[3]="CX"
    open_tables$[4]="POE_REPSEL",   open_opts$[4]="CX"
    open_tables$[5]="POE_REPSURP",  open_opts$[5]="CX"
    open_tables$[6]="POE_REPXREF",  open_opts$[6]="CX"

    gosub open_tables

rem --- Retrieve parameter records

rem --- Masks

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vend_mask$,0,vendorLen
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",amount_mask$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",cost_mask$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",units_mask$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","I","",item_mask$,0,itemLen
    weight_mask$="####0.00-"
    
rem --- Make Document Archive Record and Get ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=rd_alias_id$
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$="DOC_ID-NOREPRINT"
    gosub document_whse
    rd_archive_action$=""

rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)

rem --- Other params

    rem --- Report params
    params!.put("BARISTA_WD",dir(""))  
    params!.put("REPORT_NAME",sysinfo.task_desc$) 
    params!.put("FIRM_ID",firm_id$)
    params!.put("FIRM_NAME",firm_name$)
    params!.put("WHSE_DETAIL",whse_detail$)
    params!.put("SUGG_ITEMSONLY",sugg_itemsonly$)

    rem --- Mask params
    params!.put("AMOUNT_MASK",amount_mask$)
    params!.put("AMOUNT_MASK_PATTERN",fngetPattern$(amount_mask$))
    params!.put("COST_MASK",cost_mask$)
    params!.put("ITEM_MASK",item_mask$)
    params!.put("UNITS_MASK",units_mask$)
    params!.put("UNITS_MASK_PATTERN",fngetPattern$(units_mask$))
    params!.put("VEND_MASK",vend_mask$)
    params!.put("WEIGHT_MASK",weight_mask$)
    params!.put("WEIGHT_MASK_PATTERN",fngetPattern$(weight_mask$))
    params!.put("ITEM_LEN",str(itemLen:"#0"))
    params!.put("VENDOR_LEN",str(vendorLen:"#0"))

    rem --- Translation params
    params!.put("AON_CYCLE_DAYS",CVS(Translate!.getTranslation("AON_CYCLE_DAYS:_"),2))
    params!.put("AON_D_DOLLARS",Translate!.getTranslation("AON_D_DOLLARS"))
    params!.put("AON_FIRST",Translate!.getTranslation("AON_FIRST"))
    params!.put("AON_LAST",Translate!.getTranslation("AON_LAST"))
    params!.put("AON_NEXT_REVIEW",cvs(Translate!.getTranslation("AON_NEXT_REVIEW:_"),2))
    params!.put("AON_N_NONE",Translate!.getTranslation("AON_N_NONE"))
    params!.put("AON_NONE",Translate!.getTranslation("AON_NONE"))
    params!.put("AON_PRIOR_REVIEW",cvs(Translate!.getTranslation("AON_PRIOR_REVIEW:_"),2))
    params!.put("AON_PRODUCT",cvs(Translate!.getTranslation("AON_PRODUCT:_"),2))
    params!.put("AON_TARGET_DOLLARS",cvs(Translate!.getTranslation("AON_TARGET_DOLLARS:_"),2))
    params!.put("AON_TARGET_TYPE",cvs(Translate!.getTranslation("AON_TARGET_TYPE:_"),2))
    params!.put("AON_TARGET_UNITS",cvs(Translate!.getTranslation("AON_TARGET_UNITS:_"),2))
    params!.put("AON_TARGET_WEIGHT",cvs(Translate!.getTranslation("AON_TARGET_WEIGHT:_"),2))
    params!.put("AON_THROUGH_LAST_DATE",Translate!.getTranslation("AON_THROUGH_LAST_DATE"))
    params!.put("AON_THROUGH_REVIEW_DATE",cvs(Translate!.getTranslation("AON_THROUGH_REVIEW_DATE:_"),2))
    params!.put("AON_U_UNITS",Translate!.getTranslation("AON_U_UNITS"))
    params!.put("AON_W_WEIGHT",Translate!.getTranslation("AON_W_WEIGHT"))

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "POReplenishment"
    repTitle$=reportBaseName$
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

    declare BBJasperReport report!
    
rem --- Fill Report

    report! = BarUtils.getBBJasperReport(filename$)
    report!.putParams(params!)
    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)
    rc=report!.fill(1)
    if rc<>BBJasperReport.getSUCCESS() then goto close_win

rem --- Show Report
    
    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path
    
    declare BBJasperViewerWindow viewerWindow!
    viewerWindow! = new BBJasperViewerWindow(report!,50,50,screen_width,screen_height,repTitle$,$00000093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)
    viewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    savMenuItem! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_ITEM_NAME())
    savMenuItem!.setCallback(BBjMenuItem.ON_POPUP_ITEM_SELECT,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")
    
    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)
        
    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
    if bbjWindow!=null() then goto close_win
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win",err=*next)

rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_doc_path$=dsk("")+dir("")
        rd_doc_path$=BBjAPI().getFileSystem().resolvePath(util.resolvePathStbls(stbl("+DOC_DIR_PDF",err=*next)),err=*next)+"/"
        mkdir rd_doc_path$,err=*next
    endif

    return

OnSaveMenuButton:
rem --- save save and display confirmation dialog

    show_save_dlg$="YES"
 
exportToPDF:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_name$=repTitle$+".pdf"
        rd_doc_ext$="PDF"
        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif

    if show_save_dlg$="YES"
        msg_id$="DOC_OUTPUT_COMP"
        gosub disp_message
        show_save_dlg$=""
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub exportToPDF

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

close_win:rem --- Viewer Window Closed
    viewerWindow!.destroy(err=*next)
    rdForm!.destroy(err=*next)
    if tcb(13) then exit
    release

connect_err:rem --- Connection Error

    declare java.lang.Exception Exception!
    Exception! = bbjapi().getLastException()
    if Exception! = null() then 
       x = msgbox(errmes(-1),16,"Connection Failed")
    else
       x = msgbox(Exception!.getLocalizedMessage(),16,"Connection Failed")
    endif

    release

open_tables: rem --- Call open table routine    

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],rd_table_chans$[all],open_batch,open_status$
    
    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
        status=912
        goto std_exit
    endif
    
    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:      else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fngetPattern$: Build iReports 'Pattern' from Addon Mask
    def fngetPattern$(q$)
        q1$=q$
        if len(q$)>0
            if pos("-"=q$)
                q1=pos("-"=q$)
                if q1=len(q$)
                    q1$=q$(1,len(q$)-1)+";"+q$; rem Has negatives with minus at the end =>> ##0.00;##0.00-
                else
                    q1$=q$(2,len(q$)-1)+";"+q$; rem Has negatives with minus at the front =>> ##0.00;-##0.00
                endif
            endif
            if pos("CR"=q$)=len(q$)-1
                q1$=q$(1,pos("CR"=q$)-1)+";"+q$
            endif
            if q$(1,1)="(" and q$(len(q$),1)=")"
                q1$=q$(2,len(q$)-2)+";"+q$
            endif
        endif
        return q1$
    fnend   

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end