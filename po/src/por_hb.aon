rem --- Requisitions By Item Report (Print Overlay)
rem --- Program por_hb v8.0.0 17Jul2007 (por_hb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:47:59)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fname$ (Line 0251)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist c0$(1),c1$(1)
rem --- ivm01a: iolist *,x1$(1)
rem --- ivm02a: iolist *,*,*,*,qtyonorder
rem --- ivm10c: iolist x0$
rem --- poe11a: iolist b0$(1),b1$(1),b2$(1),b3$(1),b4$(1),b5$,b6$,b[all]
rem --- pom02a: iolist s0$(1),s1$(1)

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)
rem --- pow14a: Channel reference (Line 0191)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="ivm-01"
    files$[4]="ivm-02"
    files$[5]="ivm-10"
    files$[6]="poe-11"
    files$[7]="pom-02"
    files$[8]="pow-14"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm10_dev=channels[5]
    poe11_dev=channels[6]
    pom02_dev=channels[7]
    pow14_dev=channels[8]

rem --- Dimension string templates

    dim apm01a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm10a$:templates$[5],poe11a$:templates$[6],pom02a$:templates$[7],
:       pow14a$:templates$[8]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    whsefrom$=fnget_fld_data$(table$,"beg_warehouse")
    whsethru$=fnget_fld_data$(table$,"end_warehouse")
    itemfrom$=fnget_fld_data$(table$,"beg_item")
    itemthru$=fnget_fld_data$(table$,"end_item")
    reqfrom$=fnget_fld_data$(table$,"beg_req")
    reqthru$=fnget_fld_data$(table$,"end_req")
    vendfrom$=fnget_fld_data$(table$,"beg_vendor")
    vendthru$=fnget_fld_data$(table$,"end_vendor")
    whichdate$=fnget_fld_data$(table$,"which_date")
    datefrom$=fnget_fld_data$(table$,"beg_date")
    datethru$=fnget_fld_data$(table$,"end_date")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8]
    grandtot=0
    printwtot$="N"
    dim itemnum$(20),itemdesc$(60),whsename$(24)

rem --- Headings and print positions

    headings=2
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
positions:
    o[1]=o[0]+5
    o[2]=o[1]+8
    o[3]=o[2]+4
    o[4]=o[3]+7
    o[5]=o[4]+25
    o[6]=o[5]+3
    o[7]=o[6]+9
    o[8]=o[7]+9
    o[9]=o[8]+9
    o[10]=o[9]+m5+1
    o[11]=o[10]+m2+1
    o[12]=o[11]+m3+1
    o[13]=o[12]+m1+1
rem if o[13]+11<width goto l950
    if o[13]+11<width goto pos_files
    o[13]=width-m2
    o[12]=o[13]-m1-1
    o[11]=o[12]-m3
    o[10]=o[11]-m2
    o[9]=o[10]-m5

rem l950: rem --- Position files
pos_files: rem --- Position files

rem call pgmdir$+"adc_progress.aon","N","","","Printing","",14,0,1,meter_num,status
    call pgmdir$+"adc_progress.aon","N","","","","",0,0,1,meter_num,status

rem --- Init Sort File

    if whsefrom$="" firstwhse$=fill(2) else firstwhse$=whsefrom$
    read (pow14_dev,key=firm_id$+firstwhse$+itemfrom$+reqfrom$,dom=*next)
readsort:
    k$=key(pow14_dev,end=done)
    if k$(1,2)<>firm_id$ goto done
    sortkey$=firm_id$+k$(35,6)+k$(25,10)
    read (pow14_dev,key=k$)

rem --- Find corresponding detail line

    dim b0$(18),b1$(48),b2$(32),b3$(22),b4$(40),b[12]
    find record (poe11_dev,key=sortkey$,dom=*next) poe11a$
    if b0$<>sortkey$ goto nextsort

rem --- Test Req Detail ranges

    if b3$<>k$(3,22) goto nextsort
    if whsefrom$<>"" and b3$(1,2)<whsefrom$ goto nextsort
    if whsethru$<>"" and b3$(1,2)>whsethru$ goto nextsort
    if itemfrom$<>fill(20) and b3$(3,20)<itemfrom$ goto nextsort
    if itemthru$<>fill(20) and b3$(3,20)>itemthru$ goto nextsort
    if reqfrom$<>fill(7) and b0$(9,7)<reqfrom$ goto nextsort
    if reqthru$<>fill(7) and b0$(9,7)>reqthru$ goto nextsort
    if vendfrom$<>fill(6) and b0$(3,6)<vendfrom$ goto nextsort
    if vendthru$<>fill(6) and b0$(3,6)>vendthru$ goto nextsort
    gosub gettestdate_detail
    if datefrom$<>"" and testdated$<datefrom$ goto nextsort
    if datethru$<>"" and testdated$>datethru$ goto nextsort

rem --- Get Line Type

    dim s0$(4),s1$(32)
    linetype$="N"
    find record (pom02_dev,key=b0$(1,2)+b1$(1,2),dom=*next) pom02a$
    linetype$=s1$(21,1)
    if linetype$<>"S" goto nextsort

rem --- Test breaks; print line

rem call pgmdir$+"adc_progress.aon","S","","","",fnmask$(b0$(3,vendlen),vendomask$)+" "+b0$(9,7),0,0,1,meter_num,status
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    gosub testbreaks
    gosub printdetail

nextsort: rem --- Accumulate totals; then get next sort file record

    qtyreqtot=qtyreqtot+reqqty
    itemtot=itemtot+extension
    whsetot=whsetot+extension
    grandtot=grandtot+extension
    extension=0
    extension$=""
    reqqty=0
    reqqty$=""
    goto readsort

done: rem --- All Done

    if l+2>l9 gosub report_heading
    gosub itemtotals
    gosub whsetotals
    print (printer_dev) @(o[1]),"Total For Report",
    :                   @(o[12]),grandtot:m1$
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    itemnum$=b3$(3,20)
    unitmeas$=b1$(22,2)
    if b1$(3,6)<>fill(6) datereq$=fndate$(b1$(3,6))
    if b1$(9,6)<>fill(6) dateprom$=fndate$(b1$(9,6))
    if b1$(15,6)<>fill(6) notb4date$=fndate$(b1$(15,6))
    convfact$=str(b[0]:m5$)
    reqqty=b[2]
    reqqty$=str(reqqty:m2$)
    unitcost$=str(b[1]:m3$)
    reqnum$=b0$(9,7)
    vendor$=b0$(3,6)

rem --- Get vendor's name

    dim c1$(195)
    vendname$="Not On File"+fill(19)
rem find record (apm01_dev,key=b0$(1,8),dom=l4260) apm01a$
    find record (apm01_dev,key=b0$(1,8),dom=get_ext) apm01a$
    vendname$=c1$(1,30)

rem l4260: rem --- Get extension
get_ext: rem --- Get extension

    gosub calc_extension

rem --- Print detail line

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[1]),reqnum$,
    :                   @(o[2]),b0$(16,3),
    :                   @(o[3]),fnmask$(vendor$(1,vendlen),vendomask$),
    :                   @(o[4]),vendname$(1,24),
    :                   @(o[5]),unitmeas$,
    :                   @(o[6]),datereq$,
    :                   @(o[7]),dateprom$,
    :                   @(o[8]),notb4date$,
    :                   @(o[9]),convfact$,
    :                   @(o[10]),reqqty$,
    :                   @(o[11]),unitcost$,
    :                   @(o[12]),extension$
    l=l+1
    return

report_heading: rem --- Report Heading

    l=headings+1
    gosub assignheads
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(0),"From Vendor: ",vendf$," ",vendfname$(1,20),
    :                   @(42),"From Item: ",itemf$,
    :                   @(75),"From Requisition: ",reqf$,
    :                   @(117-len(datetype$)),"From ",datetype$,": ",datef$
    print (printer_dev) @(2),"To Vendor: ",vendt$," ",vendtname$(1,20),
    :                   @(44),"To Item: ",itemt$,
    :                   @(77),"To Requisition: ",reqt$,
    :                   @(119-len(datetype$)),"To ",datetype$,": ",datet$
    print (printer_dev) ""
    print (printer_dev) @(o[6]),"Date",
    :                   @(o[7]),"Date",
    :                   @(o[8]),"Not",
    :                   @(o[9]+m5-7),"Conv",
    :                   @(o[10]+m2-9),"Quantity",
    :                   @(o[11]+m3-5),"Unit",
    :                   @(o[13]+m2-9),"Quantity"
    print (printer_dev) @(o[0]),"Item",
    :                   @(o[1]),"Req #",
    :                   @(o[2]),"Seq",
    :                   @(o[3]),"Vendor",
    :                   @(o[5]),"UM",
    :                   @(o[6]),"Required",
    :                   @(o[7]),"Promised",
    :                   @(o[8]),"Before",
    :                   @(o[9]+m5-7),"Factor",
    :                   @(o[10]+m2-9),"Req'd",
    :                   @(o[11]+m3-5),"Cost",
    :                   @(o[12]+m1-10),"Extension",
    :                   @(o[13]+m2-9),"On Order"
    print (printer_dev)""
    l=l+6
    return

assignheads: rem --- Assign headings variables

    if vendfrom$=fill(6) vendf$="First" else vendf$=vendfrom$
    if vendthru$=fill(6) vendt$="Last" else vendt$=vendthru$
    if itemfrom$=fill(20) itemf$="First" else itemf$=itemfrom$
    if itemthru$=fill(20) itemt$="Last" else itemt$=itemthru$
    if reqfrom$=fill(7) reqf$="First" else reqf$=reqfrom$
    if reqthru$=fill(7) reqt$="Last" else reqt$=reqthru$
    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
    headings$[1]=headings$[1](1,len(sysinfo.task_desc$))+" For Warehouse "+whse$+" "+cvs(whsename$,2)
    return

gettestdate_detail: rem --- Determine date to use when testing range in detail

rem on pos(whichdate$="OPRD") goto ordr_d,ordr_d,prom_d,reqd_d,notb4_d
    action=pos(whichdate$="OPRD")
    date_ordered=1
    date_promised=2
    date_required=3
    date_dont_del_before=4

    switch action
        case date_ordered
rem ordr_d:
rem goto l5740
            break
        case date_promised
rem prom_d:
            testdated$=b1$(9,6)
rem goto l5740
            break
        case date_required
rem reqd_d:
            testdated$=b1$(3,6)
rem goto l5740
            break
        case date_dont_del_before
rem notb4_d:
            testdated$=b1$(15,6)
rem goto l5740
            break;
        case default
            break;
    swend
rem l5740:
    return

testbreaks: rem --- Test for Breaks

    if b3$(1,2)=whse$ 
rem goto testitem
        if b3$(3,20)=itemnum$ return
        gosub itemtotals
        gosub newitem
        return
    endif

    if printitot$="Y" gosub itemtotals
    if printwtot$="Y" gosub whsetotals
    gosub newwhse
    gosub newitem
rem goto l6095
    return

rem testitem:
rem if b3$(3,20)=itemnum$ goto l6095
rem if b3$(3,20)=itemnum$ return
rem gosub itemtotals
rem gosub newitem
rem l6095:
rem return

newwhse: rem --- New Warehouse

    dim c0$(160)
    whsetot=0
    whsename$="Not On File"
    whse$=b3$(1,2)
    printwtot$="Y"
    printitot$="N"
rem find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=l6170) ivm10c$
    find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=report_heading) ivm10c$
    whsename$=c0$(6,24)
rem l6170:
    gosub report_heading
rem return

newitem: rem --- New Item

    itemtot=0
    qtyreqtot=0
    itemnum$=b3$(3,20)
    printitot$="Y"
    dim itemdesc$(60),x1$(60)
    itemdesc$(1)="Not On File"
rem find record (ivm01_dev,key=firm_id$+b3$(3,20),dom=l6370) ivm01a$
    find record (ivm01_dev,key=firm_id$+b3$(3,20),dom=brnch1) ivm01a$
    itemdesc$(1)=fnitem$(x1$,desclen[1],desclen[2],desclen[3])
rem l6370:
brnch1:
    qtyonorder=0
    find record (ivm02_dev,key=firm_id$+b3$,dom=*next) ivm02a$
    if l+3>l9 gosub report_heading
    print (printer_dev) @(0),itemnum$(1,itemlen)," ",itemdesc$,
    :                   @(o[13]),qtyonorder:m2$
    l=l+1
    return

whsetotals: rem --- Print Warehouse total

    if l+2>l9 gosub report_heading
    print (printer_dev) @(o[1]),"Total For Warehouse ",whse$," ",whsename$,
    :                   @(o[12]),whsetot:m1$
    print (printer_dev)""
    l=l+2
    return

itemtotals: rem --- Print Item total

    if l+2>l9 gosub report_heading
    print (printer_dev) @(o[1]),"Total For Item ",itemnum$(1,itemlen)," ",itemdesc$(1,22),
    :                   @(o[10]),qtyreqtot:m2$,
    :                   @(o[12]),itemtot:m1$
    print (printer_dev)""
    let l=l+2
    return
calc_extension: rem --- Calc extension

    precision 2
    let extension=b[1]*reqqty,extension$=str(extension:m1$)
    precision ivprecision
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem comment unused functions

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
rem def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

rem def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

rem def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
rem def fnyy$(q$)=q$(3,2)
rem def fnclock$(q$)=date(0:"%hz:%mz %p")
rem def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

rem def fnbasename$(q$,q0$)
rem     q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
rem     if q then q$=q$(q+1)
rem     if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
rem return q$

rem --- fnglobal: Return numeric value of passed stbl variable

rem def fnglobal(q$,q1)
rem     q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
rem     return q1
rem fnend

rem --- fnglobal$: Return string value of passed STBL variable

rem  def fnglobal$(q$,q1$)
rem     q1$=stbl(q$,err=*next)
rem     return q1$
rem  fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
