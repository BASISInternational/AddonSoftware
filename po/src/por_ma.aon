rem --- Purchase Order Cash Requirements Report
rem --- Program por_ma v8.0.0 06Jul2007 (por_ma)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:31:24)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
rem 18Sep96 JAL: Period/Days description should be consistent (1180)
rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0352)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0124)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0131)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0148)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0149)
rem --- v7.x Administrator reference ["sys-01"] (Line 0161)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0170)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0175)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0179)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0180)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0182)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0183)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0209)
rem --- BBx reference ["syc_ra.bbx"] (Line 0209)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0232)
rem --- BBx reference ["syc_rs.bbx"] (Line 0232)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0259)
rem --- BBx reference ["syc_rs.bbx"] (Line 0259)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0297)
rem --- BBx reference ["syc_rs.bbx"] (Line 0297)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0299)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0308)
rem --- BBx reference ["syc_rs.bbx"] (Line 0308)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0335)
rem --- BBx reference ["syc_rs.bbx"] (Line 0335)
rem --- BBx reference ["por_mb.bbx"] (Line 0367)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0378)
rem --- BBx reference ["syc_rs.bbx"] (Line 0378)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0379)
rem --- BBx reference ["syc_rs.bbx"] (Line 0379)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0386)
rem --- BBx reference ["syc_rs.bbx"] (Line 0386)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- gls01a: iolist *,g1$,g2$,g3$
rem --- ivm10c: iolist x1$(1)
rem --- pos01a: iolist p0$,p1$,p2$,p3$,p4$

rem --- The following channel references have been identified:

rem --- apm01a: Channel reference (Line 0247)

rem --------------------------------------------------------------------------------
rem --- apm10a: Channel reference (Line 0246)
rem --- aps01a: (Generated by CodePort)
rem --- ivs01a: (Generated by CodePort)
rem --- poe02a: Channel reference (Line 0243)
rem --- poe12a: Channel reference (Line 0242)
rem --- pom02a: Channel reference (Line 0241)
rem --- sys01a: Channel reference (Line 0240)

rem --- 19Sep94 Caj: When run by 'P'eriod, date headers were wrong (485)
rem --- 20Nov96 Caj: Allow for entry of single character whses (ie '4 ')(1475,1480,1490,1500,5070)
rem --- 03Jan97 Caj: Allow <F1> for All Warehouses (1410,1430,1435,1440,1445,1465,5060,5070)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="apm-10"
    files$[4]="ivm-10"
    files$[5]="poe-02"
    files$[6]="poe-12"
    files$[7]="pom-02"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    apm10_dev=channels[3]
    ivm10_dev=channels[4]
    poe02_dev=channels[5]
    poe12_dev=channels[6]
    pom02_dev=channels[7]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm10a$:templates$[3],ivm10a$:templates$[4],
:       poe02a$:templates$[5],poe12a$:templates$[6],pom02a$:templates$[7]

rem --- Retrieve miscellaneous templates

    files=5,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="pos-01A"
    ids$[5]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       pos01a$:templates$[4],sys01a$:templates$[5]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (ads01_dev,key=pos01a_key$,err=std_missing_params) pos01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=7
    dim files$[files],options$[files],channels[files]
    files$[1]="apm-01"
    files$[2]="apm-10"
    files$[3]="ivm-10"
    files$[4]="poe-02"
    files$[5]="poe-12"
    files$[6]="pom-02"
    files$[7]="sys-01"
    call pgmdir$+"adc_fileopen.aon",1,1,7,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[1]
    apm10_dev=channels[2]
    ivm10_dev=channels[3]
    poe02_dev=channels[4]
    poe12_dev=channels[5]
    pom02_dev=channels[6]
    sys01_dev=channels[7]

rem --- Parameters

    dim info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="PO"
    when$=sysinfo.system_date$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) pos01a$
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    vendlen=num(u2$(1,2))
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    ivprecision=num(i2$(5,1))
    itemlen=num(i2$(1,2))
    totalperiods=num(g2$(1,2))
    for x=1 to 13
        perenddate$=perenddate$+fndate$(g3$(2*x-1,1),g3$)+fndate$(g3$(2*x,1),g3$)
    next x

rem --- Init Data

    precision ivprecision
    dim whsename$(24)
    whse$=i3$(6,2)
    perordays$="P"
    pord_desc$="GL Period"
    datefrom$=f0$(18,6)
    summordet$="D"
    sord_desc$="Detail"
    num_days=30
    call pgmdir$+"adc_sizemask.aon",m1$,m1,9,12

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    goto flow_control

l1000: rem --- Beginning Date

    v0$="D"
    v1$="6N"
    v2$=datefrom$
    v3$=""
    v4$="Starting Date For First Time Period"
    v0=6
    v1=40
    v2=3
    control_id=3000
    gosub std_input
    on v3 goto l1050,l1040,l1070,l1000,flow_control,l1050,flow_control
l1040:
    v$=""
l1050:
    if v$="" goto l1000
    datefrom$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3000,fndate$(datefrom$),0,"",status
l1070:
    goto flow_control

l1100: rem --- Use GL period or user-defined # of days to calc?

    v0$="S"
    v1$="C"
    v2$=perordays$
    v3$="PD"
    v4$="P=G/L Period  D=NumberOf Days"
    v0=1
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1140,l1140,l1280,l1140,flow_control,l1140,flow_control
l1140:
    if v$="" goto l1100
    perordays$=v$
    on pos(perordays$="PD") goto l1100,l1180,l1200
l1180:
    pord_desc$="GL Period"
    goto l1280
l1200:
    pord_desc$="Custom Number of Days"
l1280:
    call pgmdir$+"syc_rs.bbx","",my_context,13001,pord_desc$,0,"",status
    goto flow_control

l1300: rem --- Number of days in user-defined period

    if perordays$="P" goto flow_control
    v0$="N"
    v1$="R"
    v2$=str(num_days)
    v3$="###"
    v4$="Number Of Days In Each Time Period"
    v0=3
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l1340,l1340,l1390,l1340,flow_control,l1340,flow_control
l1340:
    if v<1 goto l1300
    num_days=v
l1390:
    goto flow_control

l1400: rem --- Warehouse

    v0$="S"
    v1$=""
    v2$=whse$
    v3$=""
    v4$="Enter A Valid Warehouse ID  (<F1>=All/<F3>=Lookup)"
    v0=2
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1465,l1435,l1590,l1450,flow_control,l1465,flow_control
l1435:
    if v3=1 v$=""
    if v$="" gosub clear_text; let whse$=""; call pgmdir$+"syc_rs.bbx","",my_context,13003,"All Warehouses",0,"",status; goto flow_control
l1450:
    call pgmdir$+"ivc_lk.bbx",3,v1,v2,v$
    if v$="" goto l1400
l1465:
    if v$="" goto l1435
    dim x1$(160)
    x1$(1)=firm_id$+"C"+v$
    find record (ivm10_dev,key=x1$(1,5),dom=l1400) ivm10c$
    whse$=x1$(4,2)
    whsename$(1)=x1$(6,24)
    call pgmdir$+"syc_rs.bbx","",my_context,3003,whse$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13003,whsename$(1,24),0,"",status
l1590:
    goto flow_control

l1600: rem --- Summary or Detail

    v0$="S"
    v1$="C"
    v2$=summordet$
    v3$="SD"
    v4$="S=Summary  D=Detail"
    v0=1
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l1640,l1640,l1780,l1640,flow_control,l1640,flow_control
l1640:
    if v$="" goto l1600
    summordet$=v$
    on pos(summordet$="SD") goto l1600,l1680,l1700
l1680:
    sord_desc$="Summary"
    goto l1780
l1700:
    sord_desc$="Detail"
l1780:
    call pgmdir$+"syc_rs.bbx","",my_context,13004,sord_desc$,0,"",status
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1100,l1300,l1400,l1600,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    let v0$="S",v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    if datefrom$="" datefrom$=fill(6)
    run pgmdir$+"por_mb.bbx"
display_fields:
    dim x1$(160); let x1$(1)=firm_id$+"C"+whse$
    find record (ivm10_dev,key=x1$(1,5),dom=*next) ivm10c$; let whsename$(1)=x1$(6,24)
    let control_id=3000,cid_cnt=0
l5010:
    if cid_cnt=0 disp_inp$=fndate$(datefrom$),disp_desc$=""
    if cid_cnt=1 disp_inp$=perordays$,disp_desc$=pord_desc$
    if cid_cnt=2 if perordays$="D" disp_inp$=str(num_days),disp_desc$="" else disp_inp$="",disp_desc$=""
    if cid_cnt=3 if whse$="" disp_inp$=whse$,disp_desc$="All Warehouses" else disp_inp$=whse$,disp_desc$=whsename$(1,24)
    if cid_cnt=4 disp_inp$=summordet$,disp_desc$=sord_desc$
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5010
l5050:
    let disp_inp$="",disp_desc$=""
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
