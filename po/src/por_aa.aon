rem --- Purchase Requisition Register (Input Overlay)
rem --- Program por_aa v8.0.0 06Jul2007 (por_aa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 01:57:08)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0602)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0222)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0229)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0246)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0247)
rem --- v7.x Administrator reference ["sys-01"] (Line 0253)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0276)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0298)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0304)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0305)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0307)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0342)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0362)
rem --- BBx reference ["syc_ra.bbx"] (Line 0362)
rem --- BBx reference ["poc_lb.bbx"] (Line 0382)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0391)
rem --- BBx reference ["syc_rs.bbx"] (Line 0391)
rem --- BBx reference ["poc_lb.bbx"] (Line 0410)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0420)
rem --- BBx reference ["syc_rs.bbx"] (Line 0420)
rem --- v7.x Administrator reference ["syc_lv.bbx"] (Line 0458)
rem --- BBx reference ["syc_lv.bbx"] (Line 0458)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0465)
rem --- BBx reference ["syc_rs.bbx"] (Line 0465)
rem --- v7.x Administrator reference ["syc_lv.bbx"] (Line 0485)
rem --- BBx reference ["syc_lv.bbx"] (Line 0485)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0493)
rem --- BBx reference ["syc_rs.bbx"] (Line 0493)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0533)
rem --- BBx reference ["syc_rs.bbx"] (Line 0533)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0555)
rem --- BBx reference ["syc_rs.bbx"] (Line 0555)
rem --- BBx reference ["por_ab.bbx"] (Line 0671)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0691)
rem --- BBx reference ["syc_rs.bbx"] (Line 0691)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0697)
rem --- BBx reference ["syc_rs.bbx"] (Line 0697)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0698)
rem --- BBx reference ["syc_rs.bbx"] (Line 0698)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0707)
rem --- BBx reference ["syc_rs.bbx"] (Line 0707)
rem --- vxsds7.x Administrator reference ["syc_rs.bbx"] (Line 0715)
rem --- BBx reference ["syc_rs.bbx"] (Line 0715)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0718)
rem --- BBx reference ["syc_rs.bbx"] (Line 0718)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0730)
rem --- BBx reference ["syc_rs.bbx"] (Line 0730)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0737)
rem --- BBx reference ["syc_rs.bbx"] (Line 0737)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0738)
rem --- BBx reference ["syc_rs.bbx"] (Line 0738)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0740)
rem --- BBx reference ["syc_rs.bbx"] (Line 0740)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- CLEAR statement removed [clear_text:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file poe-31 referenced (Line 0191)
rem --- Cross-reference file poe-32 referenced (Line 0192)
rem --- Cross-reference file poe-41 referenced (Line 0193)
rem --- Cross-reference file poe-42 referenced (Line 0194)
rem --- Cross-reference file poe-52 referenced (Line 0195)
rem --- Cross-reference file poe-31 referenced (Line 0283)
rem --- Cross-reference file poe-32 referenced (Line 0284)
rem --- Cross-reference file poe-41 referenced (Line 0285)
rem --- Cross-reference file poe-42 referenced (Line 0286)
rem --- Cross-reference file poe-52 referenced (Line 0287)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record poe31a replaced by index on opt-01 (Line 0209)
rem --- Cross-reference record poe32a replaced by index on opt-01 (Line 0209)
rem --- Cross-reference record poe41a replaced by index on poe-03 (Line 0210)
rem --- Cross-reference record poe42a replaced by index on poe-04 (Line 0210)
rem --- Cross-reference record poe52a replaced by index on poe-13 (Line 0210)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist b0$(1),b1$(1)
rem --- ars01a: iolist x$,p5$,p6$,x$,x$,p7$
rem --- poe01a: iolist a0$(1),a1$(1),a2$,a3$,a[all]
rem --- pos01a: iolist p0$,p1$,p2$,p3$,p4$
rem --- pow07a: iolist x0$(1)

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- arm01a: Channel reference (Line 0357)
rem --- ivm01a: Channel reference (Line 0350)
rem --- ivm02a: Channel reference (Line 0349)
rem --- ivs01a: (Generated by CodePort)
rem --- ope01a: Channel reference (Line 0353)
rem --- ope11a: Channel reference (Line 0352)
rem --- poe02a: Channel reference (Line 0344)
rem --- poe08a: Channel reference (Line 0351)
rem --- poe11a: Channel reference (Line 0342)
rem --- poe12a: Channel reference (Line 0341)
rem --- poe21a: Channel reference (Line 0340)
rem --- poe22a: Channel reference (Line 0339)
rem --- poe31a: Channel reference (Line 0338)
rem --- poe32a: Channel reference (Line 0337)
rem --- poe41a: Channel reference (Line 0336)
rem --- poe42a: Channel reference (Line 0336)
rem --- poe52a: Channel reference (Line 0335)
rem --- pom02a: Channel reference (Line 0334)
rem --- pos10a: Channel reference (Line 0333)
rem --- sfe01a: Channel reference (Line 0338)
rem --- sfe22a: Channel reference (Line 0337)
rem --- sfe32a: Channel reference (Line 0336)
rem --- sys01a: Channel reference (Line 0328)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
rem change  milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=25,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="arm-01"
    files$[4]="ivm-01"
    files$[5]="ivm-02"
    files$[6]="ope-01"
    files$[7]="ope-11"
    files$[8]="poe-01"
    files$[9]="poe-02"
    files$[10]="poe-08"
    files$[11]="poe-11"
    files$[12]="poe-12"
    files$[13]="poe-21"
    files$[14]="poe-22"
    files$[15]="poe-31"
    files$[16]="poe-32"
    files$[17]="poe-41"
    files$[18]="poe-42"
    files$[19]="poe-52"
    files$[20]="pom-02"
    files$[21]="pos-10"
    files$[22]="pow-07"
    files$[23]="sfe-01"
    files$[24]="sfe-22"
    files$[25]="sfe-32"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    arm01_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ope01_dev=channels[6]
    ope11_dev=channels[7]
    poe01_dev=channels[8]
    poe02_dev=channels[9]
    poe08_dev=channels[10]
    poe11_dev=channels[11]
    poe12_dev=channels[12]
    poe21_dev=channels[13]
    poe22_dev=channels[14]
    poe31_dev=channels[15]
    poe32_dev=channels[16]
    poe41_dev=channels[17]
    poe42_dev=channels[18]
    poe52_dev=channels[19]
    pom02_dev=channels[20]
    pos10_dev=channels[21]
    pow07_dev=channels[22]
    sfe01_dev=channels[23]
    sfe22_dev=channels[24]
    sfe32_dev=channels[25]
rem  add file_dev=arm01_dev
rem --- Dimension string templates

    dim apm01a$:templates$[2],arm01a$:templates$[3],ivm01a$:templates$[4],
:       ivm02a$:templates$[5],ope01a$:templates$[6],ope11a$:templates$[7],
:       poe01a$:templates$[8],poe02a$:templates$[9],poe08a$:templates$[10],
:       poe11a$:templates$[11],poe12a$:templates$[12],poe21a$:templates$[13],
:       poe22a$:templates$[14],poe31a$:templates$[15],poe32a$:templates$[16],
:       poe41a$:templates$[17],poe42a$:templates$[18],poe52a$:templates$[19],
:       pom02a$:templates$[20],pos10a$:templates$[21],pow07a$:templates$[22],
:       sfe01a$:templates$[23],sfe22a$:templates$[24],sfe32a$:templates$[25]

rem --- Retrieve miscellaneous templates

    files=5,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ars-01A"
    ids$[3]="ivs-01A"
    ids$[4]="pos-01A"
    ids$[5]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ars01a$:templates$[2],ivs01a$:templates$[3],
:       pos01a$:templates$[4],sys01a$:templates$[5]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
  rem add filename$=fnget_fld_data$(tables$,"file_name")
  rem add description$=fnget_fld_data$(tables$,"descript")
  rem add help$=fnget_fld_data$(tables$,"help")
  rem add writeprotect$=fnget_fld_data$(tables$,"write_protect")
  rem add recordid$=fnget_fld_data$(tables$,"record_id")
  rem add filesize$=fnget_fld_data$(tables$,"file_size")
  rem add keysize$=fnget_fld_data$(tables$,"key_size")
  rem add recordlength$=fnget_fld_data$(tables$,"record_length")
  rem add numberofrecords$=fnget_fld_data$(tables$,"number_of_records")
  rem add lastrevision1$=fnget_fld_data$(tables$,"last_revision1")
  rem add lastrevision2$=fnget_fld_data$(tables$,"last_revision2"")

    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
rem add customer_size=num(aps01a.customer_size$)
rem m0$=aps01a.customer_output$
rem m0=len(m0$)
    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
rem add customer_size=num(ars01a.customer_size$)
rem m1$=ars01a.customer_output$
rem m1=len(m1$)
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
rem add customer_size=num(ivs01a.customer_size$)
rem m2$=ivs01aivs01a.customer_output$
rem m2=len(m2$)
    pos01a_key$=firm_id$+"PO00"
    find record (ads01_dev,key=pos01a_key$,err=std_missing_params) pos01a$
rem add customer_size=num(pos01a.customer_size$)
rem m3$=pos01a.customer_output$
rem m3=len(m3$)
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$
rem add customer_size=num(sys01a.customer_size$)
rem m4$=sys01a.customer_output$
rem m4=len(m4$)

rem --- Open/Lock Files

    files=25
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="poe-01"
    files$[3]="poe-02"
    files$[4]="poe-11"
    files$[5]="poe-12"
    files$[6]="poe-21"
    files$[7]="poe-22"
    files$[8]="poe-31"
    files$[9]="poe-32"
    files$[10]="poe-41"
    files$[11]="poe-42"
    files$[12]="poe-52"
    files$[13]="pom-02"
    files$[14]="pos-10"
    files$[15]="pow-07"
    files$[16]="apm-01"
    files$[17]="ivm-01"
    files$[18]="ivm-02"
    files$[25]="poe-08"
    options$[1]="P"
    options$[15]="CL"
    call pgmdir$+"adc_fileopen.aon",1,1,18,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    poe01_dev=channels[2]
    poe02_dev=channels[3]
    poe11_dev=channels[4]
    poe12_dev=channels[5]
    poe21_dev=channels[6]
    poe22_dev=channels[7]
    poe31_dev=channels[8]
    poe32_dev=channels[9]
    poe41_dev=channels[10]
    poe42_dev=channels[11]
    poe52_dev=channels[12]
    pom02_dev=channels[13]
    pos10_dev=channels[14]
    pow07_dev=channels[15]
    apm01_dev=channels[16]
    ivm01_dev=channels[17]
    ivm02_dev=channels[18]

rem --- Parameters

    dim i[6],info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="PO"
    ap$="N"
    ar$="N"
    sf$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) pos01a$
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    vendlen=num(p2$(1,2))
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    i[0]=num(i2$(1,2))
    i[1]=num(i2$(5,1))
    i[2]=num(i2$(7,2))
    i[3]=num(i2$(9,2))
    i[4]=num(i2$(11,2))
    i[5]=num(i2$(13,2))
    i[6]=num(i2$(3,2))
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    call pgmdir$+"adc_application.aon","SF",info$[all]
    sf$=info$[20]
    call pgmdir$+"adc_application.aon","OP",info$[all]
    op$=info$[20]

rem --- Initializations

    dim a0$(15),a1$(160),a[8],b0$(8),b1$(195),x0$(25)
    begreq$=""
    endreq$=""
    sequence$="V"
    begvend$=""
    endvend$=""
    datetype$="O"
    begdate$=""
    enddate$=""
    pagebreak$="N"

rem --- Additional File Opens

    if ar$="N" goto l630
    find record (sys01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    custlen=num(p6$(1,2))
    files$[19]="arm-01"
l630:
    if sf$="Y" files$[20]="sfe-01",files$[21]="sfe-22",files$[22]="sfe-32"
    if op$="Y" files$[23]="ope-01",files$[24]="ope-11"
    call pgmdir$+"adc_fileopen.aon",1,19,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    arm01_dev=channels[19]
    sfe01_dev=channels[20]
    sfe22_dev=channels[21]
    sfe32_dev=channels[22]
    ope01_dev=channels[23]
    ope11_dev=channels[24]
    poe08_dev=channels[25]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    goto flow_control

l1000: rem --- Beginning Requisition

    v4$="Enter A Valid Requisition Number (<F1>=First/<F3>=Lookup)"
    v0$="Z"
    v1$="KCE"
    v2$=begreq$
    v3$=""
    v0=7
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1100,l1150,l1000,l1050,flow_control,l1100,flow_control
l1050:
    call pgmdir$+"poc_lb.bbx","R",v$
    if len(v$)<15 goto l1000
    v$=v$(9,7)
l1100:
    if v$="" goto l1150
    begreq$=v$
    goto l1180
l1150:
    if v3=1 v$=""
    if v$="" gosub clear_text; let begreq$=""; call pgmdir$+"syc_rs.bbx","",my_context,13000,"First",0,"",status; goto flow_control
l1180:
    gosub l5100
    goto flow_control

l1200: rem --- Ending Requisition

    v4$="Enter A Valid Requisition Number (<F1>=Last/<F3>=Lookup)"
    v0$="Z"
    v1$="KCE"
    v2$=endreq$
    v3$=""
    v0=7
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1300,l1350,flow_control,l1250,flow_control,l1300,flow_control
l1250:
    call pgmdir$+"poc_lb.bbx","R",v$
    if len(v$)<15 goto l1200
    v$=v$(9,7)
l1300:
    if v$="" goto l1350
    if begreq$<>"" if v$<begreq$ goto l1200
    endreq$=v$
    goto l1380
l1350:
    if v3=1 v$=""
    if v$="" gosub clear_text; let endreq$=""; call pgmdir$+"syc_rs.bbx","",my_context,13001,"Last",0,"",status; goto flow_control
l1380:
    gosub l5100
    goto flow_control

l1400: rem --- Print Sequence

    v4$="A=Vendor Alternate Sequence   V=Vendor Sequence   R=Requisition Sequence"
    v0$="S"
    v1$=""
    v2$=sequence$
    v3$="AVR"
    v0=1
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l1450,l1400,flow_control,l1400,flow_control,l1450,flow_control
l1450:
    if v$="" goto l1400
    sequence$=v$
    gosub l5200
    goto flow_control

l1600: rem --- Beginning vendor

    v4$="Enter A Valid Vendor Number (<F1>=First/<F3>=Lookup)"
    v0$="M"
    v1$="KCE"
    v2$=begvend$
    v3$=m0$
    v0=6
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1700,l1750,flow_control,l1650,flow_control,l1700,flow_control
l1650:
    call pgmdir$+"syc_lv.bbx",v$
l1700:
    if v$="" goto l1750
    begvend$=v$
    goto l1760
l1750:
    if v3=1 v$=""
    if v$="" gosub clear_text; let begvend$=""; call pgmdir$+"syc_rs.bbx","",my_context,13003,"First",0,"",status; goto flow_control
l1760:
    gosub l5300
    if status goto l1600
    goto flow_control

l1800: rem --- Ending vendor

    v4$="Enter A Valid Vendor Number (<F1>=Last/<F3>=Lookup)"
    v0$="M"
    v1$="KCE"
    v2$=endvend$
    v3$=m0$
    v0=6
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l1900,l1950,flow_control,l1850,flow_control,l1900,flow_control
l1850:
    call pgmdir$+"syc_lv.bbx",v$
l1900:
    if v$="" goto l1950
    if begvend$<>"" if v$<begvend$ goto l1800
    endvend$=v$
    goto l1960
l1950:
    if v3=1 v$=""
    if v$="" gosub clear_text; let endvend$=""; call pgmdir$+"syc_rs.bbx","",my_context,13004,"Last",0,"",status; goto flow_control
l1960:
    gosub l5300
    if status goto l1800
    goto flow_control

l2000: rem --- Which Date?

    v4$="O=Date Ordered  P=Date Promised  R=Date Required  D=Don't Deliver Before Date"
    v0$="S"
    v1$="C"
    v2$=datetype$
    v3$="OPRD"
    v0=1
    v1=40
    v2=8
    control_id=3005
    gosub std_input
    on v3 goto l2050,l2000,flow_control,l2000,flow_control,l2050,flow_control
l2050:
    if v$="" goto l2000
    datetype$=v$
    gosub l5400
    goto flow_control

l2200: rem --- Beginning Date

    v4$="Enter The Beginning Date To Include On The Report (<F1>=First)"
    v0$="D"
    v1$="C6N"
    v2$=begdate$
    v3$=""
    v0=6
    v1=40
    v2=9
    control_id=3006
    gosub std_input
    on v3 goto l2260,l2250,flow_control,l2200,flow_control,l2260,flow_control
l2250:
    v$=""
    if v$="" gosub clear_text; let begdate$=""; call pgmdir$+"syc_rs.bbx","",my_context,13006,"First",0,"",status; goto flow_control
l2260:
    begdate$=v$
    v4$="First"
    gosub l5500
    goto flow_control

l2400: rem --- Ending Date

    v4$="Enter The Ending Date To Include On The Report (<F1>=Last)"
    v0$="D"
    v1$="C6N"
    v2$=enddate$
    v3$=""
    v0=6
    v1=40
    v2=10
    control_id=3007
    gosub std_input
    on v3 goto l2460,l2450,flow_control,l2400,flow_control,l2460,flow_control
l2450:
    v$=""
    if v$="" gosub clear_text; let enddate$=""; call pgmdir$+"syc_rs.bbx","",my_context,13007,"Last",0,"",status; goto flow_control
l2460:
    if v$<>"" if v$<begdate$ goto l2400
    enddate$=v$
    v4$="Last"
    gosub l5500
    goto flow_control

l2600: rem --- Page break?

    v4$="Page Break Between "
    if sequence$="R" v4$=v4$+"Requisitions" else v4$=v4$+"Vendors"
    v0$="Y"
    v1$="C"
    v2$=pagebreak$
    v3$=""
    v4$=v4$+" (Y/N)?"
    v0=1
    v1=40
    v2=11
    control_id=3008
    gosub std_input
    on v3 goto l2650,l2600,flow_control,l2600,flow_control,l2650,flow_control
l2650:
    pagebreak$=v$
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l1800,l2000,l2200,l2400,l2600,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","",""," Sorting","",18,0,1,meter_num,status
    a0$(1)=firm_id$+begvend$
    if cvs(begvend$,2)<>"" a0$(9)=begreq$
    read (poe01_dev,key=a0$,dom=l4200)
    k$=keyp(poe01_dev,end=l4900)
    goto l4220

l4200: rem --- Sort requisition file

    k$=key(poe01_dev,end=l4900)
l4220:
    if pos(firm_id$=k$)<>1 goto l4900
    if endvend$<>"" if k$(3,6)>endvend$ goto l4900
    if endreq$<>"" if k$(9,7)>endreq$ goto l4900
    read record (poe01_dev,key=k$) poe01a$; rem "This Key=K$ phrase is needed
    if begreq$<>"" if a0$(9,7)<begreq$ goto l4800
    if a1$(35,1)="Y" goto l4800
    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(3,vendlen),m0$)+" "+a0$(9,7),0,0,1,meter_num,status

rem --- Does record meet selection criteria?

    if begdate$="" if enddate$="" goto l4400
    x=pos(datetype$="OPDR")
    x=11+((x-1)*6)
    if cvs(a1$(x,6),2)="" goto l4400
    if begdate$<>"" if a1$(x,6)<begdate$ goto l4800
    if enddate$<>"" if a1$(x,6)>enddate$ goto l4800

l4400: rem --- Get vendor for alpha sort

    if sequence$<>"A" goto l4500
    let b0$(1)=a0$,b1$(1)=""
    find record (apm01_dev,key=b0$,dom=*next) apm01a$

l4500: rem --- Write sort record

    let x0$(1)=firm_id$
    if sequence$="A" x0$(3)=b1$(146,10)+a0$(3)
    if sequence$="V" x0$(13)=a0$(3)
    if sequence$="R" x0$(13)=a0$(9)+a0$(3,6)
    write record (pow07_dev,key=x0$) pow07a$

l4800: rem --- Loop back for next requisition

    goto l4200

l4900: rem --- Run report overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run pgmdir$+"por_ab.bbx"

display_fields: rem --- Display Fields

    let v1=40,v2=3,v$=begreq$,v4$="First",control_id=3000
    gosub l5100
    let v2=4,v$=endreq$,v4$="Last",control_id=3001
    gosub l5100
    let v2=5
    gosub l5200
    let v2=6,v$=begvend$,v4$="First",x=80-(v1+m0+1),control_id=3003
    gosub l5300
    let v2=7,v$=endvend$,v4$="Last",control_id=3004
    gosub l5300
    let v2=8
    gosub l5400
    let v2=9,v$=begdate$,v4$="First",control_id=3006
    gosub l5500
    let v2=10,v$=enddate$,v4$="Last",control_id=3007
    gosub l5500
    call pgmdir$+"syc_rs.bbx","",my_context,3008,pagebreak$,0,"",status
    return

l5100: rem --- Display requisition

    if v$="" v$=v4$
    if v$="First" or v$="Last" call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,v$,0,"",status; goto l5190
    if v$<>"" call pgmdir$+"syc_rs.bbx","",my_context,control_id,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,"",0,"",status
l5190:
    return

l5200: rem --- Display sequence

    if sequence$="A" v4$="Vendor Alternate"
    if sequence$="V" v4$="Vendor"
    if sequence$="R" v4$="Requisition Number"
    call pgmdir$+"syc_rs.bbx","",my_context,3002,sequence$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13002,v4$+" Sequence",0,"",status
    return

l5300: rem --- Display vendor

    if v$="" goto l5350
    let b0$(1)=firm_id$+v$,b1$(1)="",status=11
    find record (apm01_dev,key=b0$,dom=l5390) apm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,fnmask$(b0$(3,vendlen),m0$),0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,b1$(1,min(x,30)),0,"",status
    goto l5380
l5350:
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,v4$,0,"",status
l5380:
    let status=0
l5390:
    return

l5400: rem --- Display type of date

    if datetype$="O" datetitle$="Date Ordered"
    if datetype$="P" datetitle$="Date Promised"
    if datetype$="R" datetitle$="Date Required"
    if datetype$="D" datetitle$="Not Before Date"
    call pgmdir$+"syc_rs.bbx","",my_context,3005,datetype$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13005,datetitle$,0,"",status
    return

l5500: rem --- Display dates

    if v$="" x$=v4$
    if v$<>"" x$=fndate$(v$)
    if v$="" call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,x$,0,"",status
    if v$<>"" call pgmdir$+"syc_rs.bbx","",my_context,control_id,x$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,"",0,"",status
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
rem subroutine 
flow_initializations:
return
rem subroutine
std_input:
return
rem subroutine
clear_text:
return