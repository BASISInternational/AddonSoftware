rem Purchase Calendar Maintenance
rem Proprietary Software. AddonSoftware
rem Program ID: pom_calendar.aon  <Feb 4, 2009>

use java.util.Calendar
use java.util.GregorianCalendar
use java.util.Locale

rem --- Functions

	def fnstr_pos(tmp0$,tmp1$,tmp0)=int((pos(tmp0$=tmp1$,tmp0)+tmp0-1)/tmp0)
	def fnstrip$(tmp0$,tmp1$)=tmp0$(1,pos(fill(50,tmp1$)=tmp0$+fill(50,tmp1$))-1)
	def fngett_attr$(att0$)=output_attr_tbl$[fnstr_pos(att0$,attr_def_tbl$,5)]
	def fngetv_attr$(att0$,att1$)=output_attr_col$[fnstr_pos(att0$,output_attr_col$[0,1],40),fnstr_pos(att1$,attr_def_col$[0,0],5)]
	def fngetc_attr$(att0,att0$)=output_attr_col$[att0,fnstr_pos(att0$,attr_def_col$,5)]

rem --- Directory STBLs

	gui_dev$=stbl("+GUI_DEVICE")
	dir_syp$=stbl("+DIR_SYP")
	dir_img$=stbl("+DIR_IMG")
	dir_sys$=stbl("+DIR_SYS")
	file_usr$=stbl("+FILE_USR"),file_usr$=stbl("+DIR_USR",err=*next)+"aon_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
	file_set$=stbl("+FILE_SET")

rem --- Misc Setup
rem --- get locale, and corresponding first day of week (not always Sunday)
rem --- also get !DATE, which contains date format, short/long month desc, and short/long day desc.
    Locale$=stbl("!LOCALE")
    Locale! = fnLocale!(Locale$)
    Calendar! = new GregorianCalendar(Locale!)
    firstDayOfWeek=Calendar!.getFirstDayOfWeek()

	dim date_text$:"default:c(32*=0),sm[12]:c(3*=0),m[12]:c(32*=0),sd[7]:c(3*=0),d[7]:c(32*=0)"
	date_text$=stbl("!DATE")

	no_columns=7

	dim columns$[1:no_columns]
		for curr_elem=firstDayOfWeek to 7
			columns$[curr_elem-firstDayOfWeek+1]=date_text.d$[curr_elem]
		next curr_elem
        if firstDayOfWeek > 1
            for curr_elem=1 to firstDayOfWeek-1
                columns$[7-firstDayOfWeek+2]=date_text.d$[curr_elem]
            next curr_elem
        endif

	num_rows=6

	dim months$[1:12]
		for curr_elem=1 to 12
			months$[curr_elem]=date_text.sm$[curr_elem]
		next curr_elem

    dim weeks$[1:num_rows]
        for curr_elem=1 to num_rows
            weeks$[curr_elem]=str(curr_elem)
        next curr_elem

	curr_mo=num(date(0:"%Mz"))
	default_mo=curr_mo

	curr_yr=num(date(0:"%Yd"))
	default_yr=curr_yr

	temp_chan=unt
	open(temp_chan)pgm(-2)
	temp_file$=fid(temp_chan)(9)
	close(temp_chan)
	TempFile!=temp_file$
	temp_file$=TempFile!.replace("\","/")
	file_base$=temp_file$(1,pos("/"=temp_file$,-1,2))

rem --- call bas_process_beg to put lic_feature info into sysinfo
    user_id$=stbl("+USER_ID")
    call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,table_chans$[all]

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
	user_id$=sysinfo.user_id$
	firm_id$=sysinfo.firm_id$
    lic_feature$=sysinfo.lic_feature$

file_opens:rem --- Open File(s)

	num_files=3
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

	open_tables$[1]=stbl("+GUI_DEVICE"),open_opts$[1]="O"
	open_tables$[2]="POM_CALENDAR",open_opts$[2]="OTA"
	open_tables$[3]="ADM_MODULES",open_opts$[3]="OTA"


	gosub open_tables

	gui_dev=num(open_chans$[1])
	pom_calendar_dev=num(open_chans$[2]);dim pom_calendar$:open_tpls$[2]
	adm_modules=num(open_chans$[3]);dim adm_modules$:open_tpls$[3]

rem --- Get SysGUI Object

	SysGUI!=bbjAPI().getSysGui()
	HdrColor!=SysGUI!.makeColor(255,252,215)
	DayColor!=SysGUI!.makeColor(240,240,240)
	HdrText!=SysGUI!.makeColor(160,160,160)
	ClosedColor!=SysGUI!.makeColor(153,153,153)
    HolidayColor!=SysGUI!.makeColor(182,214,245)

	DayVect!=SysGUI!.makeVector()

    dim gui_event$:tmpl(gui_dev)
    dim notify_base$:noticetpl(0,0)

rem --- Get Attributes

	call dir_syp$+"bam_attr_init.bbj",attr_def_tbl$[all],attr_def_col$[all]
		attr_def_col$=attr_def_col$[0,0]
		attr_def_tbl$=attr_def_tbl$[0,0]

rem --- get application record in order to get form icon

	readrecord(adm_modules,key=pad(lic_feature$,11),dom=*next)adm_modules$
	prog_path$=adm_modules.dd_attr_icon$
	gosub resolve_path
	form_icon$=prog_path$

gosub get_calendar_boundaries
gosub validate_calendar_date

rem --- Main Process

	gosub disp_win
	gosub get_user_settings
	gosub def_grids
	gosub display_date
	gosub display_calendar
    gosub display_data
	gosub resize_win

	Window!.setVisible(1)

event_ctl:rem --- Event Control

	Window!.setCallback(Window!.ON_CLOSE,"exit_prog")
	Window!.setCallback(Window!.ON_RESIZE,"resize_win")

	BtnPrevYr!.setCallback(BtnPrevYr!.ON_TOOL_BUTTON_PUSH,"adjust_date")
	BtnPrevMo!.setCallback(BtnPrevMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
	BtnNextMo!.setCallback(BtnNextMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
	BtnNextYr!.setCallback(BtnNextYr!.ON_TOOL_BUTTON_PUSH,"adjust_date")
	BtnCurrMo!.setCallback(BtnCurrMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    popmenu_stat1!.setCallback(popmenu_stat1!.ON_POPUP_ITEM_SELECT,"adjust_status")
    popmenu_stat2!.setCallback(popmenu_stat2!.ON_POPUP_ITEM_SELECT,"adjust_status")
    popmenu_stat3!.setCallback(popmenu_stat3!.ON_POPUP_ITEM_SELECT,"adjust_status")

SysGUI!.flushEvents()

	process_events,err=*same

adjust_date:rem --- Adjust Date
rem --- this routine should be altered to make sure selected date is in pom_calendar
rem --- alternatively, if not, give option to add?
   gui_event$=SysGUI!.getLastEventString()
   date_btn=gui_event.id

	switch date_btn
		case 101;rem --- Prev Year
			curr_yr=curr_yr-1
		break
		case 102;rem --- Prev Month
			curr_mo=curr_mo-1
			if curr_mo<1
				curr_yr=curr_yr-1
				curr_mo=12
			endif
		break
		case 103;rem --- Next Month
			curr_mo=curr_mo+1
			if curr_mo>12
				curr_yr=curr_yr+1
				curr_mo=1
			endif
		break
		case 104;rem --- Next Year
			curr_yr=curr_yr+1
		break
		case 105;rem --- Current Month
			curr_mo=default_mo
			curr_yr=default_yr
		break
		case default
		break
	swend

    gosub validate_calendar_date
	gosub display_date
	gosub display_calendar
	gosub display_data

	return

display_date:rem --- Display Current Date

	CurrDate!.setText(months$[curr_mo]+" "+str(curr_yr))
	start_day=num(date(jul(curr_yr,curr_mo,1):"%W"))
    rem --- above returns day of week relative to Sunday
    rem --- adjust for firstDayOfWeek as indicated by locale
    start_day=start_day-(firstDayOfWeek-1)
    if start_day<=0 start_day=start_day+7

	day_str$="312831303130313130313031"
	if mod(curr_yr,4)=0 day_str$(3,2)="29"
	no_days=num(day_str$(curr_mo*2-1,2))

	return

display_calendar:rem --- Calculate And Display Calendar

	DayVect!.clear()
    stringDays$="";rem contains string version of dayvect for parsing
	day_count=0

	for curr_day=1 to 42
		day_text$=""
		if curr_day>=start_day and day_count<no_days
			day_count=day_count+1
			day_text$=str(day_count)
		endif

		DayVect!.addItem(day_text$)
        stringDays$=stringDays$+str(num(day_text$):"00")+"^"

	next curr_day

	GridCal!.setCellText(0,0,DayVect!)
    for x=0 to 5
        for y=0 to 6
            GridCal!.setCellBackColor(x,y,HdrColor!)
        next y
    next x
	return

display_data:rem --- Display Data For Selected Category and Measure

	day_count=0
    dim pom_calendar$:fattr(pom_calendar$)

    read record(pom_calendar_dev,key=firm_id$+str(curr_yr:"0000")+str(curr_mo:"00"),dom=*next)pom_calendar$
    for curr_day=1 to pom_calendar.days_in_mth
        day_stat$=field(pom_calendar$,"DAY_STATUS_"+str(curr_day:"00"))
        switch pos(day_stat$="CHW");REM C=closed,H=holiday,W=workday
            case 1
                useColor!=ClosedColor!
            break
            case 2
                useColor!=HolidayColor!
            break
            case 3
                useColor!=DayColor!
            break
            case default
                useColor!=HdrColor!
            break
        swend
        gosub set_Color
    next curr_day

    FirstDate!.setText(first_date$)
    LastDate!.setText(last_date$)

	return

set_Color:

    wpos=(pos(str(curr_day:"00")+"^"=stringDays$,3)-1)/3
    grid_row=int(wpos/7)
    grid_col=mod(wpos,7)
    GridCal!.setCellBackColor(grid_row,grid_col,useColor!)

    return

adjust_status:

	gui_event$=SysGUI!.getLastEventString()
	popCtl!=popmenuStat!.getMenuItem(gui_event.y)
	pop_opt$=popCtl!.getText()

    if pop_opt$="Closed"
        useColor!=ClosedColor!
        change_stat$="C"
    endif
    if pop_opt$="Holiday"
        useColor!=HolidayColor!
        change_stat$="H"
    endif
    if pop_opt$="Workday"
        useColor!=DayColor!
        change_stat$="W"
    endif

    sel_rows!=GridCal!.getSelectedRows()
    sel_cols!=GridCal!.getSelectedColumns()

    if sel_rows!.size()
        for x=0 to sel_rows!.size()-1
            for y=0 to sel_cols!.size()-1
                change_day$=GridCal!.getCellText(sel_rows!.get(x),sel_cols!.get(y))
                if change_day$<>""
                    GridCal!.setCellBackColor(sel_rows!.get(x),sel_cols!.get(y),useColor!)
                    gosub update_pom_calendar
                endif
            next y
        next x

    endif

    return

update_pom_calendar:

    dim pom_calendar$:fattr(pom_calendar$)
    extractrecord(pom_calendar_dev,key=firm_id$+str(curr_yr:"0000")+str(curr_mo:"00"))pom_calendar$
    field pom_calendar$,"DAY_STATUS_"+str(num(change_day$):"00")=change_stat$
    pom_calendar$=field(pom_calendar$)
    write record(pom_calendar_dev)pom_calendar$
    return

validate_calendar_date:
rem --- set beginning mo/yr; set to values in curr_yr/curr_mo;if dom try next; if dom go to last for firm

    dim pom_calendar$:fattr(pom_calendar$)

    read record(pom_calendar_dev,key=firm_id$+str(curr_yr:"0000")+str(curr_mo:"00"),dom=*next)pom_calendar$
    if cvs(pom_calendar.year$,3)=""
        while 1
            k$=key(pom_calendar_dev,end=get_last)
            read record(pom_calendar_dev)pom_calendar$
            if pom_calendar.firm_id$=firm_id$ break
get_last:
            read(pom_calendar_dev,key=firm_id$+$ff$,dom=*next)
            k$=keyp(pom_calendar_dev)
            readrecord(pom_calendar_dev,key=k$)pom_calendar$
            if pom_calendar.firm_id$=firm_id$ break
no_calendar:
            msg_id$="PO_NO_CAL"
            gosub disp_message
            exitto exit_prog
        wend

        curr_yr=num(pom_calendar.year$)
        curr_mo=num(pom_calendar.month$)
    endif

    return

get_calendar_boundaries:
   
    dim pom_calendar$:fattr(pom_calendar$)
    read(pom_calendar_dev,key=firm_id$,dom=*next)
    k$=key(pom_calendar_dev,err=*next);readrecord(pom_calendar_dev,key=k$)pom_calendar$
    if pom_calendar.firm_id$<>firm_id$ 
        msg_id$="PO_NO_CAL"
        gosub disp_message
        exitto exit_prog
    else
        first_date$=pom_calendar.month$+"/"+pom_calendar.year$
    endif
    dim pom_calendar$:fattr(pom_calendar$)
    read(pom_calendar_dev,key=firm_id$+$ff$,dom=*next)
    k$=keyp(pom_calendar_dev,err=*next);readrecord(pom_calendar_dev,key=k$)pom_calendar$
    if pom_calendar.firm_id$<>firm_id$
        msg_id$="PO_NO_CAL"
        gosub disp_message
        exitto exit_prog
    else
        last_date$=pom_calendar.month$+"/"+pom_calendar.year$
    endif

    return

get_user_settings:rem --- Get User/Windows Settings

	win_save_id$=pad("WIN_[PURCH_CAL]",20)
	call dir_syp$+"bac_winsize.bbj",cvs(win_save_id$,4),"W","",Window!,"READ",win_coord[all]

	return

save_user_settings:rem --- Save Windows Coordinates

	if Window!<>null() then
		call dir_syp$+"bac_winsize.bbj",cvs(win_save_id$,4),"W","",Window!,"SAVE",win_coord[all]
	endif

	return

open_tables:rem -----<Open Tables

	call dir_syp$+"bac_open_tables.bbj",		open_beg,		open_end,		open_tables$[all],		open_opts$[all],		open_chans$[all],		open_tpls$[all],		table_chans$[all],		open_batch,		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

disp_message:rem --- Display Message Dialog

	call dir_syp$+"bac_message.bbj",		msg_id$,		msg_tokens$[all],		msg_opt$,		table_chans$[all]

	return

disp_win:rem --- Display Window

	dim ctl_misc$[20]

	form_id$=file_base$+"arc/pom_calendar.arc"

	call dir_syp$+"bam_controls.bbj",		gui_dev,		SysGUI!,		form_id$,		win_coord[all],		Window!,		"DISPLAY",		open_chan$[all],		ctl_misc$[all]

    childGrid!=Window!.getControl(100)

	BtnPrevYr!=Window!.getControl(101)
	BtnPrevMo!=Window!.getControl(102)
	BtnNextMo!=Window!.getControl(103)
	BtnNextYr!=Window!.getControl(104)
	BtnCurrMo!=Window!.getControl(105)

	CurrDate!=Window!.getControl(106)

    FirstDate!=Window!.getControl(109)
    LastDate!=Window!.getControl(110)

    GridCal!=childGrid!.getControl(100)
    GridFont!=GridCal!.getFont()
    HdrFont!=SysGUI!.makeFont(GridFont!.getName(),GridFont!.getSize(),1)

	WinColor!=Window!.getBackColor()
	win_title$=Window!.getTitle()
    Window!.setIcon(form_icon$,err=*next)

	win_disp$="YES"

	return

resize_win:rem --- Resize Window Contents

        childGrid!.setSize(Window!.getWidth()-(childGrid!.getX()*2),Window!.getHeight()-childGrid!.getY()-50)
		GridCal!.setSize(childGrid!.getWidth()-(GridCal!.getX()*2),childGrid!.getHeight()-20)
        GridCal!.setRowHeight((GridCal!.getHeight()-GridCal!.getColumnHeaderHeight())/6)
return
        summary_height=GridCal!.getHeight()-(GridCal!.getColumnHeaderHeight()+98)
		summary_total=GridCal!.getHeight()-GridCal!.getColumnHeaderHeight()
		summary_used=0
		for curr_row=1 to 12
			if mod(curr_row,2)=1
				GridCal!.setRowHeight(16)
				summary_used=summary_used+16
			endif
			if mod(curr_row,2)=0
				GridCal!.setRowHeight(curr_row-1,int(summary_height/7))
				summary_used=summary_used+int(summary_height/7)
			endif
		next curr_row

		GridCal!.setRowHeight(12,summary_total-(summary_used-1))

	return

def_grids:rem --- Define Grid

	def_output_cols=no_columns
	dim attr_col$[def_output_cols,len(attr_def_col$[0,0])/5]

	col_size=int(childGrid!.getWidth()/7)

	for curr_column=1 to no_columns

		attr_col$[curr_column,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="COL_"+str(curr_column+1:"0")
		attr_col$[curr_column,fnstr_pos("LABS",attr_def_col$[0,0],5)]=columns$[curr_column]
		attr_col$[curr_column,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="C"
		attr_col$[curr_column,fnstr_pos("CTLW",attr_def_col$[0,0],5)]=str(col_size)
		attr_col$[0,1]=attr_col$[0,1]+pad("SUMMARY."+attr_col$[curr_column,fnstr_pos("DVAR",attr_def_col$[0,0],5)],40)

	next curr_column

	call dir_syp$+"bam_grid_init.bbj",gui_dev,GridCal!,"NOSCROLL-COLH-LINES-CELL-VTOP",num_rows,attr_def_col$[all],attr_col$[0,1],attr_col$[all]
	GridCal!.setFitToGrid(GridCal!.AUTO_RESIZE_LAST_COLUMN)
    GridCal!.setRowHeight(int((childGrid!.getHeight()-GridCal!.getColumnHeaderHeight())/num_rows))
	for x=1 to num_rows			
        GridCal!.setRowHeaderCellText(x-1,weeks$[x])
    next x
    GridCal!.setSelectionMode(GridCal!.GRID_SELECT_CELL)
    GridCal!.setGridEditable(GridCal!.FALSE)
    GridCal!.setMultipleSelection(GridCal!.TRUE)
    GridCal!.setHighlightMethod(GridCal!.GRID_HIGHLIGHT_OUTLINE)

    rem --- Add PopUp Window
    popmenuStat!=SysGUI!.addPopupMenu()
    popmenu_stat1! = popmenuStat!.addMenuItem(-201,"Closed")
    popmenu_stat1!.setBackColor(ClosedColor!)
    popmenu_stat2! = popmenuStat!.addMenuItem(-202,"Holiday")
    popmenu_stat2!.setBackColor(HolidayColor!)
    popmenu_stat3! = popmenuStat!.addMenuItem(-203,"Workday")
    popmenu_stat3!.setBackColor(DayColor!)
    GridCal!.setPopupMenu(popmenuStat!)

	return

resolve_path:rem --- Resolve Program Path

	while pos("["=prog_path$)<>0
		stbl_from=pos("["=prog_path$)+1
		stbl_thru=pos("]"=prog_path$)
		proc_mssg$=stbl_err$
		temp_stbl$=stbl(prog_path$(stbl_from,stbl_thru-stbl_from),err=*next)
		proc_mssg$=""
		if stbl_thru=len(prog_path$)
			prog_path$=prog_path$(1,stbl_from-2)+temp_stbl$
		else
			prog_path$=prog_path$(1,stbl_from-2)+temp_stbl$+prog_path$(stbl_thru+1)
		endif
	wend

	return

def fnLocale!(Locale$)
  Locale$ = cvs(Locale$,3)
   switch pos("_"=Locale$,1,0)
     case 0
       return new Locale(Locale$)
     case 1; rem ' language_country
       p = pos("_"=Locale$)
       language$ = cvs(Locale$(1,p-1),8)
       country$ = cvs(Locale$(p+1),4)
       return new Locale(language$,country$)
     case 2; rem ' language_country_modifier
       p1 = pos("_"=Locale$)
       p2 = pos("_"=Locale$(p1+1))
       language$ = cvs(Locale$(1,p1-1),8)
       country$ = cvs(Locale$(p1+1,p2-1),4)
       modifier$ = Locale$(p1+p2)
       return new Locale(language$,country$,modifier$)
     case default; rem ' invalid format
       return new Locale(Locale$)
   swend
 fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),                                str(err:"000"),err_text$,err_act$
    if pos("EXIT"=err_act$) goto std_error_exit
    if pos("ESCAPE"=err_act$) seterr 0;setesc 0
    if pos("RETRY"=err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

exit_prog:rem --- Exit Program

	gosub save_user_settings

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

    end