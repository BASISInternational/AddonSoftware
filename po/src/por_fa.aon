rem --- rem Replenishment Report Program (Input Overlay)
rem --- Program por_fa v8.0.0 06Jul2007 (por_fa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 12:35:00)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0270)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0173)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0180)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0197)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0198)
rem --- v7.x Administrator reference ["sys-01"] (Line 0204)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0229)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0255)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0260)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0262)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0263)
rem --- v7.x sys-01 reference [sys01_dev,cu] (Line 0271)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0276)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0350)
rem --- BBx reference ["syc_ra.bbx"] (Line 0350)
rem --- BBx reference ["por_fb.bbx"] (Line 0413)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0421)
rem --- BBx reference ["syc_rs.bbx"] (Line 0421)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0422)
rem --- BBx reference ["syc_rs.bbx"] (Line 0422)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file poe-31 referenced (Line 0148)
rem --- Cross-reference file poe-41 referenced (Line 0150)
rem --- Cross-reference file poe-52 referenced (Line 0151)
rem --- Cross-reference file poe-31 referenced (Line 0245)
rem --- Cross-reference file poe-41 referenced (Line 0247)
rem --- Cross-reference file poe-52 referenced (Line 0248)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record poe31a replaced by index on opt-01 (Line 0162)
rem --- Cross-reference record poe41a replaced by index on poe-03 (Line 0162)
rem --- Cross-reference record poe52a replaced by index on poe-13 (Line 0163)

rem --- The following IOLIST's were removed from this program:

rem --- gls01a: iolist g0$,g1$,g2$,g3$
rem --- ivs01c: iolist *,abcp[all],factors[all]

rem --- The following channel references have been identified:

rem --- apm01a: Channel reference (Line 0320)

rem --------------------------------------------------------------------------------
rem --- apm02a: Channel reference (Line 0319)
rem --- apm05a: Channel reference (Line 0318)
rem --- apm06a: Channel reference (Line 0317)
rem --- aps01a: (Generated by CodePort)
rem --- ivm01a: Channel reference (Line 0315)
rem --- ivm10a: Channel reference (Line 0314)
rem --- ivs01a: (Generated by CodePort)
rem --- poe01a: Channel reference (Line 0312)
rem --- poe02a: Channel reference (Line 0312)
rem --- poe06a: Channel reference (Line 0311)
rem --- poe07a: Channel reference (Line 0310)
rem --- poe11a: Channel reference (Line 0309)
rem --- poe16a: Channel reference (Line 0308)
rem --- poe17a: Channel reference (Line 0307)
rem --- poe21a: Channel reference (Line 0306)
rem --- poe26a: Channel reference (Line 0305)
rem --- poe31a: Channel reference (Line 0304)
rem --- poe36a: Channel reference (Line 0303)
rem --- poe41a: Channel reference (Line 0303)
rem --- poe52a: Channel reference (Line 0302)
rem --- pom02a: Channel reference (Line 0301)
rem --- pos10a: Channel reference (Line 0300)
rem --- sys01a: Channel reference (Line 0297)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=22,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="apm-02"
    files$[4]="apm-05"
    files$[5]="apm-06"
    files$[6]="ivm-01"
    files$[7]="ivm-10"
    files$[8]="poe-01"
    files$[9]="poe-02"
    files$[10]="poe-06"
    files$[11]="poe-07"
    files$[12]="poe-11"
    files$[13]="poe-16"
    files$[14]="poe-17"
    files$[15]="poe-21"
    files$[16]="poe-26"
    files$[17]="poe-31"
    files$[18]="poe-36"
    files$[19]="poe-41"
    files$[20]="poe-52"
    files$[21]="pom-02"
    files$[22]="pos-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    apm02_dev=channels[3]
    apm05_dev=channels[4]
    apm06_dev=channels[5]
    ivm01_dev=channels[6]
    ivm10_dev=channels[7]
    poe01_dev=channels[8]
    poe02_dev=channels[9]
    poe06_dev=channels[10]
    poe07_dev=channels[11]
    poe11_dev=channels[12]
    poe16_dev=channels[13]
    poe17_dev=channels[14]
    poe21_dev=channels[15]
    poe26_dev=channels[16]
    poe31_dev=channels[17]
    poe36_dev=channels[18]
    poe41_dev=channels[19]
    poe52_dev=channels[20]
    pom02_dev=channels[21]
    pos10_dev=channels[22]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm02a$:templates$[3],apm05a$:templates$[4],
:       apm06a$:templates$[5],ivm01a$:templates$[6],ivm10a$:templates$[7],
:       poe01a$:templates$[8],poe02a$:templates$[9],poe06a$:templates$[10],
:       poe07a$:templates$[11],poe11a$:templates$[12],poe16a$:templates$[13],
:       poe17a$:templates$[14],poe21a$:templates$[15],poe26a$:templates$[16],
:       poe31a$:templates$[17],poe36a$:templates$[18],poe41a$:templates$[19],
:       poe52a$:templates$[20],pom02a$:templates$[21],pos10a$:templates$[22]

rem --- Retrieve miscellaneous templates

    files=5,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="ivs-01C"
    ids$[5]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       ivs01c$:templates$[4],sys01a$:templates$[5]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    ivs01c_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01c_key$,err=std_missing_params) ivs01c$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=24
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    options$[1]="P"
    files$[2]="apm-01"
    files$[3]="apm-02"
    files$[4]="apm-05"
    files$[5]="apm-06"
    files$[6]="ivm-01"
    files$[7]="ivm-10"
    files$[8]="poe-01"; rem ESCAPE 
     files$[9] = "poe-02"
    files$[10]="poe-06"
    files$[11]="poe-07"
    files$[12]="poe-11"
    files$[13]="poe-16"
    files$[14]="poe-17"
    files$[15]="poe-21"
    files$[16]="poe-26"
    files$[17]="poe-31"
    files$[18]="poe-36"
    files$[19]="poe-41"
    files$[20]="poe-52"
    files$[21]="pom-02"
    files$[22]="pos-10"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    apm01_dev=channels[2]
    apm02_dev=channels[3]
    apm05_dev=channels[4]
    apm06_dev=channels[5]
    ivm01_dev=channels[6]
    ivm10_dev=channels[7]
    poe01_dev=channels[8]; rem ESCAPE 
     poe02_dev= channels[9]
    poe06_dev=channels[10]
    poe07_dev=channels[11]
    poe11_dev=channels[12]
    poe16_dev=channels[13]
    poe17_dev=channels[14]
    poe21_dev=channels[15]
    poe26_dev=channels[16]
    poe31_dev=channels[17]
    poe36_dev=channels[18]
    poe41_dev=channels[19]
    poe52_dev=channels[20]
    pom02_dev=channels[21]
    pos10_dev=channels[22]

rem --- Parameters

    dim desc[3],abcp[25],factors[25]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AP"
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) aps01a$
    vendlen=num(p2$(1,2))
    find record (sys01_dev,key=firm_id$+"IV02",dom=std_missing_params) ivs01c$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    ivprecision=num(i2$(5,1))
    itemlen=num(i2$(1,2))
    defaultwhse$=i3$(6,2)
    curper$=i4$(1,2)
    curyr$=i4$(3,2)
    curper=num(curper$)
    curyr=fnyy_year(curyr$)
    call pgmdir$+"adc_perioddates.aon",sys01_dev,curper,curyr,begper$,endper$,status
    for i=1 to 3
        desc[i]=num(i2$(i*2+7,2))
        desclen=desclen+desc[i]
    next i
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    precision ivprecision

rem --- Init Data

    dim dashes$(132,"-"),o[14],h[14],hsel[9]
    suggonly$="Y"
    includewhse$="Y"
    call pgmdir$+"adc_sizemask.aon",m2$,m2,8,10
    m6$="###0.00-"
    m9$="##0-"
    phnmsk$="(###) ###-####"
l560:
    m1=len(m1$)
    m3=len(m3$)
    m6=len(m6$)
    m9=len(m9$)
    totmlen=m1+(10*m2)+m3+m6+m9+7
    if totmlen<=130 goto l600
    if m1>12 call pgmdir$+"adc_sizemask.aon",m1$,m1,12,m1-1; goto l560
    if m3>9 call pgmdir$+"adc_sizemask.aon",m3$,m3,9,m3-1; goto l560
    if m2>8 call pgmdir$+"adc_sizemask.aon",m2$,m2,8,m2-1; goto l560
l600:
    o[0]=132-(totmlen)
    o[1]=o[0]+4
    o[2]=o[1]+m2
    o[3]=o[2]+m2
    o[4]=o[3]+m2
    o[5]=o[4]+m9
    o[6]=o[5]+m2
    o[7]=o[6]+m2
    o[8]=o[7]+m2
    o[9]=o[8]+m2
    o[10]=o[9]+m2
    o[11]=o[10]+m2
    o[12]=o[11]+m3+1
    o[13]=o[12]+m2+1
    o[14]=o[13]+m6+1

rem --- Column headers

    h[0]=o[0]-1
    h[1]=o[1]+m2-8
    h[2]=o[2]+m2-8
    h[3]=o[3]+m2-7
    h[4]=o[4]+m9-4
    h[5]=o[5]+m2-6
    h[6]=o[6]+m2-6
    h[7]=o[7]+m2-7
    h[8]=o[8]+m2-6
    h[9]=o[9]+m2-5
    h[10]=o[10]+m2-6
    h[11]=o[11]+m3-6
    h[12]=o[12]+m2-10
    h[13]=o[13]+m6-7
    h[14]=o[14]+m1-9

rem --- Selections column headers

    hsel[0]=24
    hsel[1]=30
    hsel[2]=38
    hsel[3]=46
    hsel[4]=55
    hsel[5]=64
    hsel[6]=75
    hsel[7]=86
    hsel[8]=93
    hsel[9]=100

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    gosub display_fields
    goto start_done

l1000: rem --- Options

    v0$="Y"
    v1$="C"
    v2$=includewhse$
    v3$=""
    v4$="Include warehouse usage detail for multiple warehouse buys? "
    v0=1
    v1=47
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1060,l1060,flow_control,l1060,flow_control,l1060,flow_control
l1060:
    let includewhse$=v$
    goto flow_control

l1100: rem --- All or Suggested Buy only

    let v0$="Y",v1$="C",v2$=suggonly$,v3$="YN",v4$="N=Print all items for vendor, Y=Only items with replenishment amounts",v0=1,v1=47,v2=4,control_id=3001
    gosub std_input
    on v3 goto l1160,l1160,flow_control,l1160,flow_control,l1160,flow_control
l1160:
    let suggonly$=v$
    goto flow_control

flow_control: rem --- Flow control

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
next_field:
    on i0 goto l1000,l1100,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    let v0$="S",v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=0,v2=22,control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1
    goto next_field

end_input: rem --- Run report overlay

    run pgmdir$+"por_fb.bbx"

display_fields: rem --- Display fields

    let control_id=3000,cid_cnt=0
l5010:
    if cid_cnt=0 disp_inp$=includewhse$,disp_desc$=""
    if cid_cnt=1 disp_inp$=suggonly$,disp_desc$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5080
    goto l5010
l5080:
    let disp_inp$="",disp_desc$=""
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
