rem --- Print Overlay
rem --- Program por_fb v8.0.0 17Jul2007 (por_fb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:44:36)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- BBx reference ["pou_ba.bbx"] (Line 0290)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist *,vdata$(1)
rem --- apm05a: iolist *,vdata2$(1)
rem --- apm06a: iolist s0$,s1$(1),s[all]
rem --- ivm01a: iolist *,itemdesc$(1)
rem --- ivm10a: iolist prod$
rem --- ivm10f: iolist r0$
rem --- poe06a: iolist a0$,a1$
rem --- poe07a: iolist w0$(1),w1$(1)
rem --- poe16a: iolist b0$(1),b1$(1),b2$,b[all]
rem --- poe26a: iolist c0$(1),c1$(1),c2$,c[all]
rem --- poe36a: iolist d0$(1),d1$(1),d[all]

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)
rem --- poe17a: Channel reference (Line 0227)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=12,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="apm-05"
    files$[4]="apm-06"
    files$[5]="ivm-01"
    files$[6]="ivm-10"
    files$[7]="poe-06"
    files$[8]="poe-07"
    files$[9]="poe-16"
    files$[10]="poe-17"
    files$[11]="poe-26"
    files$[12]="poe-36"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    apm05_dev=channels[3]
    apm06_dev=channels[4]
    ivm01_dev=channels[5]
    ivm10_dev=channels[6]
    poe06_dev=channels[7]
    poe07_dev=channels[8]
    poe16_dev=channels[9]
    poe17_dev=channels[10]
    poe26_dev=channels[11]
    poe36_dev=channels[12]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm05a$:templates$[3],apm06a$:templates$[4],
:       ivm01a$:templates$[5],ivm10a$:templates$[6],poe06a$:templates$[7],
:       poe07a$:templates$[8],poe16a$:templates$[9],poe17a$:templates$[10],
:       poe26a$:templates$[11],poe36a$:templates$[12]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivm-10F"
    ids$[3]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivm10f$:templates$[2],ivs01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    includewhse$=fnget_fld_data$(table$,"print_warehouse_detail")
    suggonly$=fnget_fld_data$(table$,"print_sugg_items")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Init data

    footnum=5
    l9=59-footnum
    headings=3
    page=0
    width=132
    when$=sysinfo.system_date$
    dim a0$(14),vendor$(6),prevvend$(6),s[11],b[16],headings$[headings]
    headings$[0]=n1$
    headings$[1]=n3$
    headings1len=len(headings$[1])
    dim lf$(60,$0A$)
    printbtot$="N"
    printvtot$="N"
    printptot$="N"
    dopagebrk$="N"
    printtotline$="N"
    dim buyertots[2],vendtots[2],prodtots[2]
    dim review$(30)
    therearebuyers=1; rem "Used to print sel criteria when no poe-17
    more=1

rem --- Open printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if v1=1 goto std_exit

rem --- Background

rem call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing:","",5+vendlen,poe06_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","N","","","","",0,poe06_dev,1,meter_num,status

rem --- Init Read

    read (poe06_dev,key=firm_id$,dom=*next)

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem 
rem readpoe06: rem --- Main Read
    while more

    k$=key(poe06_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read record (poe06_dev,end=done) poe06a$
    buyer$=a0$(3,3)
    vendor$=a0$(6,6)
    review$="Through Review Date: "+fndate$(a1$(3))
    comment$=a1$(7,30)
rem call pgmdir$+"adc_progress.aon","S","","","",buyer$+"  "+fnmask$(vendor$(1,vendlen),vendomask$),0,0,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    gosub testbreaks
    printptot$="N"
    prevprodtype$=""
    previtem$=""

rem --- Init detail ptr

    read (poe16_dev,key=a0$(1,11),dom=*next)

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem readpoe16: rem --- Line item details
    while more

    dim b0$(36),b1$(20),b[16],linepoint$(0),ordpoint$(0),avail$(0),onorder$(0)
    dim eoq$(0),safety$(0),max$(0),lead$(0),weight$(0),cost$(0),sugg$(0)
    dim annualusage$(0),avgusage$(0),extension$(0)
    k16$=key(poe16_dev,end=nextpoe06)
    if pos(a0$(1,11)=k16$)<>1 goto nextpoe06
    read record (poe16_dev) poe16a$
    prodtype$=k16$(12,3)
    gosub testprod; rem TESTBREAK
    itemnum$=b0$(15,20)
    whse$=b0$(35,2)
    stocklevel$=b1$(1,1)
    if b1$(2,1)="Y" estimated$="**"
    annualusage$=str(b[12]:m2$)
    avgusage$=str(b[13]:m2$)
    avail$=str(b[2]:m2$)
    onorder$=str(b[3]:m2$)
    if stocklevel$="I" goto checktot4i
    if suggonly$<>"Y" goto assignsugg
    if itemnum$=prevwitem$ goto assignsugg
    csugg=0
    dim c0$(36),c1$(20),c[16]
    find record (poe26_dev,key=b0$(1,34)+"  ",dom=nextpoe16) poe26a$
    if c[9]=0 goto nextpoe16
    csugg=c[9]
    prevminusannuse=minusannuse
    prevminusavguse=minusavguse
    prevminusavail=minusavail
    prevminusonord=minusonord
    minusannuse=0
    minusavguse=0
    minusavail=0
    minusonord=0
    prevwitem$=itemnum$
assignsugg:
    sugg=b[9]

rem --- Skip whse detail if NOT INCLUDEWHS$

    if includewhse$="Y" goto includewhses
    gosub newitem
    read (poe16_dev,key=b0$(1,34)+$FF$,dom=nextpoe16)

includewhses: rem --- Accum amts to subtract from total line for sugg=0 'W' items

    if suggonly$<>"Y" or sugg<>0 goto assign4w
    minusannuse=minusannuse+b[12]
    minusavguse=minusavguse+b[13]
    minusavail=minusavail+b[2]
    minusonord=minusonord+b[3]
    if itemnum$<>previtem$ gosub newitem
    goto nextpoe16
assign4w:
    linepoint$=str(b[0]:m2$)
    ordpoint$=str(b[1]:m2$)
    eoq$=str(b[4]:m2$)
    safety$=str(b[5]:m2$)
    max$=str(b[6]:m2$)
    lead$=str(b[7]:m9$)
    sugg$=str(sugg:m2$)
    weight$=str(b[8]:m6$)
    cost$=str(b[10]:m3$)
    extension$=str(b[14]:m1$)
    goto testnewitem

checktot4i: rem --- Check suggested qty of total for stocked by 'I'

    dim c[16]
    minusannuse=0
    minusavguse=0
    minusavail=0
    minusonord=0
    prevminusannuse=0
    prevminusavguse=0
    prevminusavail=0
    prevminusonord=0
    find record (poe26_dev,key=a0$(1,11)+prodtype$+itemnum$+"  ",dom=testinclude) poe26a$
    sugg=c[9]
testinclude:
    if includewhse$="Y" goto testsugg
    gosub newitem
    read (poe16_dev,key=b0$(1,34)+$FF$,dom=nextpoe16)

testsugg: rem --- Skip all whses for items by 'I' w/no sugg qty

    if suggonly$<>"Y" goto testnewitem
    if sugg=0 read (poe16_dev,key=b0$(1,34)+$FF$,dom=nextpoe16)

testnewitem: rem --- Test for new item

    if itemnum$<>previtem$ gosub newitem

rem --- Print

    if l+1>l9 printvtot$="N"; gosub newvendor
    print (printer_dev) @(o[0]),whse$," ",
    :                   @(o[1]),annualusage$,
    :                   @(o[2]),avgusage$,
    :                   @(o[3]),safety$,
    :                   @(o[4]),lead$,
    :                   @(o[5]),avail$,
    :                   @(o[6]),onorder$,
    :                   @(o[7]),ordpoint$,
    :                   @(o[8]),max$,
    :                   @(o[9]),eoq$,
    :                   @(o[10]),linepoint$,
    :                   @(o[11]),cost$,
    :                   @(o[12]),sugg$,
    :                   @(o[13]),weight$,
    :                   @(o[14]),extension$
    l=l+1
    if stocklevel$="W" gosub dosurplus

rem nextpoe16: rem --- Loop up for next detail

rem goto readpoe16
    wend

rem nextpoe06: rem --- Loop up for next Suggested Order header

rem goto readpoe06

done: rem --- Done

    if page goto somethingsprinted
    gosub report_heading
    therearebuyers=0
somethingsprinted:
    if printtotline$="Y" gosub totalline
    gosub vendtotals
    gosub buyertotals
    gosub printfooter
rem call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,meter_num,status
    run pgmdir$+"pou_ba.bbx"

report_heading: rem --- Report Heading

    if page gosub printfooter
    l=headings+1
    if review$<>fill(30) and pos(review$=headings$[1])=0 headings$[1]=headings$[1](1,headings1len)+" "+review$
    headings$[2]=buyerhead$
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
rem if comment$=fill(30) goto l5090
    if comment$=fill(30) return
    comment$=cvs(comment$,3); rem "Strip leading & trailing spaces
    print (printer_dev)@(fncenter(comment$,width)),comment$
    l=l+1
rem l5090:
    return

newvendor: rem --- New Vendor

    if printvtot$="Y" gosub vendtotals
    if dopagebrk$="Y" dopagebrk$="N"; gosub report_heading
    if l+12>l9 gosub report_heading
    gosub vaddress
    dim vendline$(132),targettype$(10)
    vendline$(1)="Vendor: "+fnmask$(vendor$(1,vendlen),vendomask$)
    vendline$(17)=name$
    if pos(" "<>vendor$)=0 vendline$(17)="No Stocking Vendor"
    if s1$(7,2)<>"  " vendline$(48)="Addr: "+s1$(7,2)
    if s1$(1,3)=fill(3) prirev$="None" else prirev$=fndate$(s1$(1))
    if s1$(4,3)=fill(3) nxtrev$="None" else nxtrev$=fndate$(s1$(4))
    on pos(s1$(9,1)="NDWU") goto donepos,none,dollars,weight,units
none:
    targettype$="N None"
    goto donepos
dollars:
    targettype$="D Dollars"
    goto donepos
weight:
    targettype$="W Weight"
    goto donepos
units:
    targettype$="U Units"
    goto donepos
donepos:
    if s1$(10,3)=fill(3) lastrcpt$="None" else lastrcpt$=fndate$(s1$(10))
    vendline$(59)="Next Review: "+nxtrev$
    vendline$(83)="Target Type: "+targettype$
    vendline$(107)="Target Units: "+str(s[3]:m2$)
    if s1$(10,3)=fill(3) lastrcpt$="None" else lastrcpt$=fndate$(s1$(10))
    print (printer_dev)""
    print (printer_dev) @(0),vendline$
    print (printer_dev) @(16),addr1$,
    :                   @(57),"Prior Review: ",prirev$,
    :                   @(83),"Cycle Days: ",s[0]:"##0",
    :                   @(105),"Target Weight: ",s[2]:m6$
    print (printer_dev) @(16),addr2$,
    :                   @(57),"Last Receipt: ",lastrcpt$,
    :                   @(104),"Target Dollars: ",s[1]:m1$
    if pos(" "<>addr3$)<>0 print (printer_dev)@(16),addr3$; let l=l+1
    print (printer_dev) @(0),"Contact: ",contact$,
    :                   @(57),"Phone:  ",fnmask$(phone$,phnmsk$),
    :                   @(90),"Fax:  ",fnmask$(fax$,phnmsk$)
    print (printer_dev)dashes$
    print (printer_dev) @(h[1]),"Act Annl",
    :                   @(h[2]),"Wgt Per",
    :                   @(h[3]),"Safety",
    :                   @(h[4]),"Lead",
    :                   @(h[6]),"On",
    :                   @(h[7]),"Order",
    :                   @(h[8]),"Max",
    :                   @(h[10]),"Line",
    :                   @(h[11]),"Unit",
    :                   @(h[12]),"Suggested",
    :                   @(h[13]),"Total"
    print (printer_dev) @(h[0]),"Whs",
    :                   @(h[1]),"Usage",
    :                   @(h[2]),"Usage",
    :                   @(h[3]),"Stock",
    :                   @(h[4]),"Time",
    :                   @(h[5]),"Avail",
    :                   @(h[6]),"Order",
    :                   @(h[7]),"Point",
    :                   @(h[8]),"Qty",
    :                   @(h[9]),"EOQ",
    :                   @(h[10]),"Point",
    :                   @(h[11]),"Cost",
    :                   @(h[12]),"Order Qty",
    :                   @(h[13]),"Weight",
    :                   @(h[14]),"Extension"
    print (printer_dev)dashes$
    l=l+9
    printvtot$="Y"
    prevvend$=vendor$
    return

vaddress: rem --- Get Vendor's address etc

    dim vdata$(195),vdata2$(160),s1$(25),s[11]
    read record (apm01_dev,key=firm_id$+vendor$,dom=*next) apm01a$
    read record (apm06_dev,key=firm_id$+vendor$+buyer$,dom=brnch4) apm06a$
    if s1$(7,2)="  " goto useapm01addr
rem l5550:
brnch4:
    read record (apm05_dev,key=firm_id$+vendor$+s1$(7,2),dom=useapm01addr) apm05a$
    vdata$(1,125)=vdata2$(1,125)
    vdata$(186,10)=vdata2$(146,10)
    vdata$(126,20)=vdata2$(126,20)
useapm01addr:
    name$=vdata$(1,30)
    addr1$=vdata$(31,24)
    addr2$=vdata$(55,24)
    addr3$=cvs(vdata$(79,22),51)+", "+vdata$(101,2)
    zip$=fnzipcode$(vdata$(103))
    phone$=vdata$(112,10)
    fax$=vdata$(186,10)
    contact$=vdata$(126,20)
    if pos(" "<>addr3$)>0 addr3$=cvs(addr3$,2)+"  "+zip$ else addr2$=cvs(addr2$,2)+"  "+zip$
    return

newprodtype: rem --- New Product Type

    if printptot$="Y" gosub prodtotals
    dim prodtots[2],prod$(30)
    prod$(7,20)="**Not On File**"
rem find record (ivm10_dev,key=firm_id$+"A"+prodtype$,dom=l5760) ivm10a$
    find record (ivm10_dev,key=firm_id$+"A"+prodtype$,dom=brnch3) ivm10a$
    proddesc$=prod$(7,20)
rem l5760:
brnch3:
    if l+2>l9 printvtot$="N"; gosub newvendor
    print (printer_dev)""
    print (printer_dev)@(0),"Product: ",prodtype$," ",proddesc$
    l=l+2
    printptot$="Y"
    prevprodtype$=prodtype$
    return

newitem: rem --- New Item

    if printtotline$="Y" gosub totalline
    prevminusannuse=0
    prevminusavguse=0
    prevminusavail=0
    prevminusonord=0
    dim itemdesc$(desclen)
    itemdesc$(1)="** Not on File **"
    find record (ivm01_dev,key=firm_id$+itemnum$,dom=*next) ivm01a$
    itemdesc$=fnitem$(itemdesc$,desc[1],desc[2],desc[3])
rem if suggonly$="Y" and sugg=0 and csugg=0 goto l5880
    if suggonly$="Y" and sugg=0 and csugg=0 goto brnch2
    if l+1>l9 printptot$="N"; gosub newprodtype
    print (printer_dev) estimated$,"  ",itemnum$(1,itemlen),"  ",itemdesc$,
    :                   @(50),"Stocked by: ",stocklevel$
    l=l+1
    printtotline$="Y"
rem l5880:
brnch2:
    previtem$=itemnum$
    return

printfooter: rem --- Print the 'footers' here

    if l<l9 print (printer_dev)lf$(1,l9-l)
    print (printer_dev) dashes$
    print (printer_dev) @(0),"** Indicates period usage is estimated",
    :                   @(40),"M - Suggested Buy Based on Maximum",
    :                   @(85),"R - Suggested Buy Based on Reorder Point"
    print (printer_dev) @(0),"O - Indicates On Hand Greater than Max",
    :                   @(40),"E - Suggested Buy Rounded to EOQ Amount",
    :                   @(85),"Y - Suggested Buy Limited to One Year's Usage"
    print (printer_dev) @(0),"U - Indicates Unusual Monthly Usage   ",
    :                   @(40),"L - Suggested Buy Based on Line Point",
    :                   @(85),"2 - Suggested Buy Increased 1/2 Month's Usage"
    return

testbreaks: rem --- Test for Breaks

    if buyer$=prevbuyer$ goto testvendor
    if printptot$="Y" gosub prodtotals
    if printvtot$="Y" gosub vendtotals
    if printbtot$="Y" gosub buyertotals
    gosub newbuyer
    gosub newvendor
rem goto l6090
    return
testvendor:
    if vendor$=prevvend$ goto testprod
    gosub newvendor

rem --- GOSUB NEWPRODTYPE

rem goto l6090
    return
testprod:
rem if prodtype$=prevprodtype$ goto l6090
    if prodtype$=prevprodtype$ return
    gosub newprodtype
rem l6090:
    return

newbuyer: rem --- New Buyer

    dim buyertots[2],buyerhead$(30),r0$(30)
    find record (ivm10_dev,key=firm_id$+"F"+buyer$,dom=*next) ivm10f$
    buyerhead$="Buyer Code: "+buyer$+" "+r0$(7,20)
    buyerhead$=buyerhead$(1,pos(" "<>buyerhead$-1))
    gosub report_heading
    printbtot$="Y"
    prevbuyer$=buyer$
    dopagebrk$="N"
    return

buyertotals: rem --- Print buyer totals

    gosub report_heading
    print (printer_dev) @(h[12]),"Suggested",
    :                   @(h[13]),"Total"
    print (printer_dev) @(h[12]),"Order Qty",
    :                   @(h[13]),"Weight",
    :                   @(h[14]),"Extension"
    print (printer_dev) @(h[12]),dashes$(1,132-h[12])
    print (printer_dev) @(o[12]-21),"Total For Buyer ",prevbuyer$,
    :                   @(o[12]),buyertots[0]:m2$,
    :                   @(o[13]-1),buyertots[1]:"#"+m6$,
    :                   @(o[14]-1),buyertots[2]:"#"+m1$
    print (printer_dev)""
    l=l+5

rem --- Print selection critera for this buyer

    print (printer_dev) "Selection Criteria:",
    :                   @(hsel[1]),"Beg",
    :                   @(hsel[2]),"End",
    :                   @(hsel[3]),"Beg",
    :                   @(hsel[4]),"End",
    :                   @(hsel[5]),"Beg",
    :                   @(hsel[6]),"End",
    :                   @(hsel[7]),"Beg",
    :                   @(hsel[8]),"End"
    print (printer_dev) @(hsel[0]),"Seq",
    :                   @(hsel[1]),"Buyer",
    :                   @(hsel[2]),"Buyer",
    :                   @(hsel[3]),"Vendor",
    :                   @(hsel[4]),"Vendor",
    :                   @(hsel[5]),"Date",
    :                   @(hsel[6]),"Date",
    :                   @(hsel[7]),"Whs",
    :                   @(hsel[8]),"Whs",
    :                   @(hsel[9]),"Comment"
    l=l+2
    dim w0$(4),w1$(75)
    read (poe17_dev,key=firm_id$+prevbuyer$,dom=*next)
rem criterialoop:
    while more
        if therearebuyers goto readpoe17
        w0$=key(poe07_dev,end=donebuyertot)
        if pos(firm_id$=w0$)<>1 goto donebuyertot
        goto readpoe07
    readpoe17:
        k17$=key(poe17_dev,end=donebuyertot)
        if pos(firm_id$+prevbuyer$=k17$)<>1 goto donebuyertot
        read (poe17_dev)
        w0$=k17$(1,2)+k17$(6,2)
    readpoe07:
rem     read record (poe07_dev,key=w0$,dom=nextpoe17) poe07a$
        read record (poe07_dev,key=w0$,dom=continue) poe07a$
        seqnum$=str(w0$(3,2):"00")
        comment$=w1$(26,30)
        if w1$(13,3)=fill(3) buyerfrom$="First" else buyerfrom$=w1$(13,3)
        if w1$(16,3)=fill(3) buyerthru$="Last" else buyerthru$=w1$(16,3)
        if w1$(1,6)=fill(6) vendfrom$="First" else vendfrom$=fnmask$(w1$(1,vendlen),vendomask$)
        if w1$(7,6)=fill(6) vendthru$="Last" else vendthru$=fnmask$(w1$(7,vendlen),vendomask$)
        if w1$(56,2)=fill(2) whsfrom$="First" else whsfrom$=w1$(56,2)
        if w1$(58,2)=fill(2) whsthru$="Last" else whsthru$=w1$(58,2)
        if w1$(19,3)=fill(3) datefrom$="First" else datefrom$=fndate$(w1$(19,3))
        if w1$(22,3)=fill(3) datethru$="Last" else datethru$=fndate$(w1$(22,3))
        if l+1>l9 gosub report_heading
        print (printer_dev) @(hsel[0]),seqnum$,
        :                   @(hsel[1]),buyerfrom$,
        :                   @(hsel[2]),buyerthru$,
        :                   @(hsel[3]),vendfrom$,
        :                   @(hsel[4]),vendthru$,
        :                   @(hsel[5]),datefrom$,
        :                   @(hsel[6]),datethru$,
        :                   @(hsel[7]),whsfrom$,
        :                   @(hsel[8]),whsthru$,
        :                   @(hsel[9]),comment$
        l=l+1
rem nextpoe17:
rem goto criterialoop
    wend
donebuyertot:
    return

vendtotals: rem --- Print Vendor Totals

    if printtotline$="Y" gosub totalline
    printtotline$="N"
    vendtotwt$=str(vendtots[1]:"#"+m6$)
    minimumwt$=str(s[2]:"#"+m6$)
    totwtdiff$=str(vendtots[1]-s[2]:"#"+m6$)
    if printptot$="Y" gosub prodtotals
    if l+4>l9 printvtot$="N"; gosub newvendor
    print (printer_dev)""
    print (printer_dev) @(o[12]-20-vendlen),"Total For Vendor ",fnmask$(prevvend$(1,vendlen),vendomask$),
    :                   @(o[12]),vendtots[0]:m2$,
    :                   @(o[13]-1),vendtotwt$,
    :                   @(o[14]-1),vendtots[2]:"#"+m1$
    print (printer_dev) @(o[12]-17),"Target Minimum ",
    :                   @(o[12]),s[3]:m2$,
    :                   @(o[13]-1),minimumwt$,
    :                   @(o[14]-1),s[1]:"#"+m1$
    print (printer_dev) ""
    print (printer_dev) @(o[12]-13),"Over/Under",
    :                   @(o[12]),vendtots[1]-s[3]:m2$,
    :                   @(o[13]-1),totwtdiff$,
    :                   @(o[14]-1),vendtots[2]-s[1]:"#"+m1$
    print (printer_dev) ""
    l=l+6
    dim vendtots[2]
    printvtot$="N"
    dopagebrk$="Y"
    return

prodtotals: rem --- Print product type Subtotal

    if printtotline$="Y" gosub totalline
    printtotline$="N"
    totprodwt$=str(prodtots[1]:"#"+m6$)
    print (printer_dev) ""
    print (printer_dev) @(o[12]-29),"Total For Product Type ",prevprodtype$,
    :                   @(o[12]),prodtots[0]:m2$,
    :                   @(o[13]-1),totprodwt$,
    :                   @(o[14]-1),prodtots[2]:"#"+m1$
    l=l+2
    printptot$="N"
    dim prodtots[2]
    return

dosurplus: rem --- Print surplus of other whses for items stocked by 'W'

    dim d0$(24),d[2],surplus$(132)
    surplus$(o[1])="Surplus Other Whses: "
    col=4
    read record (poe36_dev,key=firm_id$(1,2)+itemnum$,dom=*next) poe36a$
readpoe36:
    k36$=key(poe36_dev,end=printsurplus)
    if pos(firm_id$(1,2)+itemnum$=k36$)<>1 goto printsurplus
    if col>12 goto printsurplus
    read record (poe36_dev) poe36a$
    if d0$(23,2)=whse$ goto nextpoe36
    surplus$(o[col])=d0$(23,2)+": "+str(d[0]:m2$)
    col=col+2
nextpoe36:
    goto readpoe36
printsurplus:
    if col<=4 goto donesurplus
    print (printer_dev)surplus$
    let l=l+1
donesurplus:
    return

totalline: rem --- Print total line

    if l+1>l9 printvtot$="N"; gosub newvendor
    dim c0$(36),c1$(20),c[16],adjustcodes$(8),tlinepoint$(0),tordpoint$(0)
    dim tavail$(0),tonorder$(0),teoq$(0),tsafety$(0),tmax$(0),tlead$(0)
    dim tsugg$(0),tweight$(0),tcost$(0),tannualusage$(0),tavgusage$(0)
    dim textension$(0)
    find record (poe26_dev,key=firm_id$+prevbuyer$+prevvend$+prevprodtype$+previtem$+"",dom=nototal) poe26a$
    let tstocklevel$=c1$(1,1),adjustcodes$=c1$(3,8),textension$=str(c[14]:m1$)
    let tavail$=str(c[2]-prevminusavail:m2$),tweight$=str(c[8]:m6$)
    let tonorder$=str(c[3]-prevminusonord:m2$),tsugg$=str(c[9]:m2$)
    let tannualusage$=str(c[12]-prevminusannuse:m2$)
    let tavgusage$=str(c[13]-prevminusavguse:m2$)
rem if tstocklevel$="W" goto l6900
    if tstocklevel$="W" goto brnch1
    let tlinepoint$=str(c[0]:m2$),tordpoint$=str(c[1]:m2$),teoq$=str(c[4]:m2$)
    let tsafety$=str(c[5]:m2$),tmax$=str(c[6]:m2$),tlead$=str(c[7]:m9$)
    let tcost$=str(c[10]:m3$)
rem l6900:
brnch1:
    print (printer_dev) @(0),adjustcodes$,
    :                   @(o[1]),tannualusage$,
    :                   @(o[2]),tavgusage$,
    :                   @(o[3]),tsafety$,
    :                   @(o[4]),tlead$,
    :                   @(o[5]),tavail$,
    :                   @(o[6]),tonorder$,
    :                   @(o[7]),tordpoint$,
    :                   @(o[8]),tmax$,
    :                   @(o[9]),teoq$,
    :                   @(o[10]),tlinepoint$,
    :                   @(o[11]),tcost$,
    :                   @(o[12]),tsugg$,
    :                   @(o[13]),tweight$,
    :                   @(o[14]),textension$
    let tsugg=c[9],tweight=c[8],textension=c[14]
    let buyertots[0]=buyertots[0]+tsugg,buyertots[1]=buyertots[1]+tweight
    let buyertots[2]=buyertots[2]+textension,vendtots[0]=vendtots[0]+tsugg
    let vendtots[1]=vendtots[1]+tweight,vendtots[2]=vendtots[2]+textension
    let prodtots[0]=prodtots[0]+tsugg,prodtots[1]=prodtots[1]+tweight
    let prodtots[2]=prodtots[2]+textension
    goto donetotal
nototal:
    print (printer_dev) @(1),"*** Total Line Not On File ***"
donetotal:
    let printtotline$="N",l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem comment unused functions

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
rem def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
rem def fnyy$(q$)=q$(3,2)
rem def fnclock$(q$)=date(0:"%hz:%mz %p")
rem def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

rem    def fnbasename$(q$,q0$)
rem        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
rem        if q then q$=q$(q+1)
rem        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
rem    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

rem    def fnglobal(q$,q1)
rem        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
rem        return q1
rem    fnend

rem --- fnglobal$: Return string value of passed STBL variable

rem    def fnglobal$(q$,q1$)
rem        q1$=stbl(q$,err=*next)
rem        return q1$
rem    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
