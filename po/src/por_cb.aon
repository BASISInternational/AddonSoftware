rem --- Quality Assurance Receipt Register (Report Overlay)
rem --- Program por_cb v8.0.0 17Jul2007 (por_cb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:46:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- BBx reference ["pou_ca.bbx"] (Line 0496)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist b0$(1),b1$(1)
rem --- ivm01a: iolist c0$(1),c1$(1),c2$(1)
rem --- poe03a: iolist a0$(1),a1$(1),a2$,a3$,a[all]
rem --- poe13a: iolist w0$(1),w1$(1),w2$(1),w3$(1),w4$(1),w5$,w6$,w[all]
rem --- poe23a: iolist l0$(1),l1$(1),l2$,l[all]
rem --- poe63a: iolist d0$(1),d1$(1),d2$,d[all]
rem --- pom02a: iolist y0$(1),y1$(1),y2$(1)
rem --- pom03a: iolist r0$(1),r1$(1)
rem --- pow13a: iolist x0$(1)

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="ivm-01"
    files$[4]="poe-03"
    files$[5]="poe-13"
    files$[6]="poe-23"
    files$[7]="poe-63"
    files$[8]="pom-02"
    files$[9]="pom-03"
    files$[10]="pow-13"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    ivm01_dev=channels[3]
    poe03_dev=channels[4]
    poe13_dev=channels[5]
    poe23_dev=channels[6]
    poe63_dev=channels[7]
    pom02_dev=channels[8]
    pom03_dev=channels[9]
    pow13_dev=channels[10]

rem --- Dimension string templates

    dim apm01a$:templates$[2],ivm01a$:templates$[3],poe03a$:templates$[4],
:       poe13a$:templates$[5],poe23a$:templates$[6],poe63a$:templates$[7],
:       pom02a$:templates$[8],pom03a$:templates$[9],pow13a$:templates$[10]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    begvend$=fnget_fld_data$(table$,"vendor_id1")
    endvend$=fnget_fld_data$(table$,"vendor_id2")
    begdate$=fnget_fld_data$(table$,"beg_date")
    enddate$=fnget_fld_data$(table$,"end_date")
    begrec$=fnget_fld_data$(table$,"beg_recvr")
    endrec$=fnget_fld_data$(table$,"end_recvr")
    pgbreak$=fnget_fld_data$(table$,"page_break")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Initializations

    precision i[1]
    dim a0$(22),a1$(160),a[8],o[14],c0$(22),c1$(60),c2$(64),x0$(25)
    dim w0$(25),w1$(48),w2$(32),w3$(22),w4$(40),w[12],description$(40)
    dim headings$[5],totals[4],receipt[4],vendor[4],report[4]
    dim y0$(4),y1$(32),r0$(5),r1$(32),l0$(28),l1$(20),l[1],line[4]
    dim d0$(28),d1$(32),d[6],difqty[99],diftype$[99],difkey$[99]
    m1$=i6$
    m2$=i7$
    m3$=i8$
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    width=132
    page=0
    l9=59
    l=l9+1
    clock$=""
    when$=sysinfo.system_date$
    headings=5
    done=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    nf$="(Not On File)"
    number=0
    lsdesc$="Serial Nbr"
    dif=0
    x1=15
    x2=12
    x3=12
    ms$="000-"
    if i3$(17,1)="L" lsdesc$="Lot Nbr"
    more=1

rem l600: rem --- Resize masks
resize_mask: rem --- Resize masks

    x=m1+(m2*4)+m3+i[0]+52
rem if x<=width goto l700
    if x<=width goto back
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,x1
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,x2
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,x3
    x1=x1-1
    x2=x2-1
    x3=x3-1
rem goto l600
    goto resize_mask

rem l700: rem --- Background
back: rem --- Background

rem call pgmdir$+"adc_progress.aon","N","","","Printing","",m0+8,0,1,meter_num,status
    call pgmdir$+"adc_progress.aon","N","","","","",m0+8,0,1,meter_num,status

rem --- Print positions

    dim h1$(width),h2$(width),qh$(m2*4,"-")
    o[14]=width-m1
    o[13]=o[14]-m3
    o[12]=o[13]-m2
    o[11]=o[12]-m2
    o[10]=o[11]-m2
    o[9]=o[10]-m2
    o[8]=o[9]-3
    o[7]=o[8]-11
    o[6]=o[7]-9
    o[5]=o[6]-9
    o[4]=o[5]-9
    o[1]=4
    o[2]=7
    o[3]=10
    qh$(fncenter(m2*4,10),10)=" Quantity "
    x1$="First"
    x2$="Last"
    if begvend$<>"" x1$=fvendor$
    if endvend$<>"" x2$=tvendor$
    h1$(1)="From Vendor: "+x1$
    h2$(1)="  To Vendor: "+x2$
    x1$="First"
    x2$="Last"
    if begrec$<>"" x1$=begrec$
    if endrec$<>"" x2$=endrec$
    x1$="From Receiver: "+x1$
    x2$="  To Receiver: "+x2$
    x=max(len(x1$),len(x2$))
    h1$(fncenter(width,x))=x1$
    h2$(fncenter(width,x))=x2$
    x1$="First"
    x2$="Last"
    if begdate$<>"" x1$=fndate$(begdate$)
    if enddate$<>"" x2$=fndate$(enddate$)
    x=max(len(x1$),len(x2$))+18
    h1$(width-x)="From Receipt Date: "+x1$
    h2$(width-x)="  To Receipt Date: "+x2$
    headings$[3]=h1$
    headings$[4]=h2$

rem --- Position file

    start$=firm_id$+begvend$
    read (poe03_dev,key=start$,dom=*next)

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem l1000: rem --- Read next header
    while more

    k$=key(poe03_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read record (poe03_dev) poe03a$

rem --- Range tests

    if endvend$<>"" if a0$(3,6)>endvend$ goto done
rem if begdate$<>"" if a1$(29,6)<begdate$ goto l3950
rem if enddate$<>"" if a1$(29,6)>enddate$ goto l3950
rem if begrec$<>"" if a0$(9,7)<begrec$ goto l3950
rem if endrec$<>"" if a0$(9,7)>endrec$ goto l3950

    if begdate$<>"" if a1$(29,6)<begdate$ continue
    if enddate$<>"" if a1$(29,6)>enddate$ continue
    if begrec$<>"" if a0$(9,7)<begrec$ continue
    if endrec$<>"" if a0$(9,7)>endrec$ continue
    lines=0
    status=11
    read (poe13_dev,key=a0$,dom=*next)

rem l1200: rem --- See if any line items should be updated
update_lines: rem --- See if any line items should be updated

rem k$=key(poe13_dev,end=l1300)
rem if pos(a0$=k$)<>1 goto l1300
    k$=key(poe13_dev,end=update_line_items)
    if pos(a0$=k$)<>1 goto update_line_items
    read record (poe13_dev) poe13a$
    lines=lines+1
rem if w1$(41,1)<>"Y" goto l1200
    if w1$(41,1)<>"Y" goto update_lines
    status=0

rem l1300: rem --- Any line items to be updated?
update_line_items: rem --- Any line items to be updated?

rem if lines=0 goto l1400
rem if status=0 goto l1400
    if lines=0 goto header_flds
    if status=0 goto header_flds
rem goto l3950
    continue

rem l1400: rem --- Header fields
header_flds: rem --- Header fields

    dim receipt[4]
rem call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(3,vendlen),m0$)+" "+a0$(9,7),0,0,1,meter_num,status
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    packlist$=""
    number=number+1
    if cvs(a1$(119,15),2)<>"" packlist$="Packing List: "+a1$(119,15)

rem --- Level break?

rem if t0$<>a0$(3,6) gosub l6000
    if t0$<>a0$(3,6) gosub vend_brk

rem --- Print header information

rem if l+5>l9 gosub report_heading else gosub l5200
    if l+5>l9 gosub report_heading else gosub recpt_subhead
rem --- Position detail file

    read (poe13_dev,key=a0$,dom=*next)

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem l2000: rem --- Read next detail record
    while more

    dim line[4]
rem k$=key(poe13_dev,end=l3900)
rem if pos(a0$=k$)<>1 goto l3900
    k$=key(poe13_dev,end=print_rec_totals)
    if pos(a0$=k$)<>1 goto print_rec_totals

    read record (poe13_dev) poe13a$
rem if w1$(41,1)<>"Y" goto l3800
    if w1$(41,1)<>"Y" continue

rem --- Read line code

rem if y0$(1,4)=firm_id$+w1$(1,2) goto l2200
    if y0$(1,4)=firm_id$+w1$(1,2) goto calc_ext
    y0$(1,4)=firm_id$+w1$(1,2)
    y1$(1)=""
rem find record (pom02_dev,key=y0$,dom=l3800) pom02a$
    find record (pom02_dev,key=y0$,dom=*continue) pom02a$

calc_ext: rem --- Calculate extension

    qty=w[5]
    extension=0
    if y1$(21,1)="O" qty=1
    precision 2
    extension=w[1]*qty
    precision i[1]
    line[0]=w[3]
    line[1]=w[4]
    line[2]=w[5]
    line[3]=w[6]
    line[4]=extension

rem --- Format remaining fields

    before$=""
    required$=""
    promised$=""
    wo$=""
    if cvs(w1$(3,6),2)<>"" required$=fndate$(w1$(3,6))
    if cvs(w1$(9,6),2)<>"" promised$=fndate$(w1$(9,6))
    if cvs(w1$(15,6),2)<>"" before$=fndate$(w1$(15,6))
    if cvs(w2$(1,10),2)<>"" wo$=w2$(1,7)+"-"+w2$(8,3)
    x0$(1)=w0$
    write record (pow13_dev,key=x0$) pow13a$

rem --- Branch based on line code

rem on pos(y1$(21,1)="SNVMO") goto l3800,l2500,l2600,l2700,l2800,l2900
    if(pos(y1$(21,1)="")
        continue
    else if(pos(y1$(21,1)="S")
rem l2500: rem --- Standard line

        c0$(1)=firm_id$+w3$(3)
        c1$(1)=""
        description$(1)=nf$
        find record (ivm01_dev,key=c0$,dom=*next) ivm01a$
        description$(1)=fnitem$(c1$,i[3],i[4],i[5])
        if l+2>l9 gosub report_heading
        print (printer_dev) @(o[0]),w0$(23,3),
        :                   @(o[1]),w1$(1,2),
        :                   @(o[2]),w3$(1,2),
        :                   @(o[3]),w3$(3,i[0]),
        :                   @(o[4]),before$,
        :                   @(o[5]),required$,
        :                   @(o[6]),promised$,
        :                   @(o[7]),wo$,
        :                   @(o[8]),w1$(22,2),
        :                   @(o[9]),w[3]:m2$,
        :                   @(o[10]),w[4]:m2$,
        :                   @(o[11]),w[5]:m2$,
        :                   @(o[12]),w[6]:m2$,
        :                   @(o[13]),w[1]:m3$,
        :                   @(o[14]),extension:m1$
        print (printer_dev) @(o[3]),description$
        l=l+2
rem     goto l3000
        

    else if(pos(y1$(21,1)="N")
rem l2600: rem --- Non-stock line

        if l+2>l9 gosub report_heading
        print (printer_dev) @(o[0]),w0$(23,3),
        :                   @(o[1]),w1$(1,2),
        :                   @(o[2]),w3$(1,2),
        :                   @(o[3]),w3$(3,i[0]),
        :                   @(o[4]),code$,
        :                   @(o[8]),w1$(22,2),
        :                   @(o[9]),w[3]:m2$,
        :                   @(o[10]),w[4]:m2$,
        :                   @(o[11]),w[5]:m2$,
        :                   @(o[12]),w[6]:m2$,
        :                   @(o[13]),w[1]:m3$,
        :                   @(o[14]),extension:m1$
        print (printer_dev) @(o[3]),w4$
        l=l+2
rem     goto l3000

    else if(pos(y1$(21,1)="V")
rem l2700: rem --- Vendor part number line

        if l+1>l9 gosub report_heading
        print (printer_dev) @(o[0]),w0$(23,3),
        :                   @(o[1]),w1$(1,2),
        :                   @(o[2]),w3$(1,2),
        :                   @(o[3]),w3$(3)
        l=l+1
rem     goto l3000

    else if(pos(y1$(21,1)="M")
rem l2800: rem --- Message line

        if l+1>l9 gosub report_heading
        print (printer_dev) @(o[0]),w0$(23,3),
        :                   @(o[1]),w1$(1,2),
        :                   @(o[2]),w3$(1,2),
        :                   @(o[3]),w4$
        l=l+1
rem     goto l3000

    else if(pos(y1$(21,1)="M")
rem l2900: rem --- Other type line

        if l+2>l9 gosub report_heading
        print (printer_dev) @(o[0]),w0$(23,3),
        :                   @(o[1]),w1$(1,2),
        :                   @(o[2]),w3$(1,2),
        :                   @(o[13]),w[1]:m3$,
        :                   @(o[14]),extension:m1$
        print (printer_dev) @(o[3]),w4$
        l=l+2
    fi

rem l3000: rem --- Lotted/Serialized?
rem lot_ser: rem --- Lotted/Serialized?

rem if ls$="N" goto l3400
rem if y1$(21,1)<>"S" goto l3400
rem if c2$(19,2)<>"YY" goto l3400

    if ls$="N" goto pos_rej_det
    if y1$(21,1)<>"S" goto pos_rej_det
    if c2$(19,2)<>"YY" goto pos_rej_det
    needed=0
    lastseq=0
    read (poe23_dev,key=w0$,dom=*next)

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem l3100: rem --- Read next lot/serial detail record
    while more

rem k$=key(poe23_dev,end=l3300)
rem if pos(w0$=k$)<>1 goto l3300
    k$=key(poe23_dev,end=lot_ser)
    if pos(w0$=k$)<>1 goto lot_ser
    read record (poe23_dev) poe23a$
    precision 2
    extension=l[0]*l[1]
    precision i[1]

rem --- Print detail line

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[3]),lsdesc$," ",l0$(26,3)," ",l1$(1,i[2]),
    :                   @(o[10]),l[0]:m2$,
    :                   @(o[11]),l[0]:m2$,
    :                   @(o[13]),l[1]:m3$,
    :                   @(o[14]),extension:m1$
    l=l+1
    needed=needed+l[0]
    lastseq=num(l0$(26))
rem goto l3100
    continue

rem l3300: rem --- Enough lot/serial numbers?
lot_ser: rem --- Enough lot/serial numbers?

rem if needed=w[5] goto l3400
    if needed=w[5] goto pos_rej_det
    type$="L"
    qty=w[5]-needed
    if needed<w[5] xlimit=qty
    if i3$(17,1)="L" xlimit=1
    if needed>w[5] xlimit=0
rem gosub l6800
    gosub store_diff

rem l3400: rem --- Position rejection detail file
pos_rej_det: rem --- Position rejection detail file

    needed=0
    lastseq=0
rem if w[6]=0 goto l3800
    if w[6]=0 continue
    read (poe63_dev,key=w0$,dom=*next)

rem l3500: rem --- Read next rejection detail
read_next: rem --- Read next rejection detail

rem k$=key(poe63_dev,end=l3700)
rem if pos(w0$=k$)<>1 goto l3700

    k$=key(poe63_dev,end=*continue)
    if pos(w0$=k$)<>1 continue
    read record (poe63_dev) poe63a$
    r0$(1)=firm_id$+d1$(1,3)
    r1$(1)=nf$
    lastseq=num(d0$(26,3))
    find record (pom03_dev,key=r0$,dom=*next) pom03a$
    precision 2
    extension=d[0]*w[1]
    precision i[1]

rem --- Print rejection detail

    dim ra$(22),inspector$(9)
    if cvs(d1$(4,3),2)<>"" inspector$(1)="Insp: "+d1$(4,3)
    if cvs(d1$(7,15),2)<>"" ra$(1)="RA #: "+d1$(7,15)
    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[3]),d0$(26,3)," ",r0$(3,3)," ",r1$(1,30)," ",ra$," ",inspector$,
    :                   @(o[12]),d[0]:m2$,
    :                   @(o[13]),w[1]:m3$,
    :                   @(o[14]),extension:m1$
    l=l+1
    needed=needed+d[0]
rem goto l3500
    goto read_next

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem l3700: rem --- Loop back for next detail record
    wend

rem if needed=w[6] goto l3800
    if needed=w[6] continue
    type$="R"
    qty=1
    xlimit=1
    if needed>w[6] xlimit=0
rem gosub l6800
    gosub store_diff

rem l3800: rem --- Loop back for next detail
    wend

    receipt[all]=receipt[all]+line[all]
    vendor[all]=vendor[all]+line[all]
    report[all]=report[all]+line[all]
rem goto l2000
    continue

rem l3900: rem --- Print receiver totals
print_rec_totals: rem --- Print receiver totals

    if l+2>l9 gosub report_heading
    print (printer_dev)""
    totals$="Total For Receiver # "+a0$(9,7)
    totals[all]=receipt[all]
    l=l+1
rem gosub l6900
    gosub print_totals

rem l3950: rem --- Loop back for next header record

rem goto l1000
    wend

done: rem --- All done

    done=1
rem gosub l6000
    gosub vend_brk
    totals$="Total For Register"
    totals[all]=report[all]
rem gosub l6900
    gosub print_totals

rem --- Any lot/serial number or rejection code differences?

rem if dif=0 goto l4900
if dif=0 goto run_next

    if l+4>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)"Lot/Serial Number And Rejection Code Differences:"
    print (printer_dev)""
    l=l+3

rem --- Print list of lines with lot/serial number differences

    for x=1 to dif
        k$=difkey$[x]
        qty=difqty[x]
        b0$(1)=k$(1,8)
        b1$(1)=nf$
        find record (apm01_dev,key=b0$,dom=*next) apm01a$
rem l4440:  //label not called anywhere
        x$="Is Missing "+str(qty)
        lsdesc$=" Lot/Serial Number(s)"
        if qty<0 x$="Has "+str(abs(qty))+" Too Many"
        if diftype$[x]="R" lsdesc$=" Rejection Code Entries"
        if l+1>l9 gosub report_heading
        print (printer_dev) "Vendor ",fnmask$(b0$(3,vendlen),m0$)," ",b1$(1,30),
        :                   " Receiver # ",k$(9,7),"/PO # ",k$(16,7),"-",k$(23,3)," ",x$,lsdesc$
        l=l+1
    next x

rem --- Notify user of errors

    dim message$[2]
    message$[0]="Errors Were Reported During The Generation Of The QA Receipt"
    message$[1]="Register. The Update Will Not Be Run. Review The Register,"
    message$[2]="Correct The Errors And Reprint (<Enter>=Continue)"
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],2,22,-1,v$,v3
    if v$<>"SPECIAL" goto std_exit

rem l4900: rem --- Run next overlay
run_next: rem --- Run next overlay

    if number=0 goto std_exit
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,meter_num,status
    run pgmdir$+"pou_ca.bbx"

report_heading: rem --- Report Heading

    l=headings+4
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[4]),"Not",
    :                   @(o[5]),"Date",
    :                   @(o[6]),"Date",
    :                   @(o[9]+m2-9),qh$,
    :                   @(o[13]+m3-5),"Unit"
    print (printer_dev) @(o[0]),"Seq",
    :                   @(o[1]),"Cd",
    :                   @(o[2]),"Wh",
    :                   @(o[3]),"Item",
    :                   @(o[4]),"Before",
    :                   @(o[5]),"Required",
    :                   @(o[6]),"Promised",
    :                   @(o[7]),"Work Order",
    :                   @(o[8]),"UM",
    :                   @(o[9]+m2-9),"Ordered",
    :                   @(o[10]+m2-9),"Received",
    :                   @(o[11]+m2-9),"Approved",
    :                   @(o[12]+m2-9),"Rejected",
    :                   @(o[13]+m3-5),"Cost",
    :                   @(o[14]+m1-10),"Extension"
rem if done=0 gosub l5200
    if done=0 gosub recpt_subhead
    return

rem l5200: rem --- Receipt subheading
recpt_subhead: rem --- Receipt subheading

    print (printer_dev) ""
    print (printer_dev) "Vendor: ",vendor$,@(48),"Rec #: ",a0$(9,7),
    :                   "  PO #:",a0$(16,7),@(78),packlist$,@(100),
    :                   "Receipt Date: ",fndate$(a1$(29,6))
    print (printer_dev) ""
    let l=l+3
    return

rem l6000: rem --- Vendor break
vend_brk: rem --- Vendor break

rem if t0$="" goto l6100
    if t0$="" goto brnch1
    let totals$="Total For "+vendor$,totals[all]=vendor[all]
rem gosub l6900
    gosub print_totals
rem l6100:
brnch1:
rem if done goto l6190
    if done return
    dim vendor[4]
    let t0$=a0$(3,6),b0$(1)=firm_id$+t0$,b1$(1)=nf$
    find record (apm01_dev,key=b0$,dom=*next) apm01a$
    let vendor$=fnmask$(b0$(3,vendlen),m0$)+" "+cvs(b1$(1,30),2)
    if pagebreak$="Y" l=l9+1
rem l6190:
    return
rem --- Store lot/serial or rejection code difference
rem l6800:
store_diff:
    let dif=dif+1
rem if dif>99 goto l6890
    if dif>99 return
    let difkey$[dif]=w0$,diftype$[dif]=type$,difqty[dif]=qty
rem if xlimit=0 goto l6890
    if xlimit=0 return
    for x=1 to xlimit
        if l+1>l9 gosub report_heading
        let l=l+1,lastseq=lastseq+1
        if type$="L" print (printer_dev)@(o[3]),lsdesc$," ",lastseq:ms$,fill(i[2],"_")
        if type$="R" print (printer_dev)@(o[3]),lastseq:ms$,"___ ",fill(30,"_")
    next x
rem l6890:
    return
rem --- Print totals
rem l6900:
print_totals
    if l+1>l9 gosub report_heading
    if len(totals$)>o[6] totals$=totals$(1,o[6])
    print (printer_dev) @(o[9]-len(totals$)),totals$,
    :                   @(o[9]),totals[0]:m2$,
    :                   @(o[10]),totals[1]:m2$,
    :                   @(o[11]),totals[2]:m2$,
    :                   @(o[12]),totals[3]:m2$,
    :                   @(o[14]),totals[4]:m1$
    let l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem comment unused functions
    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
rem def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

rem def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
rem def fnyy$(q$)=q$(3,2)
rem def fnclock$(q$)=date(0:"%hz:%mz %p")
rem def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

rem    def fnbasename$(q$,q0$)
rem        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
rem        if q then q$=q$(q+1)
rem        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
rem    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

rem    def fnglobal(q$,q1)
rem        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
rem        return q1
rem    fnend

rem --- fnglobal$: Return string value of passed STBL variable

rem    def fnglobal$(q$,q1$)
rem        q1$=stbl(q$,err=*next)
rem        return q1$
rem    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
