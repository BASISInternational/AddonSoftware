rem --- Open Purchase Orders Report (Print Overlay)
rem --- Program por_ib v8.0.0 17Jul2007 (por_ib)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:48:23)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fname$ (Line 0432)

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file apm-04 referenced (Line 0092)
rem --- Cross-reference file poe-32 referenced (Line 0102)
rem --- Cross-reference file poe-32 referenced (Line 0203)
rem --- Cross-reference file poe-32 referenced (Line 0205)
rem --- Cross-reference file poe-32 referenced (Line 0207)
rem --- Cross-reference file apm-04 referenced (Line 0214)
rem --- Cross-reference file apm-04 referenced (Line 0218)
rem --- Cross-reference file apm-04 referenced (Line 0221)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record apm04a replaced by index on apm-01 (Line 0107)
rem --- Cross-reference record poe32a replaced by index on opt-01 (Line 0110)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist c0$(1),c1$(1)
rem --- apm05a: iolist r0$(1),r1$(1)
rem --- apm10c: iolist d0$(1)
rem --- arm01a: iolist *,custinfo$(1)
rem --- arm03a: iolist *,dropinfo$(1)
rem --- ivm01a: iolist *,x1$(1)
rem --- ivm05a: iolist *,*,vpartnum$(1)
rem --- ivm10c: iolist x0$
rem --- poe02a: iolist a0$(1),a1$(1),a2$,a3$,a[all]
rem --- poe12a: iolist b0$(1),b1$(1),b2$(1),b3$(1),b4$(1),b5$,b6$,b[all]
rem --- pom02a: iolist s0$(1),s1$(1)

rem --- The following channel references have been identified:

rem --- apm04a: Channel reference (Line 0217)

rem --------------------------------------------------------------------------------
rem --- aps01a: (Generated by CodePort)
rem --- ivs01a: (Generated by CodePort)
rem --- poe32a: Channel reference (Line 0213)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="apm-04"
    files$[4]="apm-05"
    files$[5]="apm-10"
    files$[6]="arm-01"
    files$[7]="arm-03"
    files$[8]="ivm-01"
    files$[9]="ivm-05"
    files$[10]="ivm-10"
    files$[11]="poe-02"
    files$[12]="poe-12"
    files$[13]="poe-32"
    files$[14]="pom-02"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    apm04_dev=channels[3]
    apm05_dev=channels[4]
    apm10_dev=channels[5]
    arm01_dev=channels[6]
    arm03_dev=channels[7]
    ivm01_dev=channels[8]
    ivm05_dev=channels[9]
    ivm10_dev=channels[10]
    poe02_dev=channels[11]
    poe12_dev=channels[12]
    poe32_dev=channels[13]
    pom02_dev=channels[14]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm04a$:templates$[3],apm05a$:templates$[4],
:       apm10a$:templates$[5],arm01a$:templates$[6],arm03a$:templates$[7],
:       ivm01a$:templates$[8],ivm05a$:templates$[9],ivm10a$:templates$[10],
:       poe02a$:templates$[11],poe12a$:templates$[12],poe32a$:templates$[13],
:       pom02a$:templates$[14]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    pofrom$=fnget_fld_data$(table$,"beg_purchase_order")
    pothru$=fnget_fld_data$(table$,"end_purchase_order")
    printseq$=fnget_fld_data$(table$,"print_sequence")
    vendfrom$=fnget_fld_data$(table$,"beg_vendor")
    vendthru$=fnget_fld_data$(table$,"end_vendor")
    whichdate$=fnget_fld_data$(table$,"which_date")
    datefrom$=fnget_fld_data$(table$,"beg_date")
    datethru$=fnget_fld_data$(table$,"end_date")
    whse$=fnget_fld_data$(table$,"warehouse_id")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8],vendor$(6)
    grandtot=0
    printvtot$="N"
    initializing$="Y"; rem "Init files 1st time through
    more=1

rem --- Headings and print positions

    headings=2
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads
    on pos(printseq$="PAV") goto done,printbypo,printbyalt,printbyvend
printbypo:
    headings$[1]=headings$[1]+" By Purchase Order"
    goto positions
printbyalt:
    headings$[1]=headings$[1]+" By Alternate Sequence"
    goto positions
printbyvend:
    headings$[1]=headings$[1]+" By Vendor"
    goto positions
positions:
    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+3
    o[4]=o[3]+itemlen+1
    o[5]=o[4]+9
    o[6]=o[5]+9
    o[7]=o[6]+9
    o[8]=o[7]+3
    o[9]=o[8]+m5+1
    o[10]=o[9]+m2+1
    o[11]=o[10]+m2+1
    o[12]=o[11]+m2+1
    o[13]=o[12]+m3+1
rem if o[13]+15<width goto l950
    if o[13]+15<width goto pos_files
    o[13]=width-m1
    o[12]=o[13]-m3
    o[11]=o[12]-m2
    o[10]=o[11]-m2
    o[9]=o[10]-m2
    o[8]=o[9]-m5

rem l950: rem --- Position files
pos_files: rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","Printing","",14,0,1,meter_num,status

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem sortorder: rem --- Sorts
    while more

rem on pos(printseq$="PAV") goto done,sortbypo,sortbyalt,sortbyvend
    action=pos(printseq$="PAV")
    printseq_null=0
    purchase_order_seq=1
    vendor_alt_seq=2
    vendor_seq=3

    switch action
        case printseq_null
            goto done
            break
        case purchase_order_seq
                if initializing$="N" goto keybypo
                initializing$="N"
                read (poe32_dev,key=firm_id$+pofrom$+vendfrom$,dom=*next)
            keybypo:
                k32$=key(poe32_dev,end=done)
                k$=k32$(1,2)+k32$(10,6)+k32$(3,7)
                read (poe32_dev)
                rem goto testkey
                break
        case vendor_alt_seq
                if initializing$="N" goto keybyalt
                initializing$="N"
                read (apm04_dev,key=firm_id$+"A"+vendfrom$,dom=*next)

            keybyalt: rem --- Find a POE02 record using alt seq

                k04a$=key(apm04_dev,end=done)
                if k04a$(1,3)<>firm_id$+"A" goto done
                k04b$=k04a$(1,2)+k04a$(14,6)
                read (apm04_dev); rem "Move ptr
                read (poe02_dev,key=k04b$,dom=*next)
                k01$=key(poe02_dev,end=nextalt)
                if k01$(1,8)<>k04b$ goto nextalt
                k$=k01$
                rem goto testkey
                nextalt:
                    goto keybyalt
                break
        case vendor_seq
                sortbyvend: rem --- Sort by vendor

                if initializing$="N" goto keybyvend
                initializing$="N"
                read (poe02_dev,key=firm_id$+vendfrom$+pofrom$,dom=*next)

            keybyvend: rem --- Read through PO headers

                k$=key(poe02_dev,end=done)
                break

        case default
                break
   swend                
testkey:
    if k$(1,2)<>firm_id$ goto done
    read record (poe02_dev,key=k$) poe02a$

rem sortbypo: rem --- Sort by Purchase Order

rem if initializing$="N" goto keybypo
rem initializing$="N"
rem read (poe32_dev,key=firm_id$+pofrom$+vendfrom$,dom=*next)
rem keybypo:
rem k32$=key(poe32_dev,end=done)
rem k$=k32$(1,2)+k32$(10,6)+k32$(3,7)
rem read (poe32_dev)
rem goto testkey

rem sortbyalt: rem --- Sort by alternate sequence

rem if initializing$="N" goto keybyalt
rem initializing$="N"
rem read (apm04_dev,key=firm_id$+"A"+vendfrom$,dom=*next)

rem keybyalt: rem --- Find a POE02 record using alt seq

rem k04a$=key(apm04_dev,end=done)
rem if k04a$(1,3)<>firm_id$+"A" goto done
rem k04b$=k04a$(1,2)+k04a$(14,6)
rem read (apm04_dev); rem "Move ptr
rem read (poe02_dev,key=k04b$,dom=*next)
rem k01$=key(poe02_dev,end=nextalt)
rem if k01$(1,8)<>k04b$ goto nextalt
rem k$=k01$
rem goto testkey
rem nextalt:
rem    goto keybyalt

rem sortbyvend: rem --- Sort by vendor

rem if initializing$="N" goto keybyvend
rem initializing$="N"
rem read (poe02_dev,key=firm_id$+vendfrom$+pofrom$,dom=*next)

rem keybyvend: rem --- Read through PO headers

rem k$=key(poe02_dev,end=done)
rem testkey:
rem if k$(1,2)<>firm_id$ goto done
rem read record (poe02_dev,key=k$) poe02a$

rem --- Test Ranges

    headrecprinted$="N"
    if pofrom$<>fill(7) and a0$(9,7)<pofrom$ goto nextheader
    if pothru$<>fill(7) and a0$(9,7)>pothru$ goto nextheader
    if printseq$="A" if cvs(vendfrom$,2)<>"" if cvs(k04a$(4,10),2)<cvs(vendfrom$,2) goto nextheader
    if printseq$="A" if cvs(vendthru$,2)<>"" if cvs(k04a$(4,10),2)>cvs(vendthru$,2) goto nextheader
    if printseq$="A" goto brnch9
    if vendfrom$<>fill(6) and a0$(3,6)<vendfrom$ goto nextheader
    if vendthru$<>fill(6) and a0$(3,6)>vendthru$ goto nextheader
rem l1760:
brnch9:
    if whse$<>"ALL" and a1$(1,2)<>whse$ goto readdetail
    gosub gettestdate_header
    if datefrom$<>"" and testdateh$<datefrom$ goto readdetail
    if datethru$<>"" and testdateh$>datethru$ goto readdetail

rem --- Header passed tests

    gosub testbreaks
    headrecprinted$="Y"

readdetail: rem --- Test if any detail are w/in date range, if so, print line

    dim b0$(18),b1$(48),b2$(32),b3$(22),b4$(40),b[12]
    read (poe12_dev,key=a0$(1,15),dom=*next)

read_poe12: rem --- Test PO Detail date range

    k11$=key(poe12_dev,end=done_detail)
    if k11$(1,15)<>a0$ goto done_detail
    read record (poe12_dev,key=k11$) poe12a$
    if whse$<>"ALL" and b3$(1,2)<>whse$ goto nextdetail
    gosub gettestdate_detail
    if datefrom$<>"" and testdated$<datefrom$ goto nextdetail
    if datethru$<>"" and testdated$>datethru$ goto nextdetail

rem --- Detail passed, so print header if nec & print detail

    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(3,vendlen),vendomask$)+" "+a0$(9,7),0,0,1,meter_num,status
rem if headrecprinted$="Y" goto l2240
    if headrecprinted$="Y" goto prn_detail
    gosub testbreaks
    headrecprinted$="Y"
rem l2240:
prn_detail:
    gosub printdetail

nextdetail: rem --- Accumulate totals; then get next detail

    potot=potot+extension
    vendtot=vendtot+extension
    grandtot=grandtot+extension
    extension=0
    extension$=""
    goto read_poe12

done_detail: rem --- Done w/detail for this PO

    if headrecprinted$="Y" gosub pototals

nextheader: rem --- Loop up for next header record via sort files

rem ************************************************************************
rem post cc edit on 18th July 2007
rem ************************************************************************
rem
rem if printseq$<>"A" goto l2460
    if printseq$<>"A" continue

rem --- See if there's another PO for vend before getting next alt seq

rem k$=key(poe02_dev,end=l2460)
    k$=key(poe02_dev,end=*continue)
    if k$(3,6)=vendor$ goto testkey
rem l2460:
rem goto sortorder
    wend

done: rem --- All Done

    if l+2>l9 gosub report_heading
    if printseq$<>"P" gosub vendtotals
    print (printer_dev)@(o[13]-17),"Total For Report",@(o[13]),grandtot:m1$
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    whse_detail$=b3$(1,2)
    itemnum$=b3$(3,20)
    memo$=b4$
    unitmeas$=b1$(22,2)
    if b1$(3,6)<>fill(6) datereq$=fndate$(b1$(3,6))
    if b1$(9,6)<>fill(6) dateprom$=fndate$(b1$(9,6))
    if b1$(15,6)<>fill(6) notb4date$=fndate$(b1$(15,6))
    convfact$=str(b[0]:m5$)
    qtyord$=str(b[3]:m2$)
    qtyrec$=str(b[7]:m2$)
    baldue$=str(b[3]-b[7]:m2$)
    unitcost$=str(b[1]:m3$)
    wonum$=b2$(1,7)
    woseq$=b2$(8,3)
    jobnum$=b1$(24,10)

rem --- Get Drop Ship flag & Line Type

    dim s0$(4),s1$(32)
    linetype$="N"
    dropship$="N"
rem find record (pom02_dev,key=b0$(1,2)+b1$(1,2),dom=l4300) pom02a$
    find record (pom02_dev,key=b0$(1,2)+b1$(1,2),dom=get_item_desc) pom02a$
    linetype$=s1$(21,1)
    dropship$=s1$(22,1)

rem l4300: rem --- Get Item Desc for S and N type lines
    get_item_desc: rem --- Get Item Desc for S and N type lines

rem if linetype$="N" itemdesc$=memo$; goto l4360
    if linetype$="N" itemdesc$=memo$; goto get_ext
    dim itemdesc$(60),x1$(60)
    itemdesc$(1)="Not On File"
rem find record (ivm01_dev,key=firm_id$+b3$(3,20),dom=l4360) ivm01a$
    find record (ivm01_dev,key=firm_id$+b3$(3,20),dom=get_ext) ivm01a$
    itemdesc$(1)=fnitem$(x1$,desclen[1],desclen[2],desclen[3])

rem l4360: rem --- Get extension
    get_ext: rem --- Get extension

    gosub calc_extension

rem --- Get Vendor's Part #

    dim vpartnum$(20)
    find record (ivm05_dev,key=b0$(1,8)+itemnum$,dom=*next) ivm05a$

rem --- Format common part of print line

    dim pline$(132)
    pline$(1)=b0$(16,3)+" "+b1$(1,2)+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")=0 goto not_mov
    if linetype$="V" pline$(o[3]+1)=memo$(1,20) else pline$(o[3]+1)=memo$
    if linetype$="O" pline$(o[12]+1,m3)=unitcost$,pline$(o[13]+1)=extension$
    if l+1>l9 gosub report_heading
    print (printer_dev)pline$
    l=l+1
    goto done_printdetail

not_mov: rem --- Print Line Types 'S' & 'N'

    if pos(linetype$="SN")=0 goto done_printdetail
    pline$(o[3]+1)=itemnum$(1,itemlen)
    pline$(o[4]+1)=datereq$
    pline$(o[5]+1)=dateprom$
    pline$(o[6]+1)=notb4date$
    pline$(o[7]+1)=unitmeas$
    if linetype$="S" pline$(o[8]+1)=convfact$
    if l+2>l9 gosub report_heading
    print (printer_dev)pline$,  @(o[9]),qtyord$,
    :                           @(o[10]),qtyrec$,
    :                           @(o[11]),baldue$,
    :                           @(o[12]),unitcost$,
    :                           @(o[13]),extension$
    print (printer_dev) @(o[3]),itemdesc$(1,40),
    if wonum$<>fill(7) 
    :   print (printer_dev) @(o[6]+4),"WO: ",wonum$,"-",woseq$ else print (printer_dev)""
    l=l+2
    if vpartnum$=fill(20) goto dropship
    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[3]),"Vendor's Part Number ",vpartnum$
    l=l+1

dropship: rem --- Print drop ship info if applicable

    if dropship$<>"Y" or ar$="N" goto done_printdetail
    dim custinfo$(321),dropinfo$(173),custaddr$(120),dropaddr$(120)
    custname$="Not On File"
    dropname$="Not On File"
rem find record (arm01_dev,key=b0$(1,2)+b2$(11,6),dom=l4880) arm01a$
    find record (arm01_dev,key=b0$(1,2)+b2$(11,6),dom=brnch1) arm01a$
    custname$=custinfo$(1,30)
    custaddr$=custinfo$(31,72)+custinfo$(203,24)+custinfo$(103,9)
    call pgmdir$+"adc_address.aon",custaddr$,24,4,9,30
rem l4880:
brnch1:    
rem find record (arm03_dev,key=b0$(1,2)+b2$(11,6)+b2$(27,6),dom=l4910) arm03a$
    find record (arm03_dev,key=b0$(1,2)+b2$(11,6)+b2$(27,6),dom=brnch2) arm03a$
    dropname$=dropinfo$(1,30)
    dropaddr$=dropinfo$(31,72)+dropinfo$(127,24)+dropinfo$(151,9)
    call pgmdir$+"adc_address.aon",dropaddr$,24,4,9,30
rem l4910:
brnch2:
    if l+6>l9 gosub report_heading
    print (printer_dev) @(o[3]),"Drop Ship Above Line To Customer", 
    :                   @(43),fnmask$(b2$(11,custlen),customask$),
    :                   " Order ",b2$(17,7)," ",b2$(24,3),
    :                   @(73),"Ship To:",
    :                   @(82),fnmask$(b2$(27,custlen),customask$)
    print (printer_dev) @(38),"Name",
    :                   @(43),custname$,
    :                   @(82),dropname$
    print (printer_dev) @(35),"Address",
    :                   @(43),custaddr$(1,30),
    :                   @(82),dropaddr$(1,30)
    l=l+3
    if custaddr$(31,30)<>fill(30) or dropaddr$(31,30)<>fill(30) 
    :   print (printer_dev) @(43),custaddr$(31,30),
    :                       @(82),dropaddr$(31,30); let l=l+1
    if custaddr$(61,30)<>fill(30) or dropaddr$(61,30)<>fill(30) 
    :   print (printer_dev) @(43),custaddr$(61,30),
    :                       @(82),dropaddr$(61,30); let l=l+1
    if custaddr$(91,30)<>fill(30) or dropaddr$(91,30)<>fill(30) 
    :   print (printer_dev) @(43),custaddr$(91,30),
    :                       @(82),dropaddr$(91,30); let l=l+1
done_printdetail:
    return

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(0),"From Vendor: ",vendf$," ",vendfname$(1,20),
    :                   @(fncenter(popagehead$,width)),popagehead$,
    :                   @(117-len(datetype$)),"From ",datetype$,": ",datef$
    print (printer_dev) @(2),"To Vendor: ",vendt$," ",vendtname$(1,20),
    :                   @(fncenter(whsepagehead$,width)),whsepagehead$,
    :                   @(119-len(datetype$)),"To ",datetype$,": ",datet$
    print (printer_dev) ""
    print (printer_dev) @(o[4]),"Date",
    :                   @(o[5]),"Date",
    :                   @(o[6]),"Not",
    :                   @(o[8]+m5-6),"Conv",
    :                   @(o[9]+m2-9),"Quantity",
    :                   @(o[10]+m2-9),"Quantity",
    :                   @(o[11]+m2-8),"Balance",
    :                   @(o[12]+m3-5),"Unit"
    print (printer_dev) @(o[0]),"Seq",
    :                   @(o[1]),"Cd",
    :                   @(o[2]),"Wh",
    :                   @(o[3]),"Item",
    :                   @(o[4]),"Required",
    :                   @(o[5]),"Promised",
    :                   @(o[6]),"Before",
    :                   @(o[7]),"UM",
    :                   @(o[8]+m5-6),"Factor",
    :                   @(o[9]+m2-8),"Ordered",
    :                   @(o[10]+m2-9),"Received",
    :                   @(o[11]+m2-8),"Due",
    :                   @(o[12]+m3-5),"Cost",
    :                   @(o[13]+m1-10),"Extension"
    print (printer_dev) ""
    l=l+6
    return

assignheads: rem --- Assign headings variables

    if printseq$="A" if vendfrom$="" vendf$="First" else vendf$=vendfrom$
    if printseq$="A" if vendthru$="" vendt$="Last" else vendt$=vendthru$
rem if printseq$="A" goto l5340
    if printseq$="A" goto brnch3
    if vendfrom$=fill(6) vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendthru$=fill(6) vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
rem l5340:
brnch3:
    if pofrom$=fill(7) pof$="First" else pof$=pofrom$
    if pothru$=fill(7) pot$="Last" else pot$=pothru$
    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
    popagehead$="From Purchase Order "+pof$+" Through "+pot$
    whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)
    return

gettestdate_header: rem --- Determine date to use when testing range

rem on pos(whichdate$="OPRD") goto ordr_h,ordr_h,prom_h,reqd_h,notb4_h
    action=pos(whichdate$="OPRD")
    date_ordered=1
    date_promised=2
    date_required=3
    date_dont_del_before=4

    switch action
        case date_ordered
rem ordr_h:
            testdateh$=a1$(5,6)
            break
rem goto l5550
        case date_promised
rem prom_h:
            testdateh$=a1$(11,6)
            break
rem goto l5550
        case date_required
rem reqd_h:
            testdateh$=a1$(23,6)
            break
rem goto l5550
        case date_dont_del_before
rem notb4_h:
            testdateh$=a1$(17,6)
            break
rem     goto l5550
        case default
            break
    swend
rem l5550:
    return

gettestdate_detail: rem --- Determine date to use when testing range in detail

rem on pos(whichdate$="OPRD") goto ordr_d,ordr_d,prom_d,reqd_d,notb4_d
    action=pos(whichdate$="OPRD")
    date_ordered=1
    date_promised=2
    date_required=3
    date_dont_del_before=4

    switch action
        case date_ordered
rem ordr_d:
            testdated$=a1$(5,6)
            break
rem goto l5740
        case date_promised
rem prom_d:
            testdated$=b1$(9,6)
            break
rem goto l5740
        case date_required
rem reqd_d:
            testdated$=b1$(3,6)
            break
rem goto l5740
        case date_dont_del_before
rem notb4_d:
            testdated$=b1$(15,6)
            break
rem goto l5740
        case default
            break
rem l5740:
    return

testbreaks: rem --- Test for Breaks

    if a0$(3,6)=vendor$ goto testpo
    if printvtot$="Y" and printseq$<>"P" gosub vendtotals
    gosub newvendor
    if printseq$<>"P" goto testpo
    gosub newpo
rem goto l6090
    goto brnch4
testpo:
    if a0$(9,7)<>ponum$ gosub newpo
rem l6090:
brnch4:
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195)
    vendtot=0
    vendname$="Not On File"
    vendor$=a0$(3,6)
    printvtot$="Y"
rem find record (apm01_dev,key=firm_id$+vendor$,dom=l6170) apm01a$
    find record (apm01_dev,key=firm_id$+vendor$,dom=brnch5) apm01a$
    vendname$=c1$(1,30)
rem l6170:
brnch5:
    if l+2>l9 gosub report_heading
    print (printer_dev)@(0),"Vendor ",fnmask$(vendor$(1,vendlen),vendomask$),"",vendname$
    l=l+1
    return

newpo: rem --- New PO

    potot=0
    ponum$=a0$(9,7)
    termsdesc$="Not On File"
    paddrdesc$=""
    shpwhsdesc$="Not On File"
    dim d0$(26),r0$(10),r1$(160),x0$(160)
rem find record (apm10_dev,key=firm_id$+"C"+a1$(38,2),dom=l6370) apm10c$
    find record (apm10_dev,key=firm_id$+"C"+a1$(38,2),dom=brnch6) apm10c$
    termsdesc$=d0$(6,20)
rem l6370:
brnch6:
rem find record (apm05_dev,key=firm_id$+vendor$+a1$(3,2),dom=l6390) apm05a$
    find record (apm05_dev,key=firm_id$+vendor$+a1$(3,2),dom=brnch7) apm05a$
    paddrdesc$=r1$(1,24)
rem l6390:
brnch7:
rem find record (ivm10_dev,key=firm_id$+"C"+a1$(1,2),dom=l6410) ivm10c$
    find record (ivm10_dev,key=firm_id$+"C"+a1$(1,2),dom=brnch8) ivm10c$
    shpwhsdesc$=x0$(6,24)
rem l6410:
brnch8:
    if l+5>l9 gosub report_heading
    dim dateord$(8)
    if a1$(5,6)<>fill(6) dateord$=fndate$(a1$(5,6))
    print (printer_dev) ""
    print (printer_dev) @(0),"PO#: ",ponum$,
    :                   @(14),"Ordered ",fndate$(a1$(5,6)),
    :                   @(33),"Terms ",a1$(38,2)," ",termsdesc$,
    :                   @(65),"Ship Via ",a1$(59,15),
    if paddrdesc$<>"" 
    :   print (printer_dev) @(91),"Purchase From ",a1$(3,2)," ",paddrdesc$ 
    :   else print (printer_dev)""
    print (printer_dev) @(32),"Ack By ",a1$(74,20),
    :                   @(67),"F.O.B. ",a1$(94,15),
    :                   @(97),"Ship To ",a1$(1,2)," ",shpwhsdesc$
    print (printer_dev)""
    l=l+4
    return

vendtotals: rem --- Print Vendor total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[13]-18-len(vendomask$)),
    :                   "Total For Vendor ",fnmask$(vendor$(1,vendlen),vendomask$),
    :                   @(o[13]),vendtot:m1$
    l=l+1
    return
pototals: rem --- Print Purchase Order total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[13]-23),"Total For PO # ",ponum$,
    :                   @(o[13]),potot:m1$
    let l=l+1
    return
rem --- Calc extension for S, N and O types
calc_extension:
rem if pos(linetype$="SNO")=0 goto l6990
    if pos(linetype$="SNO")=0
        return
    let qty=b[3]-b[7]
    if linetype$="O" qty=1
    precision 2
    let extension=b[1]*qty,extension$=str(extension:m1$)
    precision ivprecision
rem l6990:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
rem def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

rem def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
rem def fnyy$(q$)=q$(3,2)
rem def fnclock$(q$)=date(0:"%hz:%mz %p")
rem def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

rem def fnbasename$(q$,q0$)
rem     q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
rem     if q then q$=q$(q+1)
rem     if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
rem return q$

rem --- fnglobal: Return numeric value of passed stbl variable

rem def fnglobal(q$,q1)
rem     q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
rem     return q1
rem fnend

rem --- fnglobal$: Return string value of passed STBL variable

rem def fnglobal$(q$,q1$)
rem     q1$=stbl(q$,err=*next)
rem     return q1$
rem fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
