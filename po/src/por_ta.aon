rem --- Billed/Unbilled PO Receipts Report
rem --- Program por_ta v8.0.0 06Jul2007 (por_ta)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:39:29)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="apm-04",ids$[3]="APX_VENDZIP"
    files$[4]="IVC_PRODCODE",ids$[4]=files$[4];rem "ivm-10A"
    files$[5]="pom-02",ids$[5]="POC_LINECODE"
    files$[6]="pot-04",ids$[6]="POT_RECHDR"
    files$[7]="pot-05",ids$[7]="POT_INVHDR"
    files$[8]="pot-14",ids$[8]="POT_RECDET"
    files$[9]="pot-25",ids$[9]="POT_INVDET"
    files$[10]="pot-35",ids$[10]="POT_INVBYPO"
    files$[11]="pot-44",ids$[11]="POT_RECBYVEN"
    files$[12]="pow-18",ids$[12]="POW_RECTOTAL"
    files$[13]="APS_PARAMS",ids$[13]=files$[13]
    files$[14]="IVS_PARAMS",ids$[14]=files$[14]
    files$[15]="POS_PARAMS",ids$[15]=files$[15]

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[2]
    apm04_dev=channels[3]
    ivm10_dev=channels[4]
    pom02_dev=channels[5]
    pot04_dev=channels[6]
    pot05_dev=channels[7]
    pot14_dev=channels[8]
    pot25_dev=channels[9]
    pot35_dev=channels[10]
    pot44_dev=channels[11]
    pow18_dev=channels[12]
    aps01a_dev=channels[13]
    ivs01a_dev=channels[14]
    pos01a_dev=channels[15]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm04a$:templates$[3],ivm10a$:templates$[4],
:       pom02a$:templates$[5],pot04a$:templates$[6],pot05a$:templates$[7],
:       pot14a$:templates$[8],pot25a$:templates$[9],pot35a$:templates$[10],
:       pot44a$:templates$[11],pow18a$:templates$[12],aps01a$:templates$[13],
:       ivs01a$:templates$[14],pos01a$:templates$[15]

rem --- Assign form input values to local variables

    printseq$=option!.getOptionData("print_sequence")
    vendfrom$=option!.getOptionData("beg_vendor")
    vendthru$=option!.getOptionData("end_vendor")
    datefrom$=option!.getOptionData("beg_recpt_date")
    dateThru$=option!.getOptionData("end_recpt_date")
    level$=option!.getOptionData("detail_level")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (pos01a_dev,key=pos01a_key$,err=std_missing_params) pos01a$

rem --- Parameters

    dim info$[20],desc[3],desclen[3]
    n2$="PO"
    ap$="N"
    ar$="N"
    sf$="N"
    when$=sysinfo.system_date$
    find record (pos01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) pos01a$
    find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    vendlen=num(aps01a.vendor_size$)
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    ivprecision=num(ivs01a.precision$)
    itemlen=num(ivs01a.item_no_len$)
    for x=1 to 3
        desclen[x]=num(i2$((x-1)*2+9,2))
    next x

rem --- Init Data

    precision ivprecision
    printseq$="N"
    seqdesc$="Numeric Vendor Sequence"
    level$=""
    leveldesc$="All"
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    dim vendfname$(30),vendtname$(30)

rem --- Run report overlay

    run pgmdir$+"por_tb.bbx"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
