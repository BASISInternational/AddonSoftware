rem --- Billed/Unbilled PO Receipts Report
rem --- Program por_ta v8.0.0 06Jul2007 (por_ta)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:39:29)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
rem 17Jun96 Caj: 'O' type lines' values were omitted (110,140,160,190,250,6225,6230,6235,6240,6245)
rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fname$ (Line 0264)
rem --- Undefined function fname$ (Line 0326)
rem --- Undefined function fname$ (Line 0328)
rem --- Undefined function fnv (Line 0501)
rem --- Undefined function fname$=fill (Line 0521)
rem --- Undefined function fname$ (Line 0534)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0179)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0186)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0201)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0202)
rem --- v7.x Administrator reference ["sys-01"] (Line 0217)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0232)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0239)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0246)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0247)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0249)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0271)
rem --- BBx reference ["syc_ra.bbx"] (Line 0271)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0295)
rem --- BBx reference ["syc_rs.bbx"] (Line 0295)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0314)
rem --- BBx reference ["syc_rs.bbx"] (Line 0314)
rem --- v7.x Administrator reference ["syc_lv.bbx"] (Line 0317)
rem --- BBx reference ["syc_lv.bbx"] (Line 0317)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0327)
rem --- BBx reference ["syc_rs.bbx"] (Line 0327)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0328)
rem --- BBx reference ["syc_rs.bbx"] (Line 0328)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0348)
rem --- BBx reference ["syc_rs.bbx"] (Line 0348)
rem --- v7.x Administrator reference ["syc_lv.bbx"] (Line 0351)
rem --- BBx reference ["syc_lv.bbx"] (Line 0351)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0362)
rem --- BBx reference ["syc_rs.bbx"] (Line 0362)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0363)
rem --- BBx reference ["syc_rs.bbx"] (Line 0363)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0383)
rem --- BBx reference ["syc_rs.bbx"] (Line 0383)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0404)
rem --- BBx reference ["syc_rs.bbx"] (Line 0404)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0421)
rem --- BBx reference ["syc_rs.bbx"] (Line 0421)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0429)
rem --- BBx reference ["syc_rs.bbx"] (Line 0429)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0448)
rem --- BBx reference ["syc_rs.bbx"] (Line 0448)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0452)
rem --- BBx reference ["syc_rs.bbx"] (Line 0452)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0470)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0473)
rem --- BBx reference ["syc_rs.bbx"] (Line 0473)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0478)
rem --- BBx reference ["syc_rs.bbx"] (Line 0478)
rem --- BBx reference ["por_tb.bbx"] (Line 0525)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0542)
rem --- BBx reference ["syc_rs.bbx"] (Line 0542)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0543)
rem --- BBx reference ["syc_rs.bbx"] (Line 0543)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0550)
rem --- BBx reference ["syc_rs.bbx"] (Line 0550)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- CLEAR statement removed [clear_text:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file apm-04 referenced (Line 0154)
rem --- Cross-reference file pot-35 referenced (Line 0161)
rem --- Cross-reference file apm-04 referenced (Line 0224)
rem --- Cross-reference file pot-35 referenced (Line 0229)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record apm04a replaced by index on apm-01 (Line 0167)
rem --- Cross-reference record pot35a replaced by index on poe-03 (Line 0169)
rem --- Cross-reference record apm04a replaced by index on apm-01 (Line 0566)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist x0$,x1$(1)
rem --- ivm10c: iolist tx0$
rem --- pom02a: iolist s0$(1),s1$(1)
rem --- pos01a: iolist p0$,p1$,p2$,p3$,p4$
rem --- pot14a: iolist b0$(1),b1$(1),b2$(1),b3$(1),b4$(1),b5$,b6$,b[all]
rem --- pow18a: iolist wfkey$(1),poamt

rem --- The following channel references have been identified:

rem --- apm04a: Channel reference (Line 0294)

rem --------------------------------------------------------------------------------
rem --- aps01a: (Generated by CodePort)
rem --- ivs01a: (Generated by CodePort)
rem --- pot04a: Channel reference (Line 0291)
rem --- pot05a: Channel reference (Line 0290)
rem --- pot25a: Channel reference (Line 0290)
rem --- pot35a: Channel reference (Line 0289)
rem --- pot44a: Channel reference (Line 0288)
rem --- sys01a: Channel reference (Line 0287)

rem --- 26Aug96 WGH: Correct error branch when printer not opened (4120)
rem --- 02Oct98 Caj: PO Amounts were printing as zeros if a date range wasselected (6040)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=12,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="apm-04"
    files$[4]="ivm-10"
    files$[5]="pom-02"
    files$[6]="pot-04"
    files$[7]="pot-05"
    files$[8]="pot-14"
    files$[9]="pot-25"
    files$[10]="pot-35"
    files$[11]="pot-44"
    files$[12]="pow-18"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    apm04_dev=channels[3]
    ivm10_dev=channels[4]
    pom02_dev=channels[5]
    pot04_dev=channels[6]
    pot05_dev=channels[7]
    pot14_dev=channels[8]
    pot25_dev=channels[9]
    pot35_dev=channels[10]
    pot44_dev=channels[11]
    pow18_dev=channels[12]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm04a$:templates$[3],ivm10a$:templates$[4],
:       pom02a$:templates$[5],pot04a$:templates$[6],pot05a$:templates$[7],
:       pot14a$:templates$[8],pot25a$:templates$[9],pot35a$:templates$[10],
:       pot44a$:templates$[11],pow18a$:templates$[12]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivs-01A"
    ids$[3]="pos-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2],pos01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (ads01_dev,key=pos01a_key$,err=std_missing_params) pos01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=12
    dim files$[files],options$[files],channels[files]
    files$[1]="apm-01"
    files$[2]="apm-04"
    files$[3]="pot-04"
    files$[4]="pot-05"
    files$[5]="pot-14"
    files$[6]="pot-25"
    files$[7]="pot-35"
    files$[8]="pot-44"
    files$[9]="pow-18"
    files$[10]="sys-01"
    files$[11]="pom-02"
    files$[12]="ivm-10"
    options$[9]="C"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[1]
    apm04_dev=channels[2]
    pot04_dev=channels[3]
    pot05_dev=channels[4]
    pot14_dev=channels[5]
    pot25_dev=channels[6]
    pot35_dev=channels[7]
    pot44_dev=channels[8]
    pow18_dev=channels[9]
    sys01_dev=channels[10]
    pom02_dev=channels[11]
    ivm10_dev=channels[12]

rem --- Parameters

    dim info$[20],desc[3],desclen[3]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="PO"
    ap$="N"
    ar$="N"
    sf$="N"
    when$=sysinfo.system_date$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) pos01a$
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    vendlen=num(u2$(1,2))
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    ivprecision=num(i2$(5,1))
    itemlen=num(i2$(1,2))
    for x=1 to 3
        desclen[x]=num(i2$((x-1)*2+9,2))
    next x

rem --- Init Data

    precision ivprecision
    printseq$="N"
    seqdesc$="Numeric Vendor Sequence"
    level$=""
    leveldesc$="All"
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    dim vendfname$(30),vendtname$(30)

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    goto flow_control

l1000: rem --- Print Sequence

    v0$="S"
    v1$=""
    v2$=printseq$
    v3$="AN"
    v4$="(A=Alternate Vendor Sequence/N=Numeric Vendor Sequence)"
    v0=1
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1040,l1040,l1040,l1040,flow_control,l1040,flow_control
l1040:
    if v$="" goto l1000
    printseq$=v$
    if printseq$="A" seqdesc$="Alternate Vendor Sequence"
    if printseq$="N" seqdesc$="Numeric Vendor Sequence"
    call pgmdir$+"syc_rs.bbx","",my_context,13000,seqdesc$,0,"",status
    goto flow_control

l1200: rem --- Beginning Vendor

    v0$="M"
    v1$="KCE"
    v2$=vendfrom$
    v3$=vendimask$
    v4$="Enter BeginningVendor Number (<F1>=First/<F3>=Lookup)"
    v0=6
    v1=40
    v2=4
    control_id=3001
    if printseq$="A" v0$="S",v2$=vendfrom$,v3$="",v4$="Enter Beginning Alternate Sequence (<F1>=First)",v0=10
    gosub std_input
    on v3 goto l1290,l1240,l1390,l1270,flow_control,l1290,flow_control
l1240:
    if v3=1 v$=""
    if v$="" gosub clear_text; let vendfrom$=""; call pgmdir$+"syc_rs.bbx","",my_context,13001,"First",0,"",status; goto flow_control
l1270:
    if printseq$="A" goto l1290
    call pgmdir$+"syc_lv.bbx",v$
    if v$="" goto l1200
l1290:
    if v$="" goto l1240
    dim x1$(195)
    if printseq$="A" goto l1320
    find record (apm01_dev,key=firm_id$+v$,dom=l1200) apm01a$
l1320:
    vendfrom$=v$
    vendfname$(1)=x1$(1,30)
    if printseq$="A" call pgmdir$+"syc_rs.bbx","",my_context,3001,vendfrom$,0,"",status
    if printseq$<>"A" call pgmdir$+"syc_rs.bbx","",my_context,3001,fnmask$(vendfrom$,vendomask$),0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13001,vendfname$(1,min(79-v1-vendlen-1,30)),0,"",status
l1390:
    goto flow_control

l1400: rem --- Ending Vendor

    v0$="M"
    v1$="KCE"
    v2$=vendthru$
    v3$=vendimask$
    v4$="Enter Ending Vendor Number (<F1>=Last/<F3>=Lookup)"
    v0=6
    v1=40
    v2=5
    control_id=3002
    if printseq$="A" v0$="S",v2$=vendthru$,v3$="",v4$="Enter Ending Alternate Sequence (<F1>=Last)",v0=10
    gosub std_input
    on v3 goto l1490,l1440,l1590,l1470,flow_control,l1490,flow_control
l1440:
    if v3=1 v$=""
    if v$="" gosub clear_text; let vendthru$=""; call pgmdir$+"syc_rs.bbx","",my_context,13002,"Last",0,"",status; goto flow_control
l1470:
    if printseq$="A" goto l1490
    call pgmdir$+"syc_lv.bbx",v$
    if v$="" goto l1400
l1490:
    if v$="" goto l1440
    if vendfrom$<>"" if v$<vendfrom$ goto l1400
    dim x1$(195)
    if printseq$="A" goto l1530
    find record (apm01_dev,key=firm_id$+v$,dom=l1400) apm01a$
l1530:
    vendthru$=v$
    vendtname$(1)=x1$(1,30)
    if printseq$="A" call pgmdir$+"syc_rs.bbx","",my_context,3002,vendthru$,0,"",status
    if printseq$<>"A" call pgmdir$+"syc_rs.bbx","",my_context,3002,fnmask$(vendthru$,vendomask$),0,"",status; call pgmdir$+"syc_rs.bbx","",my_conext,13002,vendtname$(1,min(79-v1-vendlen-1,30)),0,"",status
l1590:
    goto flow_control

l1600: rem --- Beginning Receipt Date

    v0$="D"
    v1$="6N"
    v2$=datefrom$
    v3$=""
    v4$="<F1>=First"
    v0=6
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1650,l1640,l1690,l1600,flow_control,l1650,flow_control
l1640:
    v$=""
l1650:
    if v$="" gosub clear_text; let datefrom$=""; call pgmdir$+"syc_rs.bbx","",my_context,13003,"First   ",0,"",status; goto flow_control
    datefrom$=v$
l1690:
    goto flow_control

l1800: rem --- Ending Receipt Date

    v0$="D"
    v1$="6N"
    v2$=datethru$
    v3$=""
    v4$="<F1>=Last"
    v0=6
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l1850,l1840,l1890,l1850,flow_control,l1850,flow_control
l1840:
    v$=""
l1850:
    if v$="" gosub clear_text; let datethru$=""; call pgmdir$+"syc_rs.bbx","",my_context,13004,"Last    ",0,"",status; goto flow_control
    if v$<>"" if v$<datefrom$ goto l1800
    datethru$=v$
l1890:
    goto flow_control

l2000: rem --- Print what detail level: Billed/Unbilled or All?

    v0$="S"
    v1$="C^"
    v2$=level$
    v3$=""
    v4$="(B=Billed/U=Unbilled/<F1>=All",v0=1,v1=40,v2=8,control_id=3005
    gosub std_input
    on v3 goto l2090,l2040,l2190,l2090,flow_control,l2090,flow_control
l2040:
    if v3=1 v$=""
    if v$="" gosub clear_text; let level$=""; call pgmdir$+"syc_rs.bbx","",my_context,13005,"All",0,"",status; goto flow_control
    if v$="" goto l2000
l2090:
    if v$="" goto l2040
    if v$<>"" and pos(v$="BU")=0 goto l2000
    level$=v$
    if level$="B" leveldesc$="Billed"
    if level$="U" leveldesc$="Unbilled"
    call pgmdir$+"syc_rs.bbx","",my_context,13005,leveldesc$,0,"",status
l2190:
    goto flow_control

l2200: rem --- stock/nonstock

    v0$="S"
    v1$="C"
    v2$=stk$
    v3$=""
    v4$="(S=Stock/N=Non-Stock/<F1>=All)"
    v0=1
    v1=40
    v2=9
    control_id=3006
    gosub std_input
    on v3 goto l2231,l2231,flow_control,l2200,flow_control,l2231,flow_control
l2231:
    if v3=1 v$=""
    if v$="" gosub clear_text; let stk$="",stkx$="All"; call pgmdir$+"syc_rs.bbx","",my_context,13006,"All",0,"",status; goto flow_control
    if pos(v$="NS")=0 goto l2200
    stk$=v$
    stkx$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3006,stk$,0,"",status
    goto flow_control

l2400: rem --- 2400 - WHSE NUMBER

    v0$="S"
    v0=2
    v1=40
    v2=10
    v2$=whse$
    v3$=""
    v4$=""
    v5$="C"
    v4$="EnterWarehouse ID (<F1>=All/<F3>=Lookup)"
    control_id=3007
    gosub std_input
    on v3 goto l2435,l2435,flow_control,l2430,flow_control,l2435,flow_control
l2430:
    call pgmdir$+"ivc_lk.bbx",3,v1,v2,v$
l2435:
    if v3=1 v$=""
    if v$="" gosub clear_text; let whse$="",whsex$="All"; call pgmdir$+"syc_rs.bbx","",my_context,13007,"All",0,"",status; goto flow_control
    v$=v$+fill(v0-len(v$))
    read record (ivm10_dev,key=firm_id$+"C"+v$,dom=l2400) ivm10c$
    whse$=v$
    whsex$=whse$+"  "+tx0$(6,20)
    call pgmdir$+"syc_rs.bbx","",my_context,3007,whse$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13007,tx0$(6,20),0,"",status
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l1800,l2000,l2200,l2400,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    if vendfrom$="" vendfname$=fill(30)
    if vendthru$="" vendtname$=fill(30)
    gosub accumpoamts
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run pgmdir$+"por_tb.bbx"
display_fields:
    find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
    let control_id=3000,cid_cnt=0
l5006:
    if cid_cnt=0 disp_inp$=printseq$,disp_desc$=seqdesc$
    if cid_cnt=1 if printseq$="A" if vendfrom$="" disp_inp$=vendfrom$,disp_desc$="First" else disp_inp$=vendfrom$,disp_desc$=""
    if cid_cnt=2 if printseq$="A" if vendthru$="" disp_inp$=vendthru$,disp_desc$="Last" else disp_inp$=vendthru$,disp_desc$=""
    if printseq$="A" goto l5014
    if cid_cnt=1 if vendfrom$="" disp_inp$=vendfrom$,disp_desc$="First" else disp_inp$=fnmask$(vendfrom$,vendomask$),disp_desc$=vendfname$(1,min(79-v1-vendlen-1,30))
    if cid_cnt=2 if vendthru$="" disp_inp$=vendthru$,disp_desc$="Last" else disp_inp$=fnmask$(vendthru$,vendomask$),disp_desc$=vendtname$(1,min(79-v1-vendlen-1,30))
l5014:
    if cid_cnt=3 if datefrom$="" disp_inp$=datefrom$,disp_desc$="First" else disp_inp$=fndate$(datefrom$),disp_desc$=""
    if cid_cnt=4 if datethru$="" disp_inp$=datethru$,disp_desc$="Last" else disp_inp$=fndate$(datethru$),disp_desc$=""
    if cid_cnt=5 disp_inp$=level$,disp_desc$=leveldesc$
    if cid_cnt=6 if cvs(stk$,2)="" disp_inp$=stk$,disp_desc$="All" else disp_inp$=stk$,disp_desc$=""
    if cid_cnt=7 if cvs(whse$,2)="" disp_inp$=whse$,disp_desc$="All" else disp_inp$=whse$,disp_desc$=tx0$(6,20)
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5006
l5050:
    let disp_inp$="",disp_desc$=""
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

accumpoamts: rem --- Accumulate PO Amt (POT-14)

    call pgmdir$+"adc_progress.aon","N","","","Summing PO Amounts","",17,0,1,meter_num,status
    dim b0$(25),b1$(48),b2$(32),b3$(22),b4$(40),b[12],wfkey$(18)
    if printseq$="A" goto l10000
    if printseq$="N" read (pot44_dev,key=firm_id$+vendfrom$+fill(6-len(vendfrom$))+datefrom$,dom=*next)
readsort:
    let poamt=0
    let k$=key(pot44_dev,end=donesort)
    if pos(firm_id$=k$)<>1 goto donesort
    read (pot44_dev)
    let vendor$=k$(3,6),rcptdate$=k$(9,6)
    call pgmdir$+"adc_progress.aon","S","","","",k$(1,2)+" "+fnmask$(k$(3,vendlen),vendomask$)+" "+k$(9,7),0,0,1,meter_num,status
    if printseq$="A" if vendthru$<>"" if vendor$<>apm04a$ goto l10020
    if printseq$="N" if vendthru$<>"" and vendor$>vendthru$ goto donesort
    if datethru$<>"" and rcptdate$>datethru$ goto nextvendor
    goto findpot14
nextvendor:
    read (pot44_dev,key=k$(1,8)+$FF$,dom=nextsort)
findpot14:
    find record (pot14_dev,key=k$(1,8)+k$(15,17),dom=nextsort) pot14a$
    let wfkey$=b0$(1,15)+b0$(23,3)
    read record (pow18_dev,key=wfkey$,dom=l6220) pow18a$
    goto nextsort; rem "Only write total line item value once
l6220:
    precision 2
    dim s0$(4),s1$(32)
    find record (pom02_dev,key=b0$(1,2)+b1$(1,2),dom=*next) pom02a$
    if stk$="S" if s1$(21,1)<>"S" goto nextsort
    if stk$="N" if s1$(21,1)<>"N" goto nextsort
    if whse$<>"" if b3$(1,2)<>whse$ goto nextsort
    let unitcost=b[1],qtyord=b[3]
    if s1$(21,1)="O" qtyord=1
    let poamt=poamt+(unitcost*qtyord)
    precision ivprecision
    write record (pow18_dev,key=wfkey$) pow18a$
nextsort:
    goto readsort
donesort:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
