rem --- Purchase Order Receipt Register (Receipts by Vendor Overlay)
rem --- Program por_da v8.0.0 06Jul2007 (por_da)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:05:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0289)
rem --- Undefined function fnyy_year (Line 0292)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0193)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0200)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0219)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0220)
rem --- v7.x Administrator reference ["sys-01"] (Line 0226)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0250)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0269)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0277)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0278)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0279)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0280)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0301)
rem --- BBx reference ["poc_ga.bbx"] (Line 0636)
rem --- BBx reference ["por_db.bbx"] (Line 0711)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0149)
rem --- Cross-reference file ope-51 referenced (Line 0155)
rem --- Cross-reference file ope-61 referenced (Line 0156)
rem --- Cross-reference file ivm-03 referenced (Line 0263)
rem --- Cross-reference file ope-61 referenced (Line 0390)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0175)
rem --- Cross-reference record ope51a replaced by index on ope-01 (Line 0177)
rem --- Cross-reference record ope61a replaced by index on ope-11 (Line 0177)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist b0$(1),b1$(1)
rem --- arm10d: iolist z0$(1),z1$(1)
rem --- ars01a: iolist x$,p5$,p6$,p7$,x$,p8$
rem --- gls01a: iolist x$,g1$,g2$,g3$,g4$,g5$,g6$,g7$
rem --- ivm01a: iolist c0$(1),c1$(1),c2$(1),c3$,c4$,c5$,c6$(1)
rem --- ivm02a: iolist d0$(1),d1$(1),d2$,d[all]
rem --- poe04a: iolist a0$(1),a1$(1),a2$,a3$,a[all]
rem --- poe14a: iolist w0$(1),w1$(1),w2$(1),w3$(1),w4$(1),w5$,w6$,w[all]
rem --- poe24a: iolist l0$(1),l1$(1),l2$,l[all]
rem --- pom02a: iolist y0$(1),y1$(1),y2$(1)
rem --- pos01a: iolist p0$,p1$,p2$,p3$,p4$
rem --- pow03a: iolist r0$(1),r[all]
rem --- pow04a: iolist x4$(1)
rem --- pow05a: iolist x5$(1)
rem --- pow08a: iolist x8$(1)
rem --- pow09a: iolist x9$(1)
rem --- sfe01a: iolist s0$(1),s1$(1),s[all]
rem --- sfm10a: iolist u0$(1),u1$(1)

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- arm01a: Channel reference (Line 0312)
rem --- glm01a: Channel reference (Line 0312)
rem --- glw11a: Channel reference (Line 0311)
rem --- ivm03a: Channel reference (Line 0297)
rem --- ivm04a: Channel reference (Line 0309)
rem --- ivm10a: Channel reference (Line 0295)
rem --- ivs01a: (Generated by CodePort)
rem --- ivw04a: Channel reference (Line 0306)
rem --- ope01a: Channel reference (Line 0305)
rem --- ope11a: Channel reference (Line 0304)
rem --- ope51a: Channel reference (Line 0304)
rem --- ope61a: Channel reference (Line 0302)
rem --- opm02a: Channel reference (Line 0302)
rem --- sfe04a: Channel reference (Line 0300)
rem --- sys01a: Channel reference (Line 0285)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=29,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="arm-01"
    files$[4]="arm-10"
    files$[5]="glm-01"
    files$[6]="glw-11"
    files$[7]="ivm-01"
    files$[8]="ivm-02"
    files$[9]="ivm-03"
    files$[10]="ivm-04"
    files$[11]="ivm-10"
    files$[12]="ivw-04"
    files$[13]="ope-01"
    files$[14]="ope-11"
    files$[15]="ope-51"
    files$[16]="ope-61"
    files$[17]="opm-02"
    files$[18]="poe-04"
    files$[19]="poe-14"
    files$[20]="poe-24"
    files$[21]="pom-02"
    files$[22]="pow-03"
    files$[23]="pow-04"
    files$[24]="pow-05"
    files$[25]="pow-08"
    files$[26]="pow-09"
    files$[27]="sfe-01"
    files$[28]="sfe-04"
    files$[29]="sfm-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    arm01_dev=channels[3]
    arm10_dev=channels[4]
    glm01_dev=channels[5]
    glw11_dev=channels[6]
    ivm01_dev=channels[7]
    ivm02_dev=channels[8]
    ivm03_dev=channels[9]
    ivm04_dev=channels[10]
    ivm10_dev=channels[11]
    ivw04_dev=channels[12]
    ope01_dev=channels[13]
    ope11_dev=channels[14]
    ope51_dev=channels[15]
    ope61_dev=channels[16]
    opm02_dev=channels[17]
    poe04_dev=channels[18]
    poe14_dev=channels[19]
    poe24_dev=channels[20]
    pom02_dev=channels[21]
    pow03_dev=channels[22]
    pow04_dev=channels[23]
    pow05_dev=channels[24]
    pow08_dev=channels[25]
    pow09_dev=channels[26]
    sfe01_dev=channels[27]
    sfe04_dev=channels[28]
    sfm10_dev=channels[29]

rem --- Dimension string templates

    dim apm01a$:templates$[2],arm01a$:templates$[3],arm10a$:templates$[4],
:       glm01a$:templates$[5],glw11a$:templates$[6],ivm01a$:templates$[7],
:       ivm02a$:templates$[8],ivm03a$:templates$[9],ivm04a$:templates$[10],
:       ivm10a$:templates$[11],ivw04a$:templates$[12],ope01a$:templates$[13],
:       ope11a$:templates$[14],ope51a$:templates$[15],ope61a$:templates$[16],
:       opm02a$:templates$[17],poe04a$:templates$[18],poe14a$:templates$[19],
:       poe24a$:templates$[20],pom02a$:templates$[21],pow03a$:templates$[22],
:       pow04a$:templates$[23],pow05a$:templates$[24],pow08a$:templates$[25],
:       pow09a$:templates$[26],sfe01a$:templates$[27],sfe04a$:templates$[28],
:       sfm10a$:templates$[29]

rem --- Retrieve miscellaneous templates

    files=6,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ars-01A"
    ids$[3]="gls-01A"
    ids$[4]="ivs-01A"
    ids$[5]="pos-01A"
    ids$[6]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ars01a$:templates$[2],gls01a$:templates$[3],
:       ivs01a$:templates$[4],pos01a$:templates$[5],sys01a$:templates$[6]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (ads01_dev,key=pos01a_key$,err=std_missing_params) pos01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=29
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="poe-04"
    files$[3]="poe-14"
    files$[4]="poe-24"
    files$[5]="pom-02"
    files$[6]="pow-03"
    files$[7]="pow-04"
    files$[8]="pow-05"
    files$[9]="pow-08"
    files$[10]="pow-09"
    files$[11]="apm-01"
    files$[12]="ivm-01"
    files$[13]="ivm-02"
    files$[14]="ivm-03"
    files$[15]="ivm-10"
    options$[1]="P"
    options$[2]="L"
    options$[6]="C"
    options$[7]="C"
    options$[8]="C"
    options$[9]="C"
    options$[10]="C"
    call pgmdir$+"adc_fileopen.aon",1,1,15,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    poe04_dev=channels[2]
    poe14_dev=channels[3]
    poe24_dev=channels[4]
    pom02_dev=channels[5]
    pow03_dev=channels[6]
    pow04_dev=channels[7]
    pow05_dev=channels[8]
    pow08_dev=channels[9]
    pow09_dev=channels[10]
    apm01_dev=channels[11]
    ivm01_dev=channels[12]
    ivm02_dev=channels[13]
    ivm03_dev=channels[14]
    ivm10_dev=channels[15]

rem --- Parameters

    dim i[7],g[4],info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="PO"
    ap$="N"
    ar$="N"
    sf$="N"
    ls$="N"
    lf$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) pos01a$
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    vendlen=num(u2$(1,2))
    i[0]=num(i2$(1,2))
    i[1]=num(i2$(5,1))
    i[2]=num(i2$(7,2))
    i[3]=num(i2$(9,2))
    i[4]=num(i2$(11,2))
    i[5]=num(i2$(13,2))
    i[6]=num(i2$(3,2))
    i[7]=fnyy_year(i4$(3,2))
    g[0]=num(g2$(1,2))
    g[1]=num(g2$(3,2))
    g[2]=fnyy_year(g2$(5,2))
    g[3]=num(g2$(7,2))
    g[4]=num(g2$(9,2))
    replenishment$=u3$(21,1)
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    op$="N"
    distcode$="N"
    if ar$<>"Y" goto l480
    find record (sys01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    call pgmdir$+"adc_application.aon","OP",info$[all]
    custlen=num(p6$(1,2))
    op$=info$[20]
    distcode$=p7$(11,1)
l480:
    call pgmdir$+"adc_application.aon","SF",info$[all]
    sf$=info$[20]
    gl$="N"
    status=0
    source$=pgm(-2)
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status goto std_exit

rem --- Initializations

    precision i[1]
    dim a0$(22),a1$(160),a[8],b0$(8),b1$(195),o[13],x4$(53),x5$(93)
    dim c0$(22),c1$(60),c2$(64),c6$(g[4]*6),d0$(24),d1$(64),d[20]
    dim w0$(25),w1$(48),w2$(32),w3$(22),w4$(40),w[12],description$(40)
    dim headings$[3],totals[5],receipt[5],vendor[5],report[5],x8$(37),x9$(43)
    dim y0$(4),y1$(32),y2$(g[4]),z0$(32),z1$(11*g[4]),r0$(24),r[1]
    dim l0$(28),l1$(20),l[1],dif$[99],lineqty[99],lsqty[99],factor[99]
    dim glfiles[20],glparams$[20],glparams[20],w$[10]
    if pos(i3$(17,1)="LS")>0 ls$="Y"
    if pos(i3$(3,1)="LF")>0 lf$="Y"
    m0=len(m0$)
    m1$=i6$
    m2$=i7$
    m3$=i8$
    width=132
    page=0
    l9=59
    l=l9+1
    clock$=""
    when$=sysinfo.system_date$
    headings=2
    cost$="Avg"
    done=0
    ls=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    number=0
    nf$="(Not On File)"
    if i3$(8,1)="S" cost$="Std"
    if i3$(8,1)="R" cost$="Rep"
    bw=max(m0+16,32)
    dh1$="Dist"
    dh2$="Code"
    lsdesc$="Serial Nbr"
    if i3$(17,1)="L" lsdesc$="Lot Nbr"
    xref_dev=0
    lotser=0
    errors=0
    dif$=""
    break$="Y"

rem --- Additional File Opens

    if ar$="N" goto l630
    files$[16]="arm-01"
    files$[17]="arm-10"
    if op$="N" goto l630
    files$[18]="ope-01"
    files$[19]="ope-61"
    files$[20]="ope-11"
    files$[28]="opm-02"; rem ESCAPE 
    FILES$[29]="ope-51"
l630:
    if lf$="N" goto l640
    files$[21]="ivm-04"
    files$[22]="ivw-04"
    options$[22]="CL"
l640:
    if gl$="N" goto l650
    files$[23]="glm-01"
    files$[24]=glw11$
    options$[24]="CL"
l650:
    if sf$="N" goto l660
    files$[25]="sfe-01"
    files$[26]="sfe-04"
    files$[27]="sfm-10"
l660:
    call pgmdir$+"adc_fileopen.aon",1,16,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    arm01_dev=channels[16]
    arm10_dev=channels[17]
    ope01_dev=channels[18]
    ope61_dev=channels[19]
    ope11_dev=channels[20]
    ivm04_dev=channels[21]
    ivw04_dev=channels[22]
    glm01_dev=channels[23]
    glw11_dev=channels[24]
    sfe01_dev=channels[25]
    sfe04_dev=channels[26]
    sfm10_dev=channels[27]
    opm02_dev=channels[28]; rem ESCAPE 
    OPE51_DEV=CHANNELS[29]

rem --- Page Break?

    v4$="Should Each Receipt Be Printed On A New Page (Y/N)?"
    call pgmdir$+"adc_yesno.aon",1,v4$,2,v$,v3
    if v3=4 or v3=6 goto std_exit
    break$=v$

rem --- Resize masks and set print positions

    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,12
    o[12]=width-10
    o[11]=o[12]-m1
    o[10]=o[11]-m3
    o[9]=o[10]-m1
    o[8]=o[9]-m3
    o[7]=o[8]-m2
    o[6]=o[7]-m2
    o[5]=o[6]-3
    o[4]=o[5]-5
    o[0]=3
    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+3

rem --- Position file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"Purchase Order Receipt Register","Printing","",bw,0,1,0,ignore_status
    read (poe04_dev,key=firm_id$,dom=*next)

l1000: rem --- Read next header

    k$=key(poe04_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read record (poe04_dev) poe04a$
    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(3,vendlen),m0$)+" "+a0$(9,7)+" "+a0$(16,7),0,0,1,0,ignore_status

rem --- Header fields

    dim receipt[5]
    complete$="(Backorder)"
    packlist$=""
    number=number+1
    if a1$(134,1)="Y" complete$="(Complete)"
    if cvs(a1$(119,15),2)<>"" packlist$=a1$(119,15)

rem --- Level break?

    if t0$<>a0$(3,6) gosub l6000
    if break$="Y" l=l9+1

rem --- Print header information

    if l+6>l9 gosub report_heading else gosub l5200
    read (poe14_dev,key=a0$,dom=*next)

l1500: rem --- Read next detail record

    k$=key(poe14_dev,end=l3900)
    if pos(a0$=k$)<>1 goto l3900
    read record (poe14_dev) poe14a$
    if y0$(1,4)=firm_id$+w1$(1,2) goto l1600
    y0$(1,4)=firm_id$+w1$(1,2)
    y1$(1)=""
    find record (pom02_dev,key=y0$,dom=l3800) pom02a$

l1600: rem --- Retrieve inventory item for S lines

    c0$(1)=firm_id$+w3$(3)
    c1$(1)=""
    c2$(1)=""
    description$(1)=nf$
    d0$(1)=firm_id$+w3$
    d1$(1)=""
    d[11]=0
    code$=""
    begsort$=firm_id$+w3$(1,2)+a1$(29,6)
    endsort$=w0$(3)
    if y1$(21,1)<>"S" goto l1700
    find record (ivm01_dev,key=c0$,dom=l3800) ivm01a$
    find record (ivm02_dev,key=d0$,dom=l3800) ivm02a$
    description$(1)=fnitem$(c1$,i[3],i[4],i[5])
    if distcode$="Y" code$=d1$(13,2)

l1700: rem --- Calculate line extensions

    qty=w[7]
    iv_extension=0
    if y1$(21,1)="O" qty=1
    precision 2
    po_extension=w[1]*qty
    if y1$(21,1)="S" iv_extension=d[11]*qty*w[0]
    precision i[1]

rem --- Branch based on line code

    on pos(y1$(21,1)="SNVMO") goto l3800,l1900,l2000,l2100,l2200,l2300

l1900: rem --- Standard line

    cust$=""
    if l+2>l9 gosub report_heading

rem --- ESCAPE IF CVS(W1$(24,10),2)="" THEN GOTO 1920
rem --- ESCAPE READ (CVF150,KEY=N0$+W1$(24,6),DOM=1918)*,*,*,*,CUST$

    print (printer_dev)@(o[0]),w0$(23,3),@(o[1]),w1$(1,2),@(o[2]),w3$(1,2),@(o[3]),w3$(3,i[0]),@(o[4]),code$,@(o[5]),w1$(22,2),@(o[6]),w[3]:m2$,@(o[7]),w[7]:m2$,@(o[8]),d[11]*w[0]:m3$,@(o[9]),iv_extension:m1$,@(o[10]),w[1]:m3$,@(o[11]),po_extension:m1$,@(o[12]),w1$(24,10)
    print (printer_dev)@(o[3]),description$; rem ESCAPE ,@(O[12]),CUST$
    l=l+2
    goto l2400

l2000: rem --- Non-stock line

rem --- ESCAPE LET CUST$="

    if l+2>l9 gosub report_heading

rem --- ESCAPE IF CVS(W1$(24,10),2)="" THEN LET CUST$=""; GOTO 2020
rem --- ESCAPE IF CVS(W1$(30,4),2)="" THEN GOTO 2017
rem --- ESCAPE READ (OPE51_DEV,KEY=N0$+"  "+"0"+W1$(24,6),DOM=2014)
rem --- ESCAPE LET OPE51$=KEY(OPE51_DEV,END=2020)
rem --- ESCAPE IF OPE51$(6,6)=W1$(24,6) THEN LET CUST$=OPE51$(12)
rem --- ESCAPE READ (CVF150,KEY=N0$+W1$(24,6),DOM=2020)*,*,*,*,CUST$

    print (printer_dev)@(o[0]),w0$(23,3),@(o[1]),w1$(1,2),@(o[2]),w3$(1,2),@(o[3]),w3$(3,i[0]),@(o[4]),code$,@(o[5]),w1$(22,2),@(o[6]),w[3]:m2$,@(o[7]),w[7]:m2$,@(o[10]),w[1]:m3$,@(o[11]),po_extension:m1$,@(o[12]),w1$(24,10)
    print (printer_dev)@(o[3]),w4$; rem ESCAPE ,@(O[12]),CUST$
    l=l+2
    goto l2400

l2100: rem --- Vendor part number line

    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[0]),w0$(23,3),@(o[1]),w1$(1,2),@(o[2]),w3$(1,2),@(o[3]),w3$(3)
    l=l+1
    goto l2400

l2200: rem --- Message line

    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[0]),w0$(23,3),@(o[1]),w1$(1,2),@(o[2]),w3$(1,2),@(o[3]),w4$
    l=l+1
    goto l2400

l2300: rem --- Other type line

    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[0]),w0$(23,3),@(o[1]),w1$(1,2),@(o[2]),w3$(1,2),@(o[10]),w[1]:m3$,@(o[11]),po_extension:m1$,@(o[12]),w1$(24,10)
    print (printer_dev)@(o[3]),w4$
    l=l+2

l2400: rem --- Lotted/Serialized?

    if ls$="N" goto l3000
    if y1$(21,1)<>"S" goto l3000
    if c2$(19,2)<>"YY" goto l3000
    total=0
    lastseq=0
    needed=w[0]*w[7]
    read (poe24_dev,key=w0$,dom=*next)

l2500: rem --- Read next lot/serial detail record

    k$=key(poe24_dev,end=l2800)
    if pos(w0$=k$)<>1 goto l2800
    read record (poe24_dev) poe24a$
    precision 2
    extension=l[0]*l[1]
    precision i[1]

rem --- Print detail line

    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[3]),lsdesc$," ",l0$(26,3)," ",l1$(1,i[2]),@(o[7]),l[0]:m2$,@(o[10]),l[1]:m3$,@(o[11]),extension:m1$
    l=l+1
    total=total+l[0]
    lastseq=num(l0$(26))
    goto l2500

l2800: rem --- Enough lot/serial numbers?

    if needed=total goto l3000
    lotser=lotser+1
    if lotser>99 goto l2900
    lineqty[lotser]=w[7]
    lsqty[lotser]=total
    factor[lotser]=w[0]
    dif$[lotser]=w0$

l2900: rem --- Print lines for missing lot/serial numbers

    if total>needed goto l3000
    dim x$(i[2],"_")
    if i3$(17,1)="L" needed=total+1
    for x=total+1 to needed
        if l+1>l9 gosub report_heading
        l=l+1
        lastseq=lastseq+1
        print (printer_dev)@(o[3]),lsdesc$," ",lastseq:"000-",x$
    next x

l3000: rem --- Generate GL Recap Postings

    if gl$="N" goto l3500
    glfiles[1]=arm10_dev
    glfiles[2]=sfe01_dev
    glfiles[3]=sfm10_dev
    glfiles[4]=glm01_dev
    glfiles[5]=glw11_dev
    glfiles[6]=xref_dev
    w$[0]=w0$
    w$[1]=w1$
    w$[2]=w2$
    w$[3]=w3$
    w$[4]=w4$
    glparams$[0]=gl$
    glparams$[1]=a1$(29,6)
    glparams$[2]=b0$(3,vendlen)
    glparams$[3]=m0$
    glparams$[4]=g4$
    glparams$[5]=description$
    glparams$[6]=y1$
    glparams$[7]=c6$
    glparams$[8]=distcode$
    glparams$[9]=code$
    glparams$[10]=firm_id$
    glparams$[11]=sf$
    glparams[0]=po_extension
    glparams[1]=g[4]
    glparams[2]=i[0]
    glparams$[12]=i3$(8,1)
    glparams[3]=iv_extension
    call pgmdir$+"poc_ga.bbx",glfiles[all],w$[all],w[all],glparams$[all],glparams[all],status
    if status goto std_exit

l3500: rem --- Write sort records

    x4$(1)=begsort$+w3$(3)+endsort$
    x5$(1)=begsort$+w3$(3)+w4$+endsort$
    x8$(1)=firm_id$+w3$(1,2)+w2$(1,10)+endsort$
    r0$(1)=firm_id$+w3$
    r[0]=0
    r[1]=0
    x9$(1)=firm_id$+w3$(1,2)+w2$(11,16)+endsort$
    if pos(y1$(21,1)="NO") write record (pow05_dev,key=x5$) pow05a$
    if cvs(w2$(1,10),2)<>"" write record (pow08_dev,key=x8$) pow08a$
    if cvs(w2$(11,16),2)<>"" write record (pow09_dev,key=x9$) pow09a$
    if y1$(21,1)<>"S" goto l3600
    find record (pow03_dev,key=r0$,dom=*next) pow03a$
    r[0]=r[0]+(w[7]*w[0])
    write record (pow03_dev,key=r0$) pow03a$
    write record (pow04_dev,key=x4$) pow04a$

l3600: rem --- Accumulate totals

    receipt[0]=receipt[0]+w[3]
    receipt[1]=receipt[1]+w[7]
    receipt[3]=receipt[3]+iv_extension
    receipt[5]=receipt[5]+po_extension
    let vendor[0]=vendor[0]+w[3],vendor[1]=vendor[1]+w[7]
    let vendor[3]=vendor[3]+iv_extension,vendor[5]=vendor[5]+po_extension
    let report[0]=report[0]+w[3],report[1]=report[1]+w[7]
    let report[3]=report[3]+iv_extension,report[5]=report[5]+po_extension

l3800: rem --- Loop back for next detail record

    goto l1500

l3900: rem --- Loop back for next header record

    let totals$="Total For PO # "+a0$(16,7),totals[all]=receipt[all]
    gosub l6800
    goto l1000

done: rem --- All done

    let done=1
    gosub l6000
    let totals$="Total For Register",totals[all]=report[all]
    gosub l6800

rem --- Any missing lot/serial numbers?

    if ls$="N" goto l4900
    if lotser=0 goto l4900
    let ls=1,headings=headings-1,m2$=i7$,m5$=i10$
    call pgmdir$+"adc_sizemask.aon",m2$,m2,13,13
    call pgmdir$+"adc_sizemask.aon",m5$,m5,10,12
    let o[0]=0,o[1]=o[0]+m0+31,o[2]=o[1]+10,o[3]=o[2]+12
    let o[4]=o[3]+m2,o[5]=o[4]+m5,o[6]=o[5]+m2,o[7]=o[6]+m2
    if l+6>l9 gosub report_heading else gosub l5400

rem --- Print list of lines with lot/serial number differences

    for x=1 to lotser
        let k$=dif$[x],b0$(1)=firm_id$+k$(3,6),b1$(1)=nf$
        find record (apm01_dev,key=b0$,dom=*next) apm01a$
    l4640:
        if l+1>l9 gosub report_heading
        let stock=lineqty[x]*factor[x],dif=stock-lsqty[x]
        print (printer_dev)@(o[0]),fnmask$(b0$(3,vendlen),m0$)," ",b1$(1,30),@(o[1]),k$(9,7),@(o[2]),k$(16,7),"-",k$(23,3),@(o[3]),lineqty[x]:m2$,@(o[4]),factor[x]:m5$,@(o[5]),stock:m2$,@(o[6]),lsqty[x]:m2$,@(o[7]),dif:m2$
        let l=l+1
    next x

l4900: rem --- Run next overlay

    if number=0 goto std_exit
    run pgmdir$+"por_db.bbx"

report_heading: rem --- Report Heading

    let l=headings+4
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if ls goto l5400
    print (printer_dev)@(o[4]),dh1$,@(o[6]+m2-9),"Quantity",@(o[7]+m2-9),"Quantity",@(o[8]+m3-5),cost$,@(o[9]+m1-10),cost$,@(o[10]+m3-5),"PO",@(o[11]+m1-10),"PO",@(o[12]),"Receiving"
    print (printer_dev)@(o[0]),"Seq",@(o[1]),"Cd",@(o[2]),"Wh",@(o[3]),"Item",@(o[4]),dh2$,@(o[5]),"UM",@(o[6]+m2-9),"Ordered",@(o[7]+m2-9),"Received",@(o[8]+m3-5),"Cost",@(o[9]+m1-10),"Extension",@(o[10]+m3-5),"Cost",@(o[11]+m1-10),"Extension",@(o[12]),"Location"
    if done=0 gosub l5200
    return

l5200: rem --- Receipt subheading

    print (printer_dev)""
    print (printer_dev)"Vendor: ",vendor$,@(63),"Rec #: ",a0$(9,7),@(97),"Receipt Date: ",fndate$(a1$(29,6))," ",complete$
    print (printer_dev)@(63)," PO #: ",a0$(16,7),@(97),packlist$
    print (printer_dev)""
    let l=l+4
    call pgmdir$+"glc_datecheck.aon",a1$(29,6),"N",period$,year$,glstatus
    if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,a1$(29,6),glstatus,l,errors,status
    return

l5400: rem --- Subheading for lot/serial number errors

    print (printer_dev)""
    print (printer_dev)@(51),"Lot/Serial Number Differences"
    print (printer_dev)""
    print (printer_dev)@(o[3]+m2-10),"Line Item",@(o[4]+m5-7),"Conv",@(o[5]+m2-10),"Stocking",@(o[6]+m2-11),"Lot/Serial"
    print (printer_dev)@(o[0]),"Vendor",@(o[1]),"Receiver",@(o[2]),"PO #Seq",@(o[3]+m2-10),"Qty Rec'd",@(o[4]+m5-7),"Factor",@(o[5]+m2-10),"QtyRec'd",@(o[6]+m2-11),"Qty Rec'd",@(o[7]+m2-11),"Difference"
    let l=l+5
    return

l6000: rem --- Vendor break

    if t0$="" goto l6100
    let totals$="Total For "+vendor$,totals[all]=vendor[all]
    gosub l6800
l6100:
    if done goto l6190
    dim vendor[5]
    let t0$=a0$(3,6),b0$(1)=firm_id$+t0$,b1$(1)=nf$
    find record (apm01_dev,key=b0$,dom=*next) apm01a$
    let vendor$=fnmask$(b0$(3,vendlen),m0$)+" "+cvs(b1$(1,30),2)
l6190:
    return
rem --- Print totals
l6800:
    if l+1>l9 gosub report_heading
    if len(totals$)>o[6] totals$=totals$(1,o[6])
    print (printer_dev)@(o[6]-len(totals$)),totals$,@(o[6]),totals[0]:m2$,@(o[7]),totals[1]:m2$,@(o[9]),totals[3]:m1$,@(o[11]),totals[5]:m1$
    let l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
