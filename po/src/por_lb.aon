rem --- Purchase Order Status Report (Print Overlay)
rem --- Program por_lb v8.0.0 17Jul2007 (por_lb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:49:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    pofrom$=fnget_fld_data$(table$,"beg_purchase_order")
    pothru$=fnget_fld_data$(table$,"end_purchase_order")
    printseq$=fnget_fld_data$(table$,"print_sequence")
    vendfrom$=fnget_fld_data$(table$,"beg_vendor")
    vendthru$=fnget_fld_data$(table$,"end_vendor")
    whse$=fnget_fld_data$(table$,"warehouse")

rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8],vendor$(6)
    grandtot=0
    printvtot$="N"
    initializing$="Y"; rem "Init files 1st time through
    more=1

rem --- Headings and print positions

    headings=2
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads

    action=pos(printseq$="PAV")
    purch_order=1
    alt_sequence=2
    by_vendor=3

    switch action

        case purch_order
            headings$[1]=headings$[1]+" By Purchase Order"
            break
        case alt_sequence
            headings$[1]=headings$[1]+" By Alternate Sequence"
            break
        case by_vendor
            headings$[1]=headings$[1]+" By Vendor"
            break
        case default
            goto done
            break

    swend

positions:

    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+3
    o[4]=o[3]+itemlen+1
    o[5]=o[4]+3
    o[6]=o[5]+9
    o[7]=o[6]+m2+1
    o[8]=o[7]+m2+1
    o[9]=o[8]+m2+1
    o[10]=o[9]+m2+1
    o[11]=o[10]+m2+1
    o[12]=o[11]+m3+1

    if o[12]+15>=width
        o[12]=width-m1
        o[11]=o[12]-m3
        o[10]=o[11]-m2
        o[9]=o[10]-m2
        o[8]=o[9]-m2
        o[7]=o[8]-m2
        o[6]=o[7]-m2
    endif

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,0,1,meter_num,status

rem --- Sorts

    while more

        action=pos(printseq$="PAV")
        sortbypo=1
        alt_sequence=2
        by_vendor=3

        switch action

            case purch_order;    rem --- Sort by Purchase Order

                if initializing$<>"N"
                    initializing$="N"
                    p32_key$=firm_id$+pofrom$+vendfrom$
                    read (poe32_dev,key=p32_key$,dom=*next)
                endif

                poe32_key$=key(poe32_dev,end=*break)
                k$=poe32_key.firm_id$+poe32_key.vendor_id$+poe32_key.po_no$
                read (poe32_dev)
                break

            case alt_sequence;   rem --- Find a POE02 record using alt seq

                if initializing$<>"N"
                    initializing$="N"
                    apm02a_key$=firm_id$+"A"+vendfrom$
                    read (apm04_dev,key=apm02a_key$,dom=*next)
                endif

                while more

                    apm04a_key$=key(apm04_dev,end=brnch1)
                    if apm04a_key.firm_id$+"A"=firm_id$+"A"
                        apm04b_key$=apm04a_key.firm_id$+apm04a_key.vendor_id$
                        read (apm04_dev); rem "Move ptr
                        read (poe02_dev,key=apm04b_key$,dom=*next)
                        poe02a_key$=key(poe02_dev,end=*continue)
                        if poe02a_key.firm_id$+poe02a_key.vendor_id$=apm04b_key$
                            k$=apm04b_key$
                            break
                        endif
                    else
                        break
                    endif

                wend
brnch1:
                more=0
                break

            case by_vendor;  rem --- Sort by alternate sequence

                if initializing$="N"
                    initializing$="N"
                p02_key$=firm_id$+vendfrom$+pofrom$
                    read (poe02_dev,key=p02_key$,dom=*next)
                endif

rem --- Read through PO headers
                k$=key(poe02_dev,end=done)
                break

            case default

                more=0
                break

        swend

        if !more break

        while more

            if k$(1,2)<>firm_id$ more=0;break
            read record (poe02_dev,key=k$) poe02a$

rem --- Test Ranges

            headrecprinted$="N"
            if pofrom$<>fill(7) and poe02a.po_no$<pofrom$ if printseq$<>"A" break
            if pothru$<>fill(7) and poe02a.po_no$>pothru$ if printseq$<>"A" break
            if printseq$="A" and cvs(vendfrom$,2)<>"" and cvs(apm04a.alt_sequence$,2)<cvs(vendfrom$,2) if printseq$<>"A" break
            if printseq$<>"A" and cvs(vendthru$,2)<>"" and cvs(apm04a.alt_sequence$,2)>cvs(vendthru$,2) if printseq$<>"A" break
            if printseq$<>"A" 
                if vendfrom$<>fill(6) and poe02a.vendor_id$<vendfrom$ if printseq$<>"A" break
                if vendthru$<>fill(6) and poe02a.vendor_id$>vendthru$ if printseq$<>"A" break
            else

                if whse$="ALL" and poe02a.warehouse_id$<>whse$

rem --- Header passed tests

                    gosub testbreaks
                    headrecprinted$="Y"
                else

rem --- If any detail have valid whse, print line (& head if needed)

                    p12_key$=poe02a.firm_id$+poe02a.vendor_id$+poe02a.po_no$
                    read (poe12_dev,key=p12_key$,dom=*next)

rem --- PO Detail loop
                    
                    while more

                        poe12a_key$=key(poe12_dev,end=*break)
                        if poe12a.firm_id$+poe12a.vendor_id$+poe12a.po_no$<>a0$ break
                        read record (poe12_dev,key=poe12a_key$) poe12a$
                        if whse$="ALL" or poe02a.warehouse_id$=whse$

rem --- Detail passed, so print header if nec & print detail

                            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                            if headrecprinted$="Y"
                                gosub testbreaks
                                headrecprinted$="Y"
                            endif

                            gosub printdetail

rem --- Accumulate totals; then get next detail

                            potot=potot+extension
                            vendtot=vendtot+extension
                            grandtot=grandtot+extension
                            extension=0
                            extension$=""

                        endif

                    wend

rem --- Done w/detail for this PO

                    if headrecprinted$="Y" gosub pototals

rem --- Loop up for next header record via sort files

                    if printseq$<>"A" break

rem --- See if there's another PO for vend before getting next alt seq

                    k$=key(poe02_dev,end=*continue)
                    if k$(3,6)=vendor$ continue

                 endif

            endif

        wend

        if !more break

    wend

done: rem --- All Done

    if l+2>l9 gosub report_heading
    if printseq$<>"P" gosub vendtotals
    print (printer_dev) @(o[12]-17),"Total For Report",
:                       @(o[12]),grandtot:m1$
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8)
    whse_detail$=poe12a.warehouse_id$
    itemnum$=poe12a.item_id$
    memo$=poe12a.order_memo$
    unitmeas$=poe12a.unit_measure$
    if poe12a.reqd_date$<>fill(6) datereq$=fndate$(poe12a.reqd_date$)
    qtyord$=str(poe12a.qty_ordered:m2$)
    qtyrec$=str(poe12a.qty_received:m2$)
    qtyinqa$=str(poe12a.qa_wip_qty:m2$)
    qtyinv$=str(poe12a.qty_invoiced:m2$)
    baldue$=str(poe12a.qty_ordered-poe12a.qty_ordered:m2$)
    unitcost$=str(poe12a.unit_cost:m3$)

rem --- Get Line Type

    linetype$="N"
    p02_key$=poe12a.firm_id$+poe12a.po_line_code$
    find record (pom02_dev,key=p02_key$,dom=brnch2) pom02a$
    linetype$=pom02a.line_type$

brnch2: rem --- Get Item Desc for S and N type lines

    if linetype$="N" 
        itemdesc$=memo$
    else
        dim itemdesc$(60),x1$(60)
        ivm01a.item_desc$="Not On File"
        i01_key$=firm_id$+poe12a.item_id$
        find record (ivm01_dev,key=i01_key$,dom=brnch3) ivm01a$
        ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])
    endif

brnch3: rem --- Get extension

    gosub calc_extension

rem --- Format common part of print line

    dim pline$(132)
    pline$(1)=poe12a.po_line_no$+" "+poe12a.po_line_code$+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")<>0

        if linetype$="V" pline$(o[3]+1)=memo$(1,20) else pline$(o[3]+1)=memo$
        if linetype$="O" pline$(o[11]+1,m3)=unitcost$,pline$(o[12]+1)=extension$
        if l+1>l9 gosub report_heading
        print (printer_dev)pline$
        l=l+1

    else

rem --- Print Line Types 'S' & 'N'

        if pos(linetype$="SN")<>0

            pline$(o[3]+1)=itemnum$(1,itemlen)
            pline$(o[4]+1)=unitmeas$
            pline$(o[5]+1)=datereq$
            if l+2>l9 gosub report_heading
            print (printer_dev)pline$,  @(o[6]),qtyord$, 
:                                       @(o[7]),qtyinqa$, 
:                                       @(o[8]),qtyrec$,
:                                       @(o[9]),qtyinv$,
:                                       @(o[10]),baldue$,
:                                       @(o[11]),unitcost$,
:                                       @(o[12]),extension$

            print (printer_dev) @(o[3]),itemdesc$(1,40)
            l=l+2

        endif
    
    endif

    return

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit

    print (printer_dev) @(0),"From Vendor: ",vendf$," ",vendfname$(1,20),
:                       @(fncenter(whsepagehead$,width)),whsepagehead$,
:                       @(104),"From Purchase Order: ",pof$
    print (printer_dev) @(2),"To Vendor: ",vendt$," ",vendtname$(1,20),
:                       @(106),"To Purchase Order: ",pot$
    print (printer_dev)""
    print (printer_dev) @(o[5]),"Date",
:                       @(o[6]+m2-9),"Quantity",
:                       @(o[7]+m2-9),"Quantity",
:                       @(o[8]+m2-9),"Quantity",
:                       @(o[9]+m2-9),"Quantity",
:                       @(o[10]+m2-8),"Balance",
:                       @(o[11]+m3-5),"Unit"

    print (printer_dev) @(o[0]),"Seq", 
:                       @(o[1]),"Cd",
:                       @(o[2]),"Wh",
:                       @(o[3]),"Item",
:                       @(o[4]),"UM",
:                       @(o[5]),"Required",
:                       @(o[6]+m2-9),"Ordered",
:                       @(o[7]+m2-9),"In QA",
:                       @(o[8]+m2-9),"Received",
:                       @(o[9]+m2-9),"Invoiced",
:                       @(o[10]+m2-8),"Due",
:                       @(o[11]+m3-5),"Cost",
:                       @(o[12]+m1-10),"Extension"

    print (printer_dev)""
    l=l+6
    return

assignheads: rem --- Assign headings variables

    if printseq$="A" if vendfrom$="" vendf$="First" else vendf$=vendfrom$
    if printseq$="A" if vendthru$="" vendt$="Last" else vendt$=vendthru$
    if printseq$<>"A"
        if vendfrom$=fill(6) vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
        if vendthru$=fill(6) vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    else
        if pofrom$=fill(7) pof$="First" else pof$=pofrom$
        if pothru$=fill(7) pot$="Last" else pot$=pothru$
        whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)
    endif
    return

testbreaks: rem --- Test for Breaks

    if poe02a.vendor_id$<>vendor$
        if printvtot$="Y" and printseq$<>"P" gosub vendtotals
        gosub newvendor
        if printseq$="P"
            gosub newpo
        else 
            return
        endif
    endif

    if poe02a.po_no$<>ponum$ gosub newpo
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195),contact$(20),phone$(len(mphone$))
    vendtot=0
    vendname$="Not On File"
    vendor$=poe02a.vendor_id$
    printvtot$="Y"
    a01_key$=firm_id$+vendor$
    find record (apm01_dev,key=a01_key$,dom=brnch4) apm01a$
    vendname$=apm01a.vendor_name$
    contact$=apm01a.contact_name$
    phone$=fnmask$(apm01a.phone_no$,mphone$)

brnch4:
    return

newpo: rem --- New PO

    potot=0
    ponum$=poe02a.po_no$
    apm10c.code_desc$="Not On File"
    a10_key$=firm_id$+"C"+poe02a.terms_code$
    find record (apm10_dev,key=a10_key$,dom=brnch5) apm10c$
    termsdesc$=apm10c.code_desc$

brnch5:

    dim dateord$(8),dateprom$(8)
    if poe02a.ord_date$<>fill(6) dateord$=fndate$(poe02a.ord_date$)
    if poe02a.promise_date$<>fill(6) dateprom$=fndate$(poe02a.promise_date$)
    if l+5>l9 gosub report_heading
    print (printer_dev)""
    if printseq$<>"P"
        print (printer_dev) @(0),"Vendor ",fnmask$(vendor$(1,vendlen),vendomask$),"",vendname$,
:                           @(41),"Contact ",contact$,
:                           @(71),"PO#: ",ponum$,
:                           @(86),"Ordered ",dateord$,
:                           @(104),"Ack By ",poe02a.acknowledge$

        print (printer_dev) @(43),"Phone ",phone$,
:                           @(85),"Promised ",dateprom$,
:                           @(105),"Terms ",poe02a.terms_code$," ",termsdesc$
    else
        print (printer_dev) @(0),"PO#: ",ponum$,
:                           @(14),"Ordered ",dateord$,
:                           @(33),"Vendor ",fnmask$(vendor$(1,vendlen),vendomask$)," ",vendname$,
:                           @(74),"Contact ",contact$,
:                           @(104),"Ack By ",poe02a.acknowledge$

        print (printer_dev) @(13),"Promised ",dateprom$,
:                           @(76),"Phone ",phone$,
:                           @(105),"Terms ",poe02a.terms_code$," ",termsdesc$
    endif

    print (printer_dev)""
    l=l+4
    return

vendtotals: rem --- Print Vendor total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[12]-18-len(vendomask$)),"Total For Vendor ",fnmask$(vendor$(1,vendlen),
:                       vendomask$),
:                       @(o[12]),vendtot:m1$
    l=l+1
    return

rem --- Print Purchase Order total
pototals:

    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[12]-23),"Total For PO # ",ponum$,@(o[12]),potot:m1$
    let l=l+1
    return

rem --- Calc extension for S, N and O types
calc_extension:

    if pos(linetype$="SNO")<>0
        let qty=poe12a.qty_ordered-poe12a.qty_ordered
        if linetype$="O" qty=1
        precision 2
        let extension=poe12a.unit_cost*qty,extension$=str(extension:m1$)
        precision ivprecision
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
