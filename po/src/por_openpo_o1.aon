rem --- Open Purchase Orders Report (Print Overlay)
rem --- Program por_openpo_o1 v8.0.0 17Jul2007 (por_ib)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:48:23)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$
    
rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8],vendor$(6)
    grandtot=0
    printvtot$="N"
    initializing$="Y"; rem "Init files 1st time through
    more=1
    
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","PRIMARY",poe02a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","ALT_KEY_01",poe02a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_PODET","PRIMARY",poe12a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","ALT_KEY_02",apm01a_key_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    headings=2
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads
 
    action=pos(printseq$="PAV")
    printbypo=1
    printbyalt=2
    printbyvend=3

    switch action
        case printbypo
            headings$[1]=headings$[1]+" By Purchase Order"
            break
        case printbyalt
            headings$[1]=headings$[1]+" By Alternate Sequence"
            break
        case printbyvend
            headings$[1]=headings$[1]+" By Vendor"
            break
        case default
            goto done
            break
    swend

positions:

    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+3
    o[4]=o[3]+itemlen+1
    o[5]=o[4]+9
    o[6]=o[5]+9
    o[7]=o[6]+9
    o[8]=o[7]+3
    o[9]=o[8]+m5+1
    o[10]=o[9]+m2+1
    o[11]=o[10]+m2+1
    o[12]=o[11]+m2+1
    o[13]=o[12]+m3+1
    if o[13]+15>=width
        o[13]=width-m1
        o[12]=o[13]-m3
        o[11]=o[12]-m2
        o[10]=o[11]-m2
        o[9]=o[10]-m2
        o[8]=o[9]-m5
    endif

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,poe02_dev,1,meter_num,status

rem --- Sorts
    while more

        action=pos(printseq$="PAV")
        purchase_order_seq=1
        vendor_alt_seq=2
        vendor_seq=3

        switch action
            case purchase_order_seq;    rem --- Sort by Purchase Order
                    dim poe02a_key$:poe02a_key_alttpl$
                    if initializing$<>"N"
                        initializing$="N"
                        read (poe02_dev,knum=1,key=firm_id$+firstpo$,dom=*next)
                        if firstpo$<>"" poe02a_key$=firm_id$+firstpo$+firstvend$;read(poe02_dev,knum=1,key=poe02a_key$,dom=next);break
                    endif
                    poe02a_key$=key(poe02_dev,knum=1,end=done)
                    
                    break

            case vendor_alt_seq;     rem --- Sort by alternate sequence
                    dim apm01a_key$:apm01a_key_tpl$

                    if initializing$<>"N"
                        initializing$="N"
                        a04_key$=firm_id$+"A"+vendfrom$
                        read (apm01_dev2,key=a04_key$,dom=*next)
                    endif
rem --- Find a POE02 record using alt seq

                    while more

                        apm01a_key$=key(apm01_dev2,end=done)
                        if apm01a.firm_id$<>firm_id$ goto done
                        apm01b_key$=apm01a.firm_id$+apm01a.vendor_id$
                        read (apm01_dev2,key=apm01a_key$); rem "Move ptr
                        read (poe02_dev,key=apm01b_key$,dom=*next)
                        poe02a_key$=key(poe02_dev,end=*continue)                        if poe02a.firm_id$+poe02a.vendor_id$<>apm04b_key$ continue
                       
                    wend
                    break

            case vendor_seq;    rem --- Sort by vendor
                    dim poe02a_key$:poe02a_key_pritpl$
                    if initializing$<>"N"
                        initializing$="N"
                        
                        read (poe02_dev,key=firm_id$+firstvend$,knum=0,dom=*next)
                        if firstvend$<>"" poe02a_key$=firm_id$+firstvend$+firstpo$;read(poe02_dev,key=poe02a_key$,dom=*next);break
                    endif
rem --- Read through PO headers

                    poe02a_key$=key(poe02_dev,knum=0,end=done)
                    break

            case default
                    goto done
                    break

        swend
               
        while more; rem MainHdr Loop

            if poe02a_key.firm_id$<>firm_id$ goto done
            read record (poe02_dev,key=poe02a_key$) poe02a$

rem --- Test Ranges

            headrecprinted$="N"
            if pofrom$<>"" and poe02a.po_no$<pofrom$ and printseq$<>"A" break
            if pothru$<>"" and poe02a.po_no$>pothru$ and printseq$<>"A" break
            if printseq$="A" if cvs(vendfrom$,2)<>"" if cvs(apm01a_key.alt_sequence$,2)<cvs(vendfrom$,2) if printseq$<>"A" break
            if printseq$="A" if cvs(vendthru$,2)<>"" if cvs(apm01a_key.alt_sequence$,2)>cvs(vendthru$,2) if printseq$<>"A" break
            if printseq$<>"A"
                if vendfrom$<>"" and poe02a.vendor_id$<vendfrom$ and printseq$<>"A" break
                if vendthru$<>"" and poe02a.vendor_id$>vendthru$ and printseq$<>"A" break
            endif

            if whse$<>"ALL" if poe02a.warehouse_id$<>whse$ continue
                gosub gettestdate_header
                if datefrom$<>"" and testdateh$<datefrom$ continue
                if datethru$<>"" and testdateh$>datethru$ continue
rem --- Header passed tests
                        gosub testbreaks
                        headrecprinted$="Y"
                endif

rem --- Test if any detail are w/in date range, if so, print line
            dim poe12a_key$:poe12a_key_tpl$
           
            p12_key$=poe02a.firm_id$+poe02a.vendor_id$+poe02a.po_no$
            read (poe12_dev,key=p12_key$,dom=*next)

rem --- Test PO Detail date range
            
            while more

                poe12a_key$=key(poe12_dev,end=*break)
                if poe12a_key.firm_id$+poe12a_key.vendor_id$+poe12a_key.po_no$<>poe02a_key.firm_id$+poe02a_key.vendor_id$+poe02a_key.po_no$ break
 
                read record (poe12_dev,key=poe12a_key$) poe12a$
                if whse$="ALL" or poe12a.warehouse_id$=whse$

                    gosub gettestdate_detail
                    if datefrom$="" or testdated$>=datefrom$

                        if datethru$="" or testdated$<=datethru$

rem --- Detail passed, so print header if nec & print detail

                            call pgmdir$+"adc_progress.aon","S","","","",fnmask$(poe02a.vendor_id$,vendomask$)+" "+poe02a.po_no$,0,0,1,meter_num,status

                            if headrecprinted$<>"Y"
                                gosub testbreaks
                                headrecprinted$="Y"

                           endif
                            gosub printdetail

                        endif

                    endif

                endif

rem --- Accumulate totals; then get next detail

                potot=potot+extension
                vendtot=vendtot+extension
                grandtot=grandtot+extension
                extension=0
                extension$=""

            wend

rem --- Done w/detail for this PO

            if headrecprinted$="Y" gosub pototals

rem --- Loop up for next header record via sort files

            if printseq$<>"A" break

rem --- See if there's another PO for vend before getting next alt seq

            escape
            k$=key(poe02_dev,end=*break)
            if k$(3,6)<>vendor$ break

        wend

    wend

done: rem --- All Done

    if l+2>l9 gosub report_heading
    if printseq$<>"P" gosub vendtotals
    print (printer_dev) @(o[13]-17),"Total For Report",
:                       @(o[13]),grandtot:m1$
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    whse_detail$=poe12a.warehouse_id$
    itemnum$=poe12a.item_id$
    memo$=poe12a.order_memo$
    unitmeas$=poe12a.unit_measure$
    if poe12a.reqd_date$<>fill(8) datereq$=fndate$(poe12a.reqd_date$)
    if poe12a.promise_date$<>fill(8) dateprom$=fndate$(poe12a.promise_date$)
    if poe12a.not_b4_date$<>fill(8) notb4date$=fndate$(poe12a.not_b4_date$)

    convfact$=str(poe12a.conv_factor:m5$)
    qtyord$=str(poe12a.qty_ordered:m2$)
    qtyrec$=str(poe12a.qty_received:m2$)
    baldue$=str(poe12a.qty_ordered-poe12a.qty_received:m2$)
    unitcost$=str(poe12a.unit_cost:m3$)
    wonum$=poe12a.wo_no$
    woseq$=poe12a.sequence_no$
    jobnum$=poe12a.location$

rem --- Get Drop Ship flag & Line Type

    linetype$="N"
    dropship$="N"
    p02_key$=poe12a.firm_id$+poe12a.po_line_code$
    find record (pom02a_dev,key=p02_key$,dom=get_item_desc) pom02a$
    linetype$=pom02a.line_type$
    dropship$=pom02a.dropship$

get_item_desc: rem --- Get Item Desc for S and N type lines

    if linetype$="N" itemdesc$=memo$
        
        dim itemdesc$(60),x1$(60)
        ivm01a.item_desc$="Not On File"
        i01_key$=firm_id$+poe12a.item_id$
        find record (ivm01a_dev,key=i01_key$,dom=get_ext) ivm01a$
        ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])

    endif

get_ext: rem --- Get extension

    gosub calc_extension

rem --- Get Vendor's Part #

    dim vpartnum$(20)
    i05_key$=poe12a.firm_id$+poe12a.vendor_id$+itemnum$
    find record (ivm05a_dev,key=i05_key$,dom=*next) ivm05a$

rem --- Format common part of print line

    dim pline$(132)
    pline$(1)=poe12a.po_line_no$+" "+poe12a.po_line_code$+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")<>0

        if linetype$="V" pline$(o[3]+1)=memo$(1,20) else pline$(o[3]+1)=memo$
        if linetype$="O" pline$(o[12]+1,m3)=unitcost$,pline$(o[13]+1)=extension$
        if l+1>l9 gosub report_heading
        print (printer_dev)pline$
        l=l+1

    else

rem --- Print Line Types 'S' & 'N'

        if pos(linetype$="SN")=0 return
        pline$(o[3]+1)=itemnum$(1,itemlen)
        pline$(o[4]+1)=datereq$
        pline$(o[5]+1)=dateprom$
        pline$(o[6]+1)=notb4date$
        pline$(o[7]+1)=unitmeas$
        if linetype$="S" pline$(o[8]+1)=convfact$
        if l+2>l9 gosub report_heading
        print (printer_dev)pline$,  @(o[9]),qtyord$,
:                                   @(o[10]),qtyrec$,
:                                   @(o[11]),baldue$,
:                                   @(o[12]),unitcost$,
:                                   @(o[13]),extension$

        print (printer_dev)         @(o[3]),itemdesc$(1,40),
        if wonum$<>fill(7) 
:            print (printer_dev) @(o[6]+4),"WO: ",wonum$,"-",woseq$ else print (printer_dev)""
        l=l+2
        if vpartnum$<>fill(20)

            if l+1>l9 gosub report_heading
            print (printer_dev)@(o[3]),"Vendor's Part Number ",vpartnum$
            l=l+1

        endif

rem --- Print drop ship info if applicable

        if dropship$<>"Y" or ar$="N" return
        dim custinfo$(321),dropinfo$(173),custaddr$(120),dropaddr$(120)
        custname$="Not On File"
        dropname$="Not On File"
        a01_key$=poe12a.firm_id$+poe12a.customer_id$
        find record (arm01a_dev,key=a01_key$,dom=brnch1) arm01a$
        custname$=arm01a.cust_name$
        custaddr$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.city$+arm01a.state_code$+arm01a.zip_code$
        call pgmdir$+"adc_address.aon",custaddr$,24,4,9,30

brnch1:    

        a03_key$=poe12a.firm_id$+poe12a.customer_id$+poe12a.shipto_no$
        find record (arm03a_dev,key=a03_key$,dom=brnch2) arm03a$
        dropname$=arm03a.name$
        dropaddr$=arm03a.addr_line_1$+arm03a.addr_line_2$+arm03a.addr_line_3$+arm03a.city$+arm03a.state_code$+arm03a.zip_code$
        call pgmdir$+"adc_address.aon",dropaddr$,24,4,9,30

brnch2:
        if l+6>l9 gosub report_heading
        print (printer_dev) @(o[3]),"Drop Ship Above Line To Customer", 
:                           @(43),fnmask$(poe12a.customer_id$,customask$),
:                           " Order ",poe12a.order_no$," ",poe12a.line_no$,
:                           @(73),"Ship To:",
:                           @(82),fnmask$(poe12a.shipto_no$,customask$)

        print (printer_dev) @(38),"Name",
:                           @(43),custname$,
:                           @(82),dropname$

        print (printer_dev) @(35),"Address",
:                           @(43),custaddr$(1,30),
:                           @(82),dropaddr$(1,30)
        l=l+3
        if custaddr$(31,30)<>fill(30) or dropaddr$(31,30)<>fill(30) 
:           print (printer_dev) @(43),custaddr$(31,30),
:                           @(82),dropaddr$(31,30); let l=l+1

        if custaddr$(61,30)<>fill(30) or dropaddr$(61,30)<>fill(30) 
:       print (printer_dev) @(43),custaddr$(61,30),
:                           @(82),dropaddr$(61,30); let l=l+1

        if custaddr$(91,30)<>fill(30) or dropaddr$(91,30)<>fill(30) 
:       print (printer_dev) @(43),custaddr$(91,30),
:                           @(82),dropaddr$(91,30); let l=l+1

    endif

    return

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
   
if status exitto std_exit
    print (printer_dev) @(0),"From Vendor: ",vendf$," ",vendfname$(1,20),
:                   @(fncenter(popagehead$,width)),popagehead$,
:                   @(117-len(datetype$)),"From ",datetype$,": ",datef$

    print (printer_dev) @(2),"To Vendor: ",vendt$," ",vendtname$(1,20),
:                   @(fncenter(whsepagehead$,width)),whsepagehead$,
:                   @(119-len(datetype$)),"To ",datetype$,": ",datet$

    print (printer_dev) ""
    print (printer_dev) @(o[4]),"Date",
:                   @(o[5]),"Date",
:                   @(o[6]),"Not",
:                   @(o[8]+m5-6),"Conv",
:                   @(o[9]+m2-9),"Quantity",
:                   @(o[10]+m2-9),"Quantity",
:                   @(o[11]+m2-8),"Balance",
:                   @(o[12]+m3-5),"Unit"

    print (printer_dev) @(o[0]),"Seq",
:                   @(o[1]),"Cd",
:                   @(o[2]),"Wh",
:                   @(o[3]),"Item",
:                   @(o[4]),"Required",
:                   @(o[5]),"Promised",
:                   @(o[6]),"Before",
:                   @(o[7]),"UM",
:                   @(o[8]+m5-6),"Factor",
:                   @(o[9]+m2-8),"Ordered",
:                   @(o[10]+m2-9),"Received",
:                   @(o[11]+m2-8),"Due",
:                   @(o[12]+m3-5),"Cost",
:                   @(o[13]+m1-10),"Extension"

    print (printer_dev) ""
    l=l+6
    return

assignheads: rem --- Assign headings variables

    if printseq$="A" if vendfrom$="" vendf$="First" else vendf$=vendfrom$
    if printseq$="A" if vendthru$="" vendt$="Last" else vendt$=vendthru$
    if printseq$<>"A"
        if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
        if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    endif
     
    if pofrom$="" pof$="First" else pof$=pofrom$
    if pothru$="" pot$="Last" else pot$=pothru$
    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
    popagehead$="From Purchase Order "+pof$+" Through "+pot$
    whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)
    return

gettestdate_header: rem --- Determine date to use when testing range

    action=pos(whichdate$="OPRD")
    date_ordered=1
    date_promised=2
    date_required=3
    date_dont_del_before=4

    switch action
        case date_ordered

            testdateh$=poe02a.ord_date$
            break

        case date_promised

            testdateh$=poe02a.promise_date$
            break

        case date_required

            testdateh$=poe02a.reqd_date$
            break

        case date_dont_del_before

            testdateh$=poe02a.not_b4_date$
            break

        case default
            testdateh$=poe02a.ord_date$
            break
    swend

    return

gettestdate_detail: rem --- Determine date to use when testing range in detail

    action=pos(whichdate$="OPRD")
    date_ordered=1
    date_promised=2
    date_required=3
    date_dont_del_before=4

    switch action

        case date_ordered

            testdated$=poe02a.ord_date$
            break

        case date_promised

            testdated$=poe12a.promise_date$
            break

        case date_required

            testdated$=poe12a.reqd_date$
            break

        case date_dont_del_before

            testdated$=poe12a.not_b4_date$
            break

        case default
            testdated$=poe02a.ord_date$
            break

    swend

    return

testbreaks: rem --- Test for Breaks

    if poe02a.vendor_id$<>vendor$
        if printvtot$="Y" and printseq$<>"P" gosub vendtotals
        gosub newvendor
        if printseq$="P"
            gosub newpo
        else
            if poe02a.po_no$<>ponum$ gosub newpo
        endif
    else
        if poe02a.po_no$<>ponum$ gosub newpo
    endif

    return

newvendor: rem --- New Vendor

    vendtot=0
    vendname$="Not On File"
    vendor$=poe02a.vendor_id$
    printvtot$="Y"
    a01_key$=firm_id$+vendor$
    find record (apm01a_dev,key=a01_key$,dom=brnch5) apm01a$
    vendname$=apm01a.vendor_name$

brnch5:

    if l+2>l9 gosub report_heading
    print (printer_dev)@(0),"Vendor ",fnmask$(vendor$(1,vendlen),vendomask$)," ",vendname$
    l=l+1
    return

newpo: rem --- New PO

    potot=0
    ponum$=poe02a.po_no$
    termsdesc$="Not On File"
    paddrdesc$=""
    shpwhsdesc$="Not On File"
    a10_key$=firm_id$+"C"+poe02a.terms_code$
    find record (apm10c_dev,key=a10_key$,dom=brnch6) apm10c$
    termsdesc$=apm10c.code_desc$

brnch6:

    find record (apm05a_dev,key=firm_id$+vendor$+poe02a.purch_addr$,dom=brnch7) apm05a$
    paddrdesc$=apm05a.name(1,24)

brnch7:

    i10_key$=firm_id$+"C"+poe02a.warehouse_id$
    find record (ivm10c_dev,key=i10_key$,dom=brnch8) ivm10c$
    shpwhsdesc$=ivm10c.short_name$

brnch8:

    if l+5>l9 gosub report_heading
    dim dateord$(8)
    if poe02a.ord_date$<>fill(8) dateord$=fndate$(poe02a.ord_date$)
    print (printer_dev) ""
    print (printer_dev) @(0),"PO#: ",ponum$,
:                   @(14),"Ordered ",fndate$(poe02a.ord_date$),
:                   @(33),"Terms ",poe02a.terms_code$," ",termsdesc$,
:                   @(65),"Ship Via ",poe02a.ap_ship_via$,

    if paddrdesc$<>"" 
:       print (printer_dev) @(91),"Purchase From ",poe02a.purch_addr$," ",paddrdesc$ 
:   else print (printer_dev)""

    print (printer_dev) @(32),"Ack By ",poe02a.acknowledge$,
:                   @(67),"F.O.B. ",poe02a.fob$,
:                   @(97),"Ship To ",poe02a.warehouse_id$," ",shpwhsdesc$
    print (printer_dev)""
    l=l+4
    return

vendtotals: rem --- Print Vendor total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[13]-18-len(vendomask$)),
:                       "Total For Vendor ",fnmask$(vendor$(1,vendlen),vendomask$),
:                       @(o[13]),vendtot:m1$
    l=l+1
    return

pototals: rem --- Print Purchase Order total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[13]-23),"Total For PO # ",ponum$,
:                       @(o[13]),potot:m1$
    let l=l+1
    return

calc_extension:

    if pos(linetype$="SNO")=0 return
     
    let qty=poe12a.qty_ordered-poe12a.qty_received
    if linetype$="O" qty=1
    precision 2
    let extension=poe12a.unit_cost*qty,extension$=str(extension:m1$)
    precision ivprecision

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$) 
        if cvs(q$,2)="" return ""

        testdate$=""

        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)

        if testdate$<>"" 

            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

        endif

        return testdate$

     fnend    

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)
escape;rem error
    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
