rem --- Quality Assurance Work In Process Report (Input Overlay)
rem --- Program por_ra v8.0.0 06Jul2007 (por_ra)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:35:12)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0212)
rem --- Undefined function fnv (Line 0443)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0142)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0149)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0164)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0165)
rem --- v7.x Administrator reference ["sys-01"] (Line 0171)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0181)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0193)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0201)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0202)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0203)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0243)
rem --- BBx reference ["syc_ra.bbx"] (Line 0243)
rem --- v7.x Administrator reference ["syc_lv.bbx"] (Line 0263)
rem --- BBx reference ["syc_lv.bbx"] (Line 0263)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0270)
rem --- BBx reference ["syc_rs.bbx"] (Line 0270)
rem --- v7.x Administrator reference ["syc_lv.bbx"] (Line 0290)
rem --- BBx reference ["syc_lv.bbx"] (Line 0290)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0298)
rem --- BBx reference ["syc_rs.bbx"] (Line 0298)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0319)
rem --- BBx reference ["syc_rs.bbx"] (Line 0319)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0341)
rem --- BBx reference ["syc_rs.bbx"] (Line 0341)
rem --- BBx reference ["poc_lb.bbx"] (Line 0363)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0372)
rem --- BBx reference ["syc_rs.bbx"] (Line 0372)
rem --- BBx reference ["poc_lb.bbx"] (Line 0391)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0401)
rem --- BBx reference ["syc_rs.bbx"] (Line 0401)
rem --- BBx reference ["por_rb.bbx"] (Line 0459)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0475)
rem --- BBx reference ["syc_rs.bbx"] (Line 0475)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0485)
rem --- BBx reference ["syc_rs.bbx"] (Line 0485)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0488)
rem --- BBx reference ["syc_rs.bbx"] (Line 0488)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0498)
rem --- BBx reference ["syc_rs.bbx"] (Line 0498)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0499)
rem --- BBx reference ["syc_rs.bbx"] (Line 0499)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0505)
rem --- BBx reference ["syc_rs.bbx"] (Line 0505)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0506)
rem --- BBx reference ["syc_rs.bbx"] (Line 0506)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0509)
rem --- BBx reference ["syc_rs.bbx"] (Line 0509)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist b0$(1),b1$(1)
rem --- pos01a: iolist p0$,p1$,p2$,p3$,p4$

rem --- The following channel references have been identified:

rem --- aps01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivm01a: Channel reference (Line 0266)
rem --- ivs01a: (Generated by CodePort)
rem --- poe03a: Channel reference (Line 0263)
rem --- poe13a: Channel reference (Line 0262)
rem --- poe23a: Channel reference (Line 0267)
rem --- poe63a: Channel reference (Line 0261)
rem --- pom02a: Channel reference (Line 0260)
rem --- pom03a: Channel reference (Line 0259)
rem --- sys01a: Channel reference (Line 0257)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="ivm-01"
    files$[4]="poe-03"
    files$[5]="poe-13"
    files$[6]="poe-23"
    files$[7]="poe-63"
    files$[8]="pom-02"
    files$[9]="pom-03"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    ivm01_dev=channels[3]
    poe03_dev=channels[4]
    poe13_dev=channels[5]
    poe23_dev=channels[6]
    poe63_dev=channels[7]
    pom02_dev=channels[8]
    pom03_dev=channels[9]

rem --- Dimension string templates

    dim apm01a$:templates$[2],ivm01a$:templates$[3],poe03a$:templates$[4],
:       poe13a$:templates$[5],poe23a$:templates$[6],poe63a$:templates$[7],
:       pom02a$:templates$[8],pom03a$:templates$[9]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ivs-01A"
    ids$[3]="pos-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2],pos01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (ads01_dev,key=pos01a_key$,err=std_missing_params) pos01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=9
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="poe-03"
    files$[3]="poe-13"
    files$[4]="poe-63"
    files$[5]="pom-02"
    files$[6]="pom-03"
    files$[7]="apm-01"
    files$[8]="ivm-01"
    call pgmdir$+"adc_fileopen.aon",1,1,8,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    poe03_dev=channels[2]
    poe13_dev=channels[3]
    poe63_dev=channels[4]
    pom02_dev=channels[5]
    pom03_dev=channels[6]
    apm01_dev=channels[7]
    ivm01_dev=channels[8]

rem --- Parameters

    dim i[7]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="PO"
    ap$="N"
    ar$="N"
    sf$="N"
    ls$="N"
    lf$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) pos01a$
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    vendlen=num(u2$(1,2))
    i[0]=num(i2$(1,2))
    i[1]=num(i2$(5,1))
    i[2]=num(i2$(7,2))
    i[3]=num(i2$(9,2))
    i[4]=num(i2$(11,2))
    i[5]=num(i2$(13,2))
    i[6]=num(i2$(3,2))
    i[7]=fnyy_year(i4$(3,2))
    if pos(i3$(17,1)="LS")>0 ls$="Y"
    if pos(i3$(3,1)="LF")>0 lf$="Y"

rem --- Initializations

    dim b0$(8),b1$(30)
    m0=len(m0$)
    begvend$=""
    endvend$=""
    begdate$=""
    enddate$=""
    begrec$=""
    endrec$=""
    pagebreak$="N"
    fvendor$=""
    tvendor$=""

rem --- Additional File Opens

    if ls$="N" goto display_resource
    files$[9]="poe-23"
    call pgmdir$+"adc_fileopen.aon",1,9,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    poe23_dev=channels[9]

display_resource: rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    goto flow_control

l1000: rem --- Beginning vendor

    v4$="Enter A Valid Vendor Number (<F1>=First/<F3>=Lookup)"
    v0$="M"
    v1$="KCE"
    v2$=begvend$
    v3$=m0$
    v0=6
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1100,l1150,flow_control,l1050,flow_control,l1100,flow_control
l1050:
    call pgmdir$+"syc_lv.bbx",v$
l1100:
    if v$="" goto l1150
    begvend$=v$
    goto l1160
l1150:
    if v3=1 v$=""
    if v$="" gosub clear_text; let begvend$=""; call pgmdir$+"syc_rs.bbx","",my_context,13000,"First",0,"",status; goto flow_control
l1160:
    gosub l5100
    if status goto l1000
    goto flow_control

l1200: rem --- Ending vendor

    v4$="Enter A Valid Vendor Number (<F1>=Last/<F3>=Lookup)"
    v0$="M"
    v1$="KCE"
    v2$=endvend$
    v3$=m0$
    v0=6
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1300,l1350,flow_control,l1250,flow_control,l1300,flow_control
l1250:
    call pgmdir$+"syc_lv.bbx",v$
l1300:
    if v$="" goto l1350
    if begvend$<>"" if v$<begvend$ goto l1200
    endvend$=v$
    goto l1360
l1350:
    if v3=1 v$=""
    if v$="" gosub clear_text; let endvend$=""; call pgmdir$+"syc_rs.bbx","",my_context,13001,"Last",0,"",status; goto flow_control
l1360:
    gosub l5100
    if status goto l1200
    goto flow_control

l1400: rem --- Beginning Date

    v4$="Enter The Beginning Receipt Date To Include On The Register (<F1>=First)"
    v0$="D"
    v1$="C6N"
    v2$=begdate$
    v3$=""
    v0=6
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l1460,l1450,flow_control,l1400,flow_control,l1460,flow_control
l1450:
    if v3=1 v$=""
    if v$="" gosub clear_text; let begdate$=""; call pgmdir$+"syc_rs.bbx","",my_context,13002,"First",0,"",status; goto flow_control
l1460:
    if v$="" goto l1450
    begdate$=v$
    gosub l5200
    goto flow_control

l1600: rem --- Ending Date

    v4$="Enter The Ending Receipt Date To Include On The Register (<F1>=Last)"
    v0$="D"
    v1$="C6N"
    v2$=enddate$
    v3$=""
    v0=6
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1660,l1650,flow_control,l1600,flow_control,l1660,flow_control
l1650:
    if v3=1 v$=""
    if v$="" gosub clear_text; let enddate$=""; call pgmdir$+"syc_rs.bbx","",my_context,13003,"Last",0,"",status; goto flow_control
l1660:
    if v$="" goto l1650
    if v$<>"" if v$<begdate$ goto l1600
    enddate$=v$
    gosub l5200
    goto flow_control

l1800: rem --- Beginning Receiver

    v4$="Enter A Valid Receiver Number (<F1>=First/<F3>=Lookup)"
    v0$="Z"
    v1$="KCE"
    v2$=begrec$
    v3$=""
    v0=7
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l1900,l1950,flow_control,l1850,flow_control,l1900,flow_control
l1850:
    call pgmdir$+"poc_lb.bbx","Q",v$
    if len(v$)<15 goto l1800
    v$=v$(9,7)
l1900:
    if v$="" goto l1950
    begrec$=v$
    goto l1980
l1950:
    if v3=1 v$=""
    if v$="" gosub clear_text; let begrec$=""; call pgmdir$+"syc_rs.bbx","",my_context,13004,"First",0,"",status; goto flow_control
l1980:
    gosub l5300
    goto flow_control

l2000: rem --- Ending Receiver

    v4$="Enter A Valid Receiver Number (<F1>=Last/<F3>=Lookup)"
    v0$="Z"
    v1$="KCE"
    v2$=endrec$
    v3$=""
    v0=7
    v1=40
    v2=8
    control_id=3005
    gosub std_input
    on v3 goto l2100,l2150,flow_control,l2050,flow_control,l2100,flow_control
l2050:
    call pgmdir$+"poc_lb.bbx","Q",v$
    if len(v$)<15 goto l2000
    v$=v$(9,7)
l2100:
    if v$="" goto l2150
    if begrec$<>"" if v$<begrec$ goto l2000
    endrec$=v$
    goto l2180
l2150:
    if v3=1 v$=""
    if v$="" gosub clear_text; let endrec$=""; call pgmdir$+"syc_rs.bbx","",my_context,13005,"Last",0,"",status; goto flow_control
l2180:
    gosub l5300
    goto flow_control

l2200: rem --- Page break?

    v4$="Page Break Between Vendors (Y/N)?"
    v0$="Y"
    v1$="C"
    v2$=pagebreak$
    v3$=""
    v0=1
    v1=40
    v2=9
    control_id=3006
    gosub std_input
    on v3 goto l2250,l2200,flow_control,l2200,flow_control,l2250,flow_control
l2250:
    pagebreak$=v$
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l1800,l2000,l2200,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    run pgmdir$+"por_rb.bbx"

display_fields: rem --- Display Fields

    let v1=40,v2=3,v$=begvend$,v4$="First",x=80-(v1+m0+1),control_id=3000
    gosub l5100
    let v2=5,v$=endvend$,v4$="Last",fvendor$=x$,control_id=3001
    gosub l5100
    let v2=7,v$=begdate$,v4$="First",tvendor$=x$,control_id=3002
    gosub l5200
    let v2=9,v$=enddate$,v4$="Last",control_id=3003
    gosub l5200
    let v2=11,v$=begrec$,v4$="First",control_id=3004
    gosub l5300
    let v2=13,v$=endrec$,v4$="Last",control_id=3005
    gosub l5300
    call pgmdir$+"syc_rs.bbx","",my_context,3006,pagebreak$,0,"",status
    return

l5100: rem --- Display vendor

    let x$=""
    if v$="" goto l5160
    let b0$(1)=firm_id$+v$,b1$(1)="",status=11
    find record (apm01_dev,key=b0$,dom=l5190) apm01a$
    let x$=fnmask$(b0$(3,vendlen),m0$)+" "+b1$(1,30),status=0
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,fnmask$(b0$(3,vendlen),m0$),0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,b1$(1,min(79-v1-vendlen-1,30)),0,"",status
    goto l5380
l5160:
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,v4$,0,"",status
    let x$=v4$
    let status=0
l5190:
    return

l5200: rem --- Display dates

    if v$="" x$=v4$
    if v$<>"" x$=fndate$(v$)
    if v$="" call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,x$,0,"",status
    if v$<>"" call pgmdir$+"syc_rs.bbx","",my_context,control_id,x$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,"",0,"",status
    return

l5300: rem --- Display receiver

    if v$="" v$=v4$
    if v$="First" or v$="Last" call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,v$,0,"",status; goto l5390
    if v$<>"" call pgmdir$+"syc_rs.bbx","",my_context,control_id,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,"",0,"",status
l5380:
l5390: return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
