rem --- PO Receipt Variance Report (Print Overlay)
rem --- Program por_nb v8.0.0 17Jul2007 (por_nb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:49:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    whse$=fnget_fld_data$(table$,"warehouse")
    itemfrom$=fnget_fld_data$(table$,"beg_item")
    itemthru$=fnget_fld_data$(table$,"end_item")
    vendthru$=fnget_fld_data$(table$,"beg_vendor")
    vendthru$=fnget_fld_data$(table$,"end_vendor")
    datefrom$=fnget_fld_data$(table$,"beg_recpt_date")
    datethru$=fnget_fld_data$(table$,"end_recpt_date")
    min_var$=fnget_fld_data$(table$,"min_variance")

rem --- Init Data

    precision ivprecision
    dim a0$(22),a1$(160),a[8],vendtot[3],prevk$(31),vendor$(6),prevvend$(6)
    printvtot$="N"
    printptot$="N"

rem --- Headings and print positions

    headings=4
    dim headings$[headings],o[14]
    width=132
    page=0
    l9=59
    l=l9+1
    gosub assignheads
    more=1

rem --- Print positions

    o[1]=o[0]+3
    o[2]=o[1]+3
    o[3]=o[2]+4
    o[4]=o[3]+3
    o[5]=o[4]+3
    o[6]=o[5]+itemlen+1
    o[7]=o[6]+desclen+1
    o[8]=o[7]+9
    o[9]=o[8]+9
    o[10]=o[9]+10
    o[11]=o[10]+mvar+2
    if o[11]+7>=width
        o[11]=width-mvar
        o[10]=o[11]-mvar
        o[9]=o[10]-mvar
        o[8]=o[9]-mvar
    endif

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,0,1,meter_num,status

rem --- Init Read

    p44_key$=firm_id$+vendfrom$+datefrom$
    read (pot44_dev,key=p44_key$,dom=*next)

rem --- Read through Sort file

    while more

        pot44a_key$=key(pot44_dev,end=*break)
        if pot44a_key.firm_id$<>firm_id$ break
        read (pot44_dev); rem "Move ptr

rem --- Valid Vendor/Receipt Date?

        if vendfrom$<>fill(6) and pot44a.vendor_id$>vendthru$ break
        if datefrom$=fill(6) or pot44a.recpt_date$>=datefrom$
            if datethru$=fill(6) or pot44a.recpt_date$<=datethru$
                vendor$=pot44a.vendor_id$
                ponum$=pot44a.po_no$
                receiver$=pot44a.receiver_no$
                linenum$=pot44a.po_line_no$
            else
rem --- Skip to next vendor
                p44_key$=pot44a_key.firm_id$+pot44a_key.vendor_id$+$FF$
                read (pot44_dev,key=p44_key$,dom=*next)
                continue

            endif
        else

rem --- Skip to first receipt date for vendor

            p44_key$=pot44a_key.firm_id$+pot44a_key.vendor_id$+datefrom$
            read (pot44_dev,key=p44_key$,dom=*next)
            continue
            
        endif

rem --- Get Header & assign variables

        if pot44a_key.firm_id$+pot44a_key.vendor_id$+pot44a_key.recpt_date$+pot44a_key.po_no$+pot44a_key.receiver_no$<>prevk$(1,28)
            prevk$(1)=pot44a_key$
            p04_key$=firm_id$+vendor$+ponum$+receiver$
            find record (pot04a_dev,key=p04_key$,dom=*break) pot04a$
            dim rcptdate$(6),orddate$(6)
            if pot04a.recpt_date$<>fill(6) rcptdate$=pot04a.recpt_date$
            if pot04a.ord_date$<>fill(6) orddate$=pot04a.ord_date$
        endif

rem --- Get detail

        p14a_key$=pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$+pot04a.receiver_no$+linenum$
        find record (pot14a_dev,key=p14a_key$,dom=*break) pot14a$
        whse$=pot14a.warehouse_id$
        item$=pot14a.item_id$

rem --- Valid Whse/Item?

        if whsefor$<>"" if whse$<>whsefor$ break
        if itemfrom$<>fill(20) if item$<itemfrom$ break
        if itemthru$<>fill(20) if item$>itemthru$ break

rem --- Valid line type (ie S or N)?

        gosub getlinetype
        if pos(linetype$="SN")=0 break

rem --- Valid, so assign vars

        call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(3,vendlen),vendomask$)+" "+a0$(9,7)+" "+a0$(16,7),0,0,1,meter_num,status
        linecode$=pot14a.po_line_code$
        dim dateprom$(6),reqdate$(6)
        if pot14a.promise_date$<>fill(6) dateprom$=pot14a.promise_date$
        if pot14a.reqd_date$<>fill(6) reqdate$=pot14a.reqd_date$

rem --- Calculate variances

        reqvari=0
        promvari=0
        if rcptdate$<>fill(6)

            if reqdate$<>fill(6)
                if rcptdate$<reqdate$ multiplier=-1 else multiplier=1
                fromdate$=rcptdate$
                thrudate$=reqdate$
                call pgmdir$+"adc_daydates.aon",fromdate$,thrudate$,reqvari
                reqvari=reqvari*multiplier
            endif

            if dateprom$<>fill(6)

                if rcptdate$<dateprom$ multiplier=-1 else multiplier=1
                fromdate$=rcptdate$
                thrudate$=dateprom$
                call pgmdir$+"adc_daydates.aon",fromdate$,thrudate$,promvari
                promvari=promvari*multiplier

            endif

        endif

        if abs(reqvari)<minvari and abs(promvari)<minvari break

rem --- Test breaks

        if vendor$<>prevvend$

            if printptot$="Y" gosub pototals
            if printvtot$="Y" gosub vendtotals
            gosub newvendor
            gosub newpo

        else

            if ponum$<>prevpo$
                if printptot$="Y" gosub pototals
                gosub newpo
            endif

        endif

rem --- Get Item Desc

    dim itemdesc$(60),x1$(60)
    if linetype$<>"N"

        ivm01a.item_desc$="(Not On File)"
        find record (ivm01a_dev,key=firm_id$+b3$(3,20),dom=brnch1) ivm01a$
        ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])

    else
rem --- Non-stock description
        ivm01a.item_desc$=ivm01a.order_memo$

    endif

brnch1: rem --- Go print the data

    gosub printline

rem --- Accumulate totals; then get next detail

    po_reqvar=po_reqvar+reqvari
    po_promvar=po_promvar+promvari
    vendreqvar=vendreqvar+reqvari
    vendpromvar=vendpromvar+promvari
    rptreqvar=rptreqvar+reqvari
    rptpromvar=rptpromvar+promvari

rem --- Loop up for next header record via sort files

    wend

done: rem --- All Done

    if l+1>l9 gosub report_heading
    gosub pototals
    gosub vendtotals
    print (printer_dev) @(o[10]-18),"Total For Report",
:                       @(o[10]),rptreqvar:mvar$,
:                       @(o[11]),rptpromvar:mvar$
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[7]),"Date",
:                       @(o[8]),"Date",
:                       @(o[9]),"Date",
:                       @(o[10]+mvar-8),"Variance",
:                       @(o[11]+mvar-8),"Variance"

    print (printer_dev) @(o[2]),"Seq",
:                       @(o[3]),"Cd",
:                       @(o[4]),"Wh",
:                       @(o[5]),"Item",
:                       @(o[7]),"Received",
:                       @(o[8]),"Required",
:                       @(o[9]),"Promised",
:                       @(o[10]+mvar-8),"Req/Rec",
:                       @(o[11]+mvar-8),"Prom/Rec"
    print (printer_dev)""
    l=l+3
    return

assignheads: rem --- Assign headings variables

    dim tmph3$(width),tmph4$(width)
    if vendfrom$=fill(6) vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendthru$=fill(6) vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    if datefrom$=fill(6) datef$="First" else datef$=fndate$(datefrom$)
    if datethru$=fill(6) datet$="Last" else datet$=fndate$(datethru$)
    if itemfrom$=fill(20) itemf$="First" else itemf$=itemfrom$(1,itemlen)
    if itemthru$=fill(20) itemt$="Last" else itemt$=itemthru$(1,itemlen)
    midh3$="From Item "+itemf$+" Through "+itemt$
    tmph3$(1)="From Vendor: "+vendf$
    tmph3$(fncenter(midh3$,width))=midh3$
    tmph3$(width-len(datef$)-18)="From Receipt Date: "+datef$
    if whsefor$="" midh4$="All Warehouses" else midh4$="For Warehouse "+whsefor$
    tmph4$(1)="  To Vendor: "+vendt$
    tmph4$(fncenter(midh4$,width))=midh4$
    tmph4$(width-len(datef$)-18)="  To Receipt Date: "+datet$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" For Variances Greater Than Or Equal To "+str(minvari:mpcnt$)
    headings$[2]=tmph3$
    headings$[3]=tmph4$
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195),vendtot[3]
    vendname$="Not On File"
    prevvend$=vendor$
    printvtot$="Y"
    vendreqvar=0
    vendpromvar=0
    find record (apm01a_dev,key=firm_id$+vendor$,dom=brnch2) apm01a$
    vendname$=apm01a.vendor_name$

brnch2:

    if l+4>l9 gosub report_heading
    print (printer_dev)@(0),fnmask$(vendor$(1,vendlen),vendomask$)," ",vendname$
    l=l+1
    return

newpo: rem --- New PO

    dim rdate$(8),odate$(8)
    po_reqvar=0
    po_promvar=0
    prevpo$=ponum$
    printptot$="Y"
    if rcptdate$<>fill(6) rdate$=fndate$(rcptdate$)
    if orddate$<>fill(6) odate$=fndate$(orddate$)
    if l+3>l9 gosub report_heading
    print (printer_dev) @(o[1]),"PO #: ",ponum$,
:                       @(18),"Ordered: ",odate$
    l=l+1
    return

vendtotals: rem --- Print Vendor total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[10]-19-len(vendomask$)),"Total For Vendor ",fnmask$(prevvend$(1,vendlen),vendomask$),
:                       @(o[10]),vendreqvar:mvar$,
:                       @(o[11]),vendpromvar:mvar$
    l=l+1
    return

pototals: rem --- Print PO total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[10]-24),"Total For PO # ",prevpo$,
:                       @(o[10]),po_reqvar:mvar$,
:                       @(o[11]),po_promvar:mvar$
    l=l+1
    return

getlinetype: rem --- Get Line Type

    let linetype$="N"
    find record (pom02a_dev,key=pot14a.firm_id$+pot14a.po_line_code$,dom=brnch3) pom02a$
    let linetype$=pom02a.line_type$

brnch3:
    return

rem --- Print data line

printline:

    dim dprom$(8),qdate$(8)
    if rcptdate$<>fill(6) rdate$=fndate$(rcptdate$)
    if dateprom$<>fill(6) dprom$=fndate$(dateprom$)
    if reqdate$<>fill(6) qdate$=fndate$(reqdate$)
    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[2]),linenum$,
:                       @(o[3]),linecode$,
:                       @(o[4]),whse$,
:                       @(o[5]),item$(1,itemlen),
:                       @(o[6]),itemdesc$(1,desclen),
:                       @(o[7]),rdate$,
:                       @(o[8]),qdate$,
:                       @(o[9]),dprom$,
:                       @(o[10]),reqvari:mvar$,
:                       @(o[11]),promvari:mvar$

    let l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
