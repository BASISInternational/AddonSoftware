rem --- Purchase Order Receipt History Report (Summary - Print Overlay)
rem --- Program por_pb v8.0.0 17Jul2007 (por_pb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:50:28)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    printseq$=fnget_fld_data$(table$,"print_seq")
    vendfrom$=fnget_fld_data$(table$,"beg_vendor")
    vendthru$=fnget_fld_data$(table$,"end_vendor")
    datefrom$=fnget_fld_data$(table$,"beg_date")
    datethru$=fnget_fld_data$(table$,"end_date")
    det_level$=fnget_fld_data$(table$,"detail_level")

rem --- Init Data

    precision ivprecision
    dim a0$(22),a1$(160),a[8],vendtot[3],vendor$(6)
    printvtot$="N"
    initializing$="Y"; rem "Init files 1st time through
    mratio$="-##0.00%"
    mratio=len(mratio$)
    more=1

rem --- Headings and print positions

    headings=4
    dim headings$[headings],o[12]
    width=132
    page=0
    l9=59
    l=l9+1
    gosub assignheads

positions:
    o[1]=o[0]+7
    o[2]=o[1]+8
    o[3]=o[2]+8
    o[4]=o[3]+9
    o[5]=o[4]+10
    o[6]=o[5]+6
    o[7]=o[6]+7
    o[8]=o[7]+7
    o[9]=o[8]+16
    o[10]=o[9]+16
    o[11]=o[10]+m1
    o[12]=o[11]+m1

    if o[12]+8>=width
        o[12]=width-mratio
        o[11]=o[12]-m1
        o[10]=o[11]-m1
    endif

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,0,1,meter_num,status

rem --- Sorts
    
    while more
    
        action=pos(printseq$="AN")
        sortbyalt=1
        sortbyvend=2
        keybyvend=3
        
        switch action

            case sortbyalt; rem --- Sort by alternate sequence

                if initializing$<>"N"
                    initializing$="N"
                    ap04_key$=firm_id$+"A"+vendfrom$
                    read (apm04_dev,key=ap04_key$,dom=*next)
                endif

rem --- Find a POT44 record using alt seq

                while more

                    apm04a_key$=key(apm04_dev,end=done)
                    if apm04a_key.firm_id$+"A"<>firm_id$+"A" break
                    if vendthru$<>fill(6) and cvs(apm04a_key.alt_sequence$,2)>cvs(vendthru$,2) more=0;break
                    apm04b_key$=apm04a_key.firm_id$+apm04a_key.vendor_id$
                    read (apm04_dev); rem "Move ptr
                    read (pot44_dev,key=k04b$,dom=*next)
                    pot44a_key$=key(pot44_dev,end=*continue)
                    if pot44a_key.firm_id$+pot44a_key.vendor_id$<>apm04b_key$ continue
                    k$=pot44a_key$

                wend

                break

            case sortbyvend; rem --- Sort by alternate sequence

                if initializing$<>"N"
                    initializing$="N"
                    pot44a_key$=firm_id$+vendfrom$+datefrom$
                    read (pot44_dev,key=pot44a_key$,dom=*next)
                endif

rem --- Read through req headers

                k$=key(pot44_dev,end=done)
                break

            case default

                more=0
                break

        swend

        if !more break

        while more

            if k$(1,2)<>firm_id$ continue
            read (pot44_dev); rem "Move ptr
            find record (pot04_dev,key=k$(1,8)+k$(15,14),dom=nextheader) pot04a$

rem --- Test Ranges

            if printseq$<>"A"
                if vendthru$<>fill(6) and pot04a.vendor_id$>vendthru$ break
            endif

            if datefrom$<>"" and pot04a.recpt_date$<datefrom$ and printseq$<>"A" continue
            if datethru$<>"" and pot04a.recpt_date$>datethru$ and printseq$<>"A" continue

rem --- Assign variables

            dim rcptdate$(8),orddate$(8)
            if pot04a.recpt_date$<>fill(6) rcptdate$=fndate$(pot04a.recpt_date$)
            if pot04a.ord_date$<>fill(6) orddate$=fndate$(pot04a.ord_date$)
            if ponum$=pot04a.po_no$ ponum_prnt$="" else ponum_prnt$=pot04a.po_no$
            ponum$=pot04a.po_no$
            receiver$=pot04a.receiver_no$
            terms$=pot04a.terms_code$
            paddrcode$=pot04a.purch_addr$
            ship2whs$=pot04a.warehouse_id$
            freight$=pot04a.po_frt_terms$
            shipvia$=pot04a.ap_ship_via$
            acknow$=pot04a.acknowledge$

rem --- Test breaks

            if pot04a.vendor_id$<>vendor$
                if printvtot$="Y" gosub vendtotals
                gosub newvendor
            endif

            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Calculate Order Value, Receipt Value and Fill Ratio

            po_oval=0
            po_rval=0
            ratio=0
            read (pot14_dev,key=a0$,dom=*next)

rem --- Get detail numerics and accumulate column buckets

            while more
            
                pot14a_key$=key(pot14_dev,end=*break)
                if pot14a_key.firm_id$+pot14a_key.firm_id$+pot14a_key.vendor_id$+pot14a_key.receiver_no$=a0$

                    read record (pot14_dev,key=pot14a_key$) pot14a$
                    gosub getlinetype
                    if pos(linetype$="SNO")=0 continue
                    precision 2
                    ordval=(pot14a.unit_cost*pot14a.qty_ordered)
                    rcptval=(pot14a.unit_cost*pot14a.qty_ordered)
                    precision ivprecision

rem --- Accumulate totals; then get next detail

                    po_oval=po_oval+ordval
                    if ponum_prnt$<>""
                        vendoval=vendoval+ordval
                        grandoval=grandoval+ordval
                    endif

rem "Don't accum OrdVal tots if samePO#

                    po_rval=po_rval+rcptval
                    vendrval=vendrval+rcptval
                    grandrval=grandrval+rcptval
                    
                endif

            wend

rem --- Done w/detail for this PO

            if po_oval>0 ratio=po_rval*100/po_oval
            gosub printline
            read (pot44_dev,key=k$(1,28)+$FF$,dom=*next); rem "Move ptr to next recpt

rem --- Loop up for next header record via sort files

nextheader:
            if printseq$<>"A" continue

rem --- See if there's another po for vend before getting next alt seq

            pot44a_key$=key(pot44_dev,end=*continue)
            if pot44a_key.vendor_id$=vendor$ continue

        wend

    wend

done: rem --- All Done

    if l+2>l9 gosub report_heading
    gosub vendtotals
    if grandoval>0 grandratio=grandrval*100/grandoval
    print (printer_dev) @(o[10]-17),"Total For Report",
:                       @(o[10]),grandoval:m1$,
:                       @(o[11]),grandrval:m1$,
:                       @(o[12]),grandratio:mratio$
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[3]),"Order",
:                       @(o[4]),"Receipt",
:                       @(o[5]-1),"Terms",
:                       @(o[6]-1),"P.Addr",
:                       @(o[7]-1),"Ship-To",
:                       @(o[8]),"Freight Terms",
:                       @(o[10]+m1-7),"Order",
:                       @(o[11]+m1-9),"Receipt",
:                       @(o[12]+mratio-7),"Fill"

    print (printer_dev) @(o[0]),"Vendor",
:                       @(o[1]),"PO Numb",
:                       @(o[2]),"Receivr",
:                       @(o[3]),"Date",
:                       @(o[4]),"Date",
:                       @(o[5]-1),"Code",
:                       @(o[6]-1),"Code",
:                       @(o[7]-1),"Whse",
:                       @(o[8]),"Ship Via",
:                       @(o[9]),"Acknowledged",
:                       @(o[10]+m1-7),"Value",
:                       @(o[11]+m1-9),"Value",
:                       @(o[12]+mratio-7),"Ratio"

    print (printer_dev)""
    l=l+3
    return

assignheads: rem --- Assign headings variables

    dim tmph3$(width),tmph4$(width)
    if printseq$="A" vendf$=vendfrom$ else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendfrom$=fill(6) vendf$="First"
    if printseq$="A" vendt$=vendthru$ else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    if vendthru$=fill(6) vendt$="Last"
    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)

    midh3$=leveldesc$+" Sorted By "+seqdesc$
    tmph3$(1)="From Vendor: "+vendf$
    tmph3$(fncenter(midh3$,width))=midh3$
    tmph3$(width-len(datef$)-18)="From Receipt Date: "+datef$
    tmph4$(1)="  To Vendor: "+vendt$
    tmph4$(width-len(datef$)-18)="  To Receipt Date: "+datet$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=tmph3$
    headings$[3]=tmph4$
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195),vendtot[3]
    vendname$="Not On File"
    vendor$=pot04a.vendor_id$
    ponum_prnt$=pot04a.po_no$; rem "In case this & last vend had some PO #
    printvtot$="Y"
    vendoval=0
    vendrval=0
    vendratio=0
    find record (apm01_dev,key=firm_id$+vendor$,dom=brnch1) apm01a$
    vendname$=apm01a.vendor_name$

brnch1:

    if l+2>l9 gosub report_heading
    print (printer_dev) @(0),fnmask$(vendor$(1,vendlen),vendomask$)," ",vendname$
    l=l+1
    return

vendtotals: rem --- Print Vendor total

    if vendoval>0 vendratio=vendrval*100/vendoval
    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[10]-18-len(vendomask$)),"Total For Vendor ",
:                       fnmask$(vendor$(1,vendlen),vendomask$),
:                       @(o[10]),vendoval:m1$,
:                       @(o[11]),vendrval:m1$,
:                       @(o[12]),vendratio:mratio$
    l=l+1
    return

getlinetype: rem --- Get Line Type

    linetype$="N"
    find record (pom02_dev,key=pot14a.firm_id$+pot14a.po_line_code$,dom=brnch2) pom02a$
    linetype$=pom02a.line_type$

brnch2:
    return

printline: rem --- Print data line

    if l+2>l9 gosub report_heading
    let po_oval$=str(po_oval:m1$),po_rval$=str(po_rval:m1$)
    if ponum_prnt$="" po_oval$=""
    print (printer_dev) @(o[1]),ponum_prnt$,
:                       @(o[2]),receiver$,
:                       @(o[3]),orddate$,
:                       @(o[4]),rcptdate$,
:                       @(o[5]),terms$,
:                       @(o[6]),paddrcode$,
:                       @(o[7]),ship2whs$,
:                       @(o[8]),freight$,
:                       @(o[9]),acknow$(1,15),
:                       @(o[10]),po_oval$,
:                       @(o[11]),po_rval$,
:                       @(o[12]),ratio:mratio$

    print (printer_dev) @(o[8]),shipvia$,
:                       @(o[9]),cvs(acknow$(16),1)
    let l=l+2
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
