rem --- Purchase Order Invoice Register (Invoices)
rem --- Program por_ea v8.0.0 06Jul2007 (por_ea)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:06:38)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0329)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0213)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0221)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0240)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0241)
rem --- v7.x Administrator reference ["sys-01"] (Line 0247)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0273)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0305)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0313)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0314)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0315)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0316)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0341)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0432)
rem --- BBx reference ["syc_ra.bbx"] (Line 0432)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0454)
rem --- BBx reference ["syc_rs.bbx"] (Line 0454)
rem --- BBx reference ["por_eb.bbx"] (Line 0757)
rem --- v7.x Administrator reference ["syc_rd.bbx"] (Line 0805)
rem --- BBx reference ["syc_rd.bbx"] (Line 0805)
rem --- BBx reference ["poc_gb.bbx"] (Line 0914)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file apt-03 referenced (Line 0162)
rem --- Cross-reference file glt-14 referenced (Line 0167)
rem --- Cross-reference file pot-35 referenced (Line 0183)
rem --- Cross-reference file pot-35 referenced (Line 0286)
rem --- Cross-reference file apt-03 referenced (Line 0293)
rem --- Cross-reference file glt-14 referenced (Line 0422)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record apt03a replaced by index on apt-01 (Line 0192)
rem --- Cross-reference record glt14a replaced by index on glt-04 (Line 0193)
rem --- Cross-reference record pot35a replaced by index on poe-03 (Line 0199)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist b0$(1),b1$(1)
rem --- apm10a: iolist xa$(1)
rem --- apm10b: iolist x0$(1),x1$(1)
rem --- apm10c: iolist xc$(1),xc[all]
rem --- arm10d: iolist z0$(1),z1$(1)
rem --- ars01a: iolist x$,u1$,u2$,u3$
rem --- glm01a: iolist s0$(1),s1$(1)
rem --- gls01a: iolist x$,g1$,g2$,g3$,g4$,g5$,g6$,g7$
rem --- ivm01a: iolist s0$(1),s1$(1),s2$(1),s3$(1),s4$(1),s5$,s6$(1),s[all]
rem --- ivm02a: iolist u0$(1),u1$(1),u2$,u[all]
rem --- poe05a: iolist a0$(1),a1$(1),a2$,a3$,a[all]
rem --- poe15a: iolist d0$(1),d1$(1),d2$,d[all]
rem --- poe25a: iolist w0$(1),w1$(1),w2$,w[all]
rem --- poe35a: iolist z0$(1),z1$(1),z[all]; rem escape ,job$(1)
rem --- pom02a: iolist y0$(1),y1$(1),y2$(1)
rem --- pos01a: iolist r0$,r1$,r2$,r3$,r4$
rem --- pot04a: iolist c0$(1),c1$(1),c[8]
rem --- pot14a: iolist l0$(1),l1$(1),l2$(1),l3$(1),l4$(1),l5$,l6$,l[all]

rem --- The following channel references have been identified:

rem --- apm02a: Channel reference (Line 0312)

rem --------------------------------------------------------------------------------
rem --- apm09a: Channel reference (Line 0311)
rem --- aps01a: (Generated by CodePort)
rem --- apt01a: Channel reference (Line 0310)
rem --- apt02a: Channel reference (Line 0309)
rem --- apt03a: Channel reference (Line 0308)
rem --- apt11a: Channel reference (Line 0307)
rem --- glt04a: Channel reference (Line 0319)
rem --- glt14a: Channel reference (Line 0318)
rem --- glw11a: Channel reference (Line 0317)
rem --- ivs01a: (Generated by CodePort)
rem --- poe02a: Channel reference (Line 0300)
rem --- poe12a: Channel reference (Line 0299)
rem --- pot05a: Channel reference (Line 0299)
rem --- pot15a: Channel reference (Line 0298)
rem --- pot25a: Channel reference (Line 0297)
rem --- pot35a: Channel reference (Line 0296)
rem --- pow17a: Channel reference (Line 0309)
rem --- sfe01a: Channel reference (Line 0308)
rem --- sfm10a: Channel reference (Line 0307)
rem --- sys01a: Channel reference (Line 0291)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=32,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="apm-02"
    files$[4]="apm-09"
    files$[5]="apm-10"
    files$[6]="apt-01"
    files$[7]="apt-02"
    files$[8]="apt-03"
    files$[9]="apt-11"
    files$[10]="arm-10"
    files$[11]="glm-01"
    files$[12]="glt-04"
    files$[13]="glt-14"
    files$[14]="glw-11"
    files$[15]="ivm-01"
    files$[16]="ivm-02"
    files$[17]="poe-02"
    files$[18]="poe-05"
    files$[19]="poe-12"
    files$[20]="poe-15"
    files$[21]="poe-25"
    files$[22]="poe-35"
    files$[23]="pom-02"
    files$[24]="pot-04"
    files$[25]="pot-05"
    files$[26]="pot-14"
    files$[27]="pot-15"
    files$[28]="pot-25"
    files$[29]="pot-35"
    files$[30]="pow-17"
    files$[31]="sfe-01"
    files$[32]="sfm-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    apm02_dev=channels[3]
    apm09_dev=channels[4]
    apm10_dev=channels[5]
    apt01_dev=channels[6]
    apt02_dev=channels[7]
    apt03_dev=channels[8]
    apt11_dev=channels[9]
    arm10_dev=channels[10]
    glm01_dev=channels[11]
    glt04_dev=channels[12]
    glt14_dev=channels[13]
    glw11_dev=channels[14]
    ivm01_dev=channels[15]
    ivm02_dev=channels[16]
    poe02_dev=channels[17]
    poe05_dev=channels[18]
    poe12_dev=channels[19]
    poe15_dev=channels[20]
    poe25_dev=channels[21]
    poe35_dev=channels[22]
    pom02_dev=channels[23]
    pot04_dev=channels[24]
    pot05_dev=channels[25]
    pot14_dev=channels[26]
    pot15_dev=channels[27]
    pot25_dev=channels[28]
    pot35_dev=channels[29]
    pow17_dev=channels[30]
    sfe01_dev=channels[31]
    sfm10_dev=channels[32]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm02a$:templates$[3],apm09a$:templates$[4],
:       apm10a$:templates$[5],apt01a$:templates$[6],apt02a$:templates$[7],
:       apt03a$:templates$[8],apt11a$:templates$[9],arm10a$:templates$[10],
:       glm01a$:templates$[11],glt04a$:templates$[12],glt14a$:templates$[13],
:       glw11a$:templates$[14],ivm01a$:templates$[15],ivm02a$:templates$[16],
:       poe02a$:templates$[17],poe05a$:templates$[18],poe12a$:templates$[19],
:       poe15a$:templates$[20],poe25a$:templates$[21],poe35a$:templates$[22],
:       pom02a$:templates$[23],pot04a$:templates$[24],pot05a$:templates$[25],
:       pot14a$:templates$[26],pot15a$:templates$[27],pot25a$:templates$[28],
:       pot35a$:templates$[29],pow17a$:templates$[30],sfe01a$:templates$[31],
:       sfm10a$:templates$[32]

rem --- Retrieve miscellaneous templates

    files=8,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="apm-10B"
    ids$[2]="apm-10C"
    ids$[3]="aps-01A"
    ids$[4]="ars-01A"
    ids$[5]="gls-01A"
    ids$[6]="ivs-01A"
    ids$[7]="pos-01A"
    ids$[8]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim apm10b$:templates$[1],apm10c$:templates$[2],aps01a$:templates$[3],
:       ars01a$:templates$[4],gls01a$:templates$[5],ivs01a$:templates$[6],
:       pos01a$:templates$[7],sys01a$:templates$[8]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (ads01_dev,key=pos01a_key$,err=std_missing_params) pos01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=32
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="poe-02"
    files$[3]="poe-05"
    files$[4]="poe-12"
    files$[5]="poe-15"
    files$[6]="poe-25"
    files$[7]="poe-35"
    files$[8]="pom-02"
    files$[9]="pot-04"
    files$[10]="pot-05"
    files$[11]="pot-14"
    files$[12]="pot-15"
    files$[13]="pot-25"
    files$[14]="pot-35"
    files$[15]="apm-01"
    files$[16]="apm-02"
    files$[17]="apm-09"
    files$[18]="apm-10"
    files$[19]="apt-01"
    files$[20]="apt-02"
    files$[21]="apt-03"
    files$[22]="apt-11"
    files$[23]="ivm-01"
    files$[24]="ivm-02"
    call pgmdir$+"adc_fileopen.aon",1,1,24,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    poe02_dev=channels[2]
    poe05_dev=channels[3]
    poe12_dev=channels[4]
    poe15_dev=channels[5]
    poe25_dev=channels[6]
    poe35_dev=channels[7]
    pom02_dev=channels[8]
    pot04_dev=channels[9]
    pot05_dev=channels[10]
    pot14_dev=channels[11]
    pot15_dev=channels[12]
    pot25_dev=channels[13]
    pot35_dev=channels[14]
    apm01_dev=channels[15]
    apm02_dev=channels[16]
    apm09_dev=channels[17]
    apm10_dev=channels[18]
    apt01_dev=channels[19]
    apt02_dev=channels[20]
    apt03_dev=channels[21]
    apt11_dev=channels[22]
    ivm01_dev=channels[23]
    ivm02_dev=channels[24]

rem --- ESCAPE DIM AFILES$[2],AOPTIONS$[2],ACHANNELS[2]
rem --- ESCAPE LET AFILES$[1]="CVF160",AFILES$[2]="CVF170
rem --- ESCAPE CALL "adc_fileopen.aon",1,1,2,AFILES$[ALL],AOPTIONS$[ALL],ACHANNELS[ALL],BATCH,STATUS
rem --- ESCAPE LET CVF160_DEV=ACHANNELS[1],CVF170_DEV=ACHANNELS[2]
rem --- Parameters

    dim i[6],p[3],g[4],info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="PO"
    gl$="N"
    ar$="N"
    sf$="N"
    status=0
    source$=pgm(-2)
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) pos01a$
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    i[0]=num(i2$(1,2))
    i[1]=num(i2$(5,1))
    i[2]=num(i2$(7,2))
    i[3]=num(i2$(9,2))
    i[4]=num(i2$(11,2))
    i[5]=num(i2$(13,2))
    i[6]=num(i2$(3,2))
    p[0]=num(p2$(1,2))
    distcode$="N"
    cash=p3$(4,1)="Y"
    g[0]=num(g2$(1,2))
    g[1]=num(g2$(3,2))
    g[2]=fnyy_year(g2$(5,2))
    g[3]=num(g2$(7,2))
    g[4]=num(g2$(9,2))
    if cash goto l500
    call pgmdir$+"glc_ctlcreate.aon",err=l500,source$,n2$,glw11$,gl$,status
    if status goto std_exit
    if gl$<>"Y" goto l500
    call pgmdir$+"adc_application.aon","SF",info$[all]
    sf$=info$[20]
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$="N" goto l500
    find record (sys01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    distcode$=u3$(11,1)

l500: rem --- Initializations

    precision i[1]
    dim a0$(20),a1$(64),a[8],b0$(8),b1$(30),xa$(32),headings$[3]
    dim oi[10],og[2],vendor[3],type[3],report[3],totals[3],desc$[3]
    dim op[7],ol[8],xc$(26),xc[2],y0$(4),y1$(32),y2$(2*g[4]),x0$(32)
    dim d0$(24),d1$(32),d[4],w0$(24),w1$(96),w[4],item$[6],x1$(4*g[4])
    dim glfiles[20],glparams$[20],glparams[20],w$[10],y$[10],values[20]
    a0$(1)=firm_id$
    l0=11
    increment=10
    hl=3
    aptype$=""
    retention$=""
    nf$="(Not On File)"
    rh1$="Discount"
    rh2$="Amount"
    m0=len(m0$)
    aptype=0
    retention=0
    headings=2
    t0$=""
    t1$=""
    errors=0
    width=132
    page=0
    l9=59
    l=l9+1
    clock$=""
    when$=sysinfo.system_date$
    desc$[1]="By Invoice"
    desc$[2]="By Purchase Order"
    glstatus=0
    desc$[3]="By Line Item"
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    if p3$(1,1)="Y" aptype=1,headings=3
    if p3$(3,1)="Y" retention=1,rh1$="Discount/",rh2$="Retention"
    level$="I"

rem --- ESCAPE DIM JOB$(28)
rem --- Print positions

    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,12
    oi[10]=width-m1
    oi[9]=oi[10]-m1
    oi[8]=oi[9]-16
    oi[7]=oi[8]-10
    oi[6]=oi[7]-10
    oi[5]=oi[6]-5
    oi[4]=oi[5]-6
    oi[3]=oi[4]-4
    oi[2]=oi[3]-5
    oi[1]=oi[2]-11
    dw=oi[1]-1
    if dw>m0+31 dw=m0+32,oi[1]=dw

rem --- Additional file opens

    if distcode$="Y" files$[25]="arm-10"
    if pos(r3$(55,1)="QC") files$[30]="pow-17",options$[30]="C"
    if gl$<>"Y" goto l680
    files$[26]="glm-01"
    files$[27]=glw11$
    files$[28]="glt-04"
    files$[29]="glt-14"
    options$[27]="C"
    xref_dev=0
    if sf$="Y" files$[31]="sfe-01",files$[32]="sfm-10"
l680:
    call pgmdir$+"adc_fileopen.aon",1,25,32,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    arm10_dev=channels[25]
    glm01_dev=channels[26]
    glw11_dev=channels[27]
    glt04_dev=channels[28]
    glt14_dev=channels[29]
    pow17_dev=channels[30]
    sfe01_dev=channels[31]
    sfm10_dev=channels[32]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    goto flow_control

level: rem --- Options

    v4$="I=Summary "+desc$[1]+"    P=Detail "+desc$[2]+"    L=Detail "+desc$[3]
    v0$="S"
    v1$="C"
    v2$=level$
    v3$="IPL"
    v0=1
    v1=40
    v2=3
    control_id=3000
    gosub std_input
    on v3 goto l830,level,flow_control,level,flow_control,l830,flow_control
l830:
    if pos(v$="IPL")=0 goto level
    level$=v$
    v=pos(v$="IPL")
    call pgmdir$+"syc_rs.bbx","",my_context,3000,level$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13000,desc$[v],0,"",status
    goto flow_control

l850: rem --- Run Report

    x$="Detail"
    if level$="I" x$="Summary"
    headings$[1]=x$+" "+headings$[1]+" "+desc$[v]

rem --- Remaining print positions

    op[0]=oi[1]
    op[1]=op[0]+4
    op[2]=op[1]+8
    op[3]=op[2]+8
    op[4]=op[3]+9
    op[5]=op[4]+9
    op[7]=op[5]+23
    ol[0]=oi[1]
    ol[1]=ol[0]+4
    ol[2]=ol[1]+3
    ol[3]=ol[2]+3
    ol[4]=ol[3]+max(10,i[0])
    ol[5]=ol[4]+9
    ol[6]=ol[5]+m2
    ol[7]=ol[6]+2
    ol[8]=ol[7]+m3
    og[0]=oi[1]
    og[1]=og[0]+4
    og[2]=oi[9]-m1
    if level$="P" og[2]=op[7]
    if level$="L" og[2]=ol[8]
    tw=min(op[7]-op[5],23)
    gw=og[2]-og[1]-1

rem --- Position file

    x=m0+11
    if aptype x=x+3
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"Purchase Order Invoice Register","Printing","",x,0,1,0,ignore_status
    read (poe05_dev,key=firm_id$,dom=*next)

l1000: rem --- Read next header

    k$=key(poe05_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read record (poe05_dev) poe05a$
    x$=fnmask$(a0$(5,p[0]),m0$)+" "+a0$(11,10)
    if aptype x$=a0$(3,2)+" "+x$
    call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,0,ignore_status

rem --- Level breaks?

    if a0$(3,2)<>t0$ gosub l6000
    if a0$(5,6)<>t1$ gosub l6200

rem --- Additional reads

    dim x0$(32),x1$(4*g[4])
    x0$(1)=firm_id$+"B"+a1$(28,2)
    apcode$=a1$(28,2)
    find record (apm10_dev,key=x0$(1,5),dom=*next) apm10b$
    apacct$=x1$(1,g[4])
    retacct$=x1$(3*g[4]+1,g[4])

rem --- Format invoice fields

    retention$=""
    hold$="No"
    total=0
    if retention retention$=str(a[2]:m1$)
    if a1$(25,1)="Y" hold$="Yes"

rem --- Print invoice header

    if l+3>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(oi[0]),vendor$,@(oi[1]),a0$(11,10),@(oi[2]),a1$(28,2),@(oi[3]),a1$(30,2),@(oi[4]),a1$(26,2),@(oi[5]),hold$,@(oi[6]),fndate$(a1$(1,6)),@(oi[7]),fndate$(a1$(7,6)),@(oi[8]),a1$(32,10),@(oi[9]),a[0]:m1$,@(oi[10]),a[1]:m1$
    print (printer_dev)@(oi[6]),fndate$(a1$(13,6)),@(oi[7]),fndate$(a1$(19,6)),@(oi[8]),a1$(42,16),@(oi[10]),retention$
    l=l+3
    glskip=0
    if cvs(a1$(42,16),2)<>"" glskip=1

rem --- Check GL posting date

    gldate$=a1$(7,6)
    if gl$="Y" call pgmdir$+"glc_datecheck.aon",gldate$,"N",period$,year$,glstatus
    if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,gldate$,glstatus,l,errors,status

rem --- Position poe-15 PO Detail

    first=1
    glskip=1
    read (poe15_dev,key=a0$,dom=*next)

l2000: rem --- Read next PO record

    k$=key(poe15_dev,end=l3200)
    if pos(a0$=k$)<>1 goto l3200
    read record (poe15_dev) poe15a$
    dim receivers[99]
    number=1
    receivers$=d1$(1,14)
    receivers[1]=d[0]
    seq$=d0$(21,3)
    if cvs(d1$(1,7),2)="" goto l2100
    if cvs(d1$(8,7),2)="" gosub l6500

l2100: rem --- Read history header and original terms

    for receiver=1 to number
        dim c0$(22),c1$(160),c[8],xc$(26),terms$(tw)
        receipt$=receivers$(((receiver-1)*14)+1,14)
        c0$(1)=b0$+receipt$
        find record (pot04_dev,key=c0$,dom=*next) pot04a$
    l2150:
        xc$(1)=firm_id$+"C"+c1$(38,2)+nf$
        ordered$=""
        received$=""
        find record (apm10_dev,key=xc$(1,5),dom=*next) apm10c$
    l2170:
        terms$(1)=xc$(4,2)+" "+xc$(6,20)
        if cvs(c1$(5,6),2)<>"" ordered$=fndate$(c1$(5,6))
        if cvs(c1$(29,6),2)<>"" received$=fndate$(c1$(29,6))
    
        rem --- Print PO detail record
    
        if level$<>"P" goto l2300
        if first gosub l5100
        if l+1>l9 gosub report_heading; gosub l5100
        po$=receipt$(1,7)
        rec$=receipt$(8,7)
        if cvs(po$,2)="" po$="Other Chgs",rec$="",terms$=""
        print (printer_dev)@(op[0]),seq$,@(op[1]),po$,@(op[2]),rec$,@(op[3]),ordered$,@(op[4]),received$,@(op[5]),terms$,@(op[7]),receivers[receiver]:m1$
        l=l+1
        first=0
        glskip=1
        seq$=""
    
    l2300: rem --- Position line item file
    
        read (poe25_dev,key=a0$,dom=*next)
    
    l2400: rem --- Read next line item
    
        k$=key(poe25_dev,end=l3000)
        if pos(a0$=k$)<>1 goto l3000
        read record (poe25_dev) poe25a$
        if w1$(1,7)<>c0$(9,7) goto l2900
        if cvs(c0$(16,7),2)<>"" if w1$(11,7)<>c0$(16,7) goto l2900
    
        rem --- Read history detail record and line code
    
        dim l0$(25),l1$(64),l2$(32),l3$(22),l4$(40),l[12],description$(dw)
        l0$(1)=b0$+w1$(1,7)+w1$(11,7)+w1$(8,3)
        qty=w[1]
        lc$=w1$(18,2)
        description$(1)=w1$(20,40)
        find record (pot14_dev,key=l0$,dom=l2540) pot14a$
        lc$=l1$(1,2)
    l2540:
        if cvs(w1$(1,17),2)="" qty=1
        precision 2
        extension=w[0]*qty
        poextension=w[2]*qty
        precision i[1]
        if y0$(1,4)=firm_id$+lc$ goto l2600
        y0$(1)=firm_id$+lc$
        y1$(1)=""
        y2$(1)=""
        if cvs(w1$(1,7),2)="" y0$(1)=firm_id$+w1$(18,2)
        find record (pom02_dev,key=y0$,dom=*next) pom02a$
    
    l2600: rem --- Read inventory item and warehouse
    
        dim s0$(22),s1$(60),s2$(64),s3$(40),s4$(21),s6$(g[4]*9),s[12]
        dim u0$(24),u1$(64),u[20]
        if y1$(21,1)<>"S" goto l2700
        s0$(1)=firm_id$+l3$(3)
        u0$(1)=firm_id$+l3$
        find record (ivm01_dev,key=s0$,dom=*next) ivm01a$
    l2660:
        description$(1)=fnitem$(s1$,i[3],i[4],i[5])
        find record (ivm02_dev,key=u0$,dom=*next) ivm02a$
    
    l2700: rem --- Print line item
    
        if level$<>"L" goto l2800
        gosub l5500
    
    l2800: rem --- Generate GL Recap
    
        if gl$="N" goto l2900
        action$=""
        account$=""
        item$[0]=s0$(3)
        item$[1]=s1$
        item$[6]=s6$
        values[0]=extension
        values[1]=poextension
        values[2]=w[1]
        values[3]=u[0]
        arcode$=u1$(13,2)
        w$[0]=w0$
        w$[1]=w1$
        y$[0]=y0$
        y$[1]=y1$
        y$[2]=y2$
        total=total+extension
        gosub l6900
    
    l2900: rem --- Loop back for next line item
    
        goto l2400
    
    l3000: rem --- Loop back for next PO record
    
    next receiver
    goto l2000

l3200: rem --- Position GL distribution file

    dim z0$(23),z1$(32),z[4],s0$(12),s1$(35),g$(gw)
    dim item$[6],values[4],w$[10],y$[10]
    if gl$<>"Y" goto l3800
    first=1
    distribution=0
    arcode$=""
    apcode$=""
    read (poe35_dev,key=a0$,dom=*next)

l3300: rem --- Read next GL distribution record

    k$=key(poe35_dev,end=l3600)
    if pos(a0$=k$)<>1 goto l3600
    read record (poe35_dev) poe35a$
    s0$(1)=firm_id$+z1$(1,g[4])
    s1$(1)=nf$
    find record (glm01_dev,key=s0$,dom=*next) glm01a$
    g$(1)=fnmask$(s0$(3,g[3]),g5$)+" "+s1$(1,35)

rem --- Print it

    if first gosub l5300
    if l+1>l9 gosub report_heading; gosub l5300
    print (printer_dev)@(og[0]),z0$(21,3),@(og[1]),g$,@(og[2]),z[0]:m1$
    l=l+1
    first=0
    glskip=1

rem --- Generate GL recap postings and loop back for next record

    account$=s0$(3)
    amount=-z[0]
    values[0]=amount
    w$[0]=z0$
    w$[1]=z1$
    action$="D"
    distribution=distribution+amount
    total=total+z[0]
    gosub l6900
    goto l3300

l3600: rem --- Generate any additional GL recap postings for the invoice

    if distribution=0 goto l3700
    action$="D"
    account$=apacct$
    values[0]=-distribution
    w$[0]=a0$
    gosub l6900

l3700: rem --- Does GL total match invoice header?

    if total=a[0] goto l3900
    if l+1>l9 gosub report_heading
print (printer_dev)"---> ERROR: Invoice Total Does Not Match Sum Of Line Items And/Or Distribution"
    l=l+1
    errors=errors+1
l3800:

l3900: rem --- Loop back for next header

    totals[0]=1
    totals[1]=a[0]
    totals[2]=a[1]
    totals[3]=a[2]
    type[all]=type[all]+totals[all]
    vendor[all]=vendor[all]+totals[all]
    report[all]=report[all]+totals[all]
    goto l1000

done: rem --- All done

    done=1
    gosub l6000
    if l+3>l9 gosub report_heading
    print (printer_dev)""
    total$="Register"
    totals[all]=report[all]
    gosub l6800
    run pgmdir$+"por_eb.bbx"

report_heading: rem --- Report Heading

    l=headings+3
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(oi[2]),"Dist",@(oi[3]),"Pay",@(oi[6]),"Inv Date",@(oi[7]),"Acct Date",@(oi[8]),"Ref/",@(oi[9]+m1-8),"Invoice",@(oi[10]+m1-(len(rh1$)+1)),rh1$
    print (printer_dev)@(oi[0]),"Vendor",@(oi[1]),"Invoice",@(oi[2]),"Code",@(oi[3]),"Grp",@(oi[4]),"Terms",@(oi[5]),"Hold",@(oi[6]),"Due Date",@(oi[7]),"Disc Date",@(oi[8]),"Memo",@(oi[9]+m1-8),"Amount",@(oi[10]+m1-(len(rh1$)+1)),rh2$
    return

l5100: rem --- Purchase Order Subheading

    if l+3>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(op[0]),"Seq",@(op[1]),"PO #",@(op[2]),"Rec #",@(op[3]),"Ordered",@(op[4]),"Received",@(op[5]),"Original Terms",@(op[7]+m1-6),"Total"
    l=l+2
    return

l5200: rem --- Line Item Subheading

    if l+5>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(ol[0]),"Seq",@(ol[1]),"Cd",@(ol[2]),"Wh",@(ol[3]),"Item",@(ol[4]),"Received",@(ol[5]+m2-9),"Quantity",@(ol[6]),"UM",@(ol[7]+m3-5),"Cost",@(ol[8]+m1-10),"Extension"
    l=l+2
    return

l5300: rem --- GL Distribution Subheading

    needed=2+glskip
    if l+needed>l9 gosub report_heading
    if glskip print (printer_dev)""
    print (printer_dev)@(og[0]),"Seq",@(og[1]),"GL Account",@(og[2]+m1-7),"Amount"
    l=l+1+glskip
    return

display_fields: rem --- Display Fields

    controls=1
    dim controls[controls],values$[controls],value[controls],masks$[controls]
    action$=""
    first=0
    last=controls
    controls[0]=3000
    values$[0]=level$
    v=pos(level$="IPL")
    controls[1]=13000
    values$[1]=desc$[v]
    call pgmdir$+"syc_rd.bbx",action$,my_context,first,last,controls[all],values$[all],value[all],masks$[all],status
    return

l5500: rem --- Print detail line based on line type

    if first gosub l5200
    if l+3>l9 gosub report_heading; gosub l5200
    print (printer_dev)@(ol[0]),w0$(21),@(ol[1]),y0$(3,2),@(ol[2]),l3$(1,2),
    on pos(y1$(21,1)="SNVMO") goto l5990,l5600,l5700,l5990,l5990,l5800

l5600: rem --- Display Standard Line

    print (printer_dev)@(ol[3]),l3$(3,i[0]),@(ol[4]),received$,@(ol[5]),w[1]:m2$,@(ol[6]),l1$(22,2),@(ol[7]),w[0]:m3$,@(ol[8]),extension:m1$
    goto l5900

l5700: rem --- Display Non-Stock Line

    print (printer_dev)@(ol[3]),l3$(3,i[0]),@(ol[4]),received$,@(ol[5]),w[1]:m2$,@(ol[6]),l1$(22,2),@(ol[7]),w[0]:m3$,@(ol[8]),extension:m1$
    goto l5900

l5800: rem --- Display Other Line

    print (printer_dev)@(ol[4]),received$,@(ol[7]),w[0]:m3$,@(ol[8]),extension:m1$

l5900: rem --- Display PO and Receiver

    print (printer_dev)@(ol[3]),description$
    let l=l+2,first=0
    if cvs(w1$(1,7),2)="" goto l5990
    print (printer_dev)@(ol[3]),"PO # ",w1$(1,7),"-",w1$(8,3)," Rec # ",w1$(11,7)
    let l=l+1
l5990:
    return

l6000: rem --- AP Type Break

    if t0$="" goto l6100
    gosub l6200
    let total$="AP Type "+t0$+" "+cvs(xa$(6,20),2),totals[all]=type[all]
    if type[0]<>0 gosub l6800
l6100:
    if done goto l6190
    dim xa$(32),type[3]
    if aptype=0 goto l6190
    let t0$=a0$(3,2),xa$(6,20)=nf$,l=l9+1,warehouse=0
    find record (apm10_dev,key=firm_id$+"A"+t0$,dom=*next) apm10a$
    let headings$[2]="For AP Type "+t0$+" "+cvs(xa$(6,20),2)
l6190:
    return

l6200: rem --- Vendor Break

    if t1$="" goto l6300
    let total$="Vendor "+vendor$,totals[all]=vendor[all]
    if vendor[0]<>0 gosub l6800
l6300:
    if done goto l6390
    dim b0$(8),b1$(30),vendor$(dw),vendor[3]
    let t1$=a0$(5,6),b0$(1)=firm_id$+t1$,b1$(1)=nf$
    find record (apm01_dev,key=b0$,dom=*next) apm01a$
    let vendor$(1)=fnmask$(b0$(3,p[0]),m0$)+" "+b1$
l6390:
    return

l6500: rem --- Find all receivers for a PO

    dim receivers[99]
    let number=0,receivers$=""
    read (poe25_dev,key=a0$,dom=*next)

l6600: rem --- Read next detail line

    let k$=key(poe25_dev,end=l6700)
    if pos(a0$=k$)<>1 goto l6700
    read record (poe25_dev) poe25a$
    if w1$(1,7)<>d1$(1,7) goto l6600
    let x=pos(w1$(1,7)+w1$(11,7)=receivers$,14),x=x/14
    if x goto l6670
    let number=number+1,x=number,receivers$=receivers$+w1$(1,7)+w1$(11,7)
l6670:
    precision 2
    let receivers[number]=receivers[number]+(w[0]*w[1])
    precision i[1]
    goto l6600

l6700: rem --- Done finding all receivers

    return

l6800: rem --- Print total line

    let needed=1
    if retention needed=2
    if l+needed>l9 gosub report_heading
    let l=l+needed,total$="Total For "+cvs(total$,2)
    print (printer_dev)@(oi[9]-len(total$)),total$,@(oi[9]),totals[1]:m1$,@(oi[10]),totals[2]:m1$
    if retention print (printer_dev)@(oi[10]),totals[3]:m1$
    return

l6900: rem --- Call GL Posting Routine

    let glfiles[1]=glm01_dev,glfiles[2]=glw11_dev,glfiles[3]=xref_dev
    let glfiles[4]=apm10_dev,glfiles[5]=arm10_dev,glparams$[0]=firm_id$
    let glparams$[1]=apcode$,glparams$[2]=arcode$,glparams$[3]=distcode$
    let glparams$[4]=gldate$,glparams$[5]=b0$(3,p[0]),glparams$[6]=b1$
    let glparams$[7]=m0$,glparams$[8]=g4$,glparams$[9]=i3$(8,1)
    let glparams$[10]=account$,glparams[0]=i[0],glparams[1]=i[1]
    let glparams[2]=g[4],glparams[3]=i[3],glparams[4]=i[4],glparams[5]=i[5]
    dim glaccounts$[5],glamounts[5],glqtys[5]
    call pgmdir$+"poc_gb.bbx",action$,glfiles[all],glparams$[all],glparams[all],item$[all],w$[all],y$[all],values[all],glaccounts$[all],glamounts[all],glqtys[all],status
    return

flow_control: rem --- Flow Control

    if my_context<>next_context run overlays$[next_context]
    on v3 goto incr_i0,incr_i0,decr_i0,incr_i0,set_i0_done,done_v3
decr_i0:
    if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1)
    goto next_field
incr_i0:
    let i0=i0+1; goto next_field
set_i0_done:
    let i0=i0_done
next_field:
    on i0 goto level,done
cancel:
    goto std_exit
rem --- Is The Above Information Correct?
done:
    if validate validate=0; goto end_input
    gosub display_fields
    let v0$="Y",v1$="CE",v2$="Y",v3$="",v4$="ITAC=Y",v0=1,v1=0,v2=22,control_id=1+i0-i0_done
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
rem --- Validation loop control
validate_input:
    let validate=1,old_control_id=0
    goto do_nonkey1
rem --- Goto first non-key input field
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1; goto flow_control
end_input:
    goto done_entry
done_entry: rem " --- Run Report
    goto l850

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
