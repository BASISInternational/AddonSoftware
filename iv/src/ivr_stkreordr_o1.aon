rem --- Inventory Shortage & Reorder Report
rem --- Program ivr_stkreordr_o1 v8.0.0 16Jul2007 (ivr_db)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:55:05)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

    rem --- Retrieve key template

    if level$="I" call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPROD","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$
    if level$<>"I" call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPRWH","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$
    dim ivm03a_key$:ivm03_key_tpl$

rem --- Initializations

    more=1
    gosub InitHeading

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm03_dev,1,meter_num,status

    first$=firm_id$+"A"
    ivm03a_key$=first$+begprod$
    p=0
    if level$="W" first$=firm_id$+"C",ivm03a_key$=first$+begwhse$,p=2
    read (ivm03_dev,key=ivm03a_key$,dom=*next)

rem --- Loop Starting

    While more
        ivm03a_key$=key(ivm03_dev,end=*break)
        if pos(first$=ivm03a_key$)<>1 break
        whse$=ivm03a_key.warehouse_id$
        product$=ivm03a_key.product_type$
        item$=ivm03a_key.item_id$
        if level$<>"W" then

rem --- By Item: Valid Product/Item?

            if endprod$<>"" if product$>endprod$ break
            if begitem$<>"" then
                if item$<begitem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_a$+
:                   ivm03a_key.product_type$+begitem$,dir=0,dom=*Continue)
                    continue
                endif 
            endif      
            if enditem$<>"" then
                if item$>enditem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_a$+
:                   ivm03a_key.product_type$+$FF$,dom=*Continue)
                    continue
                endif 
            endif 
            x$=product$+" "+item$(1,p[0])
    
        else
rem --- By Warehouse: Valid Warehouse/Product/Item?

            if endwhse$<>"" if whse$>endwhse$ break
            if begprod$<>"" then
                if product$<begprod$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.WAREHOUSE_ID$+begprod$,dom=*Continue)                    
                    continue
                endif
            endif    
            if endprod$<>"" then
                if product$>endprod$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.WAREHOUSE_ID$+$FF$,dom=*Continue)
                    continue
                endif
            endif 
            if begitem$<>"" then
                if item$<begitem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.WAREHOUSE_ID$+ivm03a_key.product_type$+begitem$,dir=0,dom=*continue)
                    continue
                endif
            endif
            if enditem$<>"" then
                if item$>enditem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.WAREHOUSE_ID$+ivm03a_key.product_type$+$FF$,dom=*continue)
                    continue
                endif
            endif
            x$=whse$+" "+product$+" "+item$(1,p[0])
         endif
rem --- Level breaks?

        call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,meter_num,status
        if level$="W" if whse$<>t0$ gosub WhseBreak
        if product$<>t1$ gosub ProdBreak
        read (ivm03_dev)

rem --- Retrieve item

        dim item$[2],whse$[2],w[20]
        ivm01a_key$=firm_id$+item$
        if level$="W" ivm02a_key$=firm_id$+whse$+item$
	find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if level$="W" and ivm01a.stock_level$<>"W" then
            continue
        endif
        if level$="I" and ivm01a.stock_level$<>"I" then
            continue
        endif
        if type$<>"" then
            if ivm01a.Item_type$<>type$ then
                continue
            endif
        endif
        action$="A"
        item$[0]=firm_id$
        item$[2]=item$
        if level$="W" item$[1]=whse$,action$=""
        if level$="W" find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$

        call pgmdir$+"ivc_whseinfo.aon",action$,ivchannels[all],item$[all],whse$[all],w[all],value,status,rd_table_chans$[all]
        if ivm01a.stock_level$="I" w[4]=ivm01a.ORDER_POINT,w[5]=ivm01a.SAFETY_STOCK,w[6]=ivm01a.EOQ
        if report$="R" and w[0]+w[1]-w[2]>w[4] then
            continue
        endif
        if report$="S" and w[0]+w[1]-w[2]>=w[5] then
            continue
        endif
	call pgmdir$+"ivc_usage.aon",level$,ivchannels[all],item$[all],factors[all],day_of_mth,period$+year$,ivs01a.current_per$+ivs01a.current_year$,g[0],p[1],usage,estimated,flag$,status
        if flag$<>"" usage=estimated
        avg_usage=usage/g[0]
        if level$="I" op_code$=ivm01a.ord_pnt_code$,eoq_code$=ivm01a.eoq_code$,safe_code$=ivm01a.saf_stk_code$
        if level$="W" op_code$=ivm02a.ord_pnt_code$,eoq_code$=ivm02a.eoq_code$,safe_code$=ivm02a.saf_stk_code$

rem --- Print detail line

        needed=1
        if h9$<>"" needed=needed+2
        if level$="W" last_issue$=fnl$(ivm02a.lstsal_date$,ivm02a.lstiss_date$) else last_issue$=fnl$(ivm01a.lstsal_date$,ivm01a.lstiss_date$)
        x$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        if l+needed>l9 gosub report_heading
        if h9$<>"" gosub ProdHeading
        if level$="W" print (printer_dev)@(o[0]),ivm01a.item_id$,@(o[1]),ivm02a.location$,@(o[2]),ivm02a.abc_code$,@(o[3]),w[0]:m2$,@(o[4]),w[2]:m2$,@(o[5]),w[0]-w[2]:m2$,@(o[6]),w[1]:m2$,@(o[7]),w[4]:m2$,op_code$,@(o[8]),w[6]:m2$,eoq_code$,@(o[9]),w[5]:m2$,safe_code$,@(o[10]),avg_usage:m2$,flag$
        if level$="I" print (printer_dev)@(o[0]),ivm01a.item_id$,@(o[2]),ivm01a.abc_code$,@(o[3]),w[0]:m2$,@(o[4]),w[2]:m2$,@(o[5]),w[0]-w[2]:m2$,@(o[6]),w[1]:m2$,@(o[7]),w[4]:m2$,op_code$,@(o[8]),w[6]:m2$,eoq_code$,@(o[9]),w[5]:m2$,safe_code$,@(o[10]),avg_usage:m2$,flag$
        l=l+2
        number=number+1
        print (printer_dev)@(o[0]+3),x$

    wend; rem --- Loop Ending

done: rem --- All done

        if number>0 goto std_exit
        gosub report_heading
        print (printer_dev)""
        print (printer_dev)"No Items/Warehouses Found"
        goto std_exit

report_heading: rem --- Report Heading

        l=headings+1
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
        if status exitto std_exit
        return

ProdHeading: rem --- Product subheading

        if l+2>l9 gosub report_heading
        print (printer_dev)'LF',h9$
        l=l+2
        h9$=""
        return

InitHeading: rem --- Initialize HEADINGS$

        dim h1$(width),h2$(width),h6$(width),h7$(width)
        if report$="R" headings$[1]="Inventory Reorder Report" else headings$[1]="Inventory Shortage Report"
        if level$="I" headings$[1]=headings$[1]+" By Item"
        if level$="W" headings$[1]=headings$[1]+" By Warehouse"
        x1$="First"
        x2$="First"
        x2=5
        if begitem$<>"" x1$=begitem$
        if begprod$<>"" x2$=begprod$,x2=3
        if endprod$="" if x2=3 x2=4
        h1$(1)="From Item: "+x1$
        h1$(width-x2-13)="From Product: "+x2$
        x1$="Last"
        x2$="Last"
        x3$="All Item Types"
        if enditem$<>"" x1$=enditem$
        if endprod$<>"" x2$=endprod$
        if type$<>"" x3$="Item Type "+type$
        h2$(1)="  To Item: "+x1$
        h2$(fncenter(x3$,width))=x3$
        h2$(width-x2-13)="  To Product: "+x2$
        h6$(o[2])="ABC"
        h6$(o[3]+m2-8)="Quantity"
        h6$(o[4]+m2-9)="Committed"
        h6$(o[5]+m2-8)="Quantity"
        h6$(o[6]+m2-8)="Quantity"
        h6$(o[7]+m2-5)="Order"
        h6$(o[9]+m2-6)="Safety"
        h6$(o[10]+m2-9)="Avg Usage"
        h7$(o[0]+1)="Item/Description"
        h7$(o[2])="Code"
        h7$(o[3]+m2-7)="On Hand"
        h7$(o[4]+m2-8)="Quantity"
        h7$(o[5]+m2-9)="Available"
        h7$(o[6]+m2-8)="On Order"
        h7$(o[7]+m2-5)="Point"
        h7$(o[8]+m2-3)="EOQ"
        h7$(o[9]+m2-5)="Stock"
        h7$(o[10]+m2-10)="Per Period"
        headings$[3]=h1$
        headings$[4]=h2$
        headings$[6]=h6$
        headings$[7]=h7$
        return

WhseBreak: rem --- Warehouse Break

        if t0$<>"" then
            gosub ProdBreak
        endif
        let t0$=whse$,ivm10c.short_name$="(Not on File)",l=l9+1
        find record (ivm10_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
        let x$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)
        let headings$[3]=h1$,headings$[3](fncenter(x$,width),len(x$))=x$
        return

ProdBreak: rem --- Product break

        let t1$=product$,ivm10a.code_desc$="(Not on File)"
        find record (ivm10_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
        let h9$="Product Type "+t1$+" "+ivm10a.code_desc$
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem " --- Compare two dates"
    def fnl$(q1$,q2$)
        if CVS(q1$,2)="" THEN LET q1$="zzzzzzzz"
        if CVS(q2$,2)="" THEN LET q2$="zzzzzzzz"
        q$=q1$
        if q2$>q1$ then q$=q2$
        if q$="zzzzzzzz" then q$="        "
        return q$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
