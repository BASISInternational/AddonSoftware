rem --- ABC Analysis Report (Input Overlay)
rem --- Program ivr_pa v8.0.0 09Jul2007 (ivr_pa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:52:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0378)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0144)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0151)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0166)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0167)
rem --- v7.x Administrator reference ["sys-01"] (Line 0173)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0189)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0205)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0208)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0209)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0210)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0233)
rem --- BBx reference ["syc_ra.bbx"] (Line 0233)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0273)
rem --- BBx reference ["syc_rs.bbx"] (Line 0273)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0293)
rem --- BBx reference ["syc_rs.bbx"] (Line 0293)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0318)
rem --- BBx reference ["syc_rs.bbx"] (Line 0318)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0320)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0327)
rem --- BBx reference ["syc_rs.bbx"] (Line 0327)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0346)
rem --- BBx reference ["syc_rs.bbx"] (Line 0346)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0348)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0355)
rem --- BBx reference ["syc_rs.bbx"] (Line 0355)
rem --- BBx reference ["ivr_pb.bbx"] (Line 0412)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0421)
rem --- BBx reference ["syc_rs.bbx"] (Line 0421)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0422)
rem --- BBx reference ["syc_rs.bbx"] (Line 0422)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0455)
rem --- BBx reference ["syc_rs.bbx"] (Line 0455)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- CLEAR statement removed [clear_text:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0123)
rem --- Cross-reference file ivm-03 referenced (Line 0192)
rem --- Cross-reference file ivm-03 referenced (Line 0200)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0133)

rem --- The following IOLIST's were removed from this program:

rem --- gls01a: iolist g0$,g1$,g2$,g3$(1),g4$
rem --- ivm10c: iolist x0$(1)
rem --- ivs01c: iolist i0$,percents[all],factors[all]

rem --- The following channel references have been identified:

rem --- ive07a: Channel reference (Line 0201)

rem --------------------------------------------------------------------------------
rem --- ive17a: Channel reference (Line 0201)
rem --- ivm01a: Channel reference (Line 0199)
rem --- ivm02a: Channel reference (Line 0198)
rem --- ivm03a: Channel reference (Line 0197)
rem --- ivm12a: Channel reference (Line 0196)
rem --- ivs01a: (Generated by CodePort)
rem --- ivs10a: Channel reference (Line 0195)
rem --- ivw07a: Channel reference (Line 0194)
rem --- ivw17a: Channel reference (Line 0193)
rem --- sys01a: Channel reference (Line 0191)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ive-07"
    files$[3]="ive-17"
    files$[4]="ivm-01"
    files$[5]="ivm-02"
    files$[6]="ivm-03"
    files$[7]="ivm-10"
    files$[8]="ivm-12"
    files$[9]="ivs-10"
    files$[10]="ivw-07"
    files$[11]="ivw-17"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ive07_dev=channels[2]
    ive17_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ivm03_dev=channels[6]
    ivm10_dev=channels[7]
    ivm12_dev=channels[8]
    ivs10_dev=channels[9]
    ivw07_dev=channels[10]
    ivw17_dev=channels[11]

rem --- Dimension string templates

    dim ive07a$:templates$[2],ive17a$:templates$[3],ivm01a$:templates$[4],
:       ivm02a$:templates$[5],ivm03a$:templates$[6],ivm10a$:templates$[7],
:       ivm12a$:templates$[8],ivs10a$:templates$[9],ivw07a$:templates$[10],
:       ivw17a$:templates$[11]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="gls-01A"
    ids$[2]="ivs-01A"
    ids$[3]="ivs-01C"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim gls01a$:templates$[1],ivs01a$:templates$[2],ivs01c$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    ivs01c_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01c_key$,err=std_missing_params) ivs01c$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=12
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-03"
    files$[5]="ivm-10"
    files$[6]="ivm-12"
    files$[7]="ive-07"
    files$[8]="ive-17"
    files$[9]="ivs-10"
    files$[10]="ivw-07"
    files$[11]="ivw-17"
    files$[12]="ivm-03"
    options$[10]="C"
    options$[11]="C"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm10_dev=channels[5]
    ivm12_dev=channels[6]
    ive07_dev=channels[7]
    ive17_dev=channels[8]
    ivs10_dev=channels[9]
    ivw07_dev=channels[10]
    ivw17_dev=channels[11]
    ivm03_dev2=channels[12]

rem --- Parameters

    dim p[5],g[1],percents[25],factors[25]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (sys01_dev,key=firm_id$+n2$+"02",dom=std_missing_params) ivs01c$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    g[0]=num(g2$(1,2))
    p[3]=num(i2$(9,2))
    p[4]=num(i2$(11,2))
    p[5]=num(i2$(13,2))

rem --- Initializations

    precision p[1]
    dim x0$(32)
    update$="Y"
    value$="U"
    level$="B"
    begwhse$=""
    endwhse$=""

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    goto flow_control

l1000: rem --- Generate new analysis?

    v0$="Y"
    v1$="C"
    v2$=update$
    v3$="YN"
    v0=1
    v1=40
    v2=3
    i0=0
    v4$="Enter "+$22$+"Y"+$22$+" To Generate A New ABC Analysis Or "+$22$+"N"+$22$+" To Reprint The Existing One"
    control_id=3000
    gosub std_input
    on v3 goto l1050,l1000,flow_control,l1000,flow_control,l1050,flow_control
l1050:
    update$=v$
    goto flow_control

l1200: rem --- Value by?

    v0$="S"
    v1$="C"
    v2$=value$
    v3$="OUB"
    v0=1
    v1=40
    v2=4
    v4$="O=Quantity On Hand  U=Estimated Annual Usage  B=Current PeriodEnding Balance"
    control_id=3001
    gosub std_input
    on v3 goto l1250,l1200,flow_control,l1200,flow_control,l1250,flow_control
l1250:
    if pos(v$="OUB")=0 goto l1200
    value$=v$
    gosub l5200
    call pgmdir$+"syc_rs.bbx","",my_context,3001,value$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13001,v4$,0,"",status
    goto flow_control

l1400: rem --- Detail level

    v0$="S"
    v1$="C"
    v2$=level$
    v3$="IWB"
    v0=1
    v1=40
    v2=5
    v4$="I=Report By Item (All Warehouses)  W=Report By Item Within Warehouse  B=Both"
    control_id=3002
    gosub std_input
    on v3 goto l1450,l1400,flow_control,l1400,flow_control,l1450,flow_control
l1450:
    if pos(v$="IWB")=0 goto l1400
    level$=v$
    gosub l5400
    call pgmdir$+"syc_rs.bbx","",my_context,3002,level$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13002,v4$,0,"",status
    if pos(level$="WB")>0 goto flow_control

rem --- Reset beginning/ending warehouse if item level is selected

    begwhse$=""
    endwhse$=""
    goto flow_control

l1600: rem --- Beginning warehouse

    if level$="I" goto flow_control
    v4$="Enter The First Warehouse To Include On This Report (<F1>=First/<F3>=Lookup)"
    v0$="S"
    v1$="C"
    v2$=begwhse$
    v3$=""
    v0=2
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1700,l1650,flow_control,l1670,flow_control,l1700,flow_control
l1650:
    if v3=1 v$="",begwhse$=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13003,"First",0,"",status; goto flow_control
l1670:
    call pgmdir$+"ivc_lk.bbx",3,v1,v2,v$
l1700:

    v4$="First"
    gosub l5600
    if status goto l1600
    begwhse$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3003,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13003,v4$,0,"",status
    goto flow_control

l1800: rem --- Ending warehouse

    if level$="I" goto flow_control
    v4$="Enter The Last Warehouse To Include On This Report (<F1>=Last/<F3>=Lookup)"
    v0$="S"
    v1$="C"
    v2$=endwhse$
    v3$=""
    v0=2
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l1900,l1850,flow_control,l1870,flow_control,l1900,flow_control
l1850:
    if v3=1 v$="",endwhse$=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13004,"Last",0,"",status; goto flow_control
l1870:
    call pgmdir$+"ivc_lk.bbx",3,v1,v2,v$
l1900:

    v4$="Last"
    gosub l5600
    if status goto l1800
    endwhse$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3004,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13004,v4$,0,"",status
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l1800,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Remove existing item total record

    if update$="N" goto l4900
remove (ivs10_dev,key=firm_id$+"I",dom=l4120)

    first$=firm_id$+"W"
    read (ivs10_dev,key=first$,dom=*next)

l4200: rem --- Remove existing warehouse total records

    let k$=key(ivs10_dev,end=l4900)
    if pos(first$=k$)<>1 goto l4900
    remove (ivs10_dev,key=k$)

    goto l4200

l4900: rem --- Run next overlay

    run pgmdir$+"ivr_pb.bbx"
display_fields:
    let control_id=3000,cid_cnt=0
l5006:
    if cid_cnt=0 disp_inp$=update$,disp_desc$=""
    if cid_cnt=1 gosub l5200; let disp_inp$=value$,disp_desc$=v4$
    if cid_cnt=2 gosub l5400; let disp_inp$=level$,disp_desc$=v4$
    if cid_cnt=3 if begwhse$="" disp_inp$=begwhse$,disp_desc$="First" else v$=begwhse$; gosub l5600; let disp_inp$=begwhse$,disp_desc$=v4$
    if cid_cnt=4 if endwhse$="" disp_inp$=endwhse$,disp_desc$="Last" else v$=endwhse$; gosub l5600; let disp_inp$=endwhse$,disp_desc$=v4$
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5006
l5050:
    let disp_inp$="",disp_desc$=""
    return

l5200: rem --- Value description

    let v4$="(Quantity On Hand)"
    if value$="U" v4$="(Estimated Annual Usage)"
    if value$="B" v4$="(Current Period Ending Balance)"
    return

l5400: rem --- Detail level description

    let v4$="(Both Item And Warehouse)"
    if level$="I" v4$="(Item Level)"
    if level$="W" v4$="(Warehouse Level)"
    return

l5600: rem --- Retrieve warehouse

    let x0$(1)=firm_id$+"C"+v$,x0$(6)="(Not On File)",status=0
    if v$="" goto l5690
    let status=1
    find record (ivm10_dev,key=x0$(1,5),dom=l5660) ivm10c$
    let status=0,v$=x0$(4,2)
l5660:
    let v4$=x0$(6,24)
l5690:
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return
    def fnv(q$)=42+int(len(q$)/2)

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
