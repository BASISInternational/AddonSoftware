rem --- Lot/Serial Activity Report (Input Overlay)
rem --- Program ivr_6a v8.0.0 09Jul2007 (ivr_6a)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:52:25)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0154)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0161)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0176)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0177)
rem --- v7.x Administrator reference ["sys-01"] (Line 0183)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0194)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0204)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0208)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0209)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0221)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0273)
rem --- BBx reference ["syc_ra.bbx"] (Line 0273)
rem --- BBx reference ["ivc_ib.bbx"] (Line 0397)
rem --- BBx reference ["ivr_6b.bbx"] (Line 0496)
rem --- BBx reference ["ivc_ib.bbx"] (Line 0511)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0518)
rem --- BBx reference ["syc_rs.bbx"] (Line 0518)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0519)
rem --- BBx reference ["syc_rs.bbx"] (Line 0519)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0524)
rem --- BBx reference ["syc_rs.bbx"] (Line 0524)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0525)
rem --- BBx reference ["syc_rs.bbx"] (Line 0525)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0531)
rem --- BBx reference ["syc_rs.bbx"] (Line 0531)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0532)
rem --- BBx reference ["syc_rs.bbx"] (Line 0532)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0539)
rem --- BBx reference ["syc_rs.bbx"] (Line 0539)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0540)
rem --- BBx reference ["syc_rs.bbx"] (Line 0540)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0548)
rem --- BBx reference ["syc_rs.bbx"] (Line 0548)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0549)
rem --- BBx reference ["syc_rs.bbx"] (Line 0549)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0556)
rem --- BBx reference ["syc_rs.bbx"] (Line 0556)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0557)
rem --- BBx reference ["syc_rs.bbx"] (Line 0557)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0564)
rem --- BBx reference ["syc_rs.bbx"] (Line 0564)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0565)
rem --- BBx reference ["syc_rs.bbx"] (Line 0565)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- BEGIN statement removed [begin_period]
rem --- BEGIN statement removed [begin_yr:]
rem --- BEGIN statement removed [begin_lot:]
rem --- START statement removed [start_itaic:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0133)
rem --- Cross-reference file ivm-08 referenced (Line 0135)
rem --- Cross-reference file ivm-03 referenced (Line 0196)
rem --- Cross-reference file ivm-08 referenced (Line 0265)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0143)
rem --- Cross-reference record ivm08a replaced by index on ivm-07 (Line 0144)

rem --- The following IOLIST's were removed from this program:

rem --- aps01a: iolist p0$,p1$,p2$,p3$,p4$,m0$
rem --- gls01a: iolist g0$,g1$,g2$,g3$(1),g4$

rem --- The following channel references have been identified:

rem --- apm01a: Channel reference (Line 0281)

rem --------------------------------------------------------------------------------
rem --- ivm01a: Channel reference (Line 0272)
rem --- ivm03a: Channel reference (Line 0272)
rem --- ivm07a: Channel reference (Line 0277)
rem --- ivm08a: Channel reference (Line 0277)
rem --- ivm10a: Channel reference (Line 0269)
rem --- ivm14a: Channel reference (Line 0268)
rem --- ivm15a: Channel reference (Line 0267)
rem --- ivm17a: Channel reference (Line 0273)
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0263)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="ivm-01"
    files$[4]="ivm-03"
    files$[5]="ivm-07"
    files$[6]="ivm-08"
    files$[7]="ivm-10"
    files$[8]="ivm-14"
    files$[9]="ivm-15"
    files$[10]="ivm-17"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    ivm01_dev=channels[3]
    ivm03_dev=channels[4]
    ivm07_dev=channels[5]
    ivm08_dev=channels[6]
    ivm10_dev=channels[7]
    ivm14_dev=channels[8]
    ivm15_dev=channels[9]
    ivm17_dev=channels[10]

rem --- Dimension string templates

    dim apm01a$:templates$[2],ivm01a$:templates$[3],ivm03a$:templates$[4],
:       ivm07a$:templates$[5],ivm08a$:templates$[6],ivm10a$:templates$[7],
:       ivm14a$:templates$[8],ivm15a$:templates$[9],ivm17a$:templates$[10]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=10
    dim files$[files],fileoptions$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-01"
    files$[3]="ivm-03"
    files$[4]="ivm-10"
    files$[5]="ivm-14"
    files$[6]="ivm-15"
    files$[7]="ivm-07"
    files$[8]="ivm-08"
    files$[9]="ivm-17"
    call pgmdir$+"adc_fileopen.aon",1,1,6,files$[all],fileoptions$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm03_dev=channels[3]
    ivm10_dev=channels[4]
    ivm14_dev=channels[5]
    ivm15_dev=channels[6]

rem --- Parameters

    dim p[5],g[1],g3$(325),i[1],info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    vh$=""
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    if pos(i3$(17,1)="LS")=0 goto l4900
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    p[2]=num(i2$(7,2))
    p[3]=num(i2$(9,2))
    p[4]=num(i2$(11,2))
    p[5]=num(i2$(13,2))
    g[0]=num(g2$(1,2))
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]
    if ap$="N" goto l500
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    i[0]=num(p2$(1,2))
    files$[10]="apm-01"
    vh$="Vendor"

l500: rem --- Initializations

    open_list1$="Item Number      Lot/Serial Number"
    sequence$="I"
    open_list2$="Open  ClosedBoth  "
    ocb$="B"
    sequence$="I"
    status$="B"
    begper$=i4$(1,2)
    begyear$=i4$(3,2)
    endper$=begper$
    endyear$=begyear$
    beg_whse$=""
    end_whse$=""
    beg_prod$=""
    end_prod$=""
    beg_item$=""
    end_item$=""
    item_type$=""
    beglot$=""
    endlot$=""
    precision p[1]
    dim files[15],params$[3],options$[7],beglot$(p[2]),endlot$(p[2])
    files[1]=ivm01_dev
    files[10]=ivm10_dev
    files[14]=ivm14_dev
    params$[0]=firm_id$
    params$[1]=i1$
    params$[2]=i2$
    params$[3]=i3$
    m9$="00"
    files[15]=ivm15_dev
    m0=len(m0$)

rem --- Additional file opens

    call pgmdir$+"adc_fileopen.aon",1,7,files,files$[all],fileoptions$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[7]
    ivm08_dev=channels[8]
    ivm17_dev=channels[9]
    apm01_dev=channels[10]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    gosub display_fields
    goto start_done

sequence: rem --- Sequence

    v4$="List Items By Item Number Or Lot/Serial # (I=Item Number/L=Lot/Serial Number)"
    v0$="S"
    v1$="^CE"
    v2$=sequence$
    v3$="IL"
    v0=1
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1050,sequence,sequence,sequence,flow_control,l1050,flow_control
l1050:
    sequence$=v$
    gosub d_sequence
    goto flow_control

open_close: rem --- Open/Closed/Both

    v0$="S"
    v1$="C"
    v2$=ocb$
    v3$="^OCB"
    v4$="O=Open Only, C=Closed Only, B=Both"
    v0=1
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1240,open_close,l1290,open_close,l1290,l1240,l1290
l1240:
    ocb$=v$
    gosub d_ocb
l1290:
    goto flow_control

rem --- Beginning Period

    v0$="N"
    v1$="C"
    v2$=begper$
    v3$=m9$
    v0=2
    v1=40
    v2=5
    v4$="Enter The Beginning Period For This Report (1 Through "+str(g[0])+")",control_id=3002
    gosub std_input
    on v3 goto l1450,begin_period,flow_control,begin_period,flow_control,l1450,flow_control
l1450:
    if v<1 or v>g[0] goto begin_period
    begper$=str(v)
    gosub d_begperiod
    goto flow_control

rem --- Beginning Year

    v0$="D"
    v1$="KECY"
    v2$=begyear$
    v3$=""
    v0=2
    v1=40
    v2=6
    v4$="Enter The Beginning Year For This Report"
    control_id=3003
    gosub std_input
    on v3 goto l1650,begin_yr,flow_control,begin_yr,flow_control,l1650,flow_control
l1650:
    if v$="" goto begin_yr
    if r2 and endyear$+endper$<v$+begper$ goto begin_yr
    begyear$=v$
    gosub d_begyr
    goto flow_control

end_period: rem --- Ending Period

    v0$="N"
    v1$="C"
    v2$=endper$
    v3$=m9$
    v0=2
    v1=40
    v2=7
    r2=0
    v4$="Enter The Beginning Period For This Report (1 Through "+str(g[0])+")",control_id=3004
    gosub std_input
    on v3 goto l1850,end_period,flow_control,end_period,flow_control,l1850,flow_control
l1850:
    if v<1 or v>g[0] goto end_period
    endper$=str(v)
    r2=v
    gosub d_endperiod
    goto flow_control

end_yr: rem --- Ending Year

    v0$="D"
    v1$="KECY"
    v2$=endyear$
    v3$=""
    v0=2
    v1=40
    v2=8
    v4$="Enter The Ending Year For This Report"
    control_id=3005
    gosub std_input
    on v3 goto l2050,end_yr,flow_control,end_yr,flow_control,l2050,flow_control
l2050:
    if v$="" goto end_yr
    if v$+endper$<begyear$+begper$ goto end_yr
    endyear$=v$
    gosub d_endyr
    goto flow_control

l2200: rem --- Entry Call (i0=3-8)

    call pgmdir$+"ivc_ib.bbx","DI","D",40,9,files[all],params$[all],options$[all],my_context,i0,5,i0_done,validate,v3
    on v3 goto l2231,l2231,l2290,l2231,l2290,l2231,l2290
l2231:
    beg_whse$=options$[1]
    end_whse$=options$[2]
    beg_prod$=options$[3]
    end_prod$=options$[4]
    beg_item$=options$[5]
    end_item$=options$[6]
    item_type$=options$[7]
l2290:
    goto flow_control

rem --- Beginning Lot/Serial Number

    v4$="Enter The Beginning Lot/Serial Number To Include On This Report (<F1>=First)"
    v0$="S"
    v1$="KCE"
    v2$=beglot$
    v3$=""
    v0=p[2]
    v1=40
    v2=16
    control_id=3013
    gosub std_input
    on v3 goto l2460,l2450,flow_control,l2460,flow_control,l2460,flow_control
l2450:
    v$=""
    if endlot$<>"" and v$>endlot$ goto begin_lot
l2460:
    beglot$=v$
    x$="First"
    gosub d_lot
    goto flow_control

end_lot: rem --- Ending Lot/Serial Number

    v4$="Enter The Ending Lot/Serial Number To Include On This Report (<F1>=Last)"
    v0$="S"
    v1$="KCE"
    v2$=endlot$
    v3$=""
    v0=p[2]
    v1=40
    v2=17
    control_id=3014
    gosub std_input
    on v3 goto l2660,l2650,flow_control,end_lot,flow_control,l2660,flow_control
l2650:
    v$=""
    if beglot$<>"" if endlot$<beglot$ goto end_lot
l2660:
    endlot$=v$
    x$="Last"
    gosub d_lot
    goto flow_control

flow_control: rem --- Flow Control

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2
    if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1)
    break
    case 4; exitto start_done
    case default; exitto done_v3
    swend
next_field:
    on i0 goto sequence,open_close,begin_period,begin_yr,end_period,end_yr,l2200,l2200,l2200,l2200,l2200,l2200,begin_lot,end_lot,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=0
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1
    goto next_field
cancel:
    goto std_exit

end_input: rem --- Run Overlay

    run pgmdir$+"ivr_6b.bbx"

l4900: rem --- Lotted/Serialized Inventory not enabled

    call pgmdir$+"ivc_warnings.aon","L",status
    goto std_exit

display_fields: rem --- Display Fields

    gosub d_sequence
    gosub d_ocb
    gosub d_begperiod
    gosub d_begyr
    gosub d_endperiod
    gosub d_endyr
    call pgmdir$+"ivc_ib.bbx","D","D",40,9,files[all],params$[all],options$[all],my_context,5,5,i0_done,validate,v3
    let control_id=3013,x$="First"; gosub d_lot
    let control_id=3014,x$="Last"; gosub d_lot
    return

d_ocb: rem --- Display Open/Closed/Both

    call pgmdir$+"syc_rs.bbx","",my_context,3001,ocb$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13001,open_list2$((pos(ocb$="OCB")-1)*6+1,6),0,"",ignore_status
    return

d_sequence: rem --- Display Sequence

    call pgmdir$+"syc_rs.bbx","",my_context,3000,sequence$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,open_list1$((pos(sequence$="IL")-1)*17+1,17),0,"",ignore_status
    return

d_lot: rem --- Display Lot/Serial Number

    if v$="" x0$="",x1$=x$ else x0$=v$,x1$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,x0$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,10000+control_id,x1$,0,"",ignore_status
    return

d_begperiod: rem --- Display Begin Period (month)

    let v=0,v=num(begper$,err=*next),begper$=str(v:m9$)
    if v=0 x0$="",x1$="First" else x0$=str(v:m9$),x1$=g3$((v-1)*16+27,16)
    call pgmdir$+"syc_rs.bbx","",my_context,3002,x0$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13002,x1$,0,"",ignore_status
    return

d_begyr: rem --- Display first year

    let c1$=fnyy$(begyear$)
    let r2=v,v=0,v=num(c1$,err=*next)
    if v=0 x0$="",x1$="First" else x0$=str(v:m9$),x1$=""
    call pgmdir$+"syc_rs.bbx","",my_context,3003,fnyy$(begyear$),0,"",ignore_statu
    call pgmdir$+"syc_rs.bbx","",my_context,13003,x1$,0,"",ignore_status
    return

d_endperiod: rem --- Display Last Period (month)

    let v=0,v=num(endper$,err=*next),endper$=str(v:m9$)
    if v=0 x0$="",x1$="Last" else x0$=str(v:m9$),x1$=g3$((v-1)*16+27,16)
    call pgmdir$+"syc_rs.bbx","",my_context,3004,x0$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13004,x1$,0,"",ignore_status
    return
rem --- Display last year
d_endyr:
    let c1$=fnyy$(endyear$)
    let v=0,v=num(c1$,err=*next)
if v=0 x0$="",x1$="First" else x0$=str(v:m9$),x1$=""
    call pgmdir$+"syc_rs.bbx","",my_context,3005,fnyy$(endyear$),0,"",ignore_statu
    call pgmdir$+"syc_rs.bbx","",my_context,13005,x1$,0,"",ignore_status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
