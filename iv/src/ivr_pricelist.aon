rem --- ivr - Inventory Price List Report (Report Selection)
rem --- Program ivr_pricelist.aon v8.0.0 16Jul2007 (ivr_fa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:42:27)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open files

        files=6,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="gls_params",ids$[1]="GLS_PARAMS"
        files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
        files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
        files$[4]="ivc_prodcode",ids$[4]="IVC_PRODCODE"
        files$[5]="ivs_params",ids$[5]="IVS_PARAMS"
        files$[6]="ivc_whsecode",ids$[6]="IVC_WHSECODE"

        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        gls01_dev=channels[1]
        ivm01_dev=channels[2]
        ivm02_dev=channels[3]
        ivm10a_dev=channels[4]
        ivs01_dev=channels[5]
        ivm10c_dev=channels[6]

rem --- Dimension string templates

        dim gls01a$:templates$[1],ivm01a$:templates$[2],ivm02a$:templates$[3],
:           ivm10a$:templates$[4],ivs01a$:templates$[5],ivm10c$:templates$[6]

rem --- Assign form input values to local variables

        include$=option!.getOptionData("unit_cost_marg")
        begwhse$=option!.getOptionData("warehouse_id_1")
        endwhse$=option!.getOptionData("warehouse_id_2")
        begprod$=option!.getOptionData("product_type_1")
        endprod$=option!.getOptionData("product_type_2")
        begitem$=option!.getOptionData("item_id_1")
        enditem$=option!.getOptionData("item_id_2")
        type$=option!.getOptionData("item_type")

rem --- Retrieve parameter records

        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

        dim p[5]
        p[0]=num(ivs01a.item_id_len$)
        p[1]=num(ivs01a.precision$)
        p[3]=num(ivs01a.desc_len_01$)
        p[4]=num(ivs01a.desc_len_02$)
        p[5]=num(ivs01a.desc_len_03$)

rem --- Initializations

        precision p[1]
        dim headings$[8],total[3],warehouse[3],product[3],report[3]
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
        when$=sysinfo.system_date$
        clock$=""
        width=132
        page=0
        headings=8
        m9$="-##0.00%"
        m9=len(m9$)
        done=0
        more=1

rem --- Report masks

        call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
        call pgmdir$+"adc_getmask.aon","","IV","P",imask$,m4$,0,0
        call pgmdir$+"adc_sizemask.aon",m3$,m3,10,15
        call pgmdir$+"adc_sizemask.aon",m4$,m4,11,15

rem --- Run overlay

        run pgmdir$+"ivr_pricelist_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
