rem --- Inventory Transfer Register
rem --- Program ivr_ga v8.0.0 09Jul2007 (ivr_ga)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:40:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0179)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0120)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0127)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0142)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0143)
rem --- v7.x Administrator reference ["sys-01"] (Line 0153)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0163)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0168)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0175)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0176)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0197)
rem --- BBx reference ["ivc_lf.bbx"] (Line 0295)
rem --- BBx reference ["ivu_da.bbx"] (Line 0360)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file glt-14 referenced (Line 0097)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record glt14a replaced by index on glt-04 (Line 0108)

rem --- The following IOLIST's were removed from this program:

rem --- arm10d: iolist *,z9$(1)
rem --- ars01a: iolist x$,x$,x$,a9$
rem --- gls01a: iolist x$,g1$,g2$,g3$,g4$,g5$,g6$,g7$
rem --- ive02a: iolist a0$,a1$,a[all]
rem --- ivm01a: iolist b0$,b1$(1),b2$,b3$,b4$,b5$,b6$(1),b[all]
rem --- ivm02a: iolist d0$,d1$(1)
rem --- ivm10c: iolist x1$(1)

rem --- The following channel references have been identified:

rem --- glm01a: Channel reference (Line 0245)

rem --------------------------------------------------------------------------------
rem --- glt14a: Channel reference (Line 0264)
rem --- glw11a: Channel reference (Line 0243)
rem --- ivm04a: Channel reference (Line 0242)
rem --- ivs01a: (Generated by CodePort)
rem --- ivw04a: Channel reference (Line 0240)
rem --- sys01a: Channel reference (Line 0231)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-10"
    files$[3]="glm-01"
    files$[4]="glt-14"
    files$[5]="glw-11"
    files$[6]="ive-02"
    files$[7]="ivm-01"
    files$[8]="ivm-02"
    files$[9]="ivm-04"
    files$[10]="ivm-10"
    files$[11]="ivw-04"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm10_dev=channels[2]
    glm01_dev=channels[3]
    glt14_dev=channels[4]
    glw11_dev=channels[5]
    ive02_dev=channels[6]
    ivm01_dev=channels[7]
    ivm02_dev=channels[8]
    ivm04_dev=channels[9]
    ivm10_dev=channels[10]
    ivw04_dev=channels[11]

rem --- Dimension string templates

    dim arm10a$:templates$[2],glm01a$:templates$[3],glt14a$:templates$[4],
:       glw11a$:templates$[5],ive02a$:templates$[6],ivm01a$:templates$[7],
:       ivm02a$:templates$[8],ivm04a$:templates$[9],ivm10a$:templates$[10],
:       ivw04a$:templates$[11]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=18
    dim files$[files],options$[files],channels[files]
    files$[1]="ive-02"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-10"
    files$[5]="sys-01"
    files$[6]="ivw-04"
    options$[1]="L"
    options$[5]="P"
    call pgmdir$+"adc_fileopen.aon",1,1,5,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ive02_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm10_dev=channels[4]
    sys01_dev=channels[5]

rem --- Parameters

    dim p[5],g[4],info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="IV"
    n3$=sysinfo.task_desc$
    source$=pgm(-2)
    when$=sysinfo.system_date$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g[0]=num(g2$(1,2))
    g[1]=num(g2$(3,2))
    g[2]=fnyy_year(g2$(5,2))
    g[3]=num(g2$(7,2))
    g[4]=num(g2$(9,2))
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(7,2))
    p[2]=num(p2$(5,1))
    p[3]=num(p2$(9,2))
    p[4]=num(p2$(11,2))
    p[5]=num(p2$(13,2))
    lf$="N"
    ls$="N"
    ar$="N"
    a9$="N"
    if pos(p3$(3,1)="LF")>0 lf$="Y"
    if pos(p3$(17,1)="LS")>0 ls$="Y"
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$<>"Y" goto l500
    find record (sys01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    a9$=a9$(11,1)
    places=p[2]

l500: rem --- Initializations

    precision p[2]
    dim a[2],b[12],j$(80,"-"),item$[10],headings$[1],o[4],lf[10]
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    m0=p[0]
    p8$="Lot/Serial Number"
    width=132
    page=0
    l9=55
    l=l9+1
    w=34
    units=0
    t0$=""
    t1$=""
    headings=1
    headings$[0]=n1$
    headings$[1]=n3$
    h3$=""
    t9$=""
    o[4]=width-9
    o[3]=o[4]-m1-1
    o[2]=o[3]-m2
    o[1]=o[2]-m3
    o[0]=o[1]-3
    errors=0
    glstatus=0

rem --- Additional File Opens

    gl$="N"
    status=0
    if a9$="Y" call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
l620:
    if status<>0 goto std_exit
    if lf$="Y" files$[6]="ivm-04",files$[7]="ivw-04",options$[7]="CL"
    if gl$="Y" files$[8]="glm-01",files$[9]=glw11$,options$[9]="CL"
    if gl$="Y" if a9$="Y" files$[10]="arm-10"
    call pgmdir$+"adc_fileopen.aon",1,6,10,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm04_dev=channels[6]
    ivw04_dev=channels[7]
    glm01_dev=channels[8]
    glw11_dev=channels[9]
    arm10_dev=channels[10]
    lf[0]=ivm04_dev
    lf[1]=ivw04_dev
    lf[2]=ivm02_dev

l800: rem --- Run Report?

    v4$="Do You Want To Print The "+n3$
    call pgmdir$+"adc_yesno.aon",1,v4$,2,v$,v3
    on v3 goto l840,l800,l800,l800,std_exit,l840,std_exit
l840:
    if v$<>"Y" goto std_exit

rem --- File Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",p[0]+3,0,1,meter_num,status

rem --- Initial Read

    read (ive02_dev,key=firm_id$,dom=*next)

l1100: rem --- Heading Read

    read record (ive02_dev,end=done) ive02a$
    cost=a[2]

rem --- Breaks

    if pos(firm_id$=a0$)<>1 goto done
    if a0$(3,2)<>t0$ gosub l6000
    if a0$(5,3)<>t1$ gosub l6200
    call pgmdir$+"adc_progress.aon","S","","","",a0$(3,2)+" "+a0$(12,p[0]),0,0,1,meter_num,status
    gosub l6400

rem --- LIFO/FIFO?

    if lf$="N" goto l2000
    item$[0]=firm_id$
    item$[1]=a0$(3,2)
    item$[2]=a0$(12,20)
    lf_date$=a0$(5,3)
    action$=p3$(3,1)+"I"
    quantity=a[0]
    cost=a[2]
    ret_cost=0
    type$="R"
    call pgmdir$+"ivc_lf.bbx",action$,type$,lf_date$,lf[all],item$[all],places,quantity,cost,ret_cost,status

rem --- Cost change?

    if a[1]=a[0]*ret_cost goto l2000
    if ret_cost<>0 a[1]=a[0]*ret_cost,a[2]=ret_cost,cost=ret_cost
    write record (ive02_dev,key=a0$) ive02a$

l2000: rem --- Print

    if l+2>l9 gosub report_heading
    precision 2
    tot_cost=a[1]*1
    precision p[2]
    print (printer_dev)@(3),a0$(10,2)," ",x1$,@(27),a0$(12,p[0])," ",a0$(32,p[1]),@(o[0]),b2$(4,2),@(o[1]),cost:m2$,@(o[2]),a[0]:m2$,@(o[3]),tot_cost:m1$,@(o[4]),a1$(1,6)
    print (printer_dev)@(27),b1$
    l=l+2
    t0=t0+tot_cost
    u0=u0+tot_cost
    if gl$="Y" call pgmdir$+"glc_datecheck.aon",a0$(5,3),"N",period$,year$,glstatus
    if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,a0$(5,3),glstatus,l,errors,status

rem --- Generate G/L Recap

    if gl$<>"Y" goto l3900
    if a9$<>"Y" goto l3900

rem --- From Warehouse

    precision 2
    dim z9$(8*g[4],"0"),d1$(40)
    gldate$=a0$(5,3)
    ref1$="Xfr "+a1$(1,6)
    memo$=a0$(12,p[0])+" "+b1$
    ref2$="Fr Whse "+a0$(3,2)
    ref3$="To Whse "+a0$(10,2)
    find record (ivm02_dev,key=firm_id$+a0$(3,2)+a0$(12,20),dom=l3200) ivm02a$
    find record (arm10_dev,key=firm_id$+"D"+d1$(13,2),dom=l3200) arm10d$
    account$=z9$(6*g[4]+1,g[4])
    amount=(-a[0])*cost
    units=0
    gosub glrecap

l3200: rem --- To Warehouse

    dim z9$(8*g[4],"0")
    x$=ref2$
    ref2$=ref3$
    ref3$=x$
    find record (ivm02_dev,key=firm_id$+a0$(10,2)+a0$(12,20),dom=l3290) ivm02a$
    find record (arm10_dev,key=firm_id$+"D"+d1$(13,2),dom=l3290) arm10d$
    account$=z9$(6*g[4]+1,g[4])
    amount=a[0]*cost
    units=0
    gosub glrecap
l3290:
    precision p[2]
l3900:

    goto l1100

done: rem --- Totals

    if l>l9 gosub report_heading
    t9$="E"
    update$="ivu_da.bbx"
    gosub l6000
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    if gl$="Y" and a9$="Y" run pgmdir$+"glr_recap.aon"
    run update$

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if h3$<>"" print (printer_dev)@(fncenter(h3$,width)),h3$; let l=l+1
    if t1$<>"" print (printer_dev)"Transfer Date ",fndate$(t1$); let l=l+1
    print (printer_dev)""
    print (printer_dev)@(27),"Item",@(28+p[0]),p8$
    print (printer_dev)"   To Warehouse",@(27),"No  / Description",@(o[0]),"UM",@(o[1]+m3-5),"Cost",@(o[2]+m2-4),"Qty",@(o[3]+m1-6),"Total",@(o[4]),"Reference"
    print (printer_dev)""
    l=l+4
    return

rem --- Date Heading

    if l+2>l9 gosub report_heading
    print (printer_dev)@(0),"Transfer Date: ",fndate$(t1$),'LF'
    l=l+2
    return

l6000: rem --- Warehouse

    if t0$="" goto l6100
    if t9$="" t9$="A"
    gosub l6200
    if t9$="A" t9$=""
    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[3]),j$(1,m1)
    print (printer_dev)@(o[3]-24-len(whse$)),"Total For Warehouse ",t0$," ",whse$,@(o[3]),t0:m1$
    let l=l9+1,t0=0
l6100:
    if t9$<>"" return
    dim x1$(30)
    let t0$=a0$(3,2),t1$=a0$(5,3),x1$(4)=a0$(3,2)
    let x1$(6)="Unknown Warehouse",u0=0
    find record (ivm10_dev,key=firm_id$+"C"+a0$(3,2),dom=*next) ivm10c$
    let h3$="From Warehouse "+cvs(x1$(4,2)+" "+x1$(6,24),2)
    let whse$=cvs(x1$(6,24),2)
    return

l6200: rem --- Date

    if t1$="" goto l6300
    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[3]),j$(1,m1)
    print (printer_dev)@(o[3]-19),"Total For ",fndate$(t1$),@(o[3]),u0:m1$
    let l=l+2
l6300:
    if t9$<>"" return
    let u0=0,t1$=a0$(5,3),l=l9+1
    return

l6400: rem --- Item

    dim b1$(60),b2$(20),b6$(g[4]),x1$(30)
    let b1$(1)="Unknown Item",x1$(6)="Unknown Warehouse"
    find record (ivm01_dev,key=firm_id$+a0$(12,20),dom=*next) ivm01a$
    find record (ivm10_dev,key=firm_id$+"C"+a0$(10,2),dom=*next) ivm10c$
    let x1$=x1$(6,24),b1$=fnitem$(b1$,p[3],p[4],p[5])
    return

glrecap: rem --- Standard G/L Recap Routine

    if gl$<>"Y" goto l6990
    call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
l6990:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
