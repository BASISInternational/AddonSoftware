rem --- Price Change Register
rem --- Program ivr_la v8.0.0 09Jul2007 (ivr_la)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:42:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0111)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0117)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0128)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0129)
rem --- v7.x Administrator reference ["sys-01"] (Line 0135)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0147)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0159)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0162)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0215)
rem --- BBx reference ["syc_ra.bbx"] (Line 0215)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0232)
rem --- BBx reference ["syc_rs.bbx"] (Line 0232)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0240)
rem --- BBx reference ["syc_rs.bbx"] (Line 0240)
rem --- BBx reference ["ivu_ga.bbx"] (Line 0327)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0094)
rem --- Cross-reference file ivm-03 referenced (Line 0150)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0102)

rem --- The following IOLIST's were removed from this program:

rem --- ive05a: iolist w0$(1),w1$,w2$,w[all]
rem --- ivm01a: iolist a0$(1),a1$(1),a2$(1),a3$(1),a4$(1),a5$,a6$,a[all]
rem --- ivm02a: iolist b0$(1),b1$(1),b2$,b[all]
rem --- ivm10a: iolist x0$(1)
rem --- ivm10c: iolist x0$(1)
rem --- ivw08a: iolist y0$(29)

rem --- The following channel references have been identified:

rem --- ivm03a: Channel reference (Line 0216)

rem --------------------------------------------------------------------------------
rem --- ivm14a: Channel reference (Line 0215)
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0212)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ive-05"
    files$[3]="ivm-01"
    files$[4]="ivm-02"
    files$[5]="ivm-03"
    files$[6]="ivm-10"
    files$[7]="ivm-14"
    files$[8]="ivw-08"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ive05_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm03_dev=channels[5]
    ivm10_dev=channels[6]
    ivm14_dev=channels[7]
    ivw08_dev=channels[8]

rem --- Dimension string templates

    dim ive05a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm03a$:templates$[5],ivm10a$:templates$[6],ivm14a$:templates$[7],
:       ivw08a$:templates$[8]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivm-10C"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivm10c$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=8
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-03"
    files$[5]="ivm-10"
    files$[6]="ivm-14"
    files$[7]="ive-05"
    files$[8]="ivw-08"
    options$[7]="L"
    options$[8]="C"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm10_dev=channels[5]
    ivm14_dev=channels[6]
    ive05_dev=channels[7]
    ivw08_dev=channels[8]

rem --- Parameters

    dim p[5]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    whse$=i3$(6,2)
    p[3]=num(i2$(9,2))
    p[4]=num(i2$(11,2))
    p[5]=num(i2$(13,2))

rem --- Initializations

    precision p[1]
    dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],w0$(26),w[4]
    dim b0$(24),b1$(64),b[20],x0$(32),headings$[3],o[5]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    when$=sysinfo.system_date$
    clock$=""
    width=132
    page=0
    l9=59
    l=l9+1
    headings=2
    number=0
    code$=""
    errors=0
    t0$=""
    t1$=""
    t2$=""
    m9$="-###0.00%"
    m9=len(m9$)
    dw=p[3]+p[4]+p[5]

rem --- Print positions

    call pgmdir$+"adc_sizemask.aon",m4$,m4,11,15
    o[5]=width-m4-1
    o[4]=o[5]-m4-9
    o[3]=o[4]-m4-9
    o[2]=o[3]-3
    o[1]=p[0]+1
    v=o[2]-o[1]
    if dw>v split=1,dw=o[2]-3
    dim description$(dw)

rem --- Set default list price code

    k$=key(ive05_dev,end=l700)
    if pos(firm_id$=k$)=1 code$=k$(3,2)

l700: rem --- GUI Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit

l800: rem --- New List Price Code

    v4$="Enter The New List Price Code To Be Listed On This Register (<F1>=All)"
    v0$="S"
    v1$="CE"
    v2$=code$
    v3$=""
    v0=2
    v1=40
    v2=3
    control_id=3000
    gosub std_input
    on v3 goto l850,l830,l800,l800,std_exit,l850,std_exit
l830:
    code$=""; call pgmdir$+"syc_rs.bbx"
    ""
    my_context
    3000
    code$
    0
    ""
    ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,"All",0,"",ignore_status
    goto l900
l850:
    code$=v$

l900: rem --- Report Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$," Sorting","","",15+p[0],ivw08_dev,1,0,ignore_status
    gosub l6500
    call pgmdir$+"adc_progress.aon","S","","Printing","","",0,0,0,0,ignore_staus
    read (ivw08_dev,key="",dom=*next)

l1000: rem --- Next ivw-08 record

    k$=key(ivw08_dev,end=done)
    read (ivw08_dev)
    call pgmdir$+"adc_progress.aon","S","","","",k$(3,2)+" "+k$(5,2)+" "+k$(7,3)+" "+k$(10,p[0]),0,ivw08_dev,1,0,ignore_status
    w0$(1)=k$(1,6)+k$(10)
    read record (ive05_dev,key=w0$,dom=l3900) ive05a$

rem --- Level breaks?

    if k$(3,2)<>t0$ gosub l6000
    if k$(5,2)<>t1$ gosub l6200
    if k$(7,3)<>t2$ gosub l6400

rem --- Additional reads

    dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],b0$(24),b1$(64),b[20]
    a0$(1)=firm_id$+w0$(7)
    b0$(1)=firm_id$+w0$(5)
    find record (ivm01_dev,key=a0$,dom=*next) ivm01a$
    find record (ivm02_dev,key=b0$,dom=*next) ivm02a$
    description$(1)=fnitem$(a1$,p[3],p[4],p[5])

rem --- New Product Type?

    if h0$="" goto l2500
    if l+4+nl>l9 gosub report_heading
    if nl>0 print (printer_dev)""
    print (printer_dev)h0$
    print (printer_dev)""
    l=l+2+nl
    nl=1
    h0$=""

l2500: rem --- Print detail line

    x$=description$
    needed=1
    if split>0 x$="",needed=2
    if l+needed>l9 gosub report_heading
    print (printer_dev)@(o[0]),w0$(7,p[0]),@(o[1]),x$,@(o[2]),a2$(4,2),@(o[3]),b[10]:m4$," ",b1$(54,2),@(o[4]),b[9]:m4$," ",b1$(52,2),@(o[5]),w[0]:m4$
    if split>0 print (printer_dev)@(o[0]+2),description$
    l=l+needed
    number=number+1
    nl=1
    if w[0]<0 errors=errors+1

l3900: rem --- Loop back for next record

    goto l1000

done: rem --- All done

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    if number goto l4100
    gosub report_heading
    print (printer_dev)"No Price Change Entries Found"

l4100: rem --- Any negative costs?

    if errors=0 goto l4200
    dim message$[2]
    message$[0]="This Register Contains Items With Negative List Prices."
    message$[1]="The Update Will Not Be Run. Review The Register, Correct"
    message$[2]="The Errors And Reprint (<Enter>=Continue)"
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],2,22,-1,v$,v3
    if v$<>"SPECIAL" goto std_exit

l4200: rem --- Run update overlay

    channel=ive05_dev
    o0=0
    close (printer_dev,err=*next)
    run pgmdir$+"ivu_ga.bbx"

report_heading: rem --- Report Heading

    l=headings+4
    nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[3]+m4-11),"Prior",@(o[3]+m4+1),"Price",@(o[4]+m4-11),"Current",@(o[4]+m4+1),"Price",@(o[5]+m4-11),"New"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Description",@(o[2]),"UM",@(o[3]+m4-11),"List Price",@(o[3]+m4+1),"Code",@(o[4]+m4-11),"List Price",@(o[4]+m4+1),"Code",@(o[5]+m4-11),"List Price"
    print (printer_dev)""
    return

l6000: rem --- Price Code Break

    if t0$<>"" gosub l6200
    t0$=k$(3,2)
    l=l9+1
    headings=3
    headings$[1]=sysinfo.task_desc$+" For New List Price Code "+t0$
    return

l6200: rem --- Warehouse Break

    if t1$<>"" gosub l6400
    dim x0$(32)
    t1$=k$(5,2)
    x0$(6,24)="(Not on File)"
    l=l9+1
    find record (ivm10_dev,key=firm_id$+"C"+t1$,dom=*next) ivm10c$
    let headings$[2]="Warehouse "+t1$+" "+cvs(x0$(6,24),2)
    return

l6400: rem --- Product Break

    dim x0$(32)
    let t2$=k$(7,3),x0$(7,20)="(Not On File)"
    find record (ivm10_dev,key=firm_id$+"A"+t2$,dom=*next) ivm10a$
    let h0$="Product "+t2$+" "+x0$(7,20)
    return

l6500: rem --- Sort ive-05 by product type

    dim y0$(29)
    let first$=firm_id$+code$
    read (ive05_dev,key=first$,dom=*next)

l6600: rem --- Read next entry record

    let k$=key(ive05_dev,end=l6900)
    if pos(first$=k$)<>1 goto l6900
    read (ive05_dev)
    call pgmdir$+"adc_progress.aon","S","","","",k$(3,2)+" "+k$(5,2)+" "+k$(7,p[0]),0,0,1,0,ignore_status
    let a0$(1)=k$(1,2)+k$(7)
    find record (ivm01_dev,key=a0$,dom=l6600) ivm01a$

rem --- Write sort record

    let y0$(1)=k$(1,6)+a2$(1,3)+k$(7)
    write record (ivw08_dev,key=y0$) ivw08a$
    goto l6600
rem --- Sort completed
l6900:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
