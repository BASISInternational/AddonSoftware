rem --- Lot/Serial Activity Report (Report Overlay)
rem --- Program ivr_lotactivity_o1.aon v8.0.0 16Jul2007 (ivr_6b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:10:07)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Initializations
    
    precision p[1]
    dim files[3],period$[1],headings$[6],o[13]
    files[2]=ivm17_dev
    files[3]=ivm03_dev
    t0$=""
    t1$=""
    x$="Item"
    w=7+p[0]
    if sequence$="L" x$="Lot/Serial Number",w=p[2]
    headings$[0]=sysinfo.firm_name$
    when$=sysinfo.system_date$
    clock$=""
    h9$=""
    number=0
    width=132
    page=0
    l9=59
    l=l9+1
    l1=0
    selection$="END"
    headings=6
    period$[0]=period1$
    period$[1]=period2$
    headings$[1]=sysinfo.task_desc$+" By "+x$+" From Period "+begper$+" "+begyear$+" Through Period "+endper$+" "+endyear$
    more=1

rem --- Print positions

    gosub Position

rem --- Open printer  
 
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm07_dev,1,meter_num,status

rem --- Report headings

    dim h1$(width),h2$(width)
    x1$="First"
    x2$=x1$
    x2=5
    x3$=x1$
    x3=29
    h8$="All Item Types"
    if type$<>"" h8$="Item Type "+cvs(type$,2)
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$,x2=3
    if endprod$="" if x2=3 x2=4
    if cvs(beglot$,2)<>"" x3$=beglot$,x3=24+p[2]
    if cvs(endlot$,2)<>"" if x3=29 x3=24+p[2]
    h1$(1)="From Item: "+x1$
    x3$="From Lot/Serial Number: "+x3$
    if sequence$="L" then
        x3$=x3$+"     From Warehouse: "
        x1$="First"
        if begwhse$<>"" x1$=begwhse$
            x3$=x3$+x1$
            x3=len(x3$)
    endif
    x3=int((width-x3)/2)
    h1$(x3)=x3$
    h1$(width-x2-13)="From Product: "+x2$
    x1$="Last"
    x2$=x1$
    x3$=x1$
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if cvs(endlot$,2)<>"" x3$=endlot$
    h2$(1)="  To Item: "+x1$
    x3$="  To Lot/Serial Number: "+x3$
    if sequence$= "L" then
        x3$=x3$+"        To Warehouse: "
        x1$="Last"
        if endwhse$<>"" x1$=endwhse$
        x3$=x3$+x1$
    endif
    h2$(x3)=x3$
    h2$(width-x2-13)="  To Product: "+x2$
    headings$[2]=h8$
    headings$[4]=h1$
    headings$[5]=h2$

rem --- Position lot/serial master
    while more
        if sequence$<>"L" then 
            ivm07a_key$=firm_id$+begwhse$
            if begwhse$<>"" ivm07a_key$=ivm07a_key$+begitem$
            if begwhse$<>"" and begitem$<>"" ivm07a_key$=ivm07a_key$+beglot$
            read (ivm07_dev,key=ivm07a_key$,dom=*break)
        else    
            ivm08a_key$=firm_id$+beglot$
            if cvs(begwhse$,2)<>"" ivm08a_key$=ivm08a_key$+begwhse$
            if cvs(beglot$,2)<>"" and begwhse$<>"" ivm08a_key$=ivm08a_key$+begitem$
            read (ivm08_dev,key=ivm08a_key$,dom=*next)
        endif
        more=0
    wend
   
rem --- Get next lot/serial master
    while more
        if sequence$<>"L"then
            ivm07a_key$=key(ivm07_dev,end=*break)
            if pos(firm_id$=ivm07a_key$)<>1 break

rem --- By Warehouse: Valid Warehouse/Product/Item?

            if endwhse$<>"" then if ivm07a_key.warehouse_id$>endwhse$ break
            if begitem$<>"" then
                if ivm07a_key.item_no$<begitem$(1,p[0]) then
                    read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+begitem$,dom=*continue)
                    continue
                endif
            endif
            if enditem$<>"" then 
                if ivm07a_key.item_id$>enditem$(1,p[0]) then
                     read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+$FF$,dom=*continue)
                     continue
                endif
            endif
            if cvs(beglot$,2)<>"" then
                if ivm07a_key.lotser_no$<beglot$(1,p[2]) 
                     read (ivm07_dev,key=ivm07a_key$,dom=*continue)
                     continue
                endif
            endif
            if cvs(endlot$,2)<>"" then
                if ivm07a_key.lotser_no$>endlot$(1,p[2]) then
                    read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+ivm07a_key.item_id$+$FF$,dom=*continue)
                    continue
                endif
            endif
rem --- Level breaks?

rem            read record (ivm07_dev) ivm07a$
rem            if ocb$="O" if ivm07a.qty_on_hand=0  continue
rem            if ocb$="C" if ivm07a.qty_on_hand<>0 continue
rem            if ivm07a_key.warehouse_id$<>t0$ gosub whse_break
rem            if ivm07a_key.item_id$<>t1$ gosub Item_break
rem            if type$<>"" if ivm01a.item_type$<>type$ continue
rem            if begprod$<>"" if ivm01a.product_type$<begprod$ continue
rem            if endprod$<>"" if ivm01a.product_type$>endprod$ continue
         else
rem --- Read next lot/serial xref

            ivm08a_key$=key(ivm08_dev,end=*break)
            if pos(firm_id$=ivm08a_key$)<>1 break
            if cvs(endlot$,2)<>"" if ivm08a_key.lotser_no$>endlot$(1,p[2]) break
            if begwhse$<>"" then
                if ivm08a_key.warehouse_id$<begwhse$ then
                    read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+begwhse$,dom=*continue)
                    continue
                endif
            endif
            if endwhse$<>"" then
                if ivm08a_key.warehouse_id$>endwhse$ then
                    read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+$FF$,dom=*continue)
                    continue
                endif
            endif
            if begitem$<>"" then
                if ivm08a_key.item_id$<begitem$(1,p[0]) then
                    read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+ivm08a_key.warehouse_id$+$FF$,dom=*continue)
                    continue
                endif
            endif
            if enditem$<>"" then
                if ivm08a_key.item_id$>enditem$(1,p[0]) then
                    read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+ivm08a_key.warehouse_id$+$FF$,dom=*continue)
                    continue
                endif
            endif
            read (ivm08_dev)
            ivm07a_key$=ivm08a_key.firm_id$+ivm08a_key.warehouse_id$+ivm08a_key.item_id$+ivm08a_key.lotser_no$
        endif
      
 rem --- Retrieve lot/serial master

        read record (ivm07_dev,key=ivm07a_key$,dom=*continue) ivm07a$
        if ocb$="O" if ivm07a.qty_on_hand=0 continue
        if ocb$="C" if ivm07a.qty_on_hand<>0 continue
        ivm01a_key$=firm_id$+ivm07a_key.item_id$
        ivm01a.item_desc$="(Not On File)"
        ivm01a.product_type$=""
        read record (ivm01_dev,key=ivm01a_key$,dom=Activity) ivm01a$
        if type$<>"" if ivm01a.item_type$<>type$ continue
        if begprod$<>"" if ivm01a.product_type$<begprod$ continue
        if endprod$<>"" if ivm01a.product_type$>endprod$ continue

        if sequence$<>"L" if ivm07a_key.warehouse_id$<>t0$ gosub whse_break
        if sequence$<>"L" if ivm07a_key.item_id$<>t1$ gosub Item_break

Activity: rem --- Retrieve item and activity

        call pgmdir$+"adc_progress.aon","S","","","",ivm07a_key.lotser_no$,0,0,1,meter_num,status

        dim item$[3],activity[12],item[12]
        action$="L"
        item$[0]=firm_id$
        item$[1]=ivm07a_key.warehouse_id$
        item$[2]=ivm07a_key.item_id$
        item$[3]=ivm07a_key.lotser_no$
        call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
        call pgmdir$+"ivc_periodqty.aon",selection$,activity[all],balance

rem --- Format detail line fields

        dim vendor$(vw)
        receipt$=ivm07a.lstrec_date$
        issued$=ivm07a.lstsal_date$
        if ivm07a.lstblt_date$>receipt$ receipt$=ivm07a.lstblt_date$
        if ivm07a.lstiss_date$>issued$ issued$=ivm07a.lstiss_date$
	if num(receipt$)=0 receipt$="        "
	if num(issued$)=0 issued$="        "
	if num(receipt$(1,4))<>0
	    if num(receipt$(5,4))=0
		receipt$(5,4)="0101"
	    endif
	endif
	if num(issued$(1,4))<>0
	    if num(issued$(5,4))=0
		issued$(5,4)="0101"
	    endif
	endif

	if num(issued$)=0 issued$="        "
        if cvs(receipt$,2)<>"" receipt$=fndate$(receipt$)
        if cvs(issued$,2)<>"" issued$=fndate$(issued$)

        if ap$<>"N" then
            apm01a_key$=firm_id$+ivm07a.vendor_id$
            find record (apm01_dev,key=apm01a_key$,dom=Print_Item) apm01a$
            vendor$=fnmask$(apm01a.vendor_id$,m0$)+" "+apm01a.vendor_name$
        endif

Print_Item: rem --- Print detail line by item

        if sequence$<>"L"then
            needed=2
            if h9$<>"" needed=needed+2
            if l+needed>l9 gosub report_heading
            if h9$<>"" gosub Item_subheading
            print (printer_dev)@(o[1]),ivm07a.lotser_no$,@(o[3]),receipt$,@(o[4]),issued$,@(o[5]),vendor$,@(o[8]),activity[0]:m2$,@(o[9]),activity[1]:m2$,@(o[10]),activity[3]:m2$,@(o[11]),activity[5]:m2$,@(o[12]),activity[6]:m2$,@(o[13]),balance:m2$
            print (printer_dev)@(o[9]),activity[2]:m2$,@(o[10]),activity[4]:m2$,@(o[11]),activity[8]:m2$,@(o[12]),activity[7]:m2$
            l=l+2
            l1=l1+1
            number=number+1

rem --- Accumulate item totals

            for x=0 to 11
                item[x]=item[x]+activity[x]
            next x
            item[12]=item[12]+balance
            continue
        endif
rem --- Print detail line by lot/serial number

        if sequence$="L"then
            dim description$(dw)
            if l+2>l9 gosub report_heading
            l=l+2
            description$(1)=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
            number=number+1
            print (printer_dev)@(o[0]),ivm07a.lotser_no$,@(o[3]),receipt$,@(o[5]),issued$,@(o[6]),vendor$,@(o[8]),activity[0]:m2$,@(o[9]),activity[1]:m2$,@(o[10]),activity[3]:m2$,@(o[11]),activity[5]:m2$,@(o[12]),activity[6]:m2$,@(o[13]),balance:m2$
            print (printer_dev)@(o[1]),ivm07a.warehouse_id$,@(o[2]),ivm01a.item_id$,@(o[4]),description$,@(o[7]),ivm01a.product_type$,@(o[9]),activity[2]:m2$,@(o[10]),activity[4]:m2$,@(o[11]),activity[8]:m2$,@(o[12]),activity[7]:m2$
	endif
    wend

done: rem --- All done

    if number=0 goto Nothing_To_Report
    done=1
    if sequence$<>"L" gosub Item_break
    goto Report_Done

Nothing_To_Report:
    gosub report_heading
    print (printer_dev)"No Lot/Serial Number Activity Found"

Report_Done:    
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+4
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit

rem --- Subheading by item

    if sequence$<>"L" then 
        print (printer_dev)@(o[3]),"Received",@(o[4]),"Sold Or",@(o[8]+m2-10),"Beginning",@(o[9]+m2-9),"Received",@(o[10]+m2-7),"Sold &",@(o[11]+m2-11),"Adjustments",@(o[12]+m2-9),"Transfers",@(o[13]+m2-8),"Ending"
        print (printer_dev)@(o[0]),"Item",@(o[1]),"Lot/Serial #",@(o[3]),"Or Built",@(o[4]),"Issued",@(o[5]),vh$,@(o[7]),"Prod",@(o[8]+m2-10),"Balance",@(o[9]+m2-9),"& Built",@(o[10]+m2-7),"Issued",@(o[11]+m2-11),"& Returns",@(o[12]+m2-9),"In & Out",@(o[13]+m2-8),"Balance"
        print (printer_dev)""
    endif

rem --- Subheading by lot/serial number
    if sequence$="L" then
        print (printer_dev)@(o[0]),"Lot/Serial #",@(o[3]),"Received",@(o[5]),"Sold Or",@(o[8]+m2-10),"Beginning",@(o[9]+m2-9),"Received",@(o[10]+m2-7),"Sold &",@(o[11]+m2-11),"Adjustments",@(o[12]+m2-9),"Transfers",@(o[13]+m2-8),"Ending"
        print (printer_dev)@(o[1]),"Wh",@(o[2]),"Item",@(o[3]),"Or Built",@(o[5]),"Issued",@(o[6]),vh$,@(o[7]),"Prod",@(o[8]+m2-10),"Balance",@(o[9]+m2-9),"& Built",@(o[10]+m2-7),"Issued",@(o[11]+m2-11),"& Returns",@(o[12]+m2-9),"In & Out",@(o[13]+m2-8),"Balance"
        print (printer_dev)""
    endif
    if h9$="" h9$=h9save$
    return

Item_subheading: rem --- Item subheading

    if l+2>l9 gosub report_heading
    print (printer_dev)h9$
    print (printer_dev)""
    let l=l+2,h9save$=h9$,h9$=""
    return

whse_break: rem --- Warehouse Break

    if t0$<>"" then
        gosub Item_break
    endif
    rem dim x0$(32)
    let t0$=ivm07a_key.warehouse_id$,ivm10c.short_name$="(Not on File)",l=l9+1
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    let headings$[2]="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)+" For "+h8$
    return

Item_break: rem --- Item Break
    if t1$="" goto Read_New_Item
    if l1<1 goto Read_New_Item
    if l+2>l9 gosub report_heading
    let x$="Total For Item "+t1$,l=l+2
    print (printer_dev)@(o[8]-len(x$)),x$,@(o[8]),item[0]:m2$,@(o[9]),item[1]:m2$,@(o[10]),item[3]:m2$,@(o[11]),item[5]:m2$,@(o[12]),item[7]:m2$,@(o[13]),item[12]:m2$
    print (printer_dev)@(o[9]),item[2]:m2$,@(o[10]),item[4]:m2$,@(o[11]),item[6]:m2$,@(o[12]),item[8]:m2$

Read_New_Item:
    if done return
    dim h9$(o[7]+3),description$(dw),item[12]
    let t1$=ivm07a_key.item_id$,ivm01a_key$=firm_id$+t1$,ivm01a.item_desc$="(Not On File)",ivm01a.product_type$="",l1=0
    find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
    let description$(1)=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
    let h9$(1)=ivm01a.item_id$,h9$(o[2]+1)=description$,h9$(o[7]+1)=ivm01a.product_type$

    call pgmdir$+"adc_progress.aon","S","","","",ivm07a_key.warehouse_id$+" "+ivm07a_key.item_id$,0,0,1,meter_num,status
    return

Position: rem --- Print positions

    o[13]=width-m2
    o[2]=p[0]+1
    for x=12 to 8 step -1
        o[x]=o[x+1]-m2
    next x
    o[1]=6
    o[3]=o[1]+max(p[2],15)+1
    o[4]=o[3]+9
    o[5]=o[4]+9
    o[7]=o[8]-5
    o[6]=o[5]+m0+1
    dw=o[7]-o[2]-1
    vw=o[8]-o[5]
    if sequence$="L" then
        o[1]=3
        o[2]=o[1]+3
        o[3]=max(p[2],15)+1
        o[4]=o[2]+p[0]+1
        o[5]=o[3]+9
        o[6]=o[5]+9
        dw=o[7]-o[4]-1
        vw=o[8]-o[6]
    endif
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
