rem --- Inventory Requirements Report (Report Overlay)
rem --- Program ivr_mb v8.0.0 11Aug2007 (ivr_mb)
rem --- Created by adx_codeport.bbx v1.1.5 (08/11/2007 11:05:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    precision num(ivs01a.precision$)
    rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],c0$(28),c1$(32)
    rem dim c2$(20),c[12]
    dim headings$[7],o[14],total[6],channels[20],items$[2]
    headings$[0]=sysinfo.firm_name$
    when$=sysinfo.system_date$
    clock$=""
    h9$=""
    number=0
    last$=""
    width=132
    page=0
    l9=59
    l=l9+1
    nf$="(Not On File)"
    m0=len(m0$)
    headings=6
    lastdate$=""
    lastcost$=""
    flag$=""
    begwhse$=options$[1]
    endwhse$=options$[2]
    begprod$=options$[3]
    endprod$=options$[4]
    begitem$=options$[5]
    enditem$=options$[6]
    type$=options$[7]
    if sequence$="B" headings=7
    more=1

rem --- Print positions
    rem m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,12,12
    o[12]=width-m3
    o[11]=o[12]-9
    o[10]=o[11]-m2
    for x=9 to 4 step -1
        o[x]=o[x+1]-m2
    next x
    o[3]=o[4]-11
    o[2]=o[3]-3
    o[1]=o[0]+p[0]+1
    w=m0+4
    o[14]=o[11]-p[2]-12
    o[13]=o[14]-36
    dw=o[13]-o[1]-1
    if sequence$="V" w=m0+p[0]+1
    if sequence$="B" dw=o[14]-o[1]-1

rem --- Background

    rem call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",w,ivm03_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm03_dev,1,meter_num,status

rem --- Report headings

    gosub Init_Headings
    call pgmdir$+"adc_peryear.aon",firm_id$,sys01_dev,when$,period$,year$
    x$=fndate$(when$)
    day_of_month=num(x$(4,2))
    base$=period$+year$
    channels[1]=ivm01_dev
    channels[2]=ivm02_dev
    channels[3]=ivm03_dev
    channels[12]=ivm12_dev
    items$[0]=firm_id$

rem --- Position files

    first$=firm_id$+"F"
    ivm03a_key$=first$+begbuyer$
    read (ivm05_dev,key=firm_id$+begvendor$,dom=*next)
    read (ivm03_dev,key=ivm03a_key$,dom=*next)
    rem on pos(sequence$="BV") goto done,l1000,l2000

l1000:rem --- Get next sort record
    switch pos(sequence$="BV");rem "switch/case replaces compound if/else.CAH
        case 1; rem sequence$="B" - alpha sequence
            while more
                ivm03a_key$=key(ivm03_dev,end=done)
                if pos(first$=ivm03a_key$)<>1 goto done
                read (ivm03_dev)
                buyer$=ivm03a.buyer_code$
                vendor$=ivm03a.vendor_id$
                product$=ivm03a.product_type$
                item$=ivm03a.item_id$
                whse$=ivm03a.warehouse_id$
                if ivm03a.vendor_id$+ivm03a.product_type$<>last$ then
                    last$=ivm03a.vendor_id$+ivm03a.product_type$
                    x$=fill(m0)
                    if ap$="Y" if cvs(vendor$,2)<>"" x$=fnmask$(vendor$(1,i[0]),m0$)
                    call pgmdir$+"adc_progress.aon","S","","","",buyer$+" "+x$,0,0,1,meter_num,status
                endif
rem --- Outside range?

                if endbuyer$<>"" if buyer$>endbuyer$ break
                if begvendor$<>"" then
                if vendor$<begvendor$ then
                    if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
                        continue
                    endif
                endif
                if endvendor$<>"" then
                    if vendor$>endvendor$ then
                        if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
                        continue
                    endif
                endif
                if begprod$<>"" then
                    if product$<begprod$ then
                        if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
                        continue
                    endif
                endif
                if endprod$<>"" then
                    if product$>endprod$ then
                        if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
                        continue
                    endif
                endif
                if begitem$<>"" then
                    if item$<begitem$ then
                        if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
                        continue
                    endif
                endif
                if enditem$<>"" then
                    if item$>enditem$ then
                        if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
                        continue
                    endif
                endif
                if begwhse$<>"" and whse$<>"" then
                    if whse$<begwhse$ then
                        if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
                            continue
                        endif
                endif
                if endwhse$<>"" and whse$<>"" then
                    if whse$>endwhse$ then
                        if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
                        continue
                    endif
                endif

rem --- Level breaks

                if buyer$<>t0$ gosub Buyer_Break
                if ap$="Y" and vendor$<>t1$ gosub Vendor_Break
                if product$<>t2$ gosub Product_Break
                if item$<>t3$ gosub Item_Break
                if type$<>"" if ivm01a.product_type$<>type$ continue

rem --- Additional reads

                rem dim c0$(28),c1$(32),c2$(20),c[12]
                ivm05a_key$=firm_id$+vendor$+item$
                lastdate$=""
                lastcost$=""
                venditem$=""
                find record (ivm05a_dev,key=ivm05a_key$,dom=*next) ivm05a$
                if cvs(ivm05a.vend_item$,2)<>"" venditem$="Vendor Item "+ivm05a.vend_item$
                if cvs(ivm05a.last_po_date$,2)<>"" then
                lastdate$=fndate$(ivm05a.last_po_date$)
                lastcost$=str(ivm05a.dealer_num:m3$)
            endif

rem --- New product?

            if h9$<>"" then
                if l+2>l9 gosub report_heading
                print (printer_dev)@(o[0]),h9$
                print (printer_dev)""
                l=l+2
                h9$=""
            endif
rem --- New item?

            if description$<>"" then
                if l+3>l9 gosub report_heading
                print (printer_dev)'LF',@(o[0]),ivm01a.item_id$,@(o[1]),description$,@(o[14]),venditem$,@(o[11]),lastdate$,@(o[12]),lastcost$
                l=l+2
                description$=""
            endif

rem --- Stocking Level By Item?

            if ivm01a.stock_level$="I" then
                read (ivm03_dev,key=firm_id$+"G"+item$,dom=*next)

Get_Whse: rem --- Get Warehouse For Stocking Level By Item

                ivm03g_key$=key(ivm03_dev,end=Done_Record)
                if pos(firm_id$+"G"+item$=ivm03g_key$)=1 
                read (ivm03_dev)
                whse$=ivm03g.warehouse_id$
            endif
rem --- Retrieve detail line information

            gosub Retrieve_whse

rem --- Print detail line

            gosub Print_warehouse
            if ivmo1a.stock_level$="I" goto Get_Whse
        endif

Done_Record: rem --- Done with record

        if ivm01a.stock_level$="I" read (ivm03_dev,key=ivm03a_key$)
    wend
  break
  case 2; rem sequence$="V" - vendor sequence
rem --- Get next vendor/item record
    while more
        ivm05a_key$=key(ivm05_dev,end=*break)
        if pos(firm_id$=ivm05a_key$)<>1 break
        if endvendor$<>"" if ivm05a.vendor_id$>endvendor$ break
        read record (ivm05_dev) ivm05a$
        vendor$=ivm05a.vendor_id$
        item$=ivm05a.item_id$
        lastdate$=""
        lastcost$=""
        venditem$=""
        if begitem$<>"" if item$<begitem$ continue
        if enditem$<>"" if item$>enditem$ continue
        call pgmdir$+"adc_progress.aon","S","","","",fnmask$(ivm05a.item_id$,m0$)+" "+item$(1,p[0]),0,0,1,meter_num,status
        if cvs(ivm05a.vend_item$,2)<>"" venditem$="Vendor Item "+ivm05a.vend_item$
        if cvs(ivm05a.last_po_date$,2)<>"" then
            lastdate$=fndate$(ivm05a.last_po_date$)
            lastcost$=str(ivm05a.dealer_num:m3$)
        endif
rem --- Additional reads

        if ap$="Y" and vendor$<>t1$ gosub Vendor_Break
        if item$<>t3$ gosub Item_Break
        if type$<>"" if ivm01a.item_type$<>type$ continue
        product$=ivm01a.product_type$
        if begprod$<>"" if product$<begprod$ continue
        if endprod$<>"" if product$>endprod$ continue
        if product$<>t2$ gosub Product_Break
        if ivm01a.stock_level$<>"W" then
            if begbuyer$<>"" if ivm01a.buyer_code$<begbuyer$ continue
            if endbuyer$<>"" if ivm01a.buyer_code$>endbuyer$ continue
        endif

 rem --- For each warehouse for this item

        first$=firm_id$+"G"+item$
        read (ivm03_dev,key=first$,dom=*next)

l2400: rem --- Next warehouse
       while more
                ivm03_key$=key(ivm03_dev,end=*break)
                if pos(first$=ivm03_key$)<>1 break
            read (ivm03_dev)
            whse$=ivm03a.warehouse_id$
            if begwhse$<>"" if whse$<begwhse$ break
            if endwhse$<>"" if whse$>endwhse$ break
            gosub Retrieve_whse
            if ivm01a.stock_level$<>"I" then
                if begbuyer$<>"" if ivm01a.buyer_code$<begbuyer$ break
                if begbuyer$<>"" if ivm01a.buyer_code$<begbuyer$ continue
            endif
rem --- Print item heading

            if description$="" goto l2600
            if l+3>l9 gosub report_heading
            print (printer_dev)'LF',@(o[0]),a0$(3,p[0]),@(o[1]),description$,@(o[13]),h9$,@(o[14]),venditem$,@(o[11]),lastdate$,@(o[12]),lastcost$
            l=l+2
            description$=""

l2600: rem --- Print detail line

            gosub Print_warehouse

l2900: rem --- Loop back for next warehouse

        wend
l3900: rem --- Loop back for next record

     wend
  break
  case default
    continue
    break
 swend  
done: rem --- All done

    done=1
    gosub Item_Break
    if number>0 goto std_exit
    gosub report_heading
    print (printer_dev)"No Items Found"
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+4
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[4]+m2-9),"Quantity",@(o[5]+m2-10),"Committed",@(o[6]+m2-10),"Quantity",@(o[7]+m2-9),"Quantity",@(o[8]+m2-6),"Order",@(o[10]+m2-7),"Annual",@(o[11]),"-- Last Purchase --"
    print (printer_dev)@(o[0]),"Item",@(o[2]),"Wh",@(o[3]),"Location",@(o[4]+m2-9),"On Hand",@(o[5]+m2-10),"Quantity",@(o[6]+m2-10),"Available",@(o[7]+m2-9),"On Order",@(o[8]+m2-6),"Point",@(o[9]+m2-4),"EOQ",@(o[10]+m2-7),"Usage",@(o[11]+2),"Date",@(o[12]+m3-5),"Cost"
    print (printer_dev)""
    return

Print_warehouse: rem --- Print warehouse line

    point$=""
    eoq$=""
    if ivm01a.stock_level$="W" point$=str(point:m2$),eoq$=str(eoq:m2$)
    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[2]),whse$,@(o[3]),location$,@(o[4]),onhand:m2$,@(o[5]),committed:m2$,@(o[6]),available:m2$,@(o[7]),ordered:m2$,@(o[8]),point$,@(o[9]),eoq$,@(o[10]),usage:m2$,flag$
    l=l+1
    l1=l1+1
    number=number+1

rem --- Accumulate totals

    total[0]=total[0]+onhand
    total[1]=total[1]+committed
    total[2]=total[2]+available
    total[3]=total[3]+ordered
    total[4]=total[4]+point
    total[5]=total[5]+eoq
    total[6]=total[6]+usage
    return

Init_Headings: rem --- Initialize HEADINGS$

    dim h1$(width),h2$(width),h3$(width)
    x3$="All Item Types"
    if type$<>"" x3$="Item Type "+cvs(type$,2)
    if sequence$="B" headings$[1]=sysinfo.task_desc$+" By Buyer Code For "+x3$
    if sequence$="V" headings$[1]=sysinfo.task_desc$+" By Vendor For "+x3$
    x1$="First"
    x2$=x1$
    x3$=x1$
    x4$=x1$
    x5$=x1$
    x2=5
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$,x2=3
    if begwhse$<>"" x3$=begwhse$
    if begbuyer$<>"" x4$=begbuyer$
    if begvendor$<>"" x5$=fnmask$(begvendor$(1,i[0]),m0$)
    if endprod$="" if x2=3 x2=4
    h1$(1)="From Item: "+x1$
    h1$(37)="From Warehouse: "+x3$
    h1$(65)="From Buyer: "+x4$
    h1$(89)="From Vendor: "+x5$
    h1$(width-x2-13)="From Product: "+x2$
    x1$="Last"
    x2$=x1$
    x3$=x1$
    x4$=x1$
    x5$=x1$
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if endwhse$<>"" x3$=endwhse$
    if endbuyer$<>"" x4$=endbuyer$
    if endvendor$<>"" x5$=fnmask$(endvendor$(1,i[0]),m0$)
    h2$(1)="  To Item: "+x1$
    h2$(39)="To Warehouse: "+x3$
    h2$(67)="To Buyer: "+x4$
    h2$(91)="To Vendor: "+x5$
    h2$(width-x2-13)="  To Product: "+x2$
    headings$[headings-2]=h1$
    headings$[headings-1]=h2$
    if sequence$="B" headings$[3]=h3$
    return

Buyer_Break: rem --- Buyer break

    if ap$="Y" gosub Vendor_Break
    rem dim x0$(32)
    t0$=buyer$
    ivm10f.code_desc$=nf$
    l=l9+1
    find record (ivm10f_dev,key=firm_id$+"F"+t0$,dom=*next) ivm10f$
    x$="Buyer: "+t0$+" "+ivm10f.code_desc$
    headings$[3](1,len(x$))=x$
    return

Vendor_Break: rem --- Vendor break

    rem dim d0$(8),d1$(30)
    if sequence$="B" gosub Product_Break
    if sequence$="V" gosub Item_Break
    let t1$=vendor$,apm01a_key$=firm_id$+vendor$,apm01a.vendor_name$=nf$,l=l9+1
    find record (apm01a_dev,key=ivm10f.code_desc$,dom=*next) apm01a$
    let x$="Vendor: "+fnmask$(apm01a.vendor_id$,m0$)+" "+cvs(apm01a.vendor_name$,2)
if cvs(vendor$,2)="" x$="Vendor: None"
    if sequence$="B" headings$[3](78)="",headings$[3](width-len(x$)+1)=x$
    if sequence$="V" headings$[2]=x$
    return

Product_Break: rem --- Product break

    if sequence$="B" gosub Item_Break
    rem dim x0$(32)
    let t2$=product$,ivm10a.code_desc$=nf$
    find record (ivm10a_dev,key=firm_id$+"A"+t2$,dom=*next) ivm10a$
    let h9$="Product Type "+t2$+" "+ivm10a.code_desc$
    return

Item_Break: rem --- Item break

    if t3$<>"" then 
        let point$="",eoq$=""
        if l1>1 then
            if l+1>l9 gosub report_heading
            if ivm01a.stock_level$="I" point$=str(ivm01a.order_point:m2$),eoq$=str(ivm01a.eoq:m2$)
            print (printer_dev)@(o[4]-15),"Total For Item",@(o[4]),total[0]:m2$,@(o[5]),total[1]:m2$,@(o[6]),total[2]:m2$,@(o[7]),total[3]:m2$,@(o[8]),point$,@(o[9]),eoq$,@(o[10]),total[6]:m2$
            let l=l+1
        endif
    endif
    if !done then
        rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],description$(dw),total[6]
        let t3$=item$,ivm01a_key$=firm_id$+t3$,ivm01a.item_desc$=nf$,ivm01a.product_type$="",l1=0
        find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
        let description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        if sequence$="V" gosub Product_Break
    endif

    return
Retrieve_whse:rem --- Retrieve warehouse record
    rem dim b0$(24),b1$(64),b[20]
    let ivm02a_key$=firm_id$+whse$+item$,items$[1]=whse$,items$[2]=item$
    find record (ivm02a_dev,key=ivm02a_key$,dom=*next) ivm02a$
    let location$=ivm02a.inv_location$,onhand=inv02a.qty_on_hand,committed=inv02a.qty_commit,ordered=inv02a.qty_on_order
    let available=onhand-committed,point=ivm02a.order_point,eoq=ivm02a.eoq
    call pgmdir$+"ivc_au.bbx",action$,channels[all],items$[all],factors[all],day_of_month,base$,ivs01a_current_year$,g[0],p[1],usage,estimated,flag$,status
    if flag$<>"" usage=estimated
    if ivm01a.stock_level$<>"W" point=0,eoq=0
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
