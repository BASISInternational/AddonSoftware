rem --- Backordered Items Report (Warehouse Availability)
rem --- Program ivr_backorders_o1.aon

rem --- AddonSoftware Version 24.01
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    seterr std_error
    setesc std_error

rem --- Use function object, Option object
    use ::ado_func.src::func

rem --- Document initializations
    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path
    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data
    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Initializations
    recs=0
    total_recs=0
    headings=4
    h0=132
    dim headings$[headings+1]
    headings$[0]=sysinfo.firm_name$,headings$[1]=sysinfo.task_desc$
    headings$[3]="Backordered Items Warehouse Availability"
    headings$[3]=Translate!.getTranslation("AON_BACKORDERED")+" "+Translate!.getTranslation("AON_ITEMS")+" "+
:       Translate!.getTranslation("AON_WAREHOUSE")+" "+Translate!.getTranslation("AON_INVENTORY")
    headings$[4]=Translate!.getTranslation("AON_WAREHOUSE")+": "
    if warehouses$<>"All" then
        headings$[4]=headings$[4]+whses$
    else
        headings$[4]=headings$[4]+Translate!.getTranslation("AON_ALL")
    endif

    when$=sysinfo.system_date$,clock$=""

    columns = 9
    dim columns$[columns,10]
    columns$[0,0]="",                                                columns$[0,1]="C", columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_ITEM")+"^ ",        columns$[1,1]="C", columns$[1,2]="15"
    columns$[2,0]=Translate!.getTranslation("AON_DESCRIPTION")+"^ ", columns$[2,1]="C", columns$[2,2]="25"
    columns$[3,0]=Translate!.getTranslation("AON_WHSE"),             columns$[3,1]="C", columns$[3,2]="5"
    columns$[4,0]=Translate!.getTranslation("AON_LOCATION"),         columns$[4,1]="C", columns$[4,2]="10"
    columns$[5,0]=Translate!.getTranslation("AON_UM"),               columns$[5,1]="C", columns$[5,2]="5"
    columns$[6,0]=Translate!.getTranslation("AON_AVAILABLE"),        columns$[6,1]="C", columns$[6,2]="14", columns$[6,3]=m2$, columns$[6,5]="R",columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_ON_HAND"),          columns$[7,1]="C", columns$[7,2]="14", columns$[7,3]=m2$, columns$[7,5]="R",columns$[7,10]="T"
    columns$[8,0]=Translate!.getTranslation("AON_COMMITTED"),        columns$[8,1]="C", columns$[8,2]="14", columns$[8,3]=m2$, columns$[8,5]="R",columns$[8,10]="T"
    columns$[9,0]=Translate!.getTranslation("AON_ON_ORDER"),         columns$[9,1]="C", columns$[9,2]="14", columns$[9,3]=m2$, columns$[9,5]="R",columns$[9,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Background
    call pgmdir$+"adc_progress.aon","N","","","","",0,optInvHdr_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Backordered Items Warhouse Availability query
    boItems$=cvs(boItems$,3)
    if boItems$(len(boItems$),1)="," then boItems$=boItems$(1,len(boItems$)-1)

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.firm_id, ivm_itemwhse.warehouse_id, ivm_itemwhse.item_id, ivm_itemmast.item_desc, ivm_itemwhse.location, "
    sql_prep$=sql_prep$+"       ivm_itemmast.unit_of_sale, ivm_itemwhse.qty_on_hand, ivm_itemwhse.qty_commit, ivm_itemwhse.qty_on_order "
    sql_prep$=sql_prep$+"FROM ivm_itemwhse "
    sql_prep$=sql_prep$+"LEFT JOIN ivm_itemmast ON ivm_itemmast.firm_id=ivm_itemwhse.firm_id AND ivm_itemmast.item_id=ivm_itemwhse.item_id "
    sql_prep$=sql_prep$+"WHERE firm_id='"+firm_id$+"' "
    sql_prep$=sql_prep$+"      AND ivm_itemwhse.item_id IN ("+boItems$+") "
    if warehouses$<>"All" then
        sql_prep$=sql_prep$+"AND ivm_itemwhse.warehouse_id IN ("+warehouses$+") "
    endif
    sql_prep$=sql_prep$+"ORDER BY ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id "

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read for Backordered Items Warhouse Availability
    thisItem$=""
    ttl_on_hand=0
    ttl_commit=0
    ttl_on_order=0
    while 1
        read_tpl$ = sqlfetch(sql_chan,err=*break)

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then exitto std_exit

        rem --- Item break
        if read_tpl.item_id$<>thisItem$ then
            if thisItem$<>"" then gosub print_total
            
            OutVect!.addItem("")
            OutVect!.addItem(fnmask$(read_tpl.item_id$,ivIMask$))
            OutVect!.addItem(func.displayDesc(read_tpl.item_desc$, i[3], i[4], i[5]))
            xwk=fnblank(7)
            thisItem$=read_tpl.item_id$
        endif

        rem --- Print detail line
        xwk=fnblank(3)
        OutVect!.addItem(read_tpl.warehouse_id$)
        OutVect!.addItem(read_tpl.location$)
        OutVect!.addItem(read_tpl.unit_of_sale$)
        OutVect!.addItem(str(read_tpl.qty_on_hand-read_tpl.qty_commit))
        OutVect!.addItem(str(read_tpl.qty_on_hand))
        OutVect!.addItem(str(read_tpl.qty_commit))   
        OutVect!.addItem(str(read_tpl.qty_on_order))
    
        rem --- Accumulate totals
        ttl_on_hand=ttl_on_hand+read_tpl.qty_on_hand
        ttl_commit=ttl_commit+read_tpl.qty_commit
        ttl_on_order=ttl_on_order+read_tpl.qty_on_order
        
        recs=recs+1
    wend   

done: rem --- All done
    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif
    
    gosub print_total

    goto std_exit

print_total: rem --- Print total line
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk=fnblank(6)
    OutVect!.addItem(str(ttl_on_hand-ttl_commit))
    OutVect!.addItem(str(ttl_on_hand))
    OutVect!.addItem(str(ttl_commit))
    OutVect!.addItem(str(ttl_on_order))

    xwk=fnblank(10)

    ttl_on_hand=0
    ttl_commit=0
    ttl_on_order=0

    return
    
rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)
        q$=pad(q$,q1+q2+q3)
        return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:      else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call stbl("+DIR_PGM")+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
