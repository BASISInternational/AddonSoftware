rem --- Lot/Serial Transaction History By Vendor Report (Input)
rem --- Program ivr_8a v8.0.0 09Jul2007 (ivr_8a)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:51:48)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0130)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0137)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0152)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0153)
rem --- v7.x Administrator reference ["sys-01"] (Line 0166)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0177)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0182)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0185)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0198)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0201)
rem --- v7.x sys-01 reference [sys01_dev] (Line 0219)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0246)
rem --- BBx reference ["syc_ra.bbx"] (Line 0246)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0269)
rem --- BBx reference ["syc_lc.bbx"] (Line 0269)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0293)
rem --- BBx reference ["syc_lc.bbx"] (Line 0293)
rem --- BBx reference ["ivc_ib.bbx"] (Line 0351)
rem --- BBx reference ["ivr_8b.bbx"] (Line 0425)
rem --- BBx reference ["ivc_ib.bbx"] (Line 0443)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0452)
rem --- BBx reference ["syc_rs.bbx"] (Line 0452)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0453)
rem --- BBx reference ["syc_rs.bbx"] (Line 0453)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0458)
rem --- BBx reference ["syc_rs.bbx"] (Line 0458)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0459)
rem --- BBx reference ["syc_rs.bbx"] (Line 0459)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0471)
rem --- BBx reference ["syc_rs.bbx"] (Line 0471)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0472)
rem --- BBx reference ["syc_rs.bbx"] (Line 0472)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- BEGIN statement removed [begin_vend:]
rem --- BEGIN statement removed [begin_date:]
rem --- START statement removed [start_itaic:]

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist a0$,a1$
rem --- aps01a: iolist *,*,x$,*,*,vendmask$
rem --- gls01a: iolist g0$,g1$,g2$,g3$,g4$,g5$,g6$,g7$,g8$

rem --- The following channel references have been identified:

rem --- glm01a: Channel reference (Line 0262)

rem --------------------------------------------------------------------------------
rem --- ivm01a: Channel reference (Line 0254)
rem --- ivm07a: Channel reference (Line 0253)
rem --- ivm10a: Channel reference (Line 0253)
rem --- ivm14a: Channel reference (Line 0252)
rem --- ivm15a: Channel reference (Line 0251)
rem --- ivs01a: (Generated by CodePort)
rem --- ivt01a: Channel reference (Line 0249)
rem --- ivt03a: Channel reference (Line 0248)
rem --- sys01a: Channel reference (Line 0247)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="glm-01"
    files$[4]="ivm-01"
    files$[5]="ivm-07"
    files$[6]="ivm-10"
    files$[7]="ivm-14"
    files$[8]="ivm-15"
    files$[9]="ivt-01"
    files$[10]="ivt-03"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    glm01_dev=channels[3]
    ivm01_dev=channels[4]
    ivm07_dev=channels[5]
    ivm10_dev=channels[6]
    ivm14_dev=channels[7]
    ivm15_dev=channels[8]
    ivt01_dev=channels[9]
    ivt03_dev=channels[10]

rem --- Dimension string templates

    dim apm01a$:templates$[2],glm01a$:templates$[3],ivm01a$:templates$[4],
:       ivm07a$:templates$[5],ivm10a$:templates$[6],ivm14a$:templates$[7],
:       ivm15a$:templates$[8],ivt01a$:templates$[9],ivt03a$:templates$[10]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=11
    dim files$[files],options$[files],channels[files]
    files$[1]="ivm-01"
    files$[2]="ivm-07"
    files$[3]="ivm-10"
    files$[4]="ivm-14"
    files$[5]="ivm-15"
    files$[6]="ivt-01"
    files$[7]="ivt-03"
    files$[8]="sys-01"
    files$[9]="apm-01"
    call pgmdir$+"adc_fileopen.aon",1,1,8,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm01_dev=channels[1]
    ivm07_dev=channels[2]
    ivm10_dev=channels[3]
    ivm14_dev=channels[4]
    ivm15_dev=channels[5]
    ivt01_dev=channels[6]
    ivt03_dev=channels[7]
    sys01_dev=channels[8]

rem --- Parameters

    dim p[7],info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    if pos(p3$(17,1)="SL")=0 goto l4900
    call pgmdir$+"adc_application.aon","AP",info$[all]
    if info$[20]<>"Y" goto l4800
    call pgmdir$+"adc_application.aon",n2$,info$[all]
    gl$=info$[9]
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(3,2))
    p[2]=num(p2$(5,1))
    p[3]=num(p2$(7,2))
    p[5]=num(p2$(9,2))
    p[6]=num(p2$(11,2))
    p[7]=num(p2$(13,2))
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    vendlen=num(x$(1,2))
    vendmask=len(vendmask$)
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$

rem --- Init Data

    open_list$="Open  ClosedBoth  "
    ocb$="B"
    beg_vend$=""
    end_vend$=""
    beg_date$=""
    end_date$=""
    beg_whse$=""
    end_whse$=""
    beg_prod$=""
    end_prod$=""
    beg_item$=""
    end_item$=""
    item_type$=""
    dim files[15],params$[4],option$[7]
    files[0]=sys01_dev
    files[1]=ivm01_dev
    files[10]=ivm10_dev
    files[14]=ivm14_dev
    files[15]=ivm15_dev
    params$[0]=firm_id$
    params$[1]=p1$
    params$[2]=p2$
    params$[3]=p3$
    params$[4]=p4$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,12
    call pgmdir$+"adc_sizemask.aon",m4$,m4,6,12

rem --- Additional Opens

    if gl$="Y" files$[10]="glm-01"
    call pgmdir$+"adc_fileopen.aon",1,9,10,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[9]
    glm01_dev=channels[10]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    gosub display_fields
    goto start_done

rem --- Beginning Vendor

    v0$="M"
    v1$="C"
    v2$=beg_vendor$
    v3$=vendmask$
    v4$="Enter Beginning Vendor Number (<F1>=First/<F3>=Lookup)"
    v0=vendlen
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1070,l1040,begin_vend,l1050,flow_control,l1070,flow_control
l1040:
    v$=""; goto l1070
l1050:
    call pgmdir$+"syc_lc.bbx",v$
    if v$="" goto begin_vend
l1070:
    x$="First"; gosub d_vend
    if status goto begin_vend
    beg_vendor$=v$
    goto flow_control

end_vend: rem --- Ending Vendor

    v0$="M"
    v1$="C"
    v2$=end_vendor$
    v3$=vendmask$
    v4$="Enter Ending Vendor Number (<F1>=Last/<F3>=Lookup)"
    v0=vendlen
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1160,l1140,l1190,l1150,flow_control,l1160,flow_control
l1140:
    v$=""; goto l1170
l1150:
    call pgmdir$+"syc_lc.bbx",v$
    if v$="" goto end_vend
l1160:
l1170:
    x$="Last"; gosub d_vend
    if status goto end_vend
    end_vendor$=v$
l1190:
    goto flow_control

rem --- Beginning Date

    v0$="D"
    v1$="C"
    v2$=beg_date$
    v3$=""
    v4$="Enter Beginning Transaction Date (<F1>=First)"
    v0=8
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l1260,l1250,l1290,begin_date,l1290,l1260,l1290
l1250:
    v$=""
l1260:
    if end_date$<>"" and v$>end_date$ goto begin_date
    beg_date$=v$
    x$="First"
    gosub d_date
l1290:
    goto flow_control

end_date: rem --- Ending Date

    v0$="D"
    v1$="C"
    v2$=end_date$
    v3$=""
    v4$="Enter Ending Transaction Date (<F1>=Last)"
    v0=8
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1360,l1350,l1390,end_date,l1390,l1360,l1390
l1350:
    v$=""
l1360:
    if v$<>"" and beg_date$>v$ goto end_date
    end_date$=v$
    x$="Last"
    gosub d_date
l1390:
    goto flow_control

l1400: rem --- Entry Call (i0=3-9)

    call pgmdir$+"ivc_ib.bbx","DI","D",40,7,files[all],params$[all],option$[all],my_context,i0,3,i0_done,validate,v3
    on v3 goto l1431,l1431,l1490,l1431,l1490,l1431,l1490
l1431:
    beg_whse$=option$[1]
    end_whse$=option$[2]
    beg_prod$=option$[3]
    end_prod$=option$[4]
    beg_item$=option$[5]
    end_item$=option$[6]
    item_type$=option$[7]
l1490:
    goto flow_control

l1600: rem --- Open/Closed/Both

    v0$="S"
    v1$="C"
    v2$=ocb$
    v3$="OCB"
    v4$="O=Open Only, C=Closed Only,B=Both"
    v0=1
    v1=40
    v2=14
    control_id=3011
    gosub std_input
    on v3 goto l1640,l1600,l1690,l1600,l1690,l1640,l1690
l1640:
    ocb$=v$
    gosub d_ocb
l1690:
    goto flow_control

flow_control: rem --- Flow Control

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2
    if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1)
    break
    case 4; exitto start_done
    case default; exitto done_v3
    swend
next_field:
    on i0 goto begin_vend,end_vend,begin_date,end_date,l1400,l1400,l1400,l1400,l1400,l1400,l1400,l1600,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=0
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1
    goto next_field
cancel:
    goto std_exit

end_input: rem --- Run Overlay

    run pgmdir$+"ivr_8b.bbx"

l4800: rem --- AP Not Installed

    call pgmdir$+"ivc_warnings.aon","A",status
    goto std_exit

l4900: rem --- Lotted/Serialized Inventory not enabled

    call pgmdir$+"ivc_warnings.aon","L",status
    goto std_exit

display_fields: rem --- Display Fields

    let v$=beg_vendor$,x$="First",control_id=3000; gosub d_vend
    let v$=beg_vendor$,x$="Last",control_id=3001; gosub d_vend
    let v$=beg_date$,x$="First",control_id=3002; gosub d_date
    let v$=end_date$,x$="Last",control_id=3003; gosub d_date
    call pgmdir$+"ivc_ib.bbx","D","D",40,7,files[all],params$[all],option$[all],my_context,3,3,i0_done,validate,v3
    gosub d_ocb
    return

d_date: rem --- Display date

rem --- IN: v$=date, x$=first/last, control_id

    if v$="" x0$="",x1$=x$ else x0$=fndate$(v$),x1$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,x0$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,10000+control_id,x1$,0,"",ignore_status
    return

d_ocb: rem --- Display Open/Closed/Both

    call pgmdir$+"syc_rs.bbx","",my_context,3011,ocb$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13011,open_list$((pos(ocb$="OCB")-1)*6+1,6),0,"",ignore_status
    return

d_vend: rem --- Display Customer

    dim c0$(20)
    let status=0
    if v$="" x0$="",c0$=x$; goto l5460 else x0$=fnmask$(v$,vendmask$); let c0$="Not Found",status=1
    let v$=v$+fill(6-len(v$),"0")
    find record (apm01_dev,key=firm_id$+v$,dom=l5460) apm01a$
    let c0$=a1$(1,30)
    let status=0
l5460: call pgmdir$+"syc_rs.bbx","",my_context,control_id,x0$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,10000+control_id,c0$,0,"",ignore_status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
