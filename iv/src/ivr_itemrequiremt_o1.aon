rem --- Inventory Requirements Report (Report Overlay)
rem --- Program ivr_itemrequiremt_o1.aon v8.0.0 11Aug2007 (ivr_mb)
rem --- Created by adx_codeport.bbx v1.1.5 (08/11/2007 11:05:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

seterr std_error
setesc std_error

rem --- Use statements

use ::ado_func.src::func

rem --- Document initializations

declare BBjVector OutVect!
declare BBjVector HdrVect!
declare BBjVector BrkVect!
declare BBjVector TotVect!

OutVect!=bbjAPI().makeVector()
HdrVect!=bbjAPI().makeVector()
BrkVect!=bbjAPI().makeVector()
TotVect!=bbjAPI().makeVector()

rep_date$=date(0:"%Mz/%Dz/%Yd")
rep_date_stamp$=date(0:"%Yd%Mz%Dz")
rep_time$=date(0:"%hz:%mz %p")
rep_time_stamp$=date(0:"%Hz%mz%sz")
rep_prog$=pgm(-2)

rem --- Initializations

precision p[1]

dim headings$[8],total[6],channels[20],items$[2]
headings$[0]=sysinfo.firm_name$
when$=sysinfo.system_date$
x$=func.formatDate(when$)
day_of_month=num(x$(4,2))
channels[1]=ivm01a_dev
channels[2]=ivm02a_dev
channels[3]=ivm02a_dev
channels[12]=ivm12a_dev
items$[0]=firm_id$
clock$=""
h9$=""
number=0
last$=""
width=132
page=0
nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
headings=6
lastdate$=""
lastcost$=""
flag$=""
if sequence$="B" then
   headings=7
endif
more=1
l1=0
recs=0
total_recs=0

rem --- column heading

dim columns$[11,10]
columns=12
columns$[0,0]=Translate!.getTranslation("AON_ITEM"),                  columns$[0,1]="C", columns$[0,2]="25"
columns$[1,0]=Translate!.getTranslation("AON_WH_LOCATION"),           columns$[1,1]="C", columns$[1,2]="10"
columns$[2,0]=Translate!.getTranslation("AON_QUANTITY^ON_HAND"),      columns$[2,1]="N", columns$[2,2]="10",columns$[2,3]=m2$,columns$[2,10]="T"
columns$[3,0]=Translate!.getTranslation("AON_COMMITTED^QUANTITY"),    columns$[3,1]="N", columns$[3,2]="10",columns$[3,3]=m2$,columns$[3,10]="T"
columns$[4,0]=Translate!.getTranslation("AON_QUANTITY^AVAILABLE"),    columns$[4,1]="N", columns$[4,2]="10",columns$[4,3]=m2$,columns$[4,10]="T"
columns$[5,0]=Translate!.getTranslation("AON_QUANTITY^ON_ORDER"),     columns$[5,1]="N", columns$[5,2]="10",columns$[5,3]=m2$,columns$[5,10]="T"
columns$[6,0]=Translate!.getTranslation("AON_ORDER^POINT"),           columns$[6,1]="N", columns$[6,2]="10"
columns$[7,0]="EOQ",                   columns$[7,1]="N", columns$[7,2]="10"
columns$[8,0]=Translate!.getTranslation("AON_ANNUAL^USAGE"),          columns$[8,1]="N", columns$[8,2]="14",columns$[8,3]=m2$,columns$[8,10]="T"
columns$[9,0]="",                      columns$[9,1]="C", columns$[9,2]="3"
columns$[10,0]=Translate!.getTranslation("AON_LAST_PURCHASE^DATE"),   columns$[10,1]="C",columns$[10,2]="10"
columns$[11,0]=Translate!.getTranslation("AON_COST"),                 columns$[11,1]="N",columns$[11,2]="10",columns$[11,3]=m3$

call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Background

call pgmdir$+"adc_progress.aon","N","IVM_ITEMMAST","","","",0,ivm01a_dev,1,meter_num,status

rem --- Report headings

    gosub init_headings
    call pgmdir$+"adc_fiscalperyr.aon",firm_id$,when$,period$,year$,table_chans$[all],status
    if status then goto std_exit
    base$=period$+year$

rem --- Position files

rem --- Get sort record

if sequence$="B" then
   sql_chan=sqlunt
   sqlopen(sql_chan,err=sqlopen_err)stbl("+DBNAME")
   
   rem "\**FORMAT_COLS=70**\"
   sql_prep$="select IVM_ITEMVEND.* , IVM_ITEMMAST.ITEM_TYPE, "+
:  "IVM_ITEMMAST.PRODUCT_TYPE, IVM_ITEMWHSE.WAREHOUSE_ID, "+
:  "IVM_ITEMWHSE.BUYER_CODE, IVM_ITEMMAST.ITEM_INACTIVE, "+
:  "APM_VENDMAST.VEND_INACTIVE from IVM_ITEMVEND INNER JOIN "+
:  "IVM_ITEMMAST ON IVM_ITEMVEND.FIRM_ID = IVM_ITEMMAST.FIRM_ID "+
:  "AND IVM_ITEMVEND.ITEM_ID = IVM_ITEMMAST.ITEM_ID LEFT JOIN "+
:  "IVM_ITEMWHSE ON IVM_ITEMVEND.FIRM_ID = IVM_ITEMWHSE.FIRM_ID "+
:  "AND IVM_ITEMVEND.ITEM_ID = IVM_ITEMWHSE.ITEM_ID INNER JOIN "+
:  "APM_VENDMAST ON IVM_ITEMVEND.FIRM_ID = APM_VENDMAST.FIRM_ID "+
:  "AND IVM_ITEMVEND.VENDOR_ID = APM_VENDMAST.VENDOR_ID WHERE "+
:  "IVM_ITEMVEND.FIRM_ID = '"+firm_id$+"' "
   
   if cvs(begitem$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMVEND.ITEM_ID>='"+
:     begitem$+"' "
   endif
   
   if cvs(enditem$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMVEND.ITEM_ID<='"+
:     enditem$+"' "
   endif
   
   if cvs(begvendor$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMVEND.VENDOR_ID>='"+
:     begvendor$+"' "
   endif
   
   if cvs(endvendor$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMVEND.VENDOR_ID<='"+
:     endvendor$+"' "
   endif
   
   if cvs(begbuyer$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMWHSE.BUYER_CODE>='"+
:     begbuyer$+"' "
   endif
   
   if cvs(endbuyer$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMWHSE.BUYER_CODE<='"+
:     endbuyer$+"' "
   endif
   
   if cvs(begwhse$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMWHSE.WAREHOUSE_ID>='"+
:     begwhse$+"' "
   endif
   
   if cvs(endwhse$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMWHSE.WAREHOUSE_ID<='"+
:     endwhse$+"' "
   endif
   
   if cvs(begprod$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMMAST.PRODUCT_TYPE>='"+
:     begprod$+"' "
   endif
   
   if cvs(endprod$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMMAST.PRODUCT_TYPE<='"+
:     endprod$+"' "
   endif
   
   if inactive$="Y" then
      sql_prep$=sql_prep$+"AND APM_VENDMAST.VEND_INACTIVE <> "+
:     "'Y' "
   endif
   
   if inactive_item$="Y" then
      sql_prep$=sql_prep$+"AND IVM_ITEMMAST.ITEM_INACTIVE <> "+
:     "'Y' "
   endif
   
   sql_prep$=sql_prep$+" ORDER BY IVM_ITEMWHSE.BUYER_CODE, "+
:  "IVM_ITEMVEND.VENDOR_ID, IVM_ITEMVEND.ITEM_ID, "+
:  "IVM_ITEMWHSE.WAREHOUSE_ID"
   
   rem "\**FORMAT_COLS=0**\"
   
   sqlprep(sql_chan,err=sqlprep_err)sql_prep$
   invvend_tpl$=sqltmpl(sql_chan)
   dim invvend_data$:invvend_tpl$
   sqlexec(sql_chan,err=sqlexec_err)
   
   FuncSpace!=bbjAPI().getGroupNamespace()
   if FuncSpace!.getValue("+query_monitor",err=*endif)="ON" then
      FuncSpace!.setValue("+query_monitor_sql","Item Requirements Report;"+sql_prep$)
   endif
   
   while more
      invvend_data$=sqlfetch(sql_chan,err=*break)
      buyer$=invvend_data.buyer_code$
      vendor$=invvend_data.vendor_id$
      product$=invvend_data.product_type$
      item$=invvend_data.item_id$
      whse$=invvend_data.warehouse_id$
      
      if invvend_data.vendor_id$+invvend_data.product_type$<>last$ then
         last$=invvend_data.vendor_id$+invvend_data.product_type$
         x$=fill(m0)
         if ap$="Y" and cvs(vendor$,2)<>"" then
            x$=func.alphaMask(vendor$,m0$)
         endif
      endif
      
      total_recs=total_recs+1
      if mod(total_recs,milestone)=0 then
         call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
      endif
      
      rem --- Level breaks
      
      if buyer$<>t0$ then
         gosub buyer_break
      endif
      if ap$="Y" and vendor$<>t1$ then
         gosub vendor_break
      endif
      if product$<>t2$ then
         gosub product_break
      endif
      if item$<>t3$ then
         gosub item_break
      endif
      if type$<>"" and ivm01a.item_type$<>type$ then
         continue
      endif
      
      rem --- Additional reads
      
      lastdate$=""
      lastcost$=""
      venditem$=""
      
      if cvs(invvend_data.vendor_item$,2)<>"" then
         venditem$=Translate!.getTranslation("AON_VENDOR_ITEM_")+invvend_data.vendor_item$
      endif
      if cvs(invvend_data.last_po_date$,2)<>"" then
         lastdate$=func.formatDate(invvend_data.last_po_date$)
      endif
      lastcost$=str(invvend_data.last_po_cost:m3$)
      
      rem --- New product?
      
      if h9$<>"" then
         xwk=fnblank(columns)
         OutVect!.addItem(h9$)
         xwk=fnblank(columns-1)
         xwk=fnblank(columns)
         h9$=""
      endif
      
      rem --- New item?
      if description$<>"" then
         OutVect!.addItem(item$(1,p[0])+"  "+description$)
         OutVect!.addItem(venditem$)
         xwk=fnblank(columns-4)
         OutVect!.addItem(lastdate$)
         OutVect!.addItem(lastcost$)
         description$=""
      endif
      
      rem --- Stocking Level is always by warehouse
      
      gosub retrieve_whse
      gosub print_warehouse
      recs=recs+1
      
      rem --- Done with record
      
   wend
   
endif

rem --- Get next vendor/item record

if sequence$="V" then
   sql_chan=sqlunt
   sqlopen(sql_chan,err=sqlopen_err)stbl("+DBNAME")
   
   rem "\**FORMAT_COLS=70**\"
   sql_prep$="select IVM_ITEMVEND.* , IVM_ITEMMAST.ITEM_TYPE, "+
:  "IVM_ITEMWHSE.WAREHOUSE_ID, IVM_ITEMWHSE.BUYER_CODE, "+
:  "IVM_ITEMMAST.ITEM_INACTIVE, APM_VENDMAST.VEND_INACTIVE from "+
:  "IVM_ITEMVEND INNER JOIN IVM_ITEMMAST ON "+
:  "IVM_ITEMVEND.FIRM_ID = IVM_ITEMMAST.FIRM_ID AND "+
:  "IVM_ITEMVEND.ITEM_ID = IVM_ITEMMAST.ITEM_ID LEFT JOIN "+
:  "IVM_ITEMWHSE ON IVM_ITEMVEND.FIRM_ID = IVM_ITEMWHSE.FIRM_ID "+
:  "AND IVM_ITEMVEND.ITEM_ID = IVM_ITEMWHSE.ITEM_ID INNER JOIN "+
:  "APM_VENDMAST ON IVM_ITEMVEND.FIRM_ID = APM_VENDMAST.FIRM_ID "+
:  "AND IVM_ITEMVEND.VENDOR_ID = APM_VENDMAST.VENDOR_ID WHERE "+
:  "IVM_ITEMVEND.FIRM_ID = '"+firm_id$+"' "
   
   if cvs(begitem$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMVEND.ITEM_ID>='"+
:     begitem$+"' "
   endif
   
   if cvs(enditem$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMVEND.ITEM_ID<='"+
:     enditem$+"' "
   endif
   
   if cvs(begvendor$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMVEND.VENDOR_ID>='"+
:     begvendor$+"' "
   endif
   
   if cvs(endvendor$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMVEND.VENDOR_ID<='"+
:     endvendor$+"' "
   endif
   
   if cvs(begbuyer$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMWHSE.BUYER_CODE>='"+
:     begbuyer$+"' "
   endif
   
   if cvs(endbuyer$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMWHSE.BUYER_CODE<='"+
:     endbuyer$+"' "
   endif
   
   if cvs(begwhse$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMWHSE.WAREHOUSE_ID>='"+
:     begwhse$+"' "
   endif
   
   if cvs(endwhse$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMWHSE.WAREHOUSE_ID<='"+
:     endwhse$+"' "
   endif
   
   if cvs(begprod$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMMAST.PRODUCT_TYPE>='"+
:     begprod$+"' "
   endif
   
   if cvs(endprod$,2)>"" then
      sql_prep$=sql_prep$+"AND IVM_ITEMMAST.PRODUCT_TYPE<='"+
:     endprod$+"' "
   endif
   
   if inactive$="Y" then
      sql_prep$=sql_prep$+"AND APM_VENDMAST.VEND_INACTIVE <> "+
:     "'Y' "
   endif
   
   if inactive_item$="Y" then
      sql_prep$=sql_prep$+"AND IVM_ITEMMAST.ITEM_INACTIVE <> "+
:     "'Y' "
   endif
   
   sql_prep$=sql_prep$+" ORDER BY IVM_ITEMVEND.VENDOR_ID, "+
:  "IVM_ITEMVEND.ITEM_ID, IVM_ITEMWHSE.WAREHOUSE_ID, "+
:  "IVM_ITEMWHSE.BUYER_CODE"
   
   rem "\**FORMAT_COLS=0**\"
   
   sqlprep(sql_chan,err=sqlprep_err)sql_prep$
   invvend_tpl$=sqltmpl(sql_chan)
   dim invvend_data$:invvend_tpl$
   sqlexec(sql_chan,err=sqlexec_err)
   
   FuncSpace!=bbjAPI().getGroupNamespace()
   if FuncSpace!.getValue("+query_monitor",err=*endif)="ON" then
      FuncSpace!.setValue("+query_monitor_sql","Item Requirements Report;"+sql_prep$)
   endif
   
   current_item$=""
   
   while more
      invvend_data$=sqlfetch(sql_chan,err=*break)
      item$=invvend_data.item_id$
      if item$<>current_item$ then
         
         vendor$=invvend_data.vendor_id$
         lastdate$=""
         lastcost$=""
         venditem$=""
         
         call pgmdir$+"adc_progress.aon","S","","","",func.alphaMask(ivm05a.vendor_id$,m0$)+" "+item$(1,p[0]),0,0,1,meter_num,status
         
         if cvs(invvend_data.vendor_item$,2)<>"" then
            venditem$=Translate!.getTranslation("AON_VENDOR_ITEM_")+invvend_data.vendor_item$
         endif
         if cvs(invvend_data.last_po_date$,2)<>"" then
            lastdate$=func.formatDate(invvend_data.last_po_date$)
         endif
         lastcost$=str(invvend_data.last_po_cost:m3$)
         
         rem --- Additional reads
         
         if ap$="Y" and vendor$<>t1$ then
            gosub vendor_break
         endif
         
         if item$<>t3$ then
            gosub item_break
         endif
         if type$<>"" and ivm01a.item_type$<>type$ then
            continue
         endif
         product$=ivm01a.product_type$
         if product$<>t2$ then
            gosub product_break
         endif
         if ivm01a.stock_level$<>"W" then
            if begbuyer$<>"" and ivm01a.buyer_code$<begbuyer$ then
               continue
            endif
            if endbuyer$<>"" and ivm01a.buyer_code$>endbuyer$ then
               continue
            endif
         endif
         current_item$=item$
      endif
      rem --- For each warehouse for this item
      
      first$=firm_id$+item$
      
      rem --- Next warehouse
      whse$=invvend_data.warehouse_id$
      buyer_code$=invvend_data.buyer_code$
      gosub retrieve_whse
      
      rem --- Print item heading
      
      if description$<>"" then
         OutVect!.addItem(item$(1,p[0])+"  "+description$)
         xwk=fnblank(columns-1)
         OutVect!.addItem(h9$)
         OutVect!.addItem(venditem$)
         xwk=fnblank(columns-4)
         OutVect!.addItem(lastdate$)
         OutVect!.addItem(lastcost$)
         description$=""
      endif
      rem --- Print detail line
      gosub print_warehouse
      recs=recs+1
      
      rem --- Loop back for next warehouse
      
      rem wend
      
      rem --- Loop back for next record
      
   wend
   
endif

done:
rem --- All done

if recs=0 then
   msg_id$="DOC_OUTPUT_NODATA"
   gosub disp_message
   goto std_exit_no_report
endif

done=1
gosub item_break
if number>0 then
   goto std_exit
endif
OutVect!.addItem(Translate!.getTranslation("AON_NO_ITEMS_FOUND"))
xwk=fnblank(11)
goto std_exit

print_warehouse:
rem --- Print warehouse line

point$=str(point:m2$),eoq$=str(eoq:m2$)

OutVect!.addItem("")
OutVect!.addItem("   "+whse$+"  "+location$)
OutVect!.addItem(str(onhand))
OutVect!.addItem(str(committed))
OutVect!.addItem(str(available))
OutVect!.addItem(str(ordered))
OutVect!.addItem(point$)
OutVect!.addItem(eoq$)
OutVect!.addItem(str(usage))
OutVect!.addItem(flag$)
xwk=fnblank(2)
l1=l1+1
number=number+1

rem --- Accumulate totals

total[0]=total[0]+onhand
total[1]=total[1]+committed
total[2]=total[2]+available
total[3]=total[3]+ordered
total[4]=total[4]+point
total[5]=total[5]+eoq
total[6]=total[6]+usage
return

init_headings:
rem --- Initialize HEADINGS$

dim h1$(width),h2$(width),h3$(width)
x3$=Translate!.getTranslation("AON_ALL_ITEM_TYPES")
if type$<>"" then
   x3$=Translate!.getTranslation("AON_ITEM_TYPE_")+cvs(type$,2)
endif
if sequence$="B" then
   headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_BUYER_CODE_FOR_")+x3$
endif
if sequence$="V" then
   headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_VENDOR_FOR_")+x3$
endif
headings$[2]="[HEADER]"
if begitem$="" then
   headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST")
else
   headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
endif
if enditem$="" then
   headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST")
else
   headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
endif
if begwhse$="" then
   headings$[5]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_FIRST")
else
   headings$[5]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_")+begwhse$
endif
if endwhse$="" then
   headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_WAREHOUSE:_LAST")
else
   headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_WAREHOUSE:_")+endwhse$
endif
if begbuyer$="" then
   headings$[6]=Translate!.getTranslation("AON_FROM_BUYER:_FIRST")
else
   headings$[6]=Translate!.getTranslation("AON_FROM_BUYER:_")+begbuyer$
endif
if endbuyer$="" then
   headings$[6]=headings$[6]+Translate!.getTranslation("AON__--_TO_BUYER:_LAST")
else
   headings$[6]=headings$[6]+Translate!.getTranslation("AON__--_TO_BUYER:_")+endbuyer$
endif
if begvendor$="" then
   headings$[7]=Translate!.getTranslation("AON_FROM_VENDOR:_FIRST")
else
   headings$[7]=Translate!.getTranslation("AON_FROM_VENDOR:_")+begvendor$
endif
if endvendor$="" then
   headings$[7]=headings$[7]+Translate!.getTranslation("AON__--_TO_VENDOR:_LAST")
else
   headings$[7]=headings$[7]+Translate!.getTranslation("AON__--_TO_VENDOR:_")+endvendor$
endif
if begprod$="" then
   headings$[8]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST")
else
   headings$[8]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$
endif
if endprod$="" then
   headings$[8]=headings$[8]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST")
else
   headings$[8]=headings$[8]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
endif
return

buyer_break:
rem --- Buyer break

buyer_head$=""
t0$=buyer$
ivm10f.code_desc$=nf$
find record (ivm10f_dev,key=firm_id$+"F"+t0$,dom=*next) ivm10f$
buyer_head$=Translate!.getTranslation("AON_BUYER:_")+t0$+" "+ivm10f.code_desc$
if ap$="Y" then
   gosub vendor_break
endif
return

vendor_break:
rem --- Vendor break

if sequence$="B" then
   gosub product_break
endif
if sequence$="V" then
   gosub item_break
endif
vendor_head$=""
let t1$=vendor$,apm01a_key$=firm_id$+vendor$,apm01a.vendor_name$=nf$,l=l9+1
find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$
let vendor_head$=Translate!.getTranslation("AON_VENDOR:_")+func.alphaMask(apm01a.vendor_id$,m0$)+" "+cvs(apm01a.vendor_name$,2)
if cvs(vendor$,2)="" then
   vendor_head$=Translate!.getTranslation("AON_VENDOR:_NONE")
endif
BrkVect!.addItem(str(OutVect!.size()/(columns)))
if sequence$="V" then
   HdrVect!.addItem(vendor_head$)
endif
if sequence$="B" then
   HdrVect!.addItem(buyer_head$+"   "+Vendor_head$)
endif
return

product_break:
rem --- Product break

if sequence$="B" then
   gosub item_break
endif
let t2$=product$,ivm10a.code_desc$=nf$
find record (ivm10a_dev,key=firm_id$+"A"+t2$,dom=*next) ivm10a$
let h9$=Translate!.getTranslation("AON_PRODUCT_TYPE_")+t2$+" "+ivm10a.code_desc$
return

item_break:
rem --- Item break

if t3$<>"" then
   if l1>1 then
      point$=str(ivm01a.order_point:m2$),eoq$=str(ivm01a.eoq:m2$)
      TotVect!.addItem(str(OutVect!.size()/(columns)))
      xwk=fnblank(1)
      OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_ITEM"))
      OutVect!.addItem(str(total[0]))
      OutVect!.addItem(str(total[1]))
      OutVect!.addItem(str(total[2]))
      OutVect!.addItem(str(total[3]))
      OutVect!.addItem("")
      OutVect!.addItem("")
      OutVect!.addItem(str(total[6]))
      xwk=fnblank(3)
      xwk=fnblank(columns)
   endif
endif

if done then
   return
endif
dim total[6],ivm01a$:ivm01a_tpl$
let t3$=item$,ivm01a_key$=firm_id$+t3$,ivm01a.item_desc$=nf$,ivm01a.product_type$="",l1=0
find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
description$=func.displayDesc(ivm01a.item_desc$,p[3],p[4],p[5])
product$=ivm01a.product_type$
if sequence$="V" then
   gosub product_break
endif
return

retrieve_whse:
rem --- Retrieve warehouse record

dim ivm02a$:ivm02a_tpl$
let ivm02a_key$=firm_id$+whse$+item$,items$[1]=whse$,items$[2]=item$
let location$="",available=0,point=0,eoq=0,onhand=0,committed=0,ordered=0
find record (ivm02a_dev,key=ivm02a_key$,knum="PRIMARY",dom=item_whse_usage) ivm02a$
let location$=ivm02a.location$,onhand=ivm02a.qty_on_hand,committed=ivm02a.qty_commit,ordered=ivm02a.qty_on_order
let available=onhand-committed,point=ivm02a.order_point,eoq=ivm02a.eoq
item_whse_usage:
call pgmdir$+"ivc_usage.aon",action$,channels[all],items$[all],factors[all],day_of_month,base$,cur_period$,g[0],p[1],usage,estimated,flag$,usage_tpls$[all],status
if flag$<>"" then
   usage=estimated
endif
return

rem --- fnBlank : Create blank cells in OutVect!. No return value

def fnblank(q0)
for q1=1 to q0
   OutVect!.addItem("")
next q1
return q1
fnend

sqlopen_err:
rem --- Error Opening SQL Connection

Form!.setCursor(0)

msg_id$="INQRY_SQLOPEN_ERROR"
dim msg_tokens$[1]
msg_tokens$[1]=errmes(-1)
gosub disp_message

goto std_exit

sqlprep_err:
rem --- Error Preparing SQL Statement
rem sql error

msg_id$="INQRY_SQLPREP_ERROR"
dim msg_tokens$[2]

sTxt!=sql_prep$
sTxt!=sTxt!.replace(" from ",$0a$+"from ")
sTxt!=sTxt!.replace(" FROM ",$0a$+"FROM ")
sTxt!=sTxt!.replace(" where ",$0a$+"where ")
sTxt!=sTxt!.replace(" WHERE ",$0a$+"WHERE ")
sTxt!=sTxt!.replace(" and ",$0a09$+"and ")
sTxt!=sTxt!.replace(" AND ",$0a09$+"AND ")
sTxt!=sTxt!.replace(" or ",$0a09$+"or ")
sTxt!=sTxt!.replace(" OR ",$0a09$+"OR ")
sTxt!=sTxt!.replace(" order by ",$0a$+"order_by ")
sTxt!=sTxt!.replace(" ORDER BY ",$0a$+"ORDER BY ")

msg_tokens$[1]=sTxt!
msg_tokens$[2]=errmes(-1)
gosub disp_message

goto std_exit

sqlexec_err:
rem --- Error Executing SQL Statement

Form!.setCursor(0)

msg_id$="INQRY_SQLEXEC_ERROR"
dim msg_tokens$[3]
msg_tokens$[1]=sub_alias_id$
msg_tokens$[2]=sub_table_raw$
if sub_table_path$<>"" then
   msg_tokens$[2]=msg_tokens$[2]+" ("+sub_table_path$+")"
endif
msg_tokens$[3]=errmes(-1)
gosub disp_message

goto std_exit

rem #include disp_message.src

disp_message:
rem --- Display Message Dialog

call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error:
rem --- Standard error handler (18Nov2014)

if tcb(19)>0 then
   rem --- Escape handler
   if and(chr(tcb(19)),$08$)=$08$ then
      release
   else
      setesc std_error
      return
   endif
endif

if err=0 then
   rem --- Get tcb(12) and tcb(10) to send into bac_error
   lock_byte=tcb(10)
   lock_chan=tcb(12)
endif

rd_err_text$=""
if tcb(2)=0 and tcb(5) then
   rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
endif
call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
if pos("ESCAPE"=rd_err_act$) then
   seterr 0
   setesc 0
endif
if pos("RETRY"=rd_err_act$) then
   retry
endif
if pgm(-1)<>pgm(-2) then
   status=999
   exit
endif
release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params:
rem --- Standard missing parameter handler (15Apr2006)

rd_err_text$=""
if tcb(5)<>0 and pgm(-1)=pgm(-2) then
   rd_err_text$=pgm(tcb(5))
endif
pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"), str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
dim sysinfo$:sysinfo_template$
sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
if cvs(sysinfo.user_id$,2)=master_user$ then
   escape
endif
std_missing_params_release:
status=999
if pgm(-1)<>pgm(-2) then
   exit
endif
release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit:
rem --- Standard program end (01Mar2006)

call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
release

rem #endinclude std_end.src

std_exit_no_report:

call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
OutVect!=null()
goto std_exit

end

