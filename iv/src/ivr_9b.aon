rem --- Lot/Serial Transaction History By Customer Report (Report)
rem --- Program ivr_9b v8.0.0 16Jul2007 (ivr_9b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:04:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    rem precision p[1]
    precision num(ivs01a.precision$)
    headings=9
    when$=sysinfo.system_date$
    clock$=""
    h9$=""
    dim headings$[headings],o[10],l[4]
    dim files[4],params[6],masks$[3],report[1]
    if item_type$="" x0$="All" else x0$=item_type$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" For Item Type "+x0$
    width=132
    page=0
    l9=59
    l=l9+1
    files[0]=ivm01_dev
    files[1]=ivm10_dev
    files[2]=arm01_dev
    files[3]=apm01_dev
    files[4]=glm01_dev
    params[0]=p[0]
    params[1]=custlen
    params[3]=num(g2$(7,2))
    params[4]=p[5]
    params[5]=p[6]
    params[6]=p[7]
    masks$[0]=firm_id$
    masks$[1]=custmask$
    masks$[3]=g5$
    more=1

rem --- Print positions
   
    gosub Position
   

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivt02_dev,1,meter_num,status

    dim ivm03a_key$:ivm03_key_tpl$
    read (ivt02_dev,key=firm_id$+beg_cust$,dom=*next)

rem --- Get next record

    while more

        ivt02a_key$=key(ivt02_dev,end=*break)
        if pos(firm_id$=ivt02a_key$)<>1 break
        cust$=ivt02a_key.customer_id$
        product$=ivt02a_key.product_type$
        tran_date$=ivt02a_key.trans_date$
        whse$=ivt02a_key.warehouse_id$
        item$=ivt02a_key.item_id$
        read (ivt02_dev)

rem --- Valid Customer/Product/Date/Warehouse/Item?

        if end_cust$<>"" if cust$>end_cust$ break
        if beg_prod$<>"" if product$<beg_prod$ read (ivt02_dev,key=ivt02a_key.firm_id$+ivt02a_key.customer_id$+beg_prod$,dom=*continue)
        if end_prod$<>"" if product$>end_prod$ read (ivt02_dev,key=ivt02a_key.firm_id$+ivt02a_key.customer_id$+$FF$,dom=*continue)
        if beg_date$<>"" if tran_date$<beg_date$ read (ivt02_dev,key=ivt02a_key.firm_id$+ivt02a_key.customer_id$+
:       ivt02a_key.lotser_no$+beg_date$,dom=*continue)
        if end_date$<>"" if tran_date$>end_date$ read (ivt02_dev,key=ivt02a_key.firm_id$+ivt02a_key.customer_id$+
:       ivt02a_key.lotser_no$+$FF$,dom=*continue)
        if beg_whse$<>"" if whse$<beg_whse$ read (ivt02_dev,key=ivt02a_key.firm_id$+ivt02a_key.customer_id$+
:       ivt02a_key.lotser_no$+ivt02a_key.trans_date$+beg_whse$,dom=*continue)
        if end_whse$<>"" if whse$>end_whse$ read (ivt02_dev,key=ivt02a_key.firm_id$+ivt02a_key.customer_id$+
:       ivt02a_key.lotser_no$+ivt02a_key.trans_date$+$FF$,dom=*continue)
        if beg_item$<>"" if item$<beg_item$ read (ivt02_dev,key=ivt02a_key.firm_id$+ivt02a_key.customer_id$+
:       ivt02a_key.lotser_no$+ivt02a_key.trans_date$+ivt02a_key.warehouse_id$+beg_item$,dom=*continue)
        if end_item$<>"" if item$>end_item$ read (ivt02_dev,key=ivt02a_key.firm_id$+ivt02a_key.customer_id$+
:       ivt02a_key.lotser_no$+ivt02a_key.trans_date$+ivt02a_key.warehouse_id$+$FF$,dom=*continue)

rem --- Open or Closed Lots?

        if ocb$<>"B" then
            d0=0
            find record (ivm07a_dev,key=firm_id$+ivt02a_key.warehouse_id$+ivt02a_key.item_id$+ivt02a_key.lotser_nbr$,dom=*next) ivm07a$
            if (ocb$="O" and d0=0) or (ocb$="C" and d0) then
                continue
            endif
        endif
        read record (ivt01_dev,key=ivt02a_key.firm_id$+ivt02a_key.warehouse_id$+
:       ivt02a_key.item_id$+ivt02a_key.lotser_no$+ivt02a_key.trans_date$+ivt02a_key.iv_hist_seq$,dom=*continue) ivt01a$
        find record (ivm01a_dev,key=firm_id$+item$,dom=*continue) ivm01a$
        if item_type$<>"" then
            if ivm01a.item_type$<>item_type$ then
                continue
            endif
        endif
        if beg_date$<>"" if ivt01a_key.trans_date$<beg_date$ read (ivt01_dev,key=ivt01a_key.firm_id$+ivt01a_key.warehouse_id$+
:       ivt01a_key.item_id$+ivt01a_key.lotser_no$+beg_date$,dom=*continue)
        if end_date$<>"" if ivt01a_key.trans_date$>end_date$ read (ivt01_dev,key=ivt01a_key.firm_id$+ivt01a_key.warehouse_id$+
:       ivt01a_key.item_id$+ivt01a_key.lotser_no$+beg_date$+$FF$,dom=*continue)

rem --- Level breaks?

        call pgmdir$+"adc_progress.aon","S","","","",ivt02a_key.customer_id$+" "+ivt02a_key.item_id$+" "+ivt02a_key.lotser_nbr$,0,0,1,meter_num,status
        if cust$<>t1$ gosub Customer_Break
        if ivt02a_key.product_type$+ivt02a_key.lotser_no$<>t2$ first$="Y" else first$="N",t2$=ivt02a_key.product_type$+ivt02a_key.lotser_no$
rem --- Get Reference Block

        dim desc$[2]
        ivt01a_a1$=ivt01a.TRANS_SOURCE$+ivt01a.TRANS_REF_1$+ivt01a.TRANS_REF_2$+ivt01a.TRANS_REF_3$+ivt01a.TRANS_REF_4$+ivt01a.TRANS_SEQ$+ivt01a.LINE_CODE$+
:       ivt01a.UNIT_MEASURE$+ivt01a.TRANS_CMT$+ivt01a.FINISH_ITEM$+ivt01a.GL_ACCOUNT+ivt01a.LOCATION$+
:       ivt01a.PO_LINE_CODE$+ivt01a.RESERVED_STR$
        call pgmdir$+"ivc_td.bbx",ivt01a_a1$,files[all],params[all],masks$[all],type$,desc$[all]

rem --- Print detail line

        needed=1
        if first$="Y" needed=needed+1
        if l+needed>l9 gosub report_heading
        if first$="Y" print (printer_dev)@(o[1]),product$,@(o[2]),ivt02a_key.lotser_nbr$,@(o[5]),ivt02a_key.wharehouse_id$,@(o[6]),ivt02a_key.item_id$," ",fnitem$(ivm01a.item_desc$,p[5],p[6],p[7]); let l=l+1
        print (printer_dev)@(o[3]),fndate$(ivt02a_key.trans_date$),@(o[4]),type$,@(o[5]),desc$[1],@(o[7]),ivt01a.trans_qty:m2$,@(o[8]),ivt01a.unit_cost:m3$,@(o[9]),round(ivt01a.trans_qty*ivt01a.unit_cost,2):m1$,@(o[10]),ivt01a.unit_price:m4$
        l=l+1
        l1=l1+1
        customer[0]=customer[0]+ivt01a.trans_qty
        customer[1]=customer[1]+round(ivt01a.trans_qty*ivt01a.unit_cost,2)
        first$="N"

    wend

done: rem --- All done

    t9$="END"
    gosub Customer_Break
    if beg_item$="" or beg_item$<>end_item$ goto std_exit
    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[7]),fill(m2,"-"),@(o[9]),fill(m1,"-")
    print (printer_dev)@(o[7]-13),"Report Total",@(o[7]),report[0]:m2$,@(o[9]),report[1]:m1$
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    return

InitHeading: rem --- Initialize HEADINGS$

    dim h1$(width),h2$(width),h7$(width),h8$(width)
    x1$="First Date"
    x2$="Last Date"
    if ocb$="O" x0$="Open " else if ocb$="C" x0$="Closed " else x0$=""
    if beg_date$<>"" x1$=fndate$(beg_date$)
    if end_date$<>"" x2$=fndate$(end_date$)
    headings$[2]=x0$+"From "+x1$+" Through "+x2$
    x1$="First"
    x2$="First"
    x3$="First"
    x4$="First"
    x4=5
    if beg_item$<>"" x1$=beg_item$
    if beg_whse$<>"" x2$=beg_whse$
    if beg_cust$<>"" x3$=fnmask$(beg_cust$,custmask$)
    if beg_prod$<>"" x4$=beg_prod$,x4=3
    if end_prod$="" if x4=3 x4=4
    h1$(1)="From Item: "+x1$
    h1$(46)="From Warehouse: "+x2$
    h1$(77)="From Customer: "+x3$
    h1$(width-x4-13)="From Product: "+x4$
    x1$="Last"
    x2$="Last"
    x3$="Last"
    x4$="Last"
    x5$="All Item Types"
    if end_item$<>"" x1$=end_item$
    if end_whse$<>"" x2$=end_whse$
    if end_cust$<>"" x3$=fnmask$(end_cust$,custmask$)
    if end_prod$<>"" x4$=end_prod$
    h2$(1)="  To Item: "+x1$
    h2$(46)="  To Warehouse: "+x2$
    h2$(77)="  To Customer: "+x3$
    h2$(width-x4-13)="  To Product: "+x4$
    h7$(o[1]+1)="Prod"
    h7$(22)="Transaction"
    h8$(1)="Cust"
    h8$(o[1]+1)="Type Serial # Date"
    let h8$(o[4]+1)="Type Whse Item/Reference Information",h8$(o[7]+m2-8)="Quantity"
    let h8$(o[8]+m3-9)="Unit Cost",h8$(o[9]+m1-9)="Extension",h8$(o[10]+m4-5)="Price"
    let headings$[4]=h1$,headings$[5]=h2$,headings$[7]=h7$,headings$[8]=h8$
    return

Customer_Break: rem --- Customer Break

    if t1$="" goto Init_Customer
    let report[0]=report[0]+customer[0],report[1]=report[1]+customer[1]
    if l1<2 goto Init_Customer
    if beg_item$="" or beg_item$<>end_item$ goto Init_Customer
    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[7]),fill(m2,"-"),@(o[9]),fill(m1,"-")
    print (printer_dev)@(o[7]-15),"Customer Total",@(o[7]),customer[0]:m2$,@(o[9]),customer[1]:m1$
    let l=l+2

Init_Customer: rem --- Initialize Next Customer

    if t9$<>"END" then 
    if l+1>l9 gosub report_heading
    dim customer[1]
    let arm01a.cust_name$="Invalid Customer"
    find record (arm01a_dev,key=firm_id$+cust$,dom=*next) arm01a$
    print (printer_dev)@(0),fnmask$(ivt02_key.customer_id$,custmask$)," ",arm01a.cust_name$
    let l=l+1,l1=0
    let t1$=cust$,first$="Y"
    return

Position: rem --- Print positions

    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,8,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,8,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12
    o[0]=0
    o[1]=o[0]+max(len(custmask$)+1,5)
    o[2]=o[1]+5
    o[3]=o[2]+7
    o[4]=o[3]+9
    o[5]=o[4]+5
    o[6]=o[5]+5
    o[10]=width-m4
    o[9]=o[10]-m1
    o[8]=o[9]-m3
    o[7]=o[8]-m2
    gosub InitHeading
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
