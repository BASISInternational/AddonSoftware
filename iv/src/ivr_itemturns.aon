rem --- Inventory Turns Report (Input Overlay)
rem --- Program ivr_itemturns v8.0.0 09Jul2007 (ivr_ka)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:48:39)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
    files$[4]="ivm-03",ids$[4]="IVX_ITEMPROD"
    files$[5]="ivm-10",ids$[5]="IVC_PRODCODE"
    files$[6]="ivm-12",ids$[6]="IVM_ITEMACT"
    files$[7]="ivm-14",ids$[7]="IVM_ITEMSYN"
    files$[8]="ivm-15",ids$[8]="IVC_TYPECODE"
    files$[9]="ivw-03",ids$[9]="IVW_TURNXREF"
    files$[10]="ivm-03",ids$[10]="IVX_ITEMWHSE"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm10_dev=channels[5]
    ivm12_dev=channels[6]
    ivm14_dev=channels[7]
    ivm15_dev=channels[8]
    ivw03_dev=channels[9]
    ivm03_dev2=channels[10]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm03a$:templates$[4],
:       ivm10a$:templates$[5],ivm12a$:templates$[6],ivm14a$:templates$[7],
:       ivm15a$:templates$[8],ivw03a$:templates$[9],ivm03g$:templates$[10]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="gls-01A:GLS_PARAMS"
    ids$[2]="ivs-01A:IVS_PARAMS"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim gls01a$:templates$[1],ivs01a$:templates$[2]
      
rem --- Assign form input values to local variables

    period$=option!.getOptionData("period")
    year$=option!.getOptionData("pick_year")
    sequence$=option!.getOptionData("pick_listbutton")
    xlimit$=option!.getOptionData("report_sequence")
    xlimit=option!.getOptionData("pick_no")
    level$=option!.getOptionData("stock_level")
    begwhse$=option!.getOptionData("warehouse_id_1")
    endwhse$=option!.getOptionData("warehouse_id_2")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    type$=option!.getOptionData("item_type")
    

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    dim ivchannels[15],iparams[3],params$[3],options$[7]
    dim p[7]
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    g[0]=num(gls01a.total_pers$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    p[6]=num(ivs01a.current_per$)
    p[7]=num(ivs01a.current_year$)
    params$[0]=firm_id$
    iparams[0]=p[0]
    iparams[1]=p[3]
    iparams[2]=p[4]
    iparams[3]=p[5]
    
rem --- Set the iv call channels
    ivchannels[1]=ivm01_dev
    ivchannels[2]=ivm02_dev
    ivchannels[3]=ivm03_dev
    ivchannels[10]=ivm10_dev
    ivchannels[12]=ivm12_dev
    ivchannels[14]=ivm14_dev
    ivchannels[15]=ivm15_dev
  

rem --- Initializations

    precision p[1]
    m9$="00"
    m8$="#0.00"
    m8=len(m8$)
    m9=len(m9$)

rem --- Retrieve key template

    if level$="I" call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPROD","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$
    if level$<>"I" call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPRWH","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$
    dim ivm03a_key$:ivm03_key_tpl$

rem --- Run overlay
    run pgmdir$+"ivr_itemturns_o1.aon"

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
