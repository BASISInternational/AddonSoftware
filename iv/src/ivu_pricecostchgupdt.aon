rem --- Price/Cost Change Update
rem --- Program ivu_pricecostchgupdt.aon v8.0.0 05Dec2007 (ivu_ga)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 02:53:33)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem ---      O0: program flag
rem ---           0 = Price Change, (ivr_la)
rem ---           1 = Cost Change, from ivr_costchgreg.aon (ivr_ja)
rem ---           2 = Price Reversal (ivr_4a)
rem --- CHANNEL: driving file handle
rem ---           0 = IVE_PRICECHG (ive-05)
rem ---           1 = IVE_COSTCHG (ive-06) 
rem ---           2 = IVW_PRICREV (ivw-09)
rem ---           All other channels remain open from the register
rem ---  FIRST$: Position file with this

	seterr std_error
	setesc std_error

rem --- Retrieve the program path

	pgmdir$=""
	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL")
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO")
	firm_id$=sysinfo.firm_id$

rem --- Options

	msg_id$="AON_RUN_QUERY"
	dim msg_tokens$[1]
	msg_tokens$[1]=sysinfo.task_desc$
	gosub disp_message
	if msg_opt$<>"Y" then goto std_exit
	
rem --- Initializations

	precision p[1]
	more = 1
	price_change = 0
	cost_change = 1
	price_reversal = 2

rem --- Position file

	call pgmdir$+"adc_progress.aon","N","","","","",0,channel,1,meter_num,ignore_status
	read (channel, key=first$, dom=*next)

rem --- Main Loop Starts

	while more

		k$=key(channel,end=*break)
		if pos(first$=k$)<>1 then break
		call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
		
		switch o0
		
			case price_change
				read record (channel) pricechg_rec$
				break

			case cost_change

	            if costchg_rec.effect_date$>sysinfo.system_date$
	                exitto std_exit
	            endif
				
	            read record (channel) costchg_rec$
	            break

			case price_reversal
			
	            read (channel)
	            w0$(1)=k$(1,6)+k$(10)
	            break
				
		swend
		

rem --- Get warehouse record
        
        extract record (itemwhse_dev, key=firm_id$+whse$+item$, dom=remove_rec) itemwhse_rec$
        
		rem on o0 goto Update_PriceList,Update_StdCost,Reverse_ListPrice
		
		switch o0
		
			case price_change
			
				itemwhse_rec.pri_price_cd$ = itemwhse_rec.cur_price_cd$
				itemwhse_rec.pri_price     = itemwhse_rec.cur_price
				itemwhse_rec.cur_price_cd$ = pricechg_rec.price_code$
				itemwhse_rec.cur_price     = pricechg_rec.unit_price
				
				break
			
			case cost_change
			
				itemwhse_rec.unit_cost = pricechg_rec.unit_price
				itemwhse_rec.std_cost  = pricechg_rec.unit_price

rem --- Update Lot/Serial Standard Cost

				if ls$="Y" then 

					read (lsmaster_dev,key=firm_id$+itemwhse_rec.WAREHOUSE_ID$+itemwhse_rec.ITEM_ID$,dom=*next)
    While more
        ivm07a_key$=key(lsmaster_dev,end=Update_WhseRecord)
        if pos(itemwhse_rec.FIRM_ID$+itemwhse_rec.WAREHOUSE_ID$+itemwhse_rec.ITEM_ID$=ivm07a_key$)<>1
            cntr2=1
            break
        endif
        extract record (lsmaster_dev,key=ivm07a_key$) lsmaster_rec$
        lsmaster_rec.UNIT_COST=pricechg_rec.UNIT_PRICE
        lsmaster_rec.STD_COST=pricechg_rec.UNIT_PRICE
        write record (lsmaster_dev,key=ivm07a_key$) lsmaster_rec$
    Wend
    if cntr2=1
        break
    endif
	
	
			case price_reversal
			
Reverse_ListPrice: rem --- Reverse list price

    x$=itemwhse_rec.CUR_PRICE_CODE$
    x=itemwhse_rec.CUR_PRICE
    itemwhse_rec.CUR_PRICE_CODE$=itemwhse_rec.PRI_PRICE_CODE$
    itemwhse_rec.CUR_PRICE=itemwhse_rec.PRI_PRICE

rem    x=b[9],itemwhse_rec.CUR_PRICE_CODE$=itemwhse_rec.PRI_PRICE_CODE$,b[9]=b[10]

    itemwhse_rec.PRI_PRICE_CODE$=x$
    itemwhse_rec.PRI_PRICE=x
    break
Wend

Update_WhseRecord: rem --- Update warehouse record

    write record (ivm02_dev,key=itemwhse_rec.FIRM_ID$+itemwhse_rec.WAREHOUSE_ID$+itemwhse_rec.ITEM_ID$) itemwhse_rec$


Remove_Rec: rem --- Main Loop Ends

remove (channel,key=k$,dom=done)
Wend

done: rem --- All done

    call pgmdir$+"adc_batchdelete.aon",status
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
