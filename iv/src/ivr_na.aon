rem --- Inventory Valuation Report (Input Overlay)
rem --- Program ivr_na v8.0.0 09Jul2007 (ivr_na)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:53:19)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0605)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0181)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0188)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0203)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0204)
rem --- v7.x Administrator reference ["sys-01"] (Line 0210)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0221)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0234)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0239)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0258)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0263)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0305)
rem --- BBx reference ["syc_ra.bbx"] (Line 0305)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0366)
rem --- BBx reference ["syc_rs.bbx"] (Line 0366)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0386)
rem --- BBx reference ["syc_rs.bbx"] (Line 0386)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0405)
rem --- BBx reference ["syc_rs.bbx"] (Line 0405)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0424)
rem --- BBx reference ["syc_rs.bbx"] (Line 0424)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0426)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0450)
rem --- BBx reference ["syc_rs.bbx"] (Line 0450)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0452)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0476)
rem --- BBx reference ["syc_rs.bbx"] (Line 0476)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0478)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0502)
rem --- BBx reference ["syc_rs.bbx"] (Line 0502)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0504)
rem --- BBx reference ["ivc_ia.bbx"] (Line 0518)
rem --- v7.x Administrator reference ["syc_li.bbx"] (Line 0522)
rem --- BBx reference ["syc_li.bbx"] (Line 0522)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0526)
rem --- BBx reference ["syc_rs.bbx"] (Line 0526)
rem --- BBx reference ["ivc_ia.bbx"] (Line 0541)
rem --- v7.x Administrator reference ["syc_li.bbx"] (Line 0545)
rem --- BBx reference ["syc_li.bbx"] (Line 0545)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0549)
rem --- BBx reference ["syc_rs.bbx"] (Line 0549)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0573)
rem --- BBx reference ["syc_rs.bbx"] (Line 0573)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0575)
rem --- BBx reference ["ivr_nb.bbx"] (Line 0671)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0687)
rem --- BBx reference ["syc_rs.bbx"] (Line 0687)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0688)
rem --- BBx reference ["syc_rs.bbx"] (Line 0688)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0704)
rem --- BBx reference ["syc_rs.bbx"] (Line 0704)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0715)
rem --- BBx reference ["syc_rs.bbx"] (Line 0715)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0727)
rem --- BBx reference ["syc_rs.bbx"] (Line 0727)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0738)
rem --- BBx reference ["syc_rs.bbx"] (Line 0738)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0740)
rem --- BBx reference ["syc_rs.bbx"] (Line 0740)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- CLEAR statement removed [clear_text:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0156)
rem --- Cross-reference file ivm-03 referenced (Line 0224)
rem --- Cross-reference file ivm-03 referenced (Line 0229)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0168)

rem --- The following IOLIST's were removed from this program:

rem --- ars01a: iolist p0$,p1$,p2$,p3$
rem --- gls01a: iolist g0$,g1$,g2$,g3$,g4$,m0$
rem --- ivm01a: iolist a0$(1),a1$(1),a2$(1),a3$(1),a4$(1),a5$,a6$,a[all]
rem --- ivm10a: iolist x0$(1)
rem --- ivm10c: iolist x0$(1)
rem --- ivm15a: iolist y0$(1),y1$(1)

rem --- The following channel references have been identified:

rem --- arm10a: Channel reference (Line 0300)

rem --------------------------------------------------------------------------------
rem --- glm01a: Channel reference (Line 0299)
rem --- glw04a: Channel reference (Line 0298)
rem --- ivm02a: Channel reference (Line 0290)
rem --- ivm03a: Channel reference (Line 0289)
rem --- ivm04a: Channel reference (Line 0295)
rem --- ivm07a: Channel reference (Line 0294)
rem --- ivm12a: Channel reference (Line 0286)
rem --- ivm14a: Channel reference (Line 0285)
rem --- ivm17a: Channel reference (Line 0291)
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0281)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-10"
    files$[3]="glm-01"
    files$[4]="glw-04"
    files$[5]="ivm-01"
    files$[6]="ivm-02"
    files$[7]="ivm-03"
    files$[8]="ivm-04"
    files$[9]="ivm-07"
    files$[10]="ivm-10"
    files$[11]="ivm-12"
    files$[12]="ivm-14"
    files$[13]="ivm-15"
    files$[14]="ivm-17"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm10_dev=channels[2]
    glm01_dev=channels[3]
    glw04_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm03_dev=channels[7]
    ivm04_dev=channels[8]
    ivm07_dev=channels[9]
    ivm10_dev=channels[10]
    ivm12_dev=channels[11]
    ivm14_dev=channels[12]
    ivm15_dev=channels[13]
    ivm17_dev=channels[14]

rem --- Dimension string templates

    dim arm10a$:templates$[2],glm01a$:templates$[3],glw04a$:templates$[4],
:       ivm01a$:templates$[5],ivm02a$:templates$[6],ivm03a$:templates$[7],
:       ivm04a$:templates$[8],ivm07a$:templates$[9],ivm10a$:templates$[10],
:       ivm12a$:templates$[11],ivm14a$:templates$[12],ivm15a$:templates$[13],
:       ivm17a$:templates$[14]

rem --- Retrieve miscellaneous templates

    files=5,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivm-10C"
    ids$[4]="ivs-01A"
    ids$[5]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],gls01a$:templates$[2],ivm10c$:templates$[3],
:       ivs01a$:templates$[4],sys01a$:templates$[5]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=15
    dim files$[files],fileoptions$[files],channels[files],iparams[3]
    files$[1]="sys-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-03"
    files$[5]="ivm-10"
    files$[6]="ivm-12"
    files$[7]="ivm-14"
    files$[8]="ivm-15"
    files$[9]="ivm-03"
    call pgmdir$+"adc_fileopen.aon",1,1,8,files$[all],fileoptions$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm10_dev=channels[5]
    ivm12_dev=channels[6]
    ivm14_dev=channels[7]
    ivm15_dev=channels[8]
    ivm03_dev2=channels[9]

rem --- Parameters

    dim p[5],g[5],info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    ls$="N"
    lf$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    p[2]=num(i2$(7,2))
    p[3]=num(i2$(9,2))
    p[4]=num(i2$(11,2))
    p[5]=num(i2$(13,2))
    iparams[0]=p[0]
    iparams[1]=p[3]
    iparams[2]=p[4]
    iparams[3]=p[5]
    if i3$(3,1)<>"N" lf$="Y"
    if i3$(17,1)<>"N" ls$="Y"
    call pgmdir$+"adc_application.aon",n2$,info$[all]
    gl$=info$[9]
    ar$="N"
    di$="N"
    cost$=i3$(8,1)
    if gl$="N" goto l500
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g[4]=num(g2$(9,2))
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$="N" goto l500
    find record (sys01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    di$=p3$(11,1)

l500: rem --- Initializations

    precision p[1]
    dim files[15],params$[3],options$[7],b[12],headings$[7],x0$(32)
    dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],y0$(5),y1$(20)
    files[1]=ivm01_dev
    files[10]=ivm10_dev
    files[14]=ivm14_dev
    files[15]=ivm15_dev
    params$[0]=firm_id$
    params$[1]=i1$
    params$[2]=i2$
    params$[3]=i3$
    level$="D"
    include$="N"
    pagebreak$="N"
    whichqty$="B"
    if lf$="Y" whichqty$="O"

rem --- Additional File Opens

    if ls$="Y" files$[10]="ivm-07",files$[11]="ivm-17"
    if lf$="Y" files$[12]="ivm-04"
    if gl$="Y" files$[13]="glm-01",files$[14]="glw-04",fileoptions$[14]="C"
    if di$="Y" files$[15]="arm-10"
    call pgmdir$+"adc_fileopen.aon",1,10,files,files$[all],fileoptions$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[10]
    ivm17_dev=channels[11]
    ivm04_dev=channels[12]
    glm01_dev=channels[13]
    glw04_dev=channels[14]
    arm10_dev=channels[15]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    main_context=resparams[0]
    gosub flow_initializations
    goto flow_control

rem --- Display default values

l1000: rem --- Costing method

    v4$="Enter The Costing Method To Use (A=Average/S=Standard/R=Replacement/L=Landed)"
    v0$="S"
    v1$="CE"
    v2$=cost$
    v3$="ASRL"
    v0=1
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1050,l1000,flow_control,l1000,flow_control,l1050,flow_control
l1050:
    cost$=v$
    goto flow_control

l1200: rem --- Detail Level

    v4$="P=Totals By Product Type     S=Summary By Item     D=Detail ByItem"
    v0$="S"
    v1$="CE"
    v2$=level$
    v3$="PSD"
    v0=1
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1250,l1200,flow_control,l1200,flow_control,l1250,flow_control
l1250:
    level$=v$
    if level$="P" include$="N",pagebreak$="N"; rem ",WHICHQTY$="B"
    goto flow_control

l1600: rem --- Include zero balance items?

    v0$="Y"
    v1$="C"
    v2$=include$
    v3$=""
    v0=1
    v1=40
    v2=12
    v$="N"
    if level$="P" goto l1650
    v4$="Include Items With Zero Balances On This Report (Y/N)?"
    control_id=3009
    gosub std_input
    on v3 goto l1650,l1600,flow_control,l1600,flow_control,l1650,flow_control
l1650:
    include$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3009,include$,0,"",status
    goto flow_control

l1800: rem --- Page break by product type?

    v0$="Y"
    v1$="C"
    v2$=pagebreak$
    v3$=""
    v0=1
    v1=40
    v2=13
    v$="N"
    if level$="P" goto l1850
    v4$="Page Break When Product Type Changes (Y/N)?"
    control_id=3010
    gosub std_input
    on v3 goto l1850,l1800,flow_control,l1800,flow_control,l1850,flow_control
l1850:
    pagebreak$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3010,pagebreak$,0,"",status
    goto flow_control

l2000: rem --- Ending Balance or Qty On Hand?

    if level$="P" or lf$="Y" goto flow_control
    v0$="S"
    v1$="C"
    v2$=whichqty$
    v3$="BO"
    v0=1
    v1=40
    v2=14
    v4$="Calculate Total Value Using Ending Balance Or Quantity On Hand(B/O)?"
    control_id=3011
    gosub std_input
    on v3 goto l2050,l2000,flow_control,l2000,flow_control,l2050,flow_control
l2050:
    whichqty$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3011,whichqty$,0,"",status
    goto flow_control

l2200: rem --- Beginning Warehouse

    v4$="Enter The Beginning Warehouse To Include On This Report (<F1>=First/<F3>=Lookup)"
    x$="First"
    v0$="S"
    v1$="C"
    v2$=options$[1]
    v3$=""
    v0=2
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l2300,l2250,flow_control,l2270,flow_control,l2300,flow_control
l2250:
    if v3=1 v$="",options$[1]=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13002,"First",0,"",status; goto flow_control
l2270:
    call pgmdir$+"ivc_lk.bbx",3,v1,v2,v$
l2300:

    gosub l5300
    if xstatus goto l2200
    options$[1]=v$
    goto flow_control

l2400: rem --- Ending Warehouse

    v4$="Enter The Ending Warehouse To Include On This Report (<F1>=Last/<F3>=Lookup)"
    x$="Last"
    v0$="S"
    v1$="C"
    v2$=options$[2]
    v3$=""
    v0=2
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l2500,l2450,flow_control,l2470,flow_control,l2500,flow_control
l2450:
    if v3=1 v$="",options$[2]=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13003,"Last",0,"",status; goto flow_control
l2470:
    call pgmdir$+"ivc_lk.bbx",3,v1,v2,v$
l2500:

    gosub l5300
    if xstatus goto l2400
    options$[2]=v$
    goto flow_control

l2600: rem --- Beginning Product

    v4$="Enter The Beginning Product To Include On This Report (<F1>=First/<F3>=Lookup)"
    x$="First"
    v0$="S"
    v1$="C"
    v2$=options$[3]
    v3$=""
    v0=3
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l2700,l2650,flow_control,l2670,flow_control,l2700,flow_control
l2650:
    if v3=1 v$="",options$[3]=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13004,"First",0,"",status; goto flow_control
l2670:
    call pgmdir$+"ivc_lk.bbx",1,v1,v2,v$
l2700:

    gosub l5400
    if xstatus goto l2600
    options$[3]=v$
    goto flow_control

l2800: rem --- Ending Product

    v4$="Enter The Ending Product To Include On This Report (<F1>=Last/<F3>=Lookup)"
    x$="Last"
    v0$="S"
    v1$="C"
    v2$=options$[4]
    v3$=""
    v0=3
    v1=40
    v2=8
    control_id=3005
    gosub std_input
    on v3 goto l2900,l2850,flow_control,l2870,flow_control,l2900,flow_control
l2850:
    if v3=1 v$="",options$[4]=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13005,"Last",0,"",status; goto flow_control
l2870:
    call pgmdir$+"ivc_lk.bbx",1,v1,v2,v$
l2900:

    gosub l5400
    if xstatus goto l2800
    options$[4]=v$
    goto flow_control

l3000: rem --- Beginning Item

    v2$=options$[5]
    v4$="Enter The Beginning Item To Include On This Report (<F1>=First/<F3>=Lookup)"
    control_id=3006
    dim item$[6],item[12]
    call pgmdir$+"ivc_ia.bbx","N",40,9,files[all],firm_id$,v2$,v4$,iparams[all],item$[all],item[all],v3,i0,i0_done,validate,my_context,event$
    v$=item$[0]
    on v3 goto l3070,l3050,flow_control,l3045,flow_control,l3070,flow_control
l3045:
    v$=""; call pgmdir$+"syc_li.bbx"
    v$; if v$="" goto l3000 else goto l3070
l3050:
    if v3=1 v$="",options$[5]=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13006,"First",0,"",status; goto flow_control
l3070:

    x$="First"
    gosub l5500
    if xstatus goto l3000
    options$[5]=v$
    goto flow_control

l3200: rem --- Ending Item

    v2$=options$[6]
    v4$="Enter The Ending Item To Include On This Report (<F1>=Last/<F3>=Lookup)"
    control_id=3007
    dim item$[6],item[12]
    call pgmdir$+"ivc_ia.bbx","N",40,10,files[all],firm_id$,v2$,v4$,iparams[all],item$[all],item[all],v3,i0,i0_done,validate,my_context,event$
    v$=item$[0]
    on v3 goto l3270,l3250,flow_control,l3245,flow_control,l3270,flow_control
l3245:
    v$=""; call pgmdir$+"syc_li.bbx"
    v$; if v$="" goto l3200 else goto l3270
l3250:
    if v3=1 v$="",options$[6]=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13007,"Last",0,"",status; goto flow_control
l3270:

    x$="Last"
    gosub l5500
    if xstatus goto l3200
    options$[6]=v$
    goto flow_control

l3400: rem --- Item Type

    v4$="Enter A Selected Item Type To Include On This Report (<F1>=All/<F3>=Lookup)"
    v0$="S"
    v1$="C"
    v2$=options$[7]
    v3$=""
    v0=3
    v1=40
    v2=11
    control_id=3008
    gosub std_input
    on v3 goto l3500,l3450,flow_control,l3470,flow_control,l3500,flow_control
l3450:
    if v3=1 v$="",v3=0,options$[7]=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13008,"All",0,"",status; goto flow_control
l3470:
    call pgmdir$+"ivc_lk.bbx",6,v1,v2,v$
l3500:

    gosub l5600
    if xstatus goto l3400
    if v$<>"" v$=v$+fill(v0),v$=v$(1,v0)
    options$[7]=v$
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case 5; let i0=i0+1; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l2200,l2400,l2600,l2800,l3000,l3200,l3400,l1600,l1800,l2000,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Set option variables

    begwhse$=options$[1]
    endwhse$=options$[2]
    begprod$=options$[3]
    endprod$=options$[4]
    begitem$=options$[5]
    enditem$=options$[6]
    type$=options$[7]
    headings$[0]=sysinfo.firm_name$
    h3$="All Item Types"
    h1=4
    let headings$[1]=sysinfo.task_desc$+" For Period "+i4$(1,2)+" "+fnyy$(i4$(3,2)),h2=5
    if type$<>"" h3$="Item Type "+cvs(type$,2)
    if include$="Y" h4$="Including Zero Balances" else h4$="NoZero Balances"
    if whichqty$="B" h5$="Using Ending Balances" else h5$="Using Quantity On Hand"
    let headings$[2]=h4$+" "+h5$
    on pos(level$="PSD") goto std_exit,l4200,l4300,l4400

l4200: rem --- Product totals

    let format=1,headings=7,h1=5,h2=6
    let headings$[3]="Product Type Totals For "+h3$
    let whse1$="First",whse2$="Last",x0$(6,24)="(Not On File)"
    if begwhse$="" goto l4250
    find record (ivm10_dev,key=firm_id$+"C"+begwhse$,dom=*next) ivm10c$
    let whse1$=x0$(4,2)+" "+cvs(x0$(6,24),2),x0$(6,24)="(Not On File)"
l4250:
    if endwhse$="" goto l4270
    find record (ivm10_dev,key=firm_id$+"C"+endwhse$,dom=*next) ivm10c$
    let whse2$=x0$(4,2)+" "+cvs(x0$(6,24),2)
l4270:
    let whse1$="From Warehouse: "+whse1$,whse2$="  To Warehouse: "+whse2$
    let whse=max(len(whse1$),len(whse2$)),h1=5,h2=6
    goto l4900

l4300: rem --- Summary by item

    let format=2,headings=6,headings$[1]="Summary "+headings$[1]
    goto l4900

l4400: rem --- Detail report

    let format=3,headings=6,headings$[1]="Detail "+headings$[1]
    if ls$="Y" format=6
    if lf$="Y" format=5
    if ls$="Y" and lf$="Y" format=4

l4900: rem --- Run report overlay

    run pgmdir$+"ivr_nb.bbx"
display_fields:
    let control_id=3000,cid_cnt=0
l5002:
    if cid_cnt=0 disp_inp$=cost$,disp_desc$=""
    if cid_cnt=1 disp_inp$=level$,disp_desc$=""
    if cid_cnt=2 if options$[1]="" disp_inp$=options$[1],disp_desc$="First" else v$=options$[1]; gosub l5300; let disp_inp$=options$[1],disp_desc$=x$
    if cid_cnt=3 if options$[2]="" disp_inp$=options$[2],disp_desc$="Last" else v$=options$[2]; gosub l5300; let disp_inp$=options$[2],disp_desc$=x$
    if cid_cnt=4 if options$[3]="" disp_inp$=options$[3],disp_desc$="First" else v$=options$[3]; gosub l5400; let disp_inp$=options$[3],disp_desc$=x$
    if cid_cnt=5 if options$[4]="" disp_inp$=options$[4],disp_desc$="Last" else v$=options$[4]; gosub l5400; let disp_inp$=options$[4],disp_desc$=x$
    if cid_cnt=6 if options$[5]="" disp_inp$=options$[5],disp_desc$="First" else v$=options$[5]; gosub l5500; let disp_inp$=options$[5],disp_desc$=x$
    if cid_cnt=7 if options$[6]="" disp_inp$=options$[6],disp_desc$="Last" else v$=options$[6]; gosub l5500; let disp_inp$=options$[6],disp_desc$=x$
    if cid_cnt=8 if options$[7]="" disp_inp$=options$[7],disp_desc$="All" else v$=options$[7]; gosub l5600; let disp_inp$=options$[7],disp_desc$=x$
    if cid_cnt=9 disp_inp$=include$,disp_desc$=""
    if cid_cnt=10 disp_inp$=pagebreak$,disp_desc$=""
    if cid_cnt=11 disp_inp$=whichqty$,disp_desc$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5002
l5050:
    let disp_inp$="",disp_desc$=""
    return

l5300: rem --- Warehouse

    let xstatus=0
    if v$="" goto l5380
    let x$="",xstatus=1,x0$(1)=firm_id$+"C"+v$
    find record (ivm10_dev,key=x0$(1,5),dom=l5380) ivm10c$
    let xstatus=0,v$=x0$(4,2),x$=x0$(6,24)
l5380:
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,x$,0,"",status
    return

l5400: rem --- Product

    let xstatus=0
    if v$="" goto l5480
    let x$="",xstatus=1,x0$(1)=firm_id$+"A"+v$
    find record (ivm10_dev,key=x0$(1,6),dom=l5480) ivm10a$
    let xstatus=0,v$=x0$(4,3),x$=x0$(7,20)
l5480:
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,x$,0,"",status
    return

l5500: rem --- Item

    let xstatus=0
    if v$="" goto l5580
    let x$="",xstatus=1,a0$(1)=firm_id$+v$
    find record (ivm01_dev,key=a0$,dom=l5580) ivm01a$
    let xstatus=0,v$=a0$(3),x$=fnitem$(a1$,p[3],p[4],p[5])
    if len(x$)>39 x$=x$(1,39)
l5580:
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,x$,0,"",status
    return

l5600: rem --- Item Type

    let x$="All",y0$(1)=firm_id$+v$,y1$(1)="",xstatus=0
    if v$="" goto l5680
    let xstatus=1
    find record (ivm15_dev,key=y0$,dom=l5650) ivm15a$
    let xstatus=0
l5650: let x$=y1$(1,20)
l5680: call pgmdir$+"syc_rs.bbx","",my_context,control_id,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,x$,0,"",status
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
