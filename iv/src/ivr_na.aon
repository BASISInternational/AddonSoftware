rem --- Inventory Valuation Report (Input Overlay)
rem --- Program ivr_na v8.0.0 09Jul2007 (ivr_na)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:53:19)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=18,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ARC_TERMCODE",ids$[2]=files$[2]
    files$[3]="glm-01",ids$[3]="GLM_ACCT"
    files$[4]="glw-04",ids$[4]="GLW_ACCTTOTALS"
    files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
    files$[6]="ivm-02",ids$[6]="IVM_ITEMWHSE"
    files$[7]="ivm-03",ids$[7]="IVX_ITEMPROD"
    files$[8]="ivm-04",ids$[5]="IVM_ITEMTIER"
    files$[9]="ivm-07",ids$[9]="IVM_LSMASTER"
    files$[10]="IVC_PRODCODE",ids$[10]=files$[10]
    files$[11]="ivm-12",ids$[11]="IVM_ITEMACT"
    files$[12]="ivm-14",ids$[12]="IVM_ITEMSYN"
    files$[13]="ivm-15",ids$[13]="IVC_TYPECODE"
    files$[14]="ivm-17",ids$[15]="IVM_LSACT"
    files$[15]="ARS_PARAMS",ids$[15]=files$[15]
    files$[16]="GLS_PARAMS",ids$[16]=files$[16]
    files$[17]="IVC_WHSECODE",ids$[17]=files$[17]
    files$[18]="IVS_PARAMS",ids$[18]=files$[18]


    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm10_dev=channels[2]
    glm01_dev=channels[3]
    glw04_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm03_dev=channels[7]
    ivm04_dev=channels[8]
    ivm07_dev=channels[9]
    ivm10a_dev=channels[10]
    ivm12_dev=channels[11]
    ivm14_dev=channels[12]
    ivm15_dev=channels[13]
    ivm17_dev=channels[14]
    ars01a_dev=channels[15]
    gls01a_dev=channels[16]
    ivm10c_dev=channels[17]
    ivs01a_dev=channels[18]



rem --- Dimension string templates

    dim arm10a$:templates$[2],glm01a$:templates$[3],glw04a$:templates$[4],
:       ivm01a$:templates$[5],ivm02a$:templates$[6],ivm03a$:templates$[7],
:       ivm04a$:templates$[8],ivm07a$:templates$[9],ivm10a$:templates$[10],
:       ivm12a$:templates$[11],ivm14a$:templates$[12],ivm15a$:templates$[13],
:       ivm17a$:templates$[14],
:       ars01a$:templates$[15],gls01a$:templates$[16],ivm10c$:templates$[17],ivs01a$:templates$[18]



rem --- Assign form input values to local variables
    cost$=option!.getOptionData("cost_method")
    detailedlevel$=option!.getOptionData("detailedlevel")
    begwhse$=option!.getOptionData("whse_id_1")
    endwhse$=option!.getOptionData("whse_id_2")
    begprod$=option!.getOptionData("prod_id_1")
    endprod$=option!.getOptionData("prod_id_2")
    begitem$=option!.getOptionData("item_1")
    enditem$=option!.getOptionData("item_2")
    itemtype$=option!.getOptionData("item_type")
    include$=option!.getOptionData("include")
    ptype$=option!.getOptionData("product_type")
    qty$=option!.getOptionData("qty_on_hand")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
   
rem --- Parameters

    dim p[5],g[5],info$[20]
    firm_id$=sysinfo.firm_Id$
    n2$="IV"
    ls$="N"
    lf$="N"
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    p[2]=num(ivs01a.lot_no_len$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    if ivs01a.lifofifo$<>"N" lf$="Y"
    if ivs01a.lotser_flag$<>"N" ls$="Y"
    call pgmdir$+"adc_application.aon",n2$,info$[all]
    gl$=info$[9]
    ar$="N"
    di$="N"
    cost$=ivs01a.cost_method$
    if gl$<>"N" then
        find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
        g[4]=num(gls01a.max_acct_len$)
        call pgmdir$+"adc_application.aon","AR",info$[all]
        ar$=info$[20]
        if ar$<>"N" then
            find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
            di$=ars01a.dist_by_item$
        endif
    endif
rem --- Initializations

    precision num(ivs01a.precision$)
    dim headings$[7]
    rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],y0$(5),y1$(20)
    level$="D"
    include$="N"
    pagebreak$="N"
    whichqty$="B"
    if lf$="Y" whichqty$="O"

rem --- Run Overlay

    run pgmdir$+"ivr_nb.bbx"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
