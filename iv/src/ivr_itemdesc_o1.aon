rem ivr - Inventory Description Listing
rem Program ivr_itemdesc v8.0.0 01Apr2006 (ivr_tb)
rem Created by adx_progconv.bbx v1.0.0 (04/01/2006 08:55:19)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- Get program path

    pgmdir$=fnglobal$("+DIR_PGM","")

rem --- Document initializations
                OutVect!=bbjAPI().getSysGui().makeVector()
                rep_date$=date(0:"%Mz/%Dz/%Yd")
                rep_date_stamp$=date(0:"%Yd%Mz%Dz")
                rep_time$=date(0:"%hz:%mz %p")
                rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Initialize HEADINGS$

                dim h3$(width),h4$(width),h6$(width)
                x1$="First"
                x2$="First"
                x2=5
                if begitem$<>"" x1$=begitem$
                if begprod$<>"" x2$=begprod$,x2=3
                if endprod$="" if x2=3 x2=4
                h3$(1)="From Item: "+x1$
                h3$(width-x2-13)="From Product: "+x2$
                x1$="Last"
                x2$="Last"
                x3$="All Item Types"
                if enditem$<>"" x1$=enditem$
                if endprod$<>"" x2$=endprod$
                if type$<>"" x3$="Item Type "+type$
                h4$(1)="     To Item:"+x1$
                h4$(fncenter(x3$,width))=x3$
                h4$(width-x2-16)="To Product: "+x2$
                if p[4]>0 h6$(p[0]+segment1+2)=segment2$
                if p[5]>0 h6$(p[0]+segment1+segment2+3)=segment3$
                headings$[3]=h3$
                headings$[4]=h4$
                headings$[6]=h6$

rem ----Column Heading

                dim columns$[1,10]
                    columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="8"
                    columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="25"

rem --- Position files


                call pgmdir$+"adc_progress.aon","NC",sysinfo.task_desc$,"","Printing","",p[0],ivm01_dev,1,0,ignore_status
                read record (ivm01_dev,key=sysinfo.firm_id$+begitem$,dom=next_ivm01)ivm01a$
                goto range_checks

next_ivm01: rem --- Next Item

                k$=key(ivm01_dev,end=done)
                if pos(sysinfo.firm_id$=k$)<>1 goto done
                if enditem$<>"" if k$(3)>enditem$ goto done
                read record (ivm01_dev)ivm01a$

range_checks: rem --- Update progress meter and perform range checks

                call pgmdir$+"adc_progress.aon","S","","","",ivm01a.item_id$(1,p[0]),0,0,1,0,ignore_status
                if begprod$<>"" if ivm01a.product_type$<begprod$ goto ivm01_loop
                if endprod$<>"" if ivm01a.product_type$>endprod$ goto ivm01_loop
                if type$<>"" if ivm01a.item_class$<>type$ goto ivm01_loop

rem --- Print detail line


                        OutVect!.addItem(ivm01a.item_id$(1,p[0]))
                        OutVect!.addItem(ivm01a.item_desc$(1,p[3]))
                        OutVect!.addItem(ivm01a.item_desc$(p[3]+1,p[4]))
                        OutVect!.addItem(ivm01a.item_desc$(p[3]+p[4]+1,p[5]))                
                        number=number+1

ivm01_loop: rem --- Loop back for next record

                        goto next_ivm01

done: rem --- All done


                        OutVect!.addItem("")
                        OutVect!.addItem(str(number)+"Item(s) Listed")
                        goto std_exit



rem --- Functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=globalstr_exit)
        globalstr_exit:
        return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
