rem --- Rebuild Beginning Balances (Input Overlay)
rem --- Program ivx_ba v8.0.0 09Jul2007 (ivx_ba)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:55:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0420)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0149)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0155)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0168)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0169)
rem --- v7.x Administrator reference ["sys-01"] (Line 0175)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0189)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0202)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0206)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0207)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0250)
rem --- BBx reference ["syc_ra.bbx"] (Line 0250)
rem --- BBx reference ["ivc_ib.bbx"] (Line 0296)
rem --- v7.x sys-01 reference [sys01_dev,pe] (Line 0421)
rem --- BBx reference ["ivc_ib.bbx"] (Line 0518)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0523)
rem --- BBx reference ["syc_rs.bbx"] (Line 0523)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0524)
rem --- BBx reference ["syc_rs.bbx"] (Line 0524)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0525)
rem --- BBx reference ["syc_rs.bbx"] (Line 0525)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0532)
rem --- BBx reference ["syc_rs.bbx"] (Line 0532)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0533)
rem --- BBx reference ["syc_rs.bbx"] (Line 0533)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0540)
rem --- BBx reference ["syc_rs.bbx"] (Line 0540)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0541)
rem --- BBx reference ["syc_rs.bbx"] (Line 0541)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0546)
rem --- BBx reference ["syc_rs.bbx"] (Line 0546)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- BEGIN statement removed [begin_lot:]
rem --- START statement removed [start_itaic:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0126)
rem --- Cross-reference file ivm-03 referenced (Line 0192)
rem --- Cross-reference file ivm-03 referenced (Line 0433)
rem --- Cross-reference file ivm-03 referenced (Line 0437)
rem --- Cross-reference file ivm-03 referenced (Line 0455)
rem --- Cross-reference file ivm-03 referenced (Line 0460)
rem --- Cross-reference file ivm-03 referenced (Line 0465)
rem --- Cross-reference file ivm-03 referenced (Line 0470)
rem --- Cross-reference file ivm-03 referenced (Line 0476)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0138)

rem --- The following IOLIST's were removed from this program:

rem --- gls01a: iolist g0$,g1$,g2$,g3$(1),g4$
rem --- ivm01a: iolist a0$(1),a1$,a2$(1)
rem --- ivm02a: iolist b0$(1),b1$(1),b2$,b[all]
rem --- ivm07a: iolist l0$(1),l1$(1),l[all]
rem --- ivm12a: iolist c0$(1),c1$,c2$,c[all]
rem --- ivm17a: iolist c0$(1),c1$,c2$,c[all]
rem --- ivt01a: iolist w0$(1),w1$(1),w2$(1),w3$,w[all]
rem --- ivt04a: iolist w0$(1),w1$(1),w2$(1),w3$,w[all]

rem --- The following channel references have been identified:

rem --- ivm03a: Channel reference (Line 0253)

rem --------------------------------------------------------------------------------
rem --- ivm10a: Channel reference (Line 0252)
rem --- ivm14a: Channel reference (Line 0251)
rem --- ivm15a: Channel reference (Line 0250)
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0248)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=12,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-03"
    files$[5]="ivm-07"
    files$[6]="ivm-10"
    files$[7]="ivm-12"
    files$[8]="ivm-14"
    files$[9]="ivm-15"
    files$[10]="ivm-17"
    files$[11]="ivt-01"
    files$[12]="ivt-04"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm07_dev=channels[5]
    ivm10_dev=channels[6]
    ivm12_dev=channels[7]
    ivm14_dev=channels[8]
    ivm15_dev=channels[9]
    ivm17_dev=channels[10]
    ivt01_dev=channels[11]
    ivt04_dev=channels[12]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm03a$:templates$[4],
:       ivm07a$:templates$[5],ivm10a$:templates$[6],ivm12a$:templates$[7],
:       ivm14a$:templates$[8],ivm15a$:templates$[9],ivm17a$:templates$[10],
:       ivt01a$:templates$[11],ivt04a$:templates$[12]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="gls-01A"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim gls01a$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=12
    dim files$[files],fileoptions$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-03"
    files$[5]="ivm-10"
    files$[6]="ivm-12"
    files$[7]="ivt-04"
    files$[8]="ivm-15"
    files$[9]="ivm-07"
    files$[10]="ivm-17"
    files$[11]="ivt-01"
    files$[12]="ivm-14"
    call pgmdir$+"adc_fileopen.aon",1,1,12,files$[all],fileoptions$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm10_dev=channels[5]
    ivm12_dev=channels[6]
    ivt04_dev=channels[7]
    ivm14_dev=channels[12]
    ivm15_dev=channels[8]

rem --- Parameters

    dim p[5],g[1],g3$(325)
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    ls$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    p[2]=num(i2$(7,2))
    p[3]=num(i2$(9,2))
    p[4]=num(i2$(11,2))
    p[5]=num(i2$(13,2))
    g[0]=num(g2$(1,2))
    if pos(i3$(17,1)="SL")>0 ls$="Y"

rem --- Initializations

    precision p[1]
    dim files[15],params$[3],options$[7],l0$(44),l1$(96),l[12]
    dim a0$(22),a2$(64),b0$(24),b1$(64),b[20]
    files[1]=ivm01_dev
    files[10]=ivm10_dev
    files[14]=ivm14_dev
    params$[0]=firm_id$
    params$[1]=i1$
    params$[2]=i2$
    params$[3]=i3$
    m9$="00"
    period$=i4$(1,2)
    year$=i4$(3,2)
    include$="Y"
    beglot$=""
    endlot$=""
    files[15]=ivm15_dev

rem --- Additional file opens

    if ls$="N" goto l700
    call pgmdir$+"adc_fileopen.aon",1,9,11,files$[all],fileoptions$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[9]
    ivm17_dev=channels[10]
    ivt01_dev=channels[11]

l700: rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    gosub display_fields

period: rem --- Period

    v0$="N"
    v1$="C"
    v2$=period$
    v3$=m9$
    v0=2
    v1=40
    v2=3
    i0=0
    v4$="Enter The Period To Rebuild Balances For (1 Through "+str(g[0])+")",control_id=3000
    gosub std_input
    on v3 goto l1050,period,flow_control,period,flow_control,l1050,flow_control
l1050:
    if v<1 or v>g[0] goto period
    period$=str(v:m9$)
    period=v
    gosub d_period
    goto flow_control

year: rem --- Year

    v0$="D"
    v1$="CY"
    v2$=year$
    v3$=""
    v0=2
    v1=40
    v2=4
    v4$="Enter The Year To Rebuild Balances For"
    control_id=3001
    gosub std_input
    on v3 goto l1250,year,flow_control,year,flow_control,l1250,flow_control
l1250:
    if v$="" goto year
    year$=v$
    gosub d_year
    goto flow_control

ivc_input: rem --- Process standard input

    call pgmdir$+"ivc_ib.bbx","I","D",40,5,files[all],params$[all],options$[all],my_context,i0,1,i0_done,validate,v3
    on v3 goto l1430,ivc_input,flow_control,ivc_input,flow_control,l1430,flow_control
l1430:
    goto flow_control

rebuild_lot: rem --- Rebuild Lot/Serial Beginning Balances?

    if ls$="N" goto flow_control
    v4$="Rebuild Lot/Serial Beginning Balances (Y/N)?"
    v0$="Y"
    v1$="C"
    v2$=include$
    v3$=""
    v0=1
    v1=40
    v2=12
    control_id=3009
    gosub std_input
    on v3 goto l1650,rebuild_lot,flow_control,rebuild_lot,flow_control,l1650,flow_control
l1650:
    include$=v$
    v$=""
    goto flow_control

rem --- Beginning Lot/Serial Number

    if ls$="N" goto flow_control
    v4$="Enter The Beginning Lot/Serial Number (<F1>=First)"
    x$=""
    control_id=3010
    v0$="S"
    v1$="KCE"
    v2$=beglot$
    v3$=""
    v0=p[2]
    v1=40
    v2=13
    if include$="N" goto l1870
    gosub std_input
    on v3 goto l1860,l1850,flow_control,begin_lot,flow_control,l1860,flow_control
l1850:
    v$=""
    if endlot$<>"" and v$>endlot$ goto begin_lot
l1860:
    beglot$=v$
    x$="First"
l1870:
    gosub d_lot
    goto flow_control

end_lot: rem --- Ending Lot/Serial Number

    if ls$="N" goto flow_control
    v4$="Enter The Ending Lot/Serial Number (<F1>=Last)"
    x$=""
    control_id=3011
    v0$="S"
    v1$="KCE"
    v2$=endlot$
    v3$=""
    v0=p[2]
    v1=40
    v2=14
    if include$="N" goto l2080
    gosub std_input
    on v3 goto l2060,l2050,flow_control,end_lot,flow_control,l2060,flow_control
l2050:
    v$=""
l2060:
    endlot$=v$
    x$="Last"
    if beglot$<>"" if endlot$<beglot$ goto end_lot
    if endlot$<>"" x$=endlot$
l2080:
    gosub d_lot
    goto flow_control

flow_control: rem --- Flow Control

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2
    if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1)
    break
    case 4; exitto start_done
    case default; exitto done_v3
    swend
next_field:
    on i0 goto period,year,ivc_input,ivc_input,ivc_input,ivc_input,ivc_input,ivc_input,ivc_input,rebuild_lot,begin_lot,end_lot,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=0
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1
    goto next_field
cancel:
    goto std_exit

end_input: rem --- Run Overlay

rem --- Update initializations

    period=num(period$)
    year=fnyy_year(year$)
    call pgmdir$+"adc_perioddates.aon",sys01_dev,period,year,when$,x$,status
    begwhse$=options$[1]
    endwhse$=options$[2]
    begprod$=options$[3]
    endprod$=options$[4]
    begitem$=options$[5]
    enditem$=options$[6]
    type$=options$[7]
    first$=firm_id$+"C"
    k$=first$+begwhse$
    if include$="N" ls$="N"
    call pgmdir$+"adc_progress.aon","N","","","Updating","",7+p[0],0,1,meter_num,status
    read (ivm03_dev,key=k$,dom=*next)

l4200: rem --- Get next sort record

    k$=key(ivm03_dev,end=std_exit)
    if pos(first$=k$)<>1 goto std_exit
    whse$=k$(4,2)
    product$=k$(6,3)
    item$=k$(9)

rem --- By Warehouse: Valid Warehouse/Product/Item?

    if endwhse$<>"" if whse$>endwhse$ goto std_exit
    if begprod$<>"" if product$<begprod$ goto l4400
    if endprod$<>"" if product$>endprod$ goto l4450
    if begitem$<>"" if item$<begitem$ goto l4500
    if enditem$<>"" if item$>enditem$ goto l4550
    x$=whse$+" "+product$+" "+item$(1,p[0])
    goto l4600

l4400: rem --- Skip to beginning product for this warehouse'

    read (ivm03_dev,key=k$(1,5)+begprod$,dom=l4900)
    goto l4900

l4450: rem --- Skip to next warehouse

    read (ivm03_dev,key=k$(1,5)+$FF$,dom=l4900)
    goto l4900

l4500: rem --- Skip to beginning item

    read (ivm03_dev,key=k$(1,8)+begitem$,dir=0,dom=l4900)
    goto l4900

l4550: rem --- Skip to next product

    read (ivm03_dev,key=k$(1,8)+$FF$,dom=l4900)
    goto l4900

l4600: rem --- Update ivt-04 beginning balance

    call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,meter_num,status
    read (ivm03_dev)
    dim w0$(32),w1$(96),w2$(16),w[4],c0$(28),c[12]
    a0$(1)=firm_id$+item$
    b0$(1)=firm_id$+whse$+item$
    c0$(1)=firm_id$+whse$+item$+year$+period$
    w3$=""
    find record (ivm01_dev,key=a0$,dom=l4900) ivm01a$
    find record (ivm02_dev,key=b0$,dom=l4900) ivm02a$
    find record (ivm12_dev,key=c0$,dom=l4950) ivm12a$
    w0$(1)=b0$+when$+"00000"
    location$=b1$(1,10)
    qty=c[0]
    cost=b[11]
    gosub l6000
    write record (ivt04_dev,key=w0$) ivt04a$
    if ls$="N" goto l4900
    if include$="N" goto l4900
    read (ivm07_dev,key=b0$,dom=*next)

l4700: rem --- Next lot/serial number

    let k$=key(ivm07_dev,end=l4900)
    if pos(b0$=k$)<>1 goto l4900
    dim l0$(44),l1$(96),l[12],w0$(52),w1$(96),w2$(16),w[4],c0$(48),c[12]
    let c0$(1)=k$+year$+period$
    read record (ivm07_dev) ivm07a$
    find record (ivm17_dev,key=c0$,dom=*next) ivm17a$
    let w0$(1)=k$+when$+"00000",location$=l1$(1,10),qty=c[0],cost=l[0]
    gosub l6000
    write record (ivt01_dev,key=w0$) ivt01a$
    goto l4700

l4900: rem --- Loop back for next record

l4950:
    goto l4200

display_fields: rem --- Display Fields

    let x3$="First",x4$="Last"
    gosub d_period
    gosub d_year
    call pgmdir$+"ivc_ib.bbx","D","D",40,5,files[all],params$[all],options$[all],my_context,1,1,i0_done,validate,v3
    if ls$="N" goto l5090
    if beglot$<>"" x3$=beglot$
    if endlot$<>"" x4$=endlot$
    if include$="N" x3$="",x4$=""
    call pgmdir$+"syc_rs.bbx","",my_context,3009,include$,0,"",ignore_statu
    call pgmdir$+"syc_rs.bbx","",my_context,13010,x3$,0,"",ignore_statu
    call pgmdir$+"syc_rs.bbx","",my_context,13011,x4$,0,"",ignore_statu
l5090:
    return

d_lot: rem --- Display Lot/Serial Number

    if v$="" x0$="",x1$=x$ else x0$=v$,x1$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,x0$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,10000+control_id,x1$,0,"",ignore_status
    return

d_period: rem --- Display Period (month)

    let v=0,v=num(period$,err=*next),period$=str(v:m9$)
    if v=0 x0$="",x1$="First" else x0$=str(v:m9$),x1$=g3$((v-1)*16+27,16)
    call pgmdir$+"syc_rs.bbx","",my_context,3000,x0$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,x1$,0,"",ignore_status
    return

d_year: rem --- Display year

    call pgmdir$+"syc_rs.bbx","",my_context,3001,fnyy$(year$),0,"",ignore_statu
    return
rem --- Initialize IVT-01/IVT-04 Transaction History Record
l6000:
    dim w1$(96),w2$(16),w[4]
    let w1$(1,2)="BB",w1$(29,2)=a2$(4,2),w1$(81,10)=location$
    let w2$(1,3)=sysinfo.system_date$,w2$(4,3)=sysinfo.user_id$,w2$(7,3)=fnclock$(q$)
    let w2$(11,4)=fid(0),w[0]=qty,w[1]=cost
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
