rem --- Inventory Item Labels
rem --- Program ivr_itemlabels_o1.aon v8.0.0 16Jul2007 (ivr_1b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:02:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Init Data

    first=0
    if height<6 x9=height else x9=6
    another$="A"
    call pgmdir$+"adc_getmask.aon","","IV","I","",ivIMask$,0,0
    more=1

rem --- Loop Starting

    sql_prep$=          "SELECT ivm_itemwhse.firm_id, ivm_itemwhse.item_id,"
    sql_prep$=sql_prep$+"       ivm_itemwhse.warehouse_id, ivm_itemmast.product_type,"
    sql_prep$=sql_prep$+"       ivm_itemmast.item_type "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"    ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    where_clause$=      " WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if beg_whse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+beg_whse$+"' AND "
    if end_whse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+end_whse$+"' AND "
    if beg_prod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+beg_prod$+"' AND "
    if end_prod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+end_prod$+"' AND "
    if beg_item$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+beg_item$+"' AND "
    if end_item$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+end_item$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    if where_clause$<>"" sql_prep$=sql_prep$+where_clause$

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

    count_prep$=            "SELECT COUNT(*) AS total_recs "
    count_prep$=count_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    count_prep$=count_prep$+"   ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    count_prep$=count_prep$+"      ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    count_prep$=count_prep$+where_clause$

    count_chan=sqlunt
    sqlopen(count_chan,err=*next)stbl("+DBNAME")
    sqlprep(count_chan)count_prep$
    dim count_tpl$:sqltmpl(count_chan)
    sqlexec(count_chan)
    count_tpl$=sqlfetch(count_chan)

    if count_tpl.total_recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

rem --- Document initializations
    if col_format$="Y"
        OutVect!=bbjAPI().makeVector()
        BrkVect!=bbjAPI().makeVector()
        HdrVect!=bbjAPI().makeVector()
        TotVect!=bbjAPI().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

        columns=6
        dim columns$[columns,10]

        columns$[0,0]=Translate!.getTranslation("AON_COMPANY"),columns$[0,1]="C",columns$[0,2]="30"
        columns$[1,0]=Translate!.getTranslation("AON_WHSE"),columns$[1,1]="C",columns$[1,2]="5"
        columns$[2,0]=Translate!.getTranslation("AON_ITEM_ID"),columns$[2,1]="C",columns$[2,2]="20"
        columns$[3,0]=Translate!.getTranslation("AON_DESCRIPTION"),columns$[3,1]="C",columns$[3,2]="60"
        columns$[4,0]=Translate!.getTranslation("AON_PROD^TYPE"),columns$[4,1]="C",columns$[4,2]="5"
        columns$[5,0]=Translate!.getTranslation("AON_CYCLE^CODE"),columns$[5,1]="C",columns$[5,2]="5"
        columns$[6,0]=Translate!.getTranslation("AON_WHSE")+"^"+Translate!.getTranslation("AON_LOCATION"),columns$[6,1]="C",columns$[6,2]="10"

        call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

        headings=7
        dim headings$[headings]
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
        if beg_whse$="" then headings$[3]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_")+beg_whse$
        if end_whse$="" then headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_WAREHOUSE:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_WAREHOUSE:_")+end_whse$
        if beg_prod$="" then headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+cvs(beg_prod$,3)                
        if end_prod$="" then headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+cvs(end_prod$,3)
        if beg_item$="" then headings$[5]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[5]=Translate!.getTranslation("AON_FROM_ITEM:_")+cvs(fnmask$(beg_item$,ivIMask$),3)
        if end_item$="" then headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_ITEM:_")+cvs(fnmask$(end_item$,ivIMask$),3)
        if itype$="" then headings$[6]=Translate!.getTranslation("AON_ALL_ITEM_TYPES") else headings$[6]=Translate!.getTranslation("AON_ITEM_TYPE_")+itype$
        headings$[7]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_ITEMS")+" = "+inactive$
    endif

rem --- Open printer
    if col_format$<>"Y"
        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status goto std_exit
    
        while more
            call pgmdir$+"adc_yesno.aon",0,Translate!.getTranslation("AON_DO_YOU_WISH_TO_PRINT_")+another$+Translate!.getTranslation("AON__TEST_PATTERN"),3,v$,v3
            if v3=4 goto std_exit
    
            switch pos(v$="YN")
                case 1;rem v$="Y"  
                    dim w0$(across*width*6,"X")
                    x0=1
                    gosub Print
                    another$=Translate!.getTranslation("AON_ANOTHER")
                    break
                case 2; rem v$="N" no more test patterns
                    more=0
                    break
                case default
                    continue
                    break
            swend
        wend
    endif

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMWHSE","","","",0,ivm02_dev,1,meter_num,status
    more=1

rem --- Main Read
    while more

        read_tpl$=sqlfetch(sql_chan,err=*break)
        read record (ivm01_dev,key=firm_id$+read_tpl.item_id$,dom=*continue) ivm01a$
        rcnt=rcnt+1

        if item_type$<>"" then
            if ivm01a.item_type$<>item_type$ then
                continue
            endif
        endif

        rem -- Check for inactive item
        if inactive$="Y" and ivm01a.item_inactive$="Y" then continue

        read record (ivm02_dev,key=firm_id$+read_tpl.warehouse_id$+read_tpl.item_id$,dom=*continue) ivm02a$

    rem --- Setup

        ivm01a.item_desc$(1)=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        gosub Assemble

    wend ;rem --- Loop Ending

done: rem --- End of label printing

    if col_format$<>"Y" then gosub Print
    goto std_exit

Assemble: rem --- Assemble

    x3=0
    while x3<=w3
        x3=x3+1
        if x3>w3 break
        if x0>=across or col_format$="Y" then gosub Print
        x0=x0+1
        if mod(rcnt,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","",ivm01a.item_id$,0,0,1,0,ignore_status
        w0$(width*(x0-1)+1,width)=n1$
        w0$(width*(across+x0-1)+1,width)=cvs(ivm01a.item_id$,3)+Translate!.getTranslation("AON__WHSE_")+ivm02a.warehouse_id$
        w0$(width*(2*across+x0-1)+1,width)=ivm01a.item_desc$(1,width)
        w0$(width*(3*across+x0-1)+1,width)=ivm01a.item_desc$(width+1)
        x=pos(" "<>w0$(width*(3*across+x0-1)+1,width),-1)

        if x+8<width then
            if x=0 offset=-1 else offset=0
            w0$(width*(3*across+x0-1)+x+2+offset,8)=Translate!.getTranslation("AON_PROD_")+ivm01a.product_type$
        endif

        w0$(width*(4*across+x0-1)+1,width)=Translate!.getTranslation("AON_CYCLE_CODE_")+ivm02a.pi_cyclecode$+Translate!.getTranslation("AON_LOCATION_")+ivm02a.location$
    wend
    return

Print: rem --- Print

    if x0=0  and col_format$<>"Y" then return
    
    if col_format$<>"Y"
        if first
            for x=0 to height-1
                print (printer_dev)""
            next x
            first=0
        endif
    
        for x=0 to x9-1
            print (printer_dev,err=printer_err)@(0+w9),w0$(x*across*width+1,across*width)
        next x
    
        if height>6 print (printer_dev)w9$(1,height-7)
    else
        OutVect!.addItem(n1$)
        OutVect!.addItem(ivm02a.warehouse_id$)
        OutVect!.addItem(fnmask$(ivm01a.item_id$,ivIMask$))
        OutVect!.addItem(ivm01a.item_desc$)
        OutVect!.addItem(ivm01a.product_type$)
        OutVect!.addItem(ivm02a.pi_cyclecode$)
        OutVect!.addItem(ivm02a.location$)
    endif
    
    x0=0
    w0$(1)=""

    return

printer_err: rem --- Can the printer hadle this width?

    if err<>1 then goto std_error

    msg_id$="PRINTER_TOO_NARROW"
    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:      else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
