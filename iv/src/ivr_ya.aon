rem --- Lot/Serial Status Report (Input Overlay)
rem --- Program ivr_ya v8.0.0 09Jul2007 (ivr_ya)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:52:09)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0125)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0131)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0142)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0143)
rem --- v7.x Administrator reference ["sys-01"] (Line 0149)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0160)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0171)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0174)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0221)
rem --- BBx reference ["syc_ra.bbx"] (Line 0221)
rem --- BBx reference ["ivc_ib.bbx"] (Line 0267)
rem --- BBx reference ["ivr_yb.bbx"] (Line 0369)
rem --- BBx reference ["ivc_ib.bbx"] (Line 0380)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0387)
rem --- BBx reference ["syc_rs.bbx"] (Line 0387)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0388)
rem --- BBx reference ["syc_rs.bbx"] (Line 0388)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0393)
rem --- BBx reference ["syc_rs.bbx"] (Line 0393)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0394)
rem --- BBx reference ["syc_rs.bbx"] (Line 0394)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0399)
rem --- BBx reference ["syc_rs.bbx"] (Line 0399)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0400)
rem --- BBx reference ["syc_rs.bbx"] (Line 0400)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0107)
rem --- Cross-reference file ivm-08 referenced (Line 0109)
rem --- Cross-reference file ivm-03 referenced (Line 0163)
rem --- Cross-reference file ivm-08 referenced (Line 0215)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0116)
rem --- Cross-reference record ivm08a replaced by index on ivm-07 (Line 0117)

rem --- The following IOLIST's were removed from this program:

rem --- The following channel references have been identified:

rem --- ivm01a: Channel reference (Line 0181)

rem --------------------------------------------------------------------------------
rem --- ivm02a: Channel reference (Line 0181)
rem --- ivm03a: Channel reference (Line 0180)
rem --- ivm07a: Channel reference (Line 0184)
rem --- ivm08a: Channel reference (Line 0183)
rem --- ivm10a: Channel reference (Line 0177)
rem --- ivm14a: Channel reference (Line 0176)
rem --- ivm15a: Channel reference (Line 0175)
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0172)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-03"
    files$[5]="ivm-07"
    files$[6]="ivm-08"
    files$[7]="ivm-10"
    files$[8]="ivm-14"
    files$[9]="ivm-15"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm07_dev=channels[5]
    ivm08_dev=channels[6]
    ivm10_dev=channels[7]
    ivm14_dev=channels[8]
    ivm15_dev=channels[9]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm03a$:templates$[4],
:       ivm07a$:templates$[5],ivm08a$:templates$[6],ivm10a$:templates$[7],
:       ivm14a$:templates$[8],ivm15a$:templates$[9]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivs-01A"
    ids$[2]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivs01a$:templates$[1],sys01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=9
    dim files$[files],fileoptions$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-03"
    files$[5]="ivm-10"
    files$[6]="ivm-14"
    files$[7]="ivm-15"
    files$[8]="ivm-07"
    files$[9]="ivm-08"
    call pgmdir$+"adc_fileopen.aon",1,1,7,files$[all],fileoptions$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm10_dev=channels[5]
    ivm14_dev=channels[6]
    ivm15_dev=channels[7]

rem --- Parameters

    dim p[5]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    if pos(i3$(17,1)="LS")=0 goto l4900
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    p[2]=num(i2$(7,2))
    p[3]=num(i2$(9,2))
    p[4]=num(i2$(11,2))
    p[5]=num(i2$(13,2))

rem --- Initializations

    open_list1$="Item Number      Lot/Serial Number"
    sequence$="I"
    open_list2$="Open  ClosedBoth  "
    ocb$="B"
    beg_whse$=""
    end_whse$=""
    beg_prod$=""
    end_prod$=""
    beg_item$=""
    end_item$=""
    item_type$=""
    beglot$=""
    endlot$=""
    status$="O"
    precision p[1]
    dim files[15],params$[3],options$[7],b[12]
    files[1]=ivm01_dev
    files[10]=ivm10_dev
    files[14]=ivm14_dev
    params$[0]=firm_id$
    params$[1]=i1$
    params$[2]=i2$
    params$[3]=i3$
    files[15]=ivm15_dev

rem --- Additional File Opens

    call pgmdir$+"adc_fileopen.aon",1,8,9,files$[all],fileoptions$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[8]
    ivm08_dev=channels[9]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    gosub display_fields
    goto start_done

sequence: rem --- Sequence

    v4$="List Items By Item Number Or Lot/Serial # (I=Item Number/L=Lot/Serial Number)"
    v0$="S"
    v1$="^CE"
    v2$=sequence$
    v3$="IL"
    v0=1
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1050,sequence,sequence,sequence,flow_control,l1050,flow_control
l1050:
    sequence$=v$
    gosub d_sequence
    goto flow_control

open_close: rem --- Open/Closed/Both

    v0$="S"
    v1$="C"
    v2$=ocb$
    v3$="^OCB"
    v4$="O=Open Only, C=Closed Only, B=Both"
    v0=1
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1240,open_close,l1290,open_close,l1290,l1240,l1290
l1240:
    ocb$=v$
    gosub d_ocb
l1290:
    goto flow_control

l1400: rem --- Entry Call (i0=3-8)

    call pgmdir$+"ivc_ib.bbx","DI","D",40,5,files[all],params$[all],options$[all],my_context,i0,1,i0_done,validate,v3
    on v3 goto l1431,l1431,l1490,l1431,l1490,l1431,l1490
l1431:
    beg_whse$=options$[1]
    end_whse$=options$[2]
    beg_prod$=options$[3]
    end_prod$=options$[4]
    beg_item$=options$[5]
    end_item$=options$[6]
    item_type$=options$[7]
l1490:
    goto flow_control

end_lot: rem --- Beginning Lot/Serial Number

    v4$="Enter The Beginning Lot/Serial Number To Include On This Report (<F1>=First)"
    v0$="S"
    v1$="KCE"
    v2$=beglot$
    v3$=""
    v0=p[2]
    v1=40
    v2=12
    control_id=3009
    gosub std_input
    on v3 goto l1660,l1650,flow_control,end_lot,flow_control,l1660,flow_control
l1650:
    v$=""
    if endlot$<>"" and v$>endlot$ goto end_lot
l1660:
    beglot$=v$
    x$="First"
    gosub d_lot
    goto flow_control

beg_lot: rem --- Ending Lot/Serial Number

    v4$="Enter The Ending Lot/Serial Number To Include On This Report (<F1>=Last)"
    v0$="S"
    v1$="KCE"
    v2$=endlot$
    v3$=""
    v0=p[2]
    v1=40
    v2=13
    control_id=3010
    gosub std_input
    on v3 goto l1860,l1850,flow_control,beg_lot,flow_control,l1860,flow_control
l1850:
    v$=""
    if beglot$<>"" if endlot$<beglot$ goto beg_lot
l1860:
    endlot$=v$
    x$="Last"
    gosub d_lot
    goto flow_control

flow_control: rem --- Flow Control

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2
    if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1)
    break
    case 4; exitto start_done
    case default; exitto done_v3
    swend
next_field:
    on i0 goto sequence,open_close,l1400,l1400,l1400,l1400,l1400,l1400,l1400,end_lot,beg_lot,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=0
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1
    goto next_field
cancel:
    goto std_exit

end_input: rem --- Run Overlay

    let level$=options$[0],begwhse$=options$[1],endwhse$=options$[2]
    let begprod$=options$[3],endprod$=options$[4],begitem$=options$[5]
    let enditem$=options$[6],type$=options$[7]
    run pgmdir$+"ivr_yb.bbx"

l4900: rem --- Lotted/Serialized Inventory not enabled

    call pgmdir$+"ivc_warnings.aon","L",status
    goto std_exit

display_fields: rem --- Display Fields

    gosub d_sequence
    gosub d_ocb
    call pgmdir$+"ivc_ib.bbx","D","D",40,5,files[all],params$[all],options$[all],my_context,1,1,i0_done,validate,v3
    let control_id=3009,x$="First"; gosub d_lot
    let control_id=3010,x$="Last"; gosub d_lot
    return

d_ocb: rem --- Display Open/Closed/Both

    call pgmdir$+"syc_rs.bbx","",my_context,3001,ocb$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13001,open_list2$((pos(ocb$="OCB")-1)*6+1,6),0,"",ignore_status
    return

d_sequence: rem --- Display Sequence

    call pgmdir$+"syc_rs.bbx","",my_context,3000,sequence$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,open_list1$((pos(sequence$="IL")-1)*17+1,17),0,"",ignore_status
    return
rem --- Display Lot/Serial Number
d_lot:
    if v$="" x0$="",x1$=x$ else x0$=v$,x1$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,x0$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,10000+control_id,x1$,0,"",ignore_status
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
