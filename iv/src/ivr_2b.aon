rem --- Inventory Alternate/Superceded Items Listing
rem --- Program ivr_2b v8.0.0 16Jul2007 (ivr_2b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 01:05:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
 
rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations
    more=1

rem --- Build headings

    gosub Init_Heading

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    rem call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",p[0],ivm01_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm01_dev,1,meter_num,status
    ivm01a_key$=firm_id$+begitem$
    dim ivm01a_key$:ivm01_key_tpl$
    read record (ivm01_dev,key=ivm01a_key$,dom=Next_ivm01) ivm01a$
    goto range_checks

Next_ivm01: rem --- Next Item

    ivm01a_key$=key(ivm01_dev,end=done)
    if pos(firm_id$=ivm01a_key$)<>1 goto done
    if enditem$<>"" if ivm01a_key.item_Id$>enditem$ goto done
    read record (ivm01_dev) ivm01a$
range_checks:
    call pgmdir$+"adc_progress.aon","S","","","",ivm01a.item_Id$,0,0,1,0,ignore_status
    if ivm01a.alt_sup_flag$<>selection$ goto ivm01_loop 
    if cvs(alt_sup_item$,2)="" goto ivm01_loop 
    if begprod$<>"" if ivm01a.prod_type$<begprod$ goto ivm01_loop 
    if endprod$<>"" if ivm01a.prod_type$>endprod$ goto ivm01_loop 
    if type$<>"" if ivm01a.Item_type$<>type$ goto ivm01_loop

rem --- Store source item information

    description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
    product$=ivm01a.prod_type$

rem --- Retrieve alternate/substitute item

    ivm01a.item_Id$=ivm01a.alt_sup_item$
    find record (ivm01a_dev2,key=ivm01a.firm_id$+ivm01a.item_id$,dom=ivm01_loop ) ivm01a$

rem --- Format detail line

    dim buffer$(width)
    buffer$(o[0])=ivm01a_key.item_id$
    buffer$(o[1],dw)=description$
    buffer$(o[2])=product$
    buffer$(o[3])=ivm01a.item_id$
    buffer$(o[4],dw)=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
    buffer$(o[5])=ivm01a.prod_type$

rem --- Print detail line

    if l+1>l9 gosub report_heading
    print (printer_dev)buffer$
    l=l+1
    number=number+1

ivm01_loop: rem --- Loop back for next record

    goto Next_ivm01

done: rem --- All done

    if l+2>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)number," Item(s) Listed"
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if char$<>"" last$=char$
    return

Init_Heading: rem --- Initialize HEADINGS$

    dim h1$(width),h2$(width),h6$(width)
    if selection$="A" headings$[1]="Alternate Item Listing"
    if selection$="S" headings$[1]="Superceded Item Listing"
    x1$="First"
    x2$="First"
    x2=5
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$,x2=3
    if endprod$="" if x2=3 x2=4
    h1$(1)="From Item: "+x1$
    h1$(width-x2-13)="From Product: "+x2$
    x1$="Last"
    x2$="Last"
    x3$="All Item Types"
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if type$<>"" x3$="Item Type "+type$
    headings$[1]=headings$[1]+" For "+x3$
    h2$(1)="  To Item: "+x1$
    h2$(width-x2-13)="  To Product: "+x2$
    h6$(o[0])="Item"
    h6$(o[1])="Description"
    h6$(o[2])="Prd"
    if selection$="S" h6$(o[3])="Superceded By"
    if selection$="A" h6$(o[3])="Alternate Item"
    h6$(o[4])="Description"
    h6$(o[5])="Prd"
    headings$[3]=h1$
    headings$[4]=h2$
    headings$[6]=h6$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
