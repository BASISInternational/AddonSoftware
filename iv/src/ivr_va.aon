rem --- Physical Inventory Register
rem --- Program ivr_va v8.0.0 09Jul2007 (ivr_va)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:45:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0135)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0141)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0152)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0153)
rem --- v7.x Administrator reference ["sys-01"] (Line 0159)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0171)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0184)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0188)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0255)
rem --- BBx reference ["syc_ra.bbx"] (Line 0255)
rem --- BBx reference ["ivc_ic.bbx"] (Line 0266)
rem --- BBx reference ["ivu_va.bbx"] (Line 0398)
rem --- BBx reference ["ivc_lf.bbx"] (Line 0475)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-08 referenced (Line 0110)
rem --- Cross-reference file ivm-08 referenced (Line 0232)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm08a replaced by index on ivm-07 (Line 0124)

rem --- The following IOLIST's were removed from this program:

rem --- ive03a: iolist w0$(1),w1$(1),w[all]
rem --- ivm01a: iolist a0$(1),a1$(1),a2$(1),a3$(1),a4$(1),a5$,a6$,a[all]
rem --- ivm02a: iolist b0$(1),b1$(1),b2$,b[all]
rem --- ivm07a: iolist d0$(1),d1$(1),d[all]
rem --- ivm10c: iolist x0$(1)
rem --- ivm10p: iolist y0$(1)

rem --- The following channel references have been identified:

rem --- ivm04a: Channel reference (Line 0251)

rem --------------------------------------------------------------------------------
rem --- ivm08a: Channel reference (Line 0256)
rem --- ivm12a: Channel reference (Line 0249)
rem --- ivm17a: Channel reference (Line 0254)
rem --- ivs01a: (Generated by CodePort)
rem --- ivt01a: Channel reference (Line 0252)
rem --- ivt02a: Channel reference (Line 0251)
rem --- ivt03a: Channel reference (Line 0250)
rem --- ivt04a: Channel reference (Line 0243)
rem --- ivw04a: Channel reference (Line 0248)
rem --- ivw10a: Channel reference (Line 0241)
rem --- sys01a: Channel reference (Line 0239)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=16,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ive-03"
    files$[3]="ivm-01"
    files$[4]="ivm-02"
    files$[5]="ivm-04"
    files$[6]="ivm-07"
    files$[7]="ivm-08"
    files$[8]="ivm-10"
    files$[9]="ivm-12"
    files$[10]="ivm-17"
    files$[11]="ivt-01"
    files$[12]="ivt-02"
    files$[13]="ivt-03"
    files$[14]="ivt-04"
    files$[15]="ivw-04"
    files$[16]="ivw-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ive03_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm04_dev=channels[5]
    ivm07_dev=channels[6]
    ivm08_dev=channels[7]
    ivm10_dev=channels[8]
    ivm12_dev=channels[9]
    ivm17_dev=channels[10]
    ivt01_dev=channels[11]
    ivt02_dev=channels[12]
    ivt03_dev=channels[13]
    ivt04_dev=channels[14]
    ivw04_dev=channels[15]
    ivw10_dev=channels[16]

rem --- Dimension string templates

    dim ive03a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm04a$:templates$[5],ivm07a$:templates$[6],ivm08a$:templates$[7],
:       ivm10a$:templates$[8],ivm12a$:templates$[9],ivm17a$:templates$[10],
:       ivt01a$:templates$[11],ivt02a$:templates$[12],ivt03a$:templates$[13],
:       ivt04a$:templates$[14],ivw04a$:templates$[15],ivw10a$:templates$[16]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivm-10P"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivm10p$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=17
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-10"
    files$[3]="ivw-10"
    files$[4]="ivm-02"
    files$[5]="ive-03"
    files$[6]="ivm-01"
    files$[8]="ivm-04"
    files$[9]="ivm-12"
    files$[10]="ivt-04"
    options$[3]="C"
    call pgmdir$+"adc_fileopen.aon",1,1,10,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm10_dev=channels[2]
    ivw10_dev=channels[3]
    ivm02_dev=channels[4]
    ive03_dev=channels[5]
    ivm01_dev=channels[6]
    ivm04_dev=channels[8]
    ivm12_dev=channels[9]
    ivt04_dev=channels[10]

rem --- Parameters

    dim p[5]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    ls$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    p[2]=num(i2$(7,2))
    p[3]=num(i2$(9,2))
    p[4]=num(i2$(11,2))
    p[5]=num(i2$(13,2))
    dw=p[3]+p[4]+p[5]
    if pos(i3$(17,1)="SL")>0 ls$="Y"
    lf$=i3$(3,1)

rem --- Initializations

    precision p[1]
    dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],headings$[3]
    dim b0$(24),b1$(64),b[20],w0$(56),w1$(60),w[2],x0$(32),y0$(11),o[10]
    dim item[6],cycle[6],report[6],lf_chans[2]
    clock$=""
    when$=sysinfo.system_date$
    l9=55
    l=l9+1
    width=132
    headings=2
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    lsh$=""
    done=0
    qh$="Quantity"
    th$="Total Value"
    if ls$="Y" lsh$="Lot/Serial Number"

rem --- Additional file opens

    if ls$<>"Y" goto l620
    files$[11]="ivm-08"
    files$[12]="ivm-17"
    files$[13]="ivt-01"
    files$[14]="ivt-02"
    files$[15]="ivt-03"
    files$[16]="ivm-07"
l620:
    if pos(lf$="LF") files$[17]="ivw-04",options$[17]="CL"
    call pgmdir$+"adc_fileopen.aon",1,11,17,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm08_dev=channels[11]
    ivm17_dev=channels[12]
    ivt01_dev=channels[13]
    ivt02_dev=channels[14]
    ivt03_dev=channels[15]
    ivm07_dev=channels[16]
    if pos(lf$="LF") ivw04_dev=channels[17],lf_chans[0]=ivm04_dev,lf_chans[1]=ivw04_dev,lf_chans[2]=ivm02_dev

rem --- Resize masks

    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    x=m1+m2
    dim ph$(x,"-"),sh$(x,"-"),vh$(x,"-")
    ph$(fncenter(x,10),10)=" Physical "
    sh$(fncenter(x,8),8)=" System "
    vh$(fncenter(x,10),10)=" Variance "

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    main_context=resparams[0]
    if status goto std_exit

rem --- GOSUB FLOW_INITIALIZATIONS
rem --- Process input

    action$="R"
    whse$=i3$(6,2)
    cutoff$=""
    quantity$="N"
    call pgmdir$+"ivc_ic.bbx",action$,channels[all],whse$,cutoff$,quantity$,fkey,status,my_context,throw$
    if fkey<>0 goto std_exit
    if status<>0 goto std_exit
    if throw$="Y" goto std_exit

rem --- Retrieve warehouse and build HEADINGS$

    find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=std_exit) ivm10c$
    headings$[1]=sysinfo.task_desc$+" For Warehouse "+x0$(4,2)+" "+cvs(x0$(6,24),2)
    if quantity$="Y" sqh$="Quantity"

rem --- Print positions

    o[10]=width-m1
    o[9]=o[10]-m2
    o[8]=o[9]-m1-1
    o[7]=o[8]-m2
    o[6]=o[7]-m1-1
    o[5]=o[6]-m2
    o[4]=o[5]-11
    o[3]=o[4]-3
    o[1]=3
    o[2]=o[3]-max(p[2],18)

rem --- Position file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","Printing","",17+p[0],0,1,meter_num,status
    read (ivw10_dev,key=firm_id$,dom=*next)

l1000: rem --- Read next entry record

    k$=key(ivw10_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read (ivw10_dev)

rem --- Position physical inventory record

    first$=k$(1,2)+whse$+k$(3)
    read (ive03_dev,key=first$,dom=*next)

l2000: rem --- Read next physical inventory record

    k$=key(ive03_dev,end=l3900)
    if pos(first$=k$)<>1 goto l3900
    read record (ive03_dev) ive03a$
    call pgmdir$+"adc_progress.aon","S","","","",w0$(3,2)+" "+w0$(5,2)+" "+k$(7,10)+" "+k$(17,p[0]),0,0,1,meter_num,status

rem --- Level breaks

    if w0$(5,2)<>t0$ gosub l6000
    if w0$(17,p[0])<>t1$ gosub l6200

rem --- Retrieve lot/serial master

    if ls$<>"Y" goto l2300
    if a2$(19,2)<>"YY" goto l2300
    dim d0$(44),d1$(96),d[12]
    d0$(1)=w0$(1,4)+w0$(17)
    d1$(1)=w0$(7,10)
    d[3]=cost
    if cvs(w0$(37),2)<>"" goto l2285
    if w[0]<>0 w1$(4,1)="Y"; rem "Count always entered for Missingand Blank
    if w[0]=0 w0$(37)="None"
    if w[1]<>0 w0$(37)="Blank"
    if w[1]<>0 and w[0]>w[1] w0$(37)="Blank & Missing"
    if w[1]<>0 and w[0]<w[1] w0$(37)="Blank & Extra"
    if w[1]=0 and w[0]>w[1] w0$(37)="Missing"
    if w[1]=0 and w[0]<w[1] w0$(37)="Extra"
    if pos("Blank"=w0$(37))<>1 d1$(1)=".........."
l2285:
    find record (ivm07_dev,key=d0$,dom=l2300) ivm07a$
    cost=d[3]

l2300: rem --- Calculate total value and variance

    dim t[6]
    if w1$(4,1)<>"Y" w[1]=w[0]
    t[0]=w[1]
    t[1]=t[0]*cost
    t[2]=w[0]
    t[3]=t[2]*cost
    t[4]=t[0]-t[2]
    t[5]=t[1]-t[3]
    mark$=""
    if ls$="Y" and cvs(w0$(37),2)="None" goto l2400
    if w1$(4,1)<>"Y" t[6]=1,mark$="*"

l2400: rem --- Print non-lotted/serialized item

    if ls$="Y" if a2$(19,2)="YY" goto l2500
    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[0]),a0$(3,p[0]),mark$,@(o[3]),a2$(4,2),@(o[4]),w0$(7,10),@(o[5]),t[0]:m2$,@(o[6]),t[1]:m1$,@(o[7]),t[2]:m2$,@(o[8]),t[3]:m1$,@(o[9]),t[4]:m2$,@(o[10]),t[5]:m1$
    print (printer_dev)@(o[1]),description$
    l=l+2
    goto l2900

l2500: rem --- Print lotted/serialized item

    if w0$(1,36)<>last$ gosub l5200
    if l+1>l9 l=l9+1; gosub l5200
    print (printer_dev)@(o[2]),w0$(37,max(p[2],len(cvs(w0$(37),2)))),mark$,@(o[4]),d1$(1,10),@(o[5]),t[0]:m2$,@(o[6]),t[1]:m1$,@(o[7]),t[2]:m2$,@(o[8]),t[3]:m1$,@(o[9]),t[4]:m2$,@(o[10]),t[5]:m1$
    l=l+1
    l1=l1+1

l2900: rem --- Loop back for next physical inventory record

    for x=0 to 6
        item[x]=item[x]+t[x]
        cycle[x]=cycle[x]+t[x]
        report[x]=report[x]+t[x]
    next x
    goto l2000

l3900: rem --- Loop back for next entry record

    goto l1000

done: rem --- All done

    done=1
    gosub l6000
    dim totals$[5]
    total$="Register "
    totals$[1]=str(report[1]:m1$)
    nl=1
    totals$[3]=str(report[3]:m1$)
    totals$[5]=str(report[5]:m1$)
    warning=report[6]
    gosub l6900
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run pgmdir$+"ivu_va.bbx"

report_heading: rem --- Report Heading

    l=headings+4
    nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[5]),ph$,@(o[7]),sh$,@(o[9]),vh$
    print (printer_dev)@(o[0]),"Item",@(o[2]),lsh$,@(o[3]),"UM",@(o[4]),"Location",@(o[5]+m2-9),qh$,@(o[6]+m1-12),th$,@(o[7]+m2-9),qh$,@(o[8]+m1-12),th$,@(o[9]+m2-9),qh$,@(o[10]+m1-12),th$
    print (printer_dev)""
    return

l5200: rem --- Item subheading (lotted/serialized)

    if l+3>l9 gosub report_heading
    print (printer_dev)@(o[0]),w0$(17,p[0]),@(o[3]),a2$(4,2),@(o[4]),w0$(7,10)," ",continued$
    print (printer_dev)@(o[1]),description$
    l=l+2
    continued$="(Continued)"
    last$=w0$(1,36)
    return

l6000: rem --- Cycle Break

    if t0$="" goto l6100
    gosub l6200
    dim totals$[5]
    total$="Cycle Code "+t0$
    totals$[1]=str(cycle[1]:m1$)
    nl=1
    totals$[3]=str(cycle[3]:m1$)
    totals$[5]=str(cycle[5]:m1$)
    warning=cycle[6]
    gosub l6900
l6100:
    if done goto l6190
    dim y0$(11),cycle[6]
    t0$=w0$(5,2)
    y0$(1)=firm_id$+"P"+whse$+t0$
    y0$(9,3)=sysinfo.system_date$
    find record (ivm10_dev,key=y0$(1,7),dom=*next) ivm10p$
    y0$(8,1)="3"
    l=l9+1
    headings=3
    headings$[2]="Cycle Code "+t0$+" - Cutoff Date "+fndate$(y0$(9,3))
    write record (ivm10_dev,key=y0$(1,7)) ivm10p$
l6190:
    return

l6200: rem --- Item Break

    if t1$="" goto l6300
    if l1<1 goto l6300
    dim totals$[5]
    let total$="Item "+t1$,nl=0,warning=0
    let totals$[0]=str(item[0]:m2$),totals$[1]=str(item[1]:m1$)
    let totals$[2]=str(item[2]:m2$),totals$[3]=str(item[3]:m1$)
    let totals$[4]=str(item[4]:m2$),totals$[5]=str(item[5]:m1$)
    gosub l6900
l6300:
    if done goto l6490
    dim description$(dw),item[6]
    let a0$(1)=firm_id$+w0$(17),a1$(1)="(Not On File)",a2$(1)="",t1$=w0$(17,p[0])
    let b0$(1)=firm_id$+w0$(3,2)+w0$(17),b1$(1)="",b[11]=0,l1=0
    find record (ivm01_dev,key=a0$,dom=*next) ivm01a$
    find record (ivm02_dev,key=b0$,dom=*next) ivm02a$
    let description$(1)=fnitem$(a1$,p[3],p[4],p[5]),continued$="",cost=b[11]

rem --- Get LIFO/FIFO Cost As Necessary

    if pos(lf$="LF")=0 goto l6490
    if ls$="Y" and a2$(19,2)="YY" goto l6490; rem "Use lot/serial cost
    dim lf_item$[2]
    let lf_item$[0]=firm_id$,lf_item$[1]=w0$(3,2),lf_item$[2]=w0$(17,20)
    let lf_act$=lf$+"R",lf_type$="R",lf_date$=w1$(1,3),lf_qnty=w[1]-w[0],lf_cost=0
    if lf_qnty<0 lf_act$=lf$+"I"
    call pgmdir$+"ivc_lf.bbx",lf_act$,lf_type$,lf_date$,lf_chans[all],lf_item$[all],p[1],abs(lf_qnty),cost,lf_cost,status
    if lf_qnty<0 and lf_cost<>0 cost=lf_cost
l6490:
    return

l6900: rem --- Print total line

    let needed=1
    if warning>0 needed=3
    if nl>0 needed=needed+1
    if l+needed>l9 gosub report_heading
    if nl>0 print (printer_dev)""
    print (printer_dev)@(o[1]),"Totals For ",total$,@(o[5]),totals$[0],@(o[6]),totals$[1],@(o[7]),totals$[2],@(o[8]),totals$[3],@(o[9]),totals$[4],@(o[10]),totals$[5]
    if warning=0 goto l6980
    print (printer_dev)""
    print (printer_dev)@(o[1]),"WARNING:",warning," Item(s) Not Entered For"+total$
l6980:
    let l=l+needed,nl=0
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
