rem --- Cost Change Valuation Report
rem --- Program ivr_wa v8.0.0 09Jul2007 (ivr_wa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:41:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0127)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0134)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0149)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0150)
rem --- v7.x Administrator reference ["sys-01"] (Line 0156)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0173)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0185)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0190)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0192)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0206)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0263)
rem --- BBx reference ["syc_ra.bbx"] (Line 0263)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0280)
rem --- BBx reference ["syc_rs.bbx"] (Line 0280)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0288)
rem --- BBx reference ["syc_rs.bbx"] (Line 0288)
rem --- BBx reference ["glr_xb.bbx"] (Line 0407)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0107)
rem --- Cross-reference file ivm-03 referenced (Line 0176)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0116)

rem --- The following IOLIST's were removed from this program:

rem --- arm10d: iolist d0$(1),d1$(1)
rem --- ars01a: iolist x$,p1$,p2$,p3$,p4$
rem --- gls01a: iolist x$,g1$,g2$,g3$,g4$,g5$,g6$,g7$
rem --- glw04a: iolist x0$,x0
rem --- ive06a: iolist c0$(1),c1$,c2$,c[all]
rem --- ivm01a: iolist b0$(1),b1$(1),b2$,b3$,b4$,b5$,b6$(1),b[all]
rem --- ivm02a: iolist a0$(1),a1$(1),a2$,a[all]
rem --- ivm10a: iolist u0$(1)
rem --- ivm10c: iolist w0$(1)
rem --- ivw06a: iolist y0$(1)

rem --- The following channel references have been identified:

rem --- glm01a: Channel reference (Line 0237)

rem --------------------------------------------------------------------------------
rem --- ivm03a: Channel reference (Line 0229)
rem --- ivm14a: Channel reference (Line 0228)
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0226)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-10"
    files$[3]="glm-01"
    files$[4]="glw-04"
    files$[5]="ive-06"
    files$[6]="ivm-01"
    files$[7]="ivm-02"
    files$[8]="ivm-03"
    files$[9]="ivm-10"
    files$[10]="ivm-14"
    files$[11]="ivw-06"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm10_dev=channels[2]
    glm01_dev=channels[3]
    glw04_dev=channels[4]
    ive06_dev=channels[5]
    ivm01_dev=channels[6]
    ivm02_dev=channels[7]
    ivm03_dev=channels[8]
    ivm10_dev=channels[9]
    ivm14_dev=channels[10]
    ivw06_dev=channels[11]

rem --- Dimension string templates

    dim arm10a$:templates$[2],glm01a$:templates$[3],glw04a$:templates$[4],
:       ive06a$:templates$[5],ivm01a$:templates$[6],ivm02a$:templates$[7],
:       ivm03a$:templates$[8],ivm10a$:templates$[9],ivm14a$:templates$[10],
:       ivw06a$:templates$[11]

rem --- Retrieve miscellaneous templates

    files=5,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivm-10C"
    ids$[4]="ivs-01A"
    ids$[5]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],gls01a$:templates$[2],ivm10c$:templates$[3],
:       ivs01a$:templates$[4],sys01a$:templates$[5]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=11
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-03"
    files$[5]="ivm-10"
    files$[6]="ivm-14"
    files$[7]="ive-06"
    files$[8]="ivw-06"
    files$[9]="glm-01"
    files$[10]="glw-04"
    files$[11]="arm-10"
    options$[7]="L"
    options$[8]="C"
    options$[10]="C"
    options$[1]="P"
    call pgmdir$+"adc_fileopen.aon",1,1,8,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm10_dev=channels[5]
    ivm14_dev=channels[6]
    ive06_dev=channels[7]
    ivw06_dev=channels[8]

rem --- Parameters

    dim p[7],g[4]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="IV"
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    if i3$(8,1)<>"S" goto l4900
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g[4]=num(g2$(9,2))
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    p[5]=num(i2$(9,2))
    p[6]=num(i2$(11,2))
    p[7]=num(i2$(13,2))
    call pgmdir$+"adc_application.aon",n2$,info$[all]
    gl$=info$[9]
    ar$="N"
    if gl$<>"Y" goto l500
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$<>"Y" goto l500
    find record (sys01_dev,key=firm_id$+"AR00",dom=l500) ars01a$
    ar$=p3$(11,1)

l500: rem --- Initializations

    precision p[1]
    dim a0$(24),a1$(64),a[20],b0$(22),b1$(60),b6$(50),b[12],o[8]
    dim c0$(27),u0$(32),w0$(32),c[4],d[1],s[1],t[1],r[1],headings$[3]
    headings$[0]=sysinfo.firm_name$
    headings$[2]=sysinfo.task_desc$
    headings=2
    page=0
    width=132
    when$=sysinfo.system_date$
    effective$=when$
    clock$=""
    m1=len(m1$)
    call pgmdir$+"adc_sizemask.aon",m2$,m2,7,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12
    o[1]=p[0]
    o[8]=width-m1
    o[7]=o[8]-m1
    o[6]=o[7]-m3
    o[5]=o[6]-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    o[2]=o[3]-3
    dw=min(o[2]-o[1]-1,p[5]+p[6]+p[7])
    l9=55
    l=l9+1
    done=0
    split=0
    h3$=""
    h4$=""
    h5$=""

rem --- Additional File Opens

    if gl$<>"Y" goto l650
    call pgmdir$+"adc_fileopen.aon",1,9,10,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[9]
    glw04_dev=channels[10]
    if byitem$="Y" goto l650
    call pgmdir$+"adc_fileopen.aon",1,11,11,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    arm10_dev=channels[11]

l650: rem --- Set default effective date

    k$=key(ive06_dev,end=l700)
    if pos(firm_id$=k$)=1 effective$=k$(3,3)

l700: rem --- GUI Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit

l800: rem --- Effective Date

    v4$="Enter The Effective Date For Changes To Be Listed On This Report (<F1>=All)"
    v0$="D"
    v1$="CE"
    v2$=effective$
    v3$=""
    v0=3
    v1=40
    v2=3
    control_id=3000
    gosub std_input
    on v3 goto l850,l830,l800,l800,std_exit,l850,std_exit
l830:
    effective$=""; call pgmdir$+"syc_rs.bbx"
    ""
    my_context
    3000
    effective$
    0
    ""
    ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,"All",0,"",ignore_status
    goto l900
l850:
    effective$=v$

l900: rem --- Report Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$," Sorting","","",16+p[0],ive06_dev,1,0,ignore_status
    gosub l5500
    call pgmdir$+"adc_progress.aon","S","","Printing","","",0,ivw06_dev,1,0,ignore_status
    read (ivw06_dev,key="",dom=*next)

l1000: rem --- Next ivw-06 record

    k$=key(ivw06_dev,end=done)
    if k$(3,3)>sysinfo.system_date$ goto done
    read (ivw06_dev)
    call pgmdir$+"adc_progress.aon","S","","","",fndate$(k$(3,3))+" "+k$(6,2)+" "+k$(8,3)+" "+k$(11,p[0]),0,0,1,meter_num,status
    c0$(1)=k$(1,7)+k$(11)
    read record (ive06_dev,key=c0$,dom=l3900) ive06a$

rem --- Level breaks?

    if k$(3,3)<>t0$ gosub l6000
    if k$(6,2)<>t1$ gosub l6200
    if k$(8,3)<>t2$ gosub l6400

rem --- Additional reads

    dim a0$(24),a1$(64),a[20],b0$(22),b1$(60),b6$(50),b[12]
    b0$(1)=firm_id$+c0$(8)
    a0$(1)=firm_id$+c0$(6)
    find record (ivm01_dev,key=b0$,dom=l3900) ivm01a$
    find record (ivm02_dev,key=a0$,dom=l3900) ivm02a$

rem --- Format detail line fields

    dim description$(dw)
    description$(1)=fnitem$(b1$,p[5],p[6],p[7])
    onhand=a[0]
    oldcost=a[11]
    newcost=c[0]

rem --- Calculate extensions at precision 2

    precision 2
    oldvalue=onhand*oldcost
    newvalue=onhand*newcost
    change=newvalue-oldvalue
    precision p[1]

rem --- New product?

    if h5$="" goto l2500
    if l+3+nl>l9 gosub report_heading
    if nl>0 print (printer_dev)""
    print (printer_dev)h5$
    print (printer_dev)""
    l=l+2+nl
    nl=1
    h5$=""

l2500: rem --- Print detail line

    if l>l9 gosub report_heading
    print (printer_dev)@(o[0]),b0$(3),@(o[1]),description$,@(o[2]),b2$(4,2),@(o[3]),onhand:m2$,@(o[4]),oldcost:m3$,@(o[5]),oldvalue:m1$,@(o[6]),newcost:m3$,@(o[7]),newvalue:m1$,@(o[8]),change:m1$
    l=l+1
    nl=1

rem --- Accumulate totals

    d[0]=d[0]+oldvalue
    d[1]=d[1]+newvalue
    s[0]=s[0]+oldvalue
    s[1]=s[1]+newvalue
    t[0]=t[0]+oldvalue
    t[1]=t[1]+newvalue
    r[0]=r[0]+oldvalue
    r[1]=r[1]+newvalue

rem --- G/L distribution

    if gl$<>"Y" goto l3900
    if ar$<>"Y" goto l3200

rem --- By Distribution Code

    dim d0$(32),d1$(8*g[4],"0")
    d0$(1)=firm_id$+"D"+a1$(13,2)
    find record (arm10_dev,key=d0$(1,5),dom=*next) arm10d$
    account$=d1$(6*g[4]+1,g[4])
    goto l3500

l3200: rem --- By Item

    dim account$(g[4],"0")
    if cvs(b6$(1,g[4]),2)<>"" account$=b6$(1,g[4])

l3500: rem --- Write summary record

    amount=change
    gosub l6900

l3900: rem --- Loop back for next record

    goto l1000

done: rem --- All done

    if l>l9 gosub report_heading
    done=1
    gosub l6000
    total$="Report"
    t0=r[0]
    t1=r[1]
    gosub l6800
    if gl$<>"Y" goto std_exit
    run pgmdir$+"glr_xb.bbx"

l4900: rem --- Not Standard Costing

    call pgmdir$+"ivc_warnings.aon","S",status
    status=999
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+3
    nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[4]+m3-8),"Current",@(o[5]+m1-8),"Current",@(o[6]+m3-5),"New",@(o[7]+m1-6),"New",@(o[8]+m1-9),"Change"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Description",@(o[2]),"UM",@(o[3]+m2-8),"On Hand",@(o[4]+m3-8),"Cost",@(o[5]+m1-8),"Value",@(o[6]+m3-5),"Cost",@(o[7]+m1-6),"Value",@(o[8]+m1-9),"In Value"
    print (printer_dev)""
    return

l5500: rem --- Sort ive-06 by product type

    dim y0$(30)
    first$=firm_id$+effective$
    read (ive06_dev,key=first$,dom=*next)

l5600: rem --- Read next entry record

    k$=key(ive06_dev,end=l5900)
    if pos(first$=k$)<>1 goto l5900
    read (ive06_dev)
    call pgmdir$+"adc_progress.aon","S","","","",fndate$(k$(3,3))+" "+k$(6,2)+" "+k$(8,p[0]),0,0,1,0,ignore_status
    b0$(1)=k$(1,2)+k$(8)
    find record (ivm01_dev,key=b0$,dom=l5600) ivm01a$

rem --- Write sort record

    y0$(1)=k$(1,7)+b2$(1,3)+k$(8)
    write record (ivw06_dev,key=y0$) ivw06a$
    goto l5600

l5900: rem --- Sort completed

    return

l6000: rem --- Date break

    if t0$="" goto l6100
    if l+3>l9 gosub report_heading
    gosub l6200
    total$=h2$
    t0=d[0]
    t1=d[1]
    gosub l6800
l6100:
    if done>0 goto l6190
    dim d[1]
    t0$=k$(3,3)
    h2$=fndate$(k$(3,3))
    headings$[1]=sysinfo.task_desc$+" For Changes Effective "+h2$
l6190:
    return

l6200: rem --- Warehouse break

    if t1$="" goto l6300
    if l+4>l9 gosub report_heading
    gosub l6400
    let total$=h3$,t0=t[0],t1=t[1]
    gosub l6800
l6300:
    if done>0 goto l6390
    dim t[1],w0$(32)
    let t1$=k$(6,2),w0$(6)="Not On File"
    find record (ivm10_dev,key=firm_id$+"C"+t1$,dom=*next) ivm10c$
    let h3$="Warehouse "+t1$+" "+cvs(w0$(6,24),2),l=l9+1
    let headings$[2]=h3$,headings=3
l6390:
    return

l6400: rem --- Product break

    if t2$="" goto l6500
    let total$=t5$,t0=s[0],t1=s[1]
    gosub l6800
l6500:
    if done>0 goto l6590
    dim s[1],u0$(32)
    let t2$=k$(8,3),u0$(7)="(Not On File)"
    find record (ivm10_dev,key=firm_id$+"A"+t2$,dom=*next) ivm10a$
    let h5$="Product "+t2$+" "+cvs(u0$(7,20),2),t5$=h5$
l6590:
    return

l6800: rem --- Print totals

    let t2=t1-t0,l=l+1,total$="Totals For "+total$
    print (printer_dev)@(o[1]),total$,@(o[5]),t0:m1$,@(o[7]),t1:m1$,@(o[8]),t2:m1$
    return
rem --- Update G/L Summary
l6900:
    if gl$<>"Y" goto l6990
    if amount=0 goto l6990
    let x0$=firm_id$+account$,x0=0
    find record (glw04_dev,key=x0$,dom=*next) glw04a$
    let x0=x0+amount
    write record (glw04_dev,key=x0$) glw04a$
l6990:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
