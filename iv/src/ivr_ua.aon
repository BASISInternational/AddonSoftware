rem --- Physical Inventory Count Sheets
rem --- Program ivr_ua v8.0.0 09Jul2007 (ivr_ua)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:44:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0094)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0100)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0111)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0112)
rem --- v7.x Administrator reference ["sys-01"] (Line 0118)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0129)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0139)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0143)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0188)
rem --- BBx reference ["syc_ra.bbx"] (Line 0188)
rem --- BBx reference ["ivc_ic.bbx"] (Line 0199)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following IOLIST's were removed from this program:

rem --- ive03a: iolist w0$(1),w1$(1),w[all]
rem --- ivm01a: iolist a0$(1),a1$(1),a2$(1),a3$(1),a4$(1),a5$,a6$,a[all]
rem --- ivm07a: iolist d0$(1),d1$(1)
rem --- ivm10c: iolist x0$(1)
rem --- ivm10p: iolist y0$(1)

rem --- The following channel references have been identified:

rem --- ivm02a: Channel reference (Line 0205)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)
rem --- ivw10a: Channel reference (Line 0203)
rem --- sys01a: Channel reference (Line 0201)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ive-03"
    files$[3]="ivm-01"
    files$[4]="ivm-02"
    files$[5]="ivm-07"
    files$[6]="ivm-10"
    files$[7]="ivw-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ive03_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm07_dev=channels[5]
    ivm10_dev=channels[6]
    ivw10_dev=channels[7]

rem --- Dimension string templates

    dim ive03a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm07a$:templates$[5],ivm10a$:templates$[6],ivw10a$:templates$[7]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivm-10P"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivm10p$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=7
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-10"
    files$[3]="ivw-10"
    files$[4]="ivm-02"
    files$[5]="ive-03"
    files$[6]="ivm-01"
    files$[7]="ivm-07"
    options$[3]="C"
    options$[5]="L"
    call pgmdir$+"adc_fileopen.aon",1,1,6,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm10_dev=channels[2]
    ivw10_dev=channels[3]
    ivm02_dev=channels[4]
    ive03_dev=channels[5]
    ivm01_dev=channels[6]

rem --- Parameters

    dim p[5]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n2$="IV"
    ls$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(i2$(1,2))
    p[1]=num(i2$(5,1))
    p[2]=num(i2$(7,2))
    p[3]=num(i2$(9,2))
    p[4]=num(i2$(11,2))
    p[5]=num(i2$(13,2))
    dw=p[3]+p[4]+p[5]
    if pos(i3$(17,1)="SL")>0 ls$="Y"

rem --- Initializations

    precision p[1]
    dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],headings$[3]
    dim w0$(56),w1$(60),w[2],x0$(32),y0$(11),o[6]
    clock$=""
    when$=sysinfo.system_date$
    l9=55
    l=l9+1
    width=132
    headings=2
    nl=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    lsh$=""
    sqh$=""
    number=0
    if ls$="Y" lsh$="Lot/Serial Number"

rem --- Additional file opens

    if ls$<>"Y" goto l650
    call pgmdir$+"adc_fileopen.aon",1,7,7,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[7]

l650: rem --- Resize masks

    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    main_context=resparams[0]
    if status goto std_exit

rem --- GOSUB FLOW_INITIALIZATIONS
rem --- Process input

    action$="P"
    whse$=i3$(6,2)
    cutoff$=""
    quantity$="N"
    call pgmdir$+"ivc_ic.bbx",action$,channels[all],whse$,cutoff$,quantity$,fkey,status,my_context,throw$
    if fkey<>0 goto std_exit
    if status<>0 goto std_exit
    if throw$="Y" goto std_exit

rem --- Retrieve warehouse and build HEADINGS$

    find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=std_exit) ivm10c$
    headings$[1]=sysinfo.task_desc$+" For Warehouse "+x0$(4,2)+" "+cvs(x0$(6,24),2)
    if quantity$="Y" sqh$="Quantity"

rem --- Print positions

    o[1]=p[0]+1
    o[3]=o[1]+max(dw,40)+1
    o[2]=o[3]
    o[4]=o[3]+4
    o[5]=o[4]+11
    o[6]=o[5]
    split=0
    if quantity$="Y" o[6]=o[5]+m2+2
    if o[6]<93 goto l940
    o[6]=92
    o[5]=o[6]
    if quantity$="Y" o[5]=o[6]-m2-2
    o[4]=o[5]-11
    o[3]=o[4]-4
    dw=o[3]-o[1]-1
l940:
    dim j9$(width-o[6],"_")
    if ls$="Y" o[2]=o[3]-max(p[2],len(lsh$))-1

rem --- Position file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","Printing","",17+p[0],0,1,meter_num,status
    read (ivw10_dev,key=firm_id$,dom=*next)

l1000: rem --- Read next entry record

    k$=key(ivw10_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read (ivw10_dev)

rem --- Update ivm-10 cycle code record

    y0$(1)=firm_id$+"P"+whse$+k$(3,2)
    find record (ivm10_dev,key=y0$(1,7),dom=l1900) ivm10p$
    y0$(8,1)="2"
    l=l9+1
    headings=3
    last$=""
    headings$[2]="Cycle Code "+k$(3,2)+" - Cutoff Date "+fndate$(y0$(9,3))
    write record (ivm10_dev,key=y0$(1,7)) ivm10p$

l1900: rem --- Position physical inventory record

    first$=k$(1,2)+whse$+k$(3)
    read (ive03_dev,key=first$,dom=*next)

l2000: rem --- Read next physical inventory record

    k$=key(ive03_dev,end=l3900)
    if pos(first$=k$)<>1 goto l3900
    read record (ive03_dev) ive03a$
    call pgmdir$+"adc_progress.aon","S","","","",w0$(3,2)+" "+w0$(5,2)+" "+k$(7,10)+" "+k$(17,p[0]),0,0,1,meter_num,status

rem --- Retrieve item master

    dim description$(dw)
    a0$(1)=firm_id$+w0$(17)
    a1$(1)="(Not On File)"
    a2$(1)=""
    find record (ivm01_dev,key=a0$,dom=*next) ivm01a$
    description$(1)=fnitem$(a1$,p[3],p[4],p[5])
    number=number+1

rem --- Print detail line (non-lotted/serialized)

    if ls$="Y" if a2$(19,2)="YY" goto l2300
    l=l+2+nl
    x$=""
    qty$=""
    if l>l9 gosub report_heading
    if nl>0 print (printer_dev)""
    if split=0 x$=description$ else x$=""
    if quantity$="Y" qty$=str(w[0]:m2$)
    print (printer_dev)@(o[0]),w0$(17,p[0]),@(o[1]),x$,@(o[3]),a2$(4,2),@(o[4]),w0$(7,10),@(o[5]),qty$,@(o[6]),j9$
    if split>0 x$=description$ else x$=""
    print (printer_dev)@(o[1]),x$
    goto l2900

l2300: rem --- Print detail line (lotted/serialized)

    if w0$(1,36)<>last$ gosub l5200
    if cvs(w0$(37),2)<>"" goto l2800

rem --- Print detail for blank lot/serial number

    if w[1]=0 goto l2500
    w0$(37)="Blank"
    if i3$(17,1)="S" goto l2450
    qty=w[1]
    gosub l5400
    goto l2490
l2450:
    for x=1 to w[1]
        qty=1
        gosub l5400
    next x
l2490:
    w[0]=w[0]-w[1]; rem "Exclude blanks from freeze qnty
    if w[0]>0 goto l2520 else goto l2900

l2500: rem --- Print detail for missing serial number

    if w[0]=0 w0$(37)="None"; goto l2800
l2520:
    if w[0]<0 goto l2900
    if w[0]>0 w0$(37)="Missing",location$=fill(10,".")
    if i3$(17,1)="L" goto l2800
    for x=1 to w[0]
        qty=1
        gosub l5400
    next x
    goto l2900

l2800: rem --- Retrieve and print lot/serial record

    dim d0$(44),d1$(96)
    d0$(1)=w0$(1,4)+w0$(17)
    d1$(1)=w0$(7,10)
    if pos(w0$(37,7)="None   Missing",7) and cvs(d1$(1,10),2)="" d1$(1)=fill(10,".")
    if cvs(d0$(25),2)<>"" find record (ivm07_dev,key=d0$,dom=*next) ivm07a$
    location$=d1$(1,10)
    qty=w[0]
    gosub l5400

l2900: rem --- Loop back for next physical inventory record

    goto l2000

l3900: rem --- Loop back for next entry record

    goto l1000

done: rem --- All done

    if number>0 goto std_exit
    gosub report_heading
    print (printer_dev)""
    print (printer_dev)"No Physical Inventory Entries Found"
    goto std_exit

rem --- File in use

    call pgmdir$+"ivc_warnings.aon","P",status
    goto std_exit

report_heading: rem --- Report Heading

    let l=headings+3,nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Description",@(o[2]),lsh$,@(o[3]),"UM",@(o[4]),"Location",@(o[5]+m2-9),sqh$,@(o[6]),"Physical Count"
    print (printer_dev)""
    return

l5200: rem --- Item subheading (lotted/serialized)

    if l+3+nl>l9 gosub report_heading
    if nl>0 print (printer_dev)""
    if split=0 x$=description$ else x$=""
    print (printer_dev)@(o[0]),w0$(17,p[0]),@(o[1]),x$,@(o[3]),a2$(4,2),@(o[4]),w0$(7,10)
    if split>0 x$=description$ else x$=""
    print (printer_dev)@(o[1]),x$
    let l=l+2+nl,last$=w0$(1,36)
    return
rem --- Print lot/serial detail
l5400:
    let nl=1,qty$=""
    if l+1>l9 l=l9+1; gosub l5200
    if quantity$="Y" qty$=str(qty:m2$)
    print (printer_dev)@(o[2]),w0$(37,p[2]),@(o[4]),location$,@(o[5]),qty$,@(o[6]),j9$
    let l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
