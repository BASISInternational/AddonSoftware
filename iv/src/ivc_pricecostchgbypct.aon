rem --- Price/Cost Change By Percentage Entry
rem --- Program ivc_pricecostchgbypct.aon v8.0.0 18Dec2007 (ivc_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/18/2007 09:44:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem  ACTION$: Entry Type (Input)
rem           C=Cost Change/P=Price Change/R=Price Change Reversal
rem  ENTRY$ : Entry File Name (Input)
rem           C=IVE-06/P=IVE-05/R=IVW-09
rem  STATUS : 0=No error (Returned)

	seterr std_error
	setesc std_error
	enter action$,entry$,option!,status
	
rem --- Use for type checking

	use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve the program path

	pgmdir$=""
	pgmdir$=stbl("+DIR_PGM",err=*next)
	sypdir$=""
	sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL")
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO")
	firm_id$=sysinfo.firm_id$
	
rem --- Sanity check

	status = 911
	
	if pos(action$="CRP") = 0 then goto std_exit
	if entry$ <> "IVE_COSTCHG" and entry$ <> "IVE_PRICECHG" then goto std_exit
	if option! = null() then goto  std_exit
	
	status = 0

rem --- Assign form input values to local variables
	
	declare Option option!
	
	effect_date$ = option!.getOptionData("EFFECT_DATE")
	begvend$     = option!.getOptionData("VENDOR_ID_1")
	endvend$     = option!.getOptionData("VENDOR_ID_2")
	begwhse$     = option!.getOptionData("WAREHOUSE_ID_1")
	endwhse$     = option!.getOptionData("WAREHOUSE_ID_2")
	begprod$     = option!.getOptionData("PRODUCT_TYPE_1")
	endprod$     = option!.getOptionData("PRODUCT_TYPE_2")
	begitem$     = option!.getOptionData("ITEM_ID_1")
	enditem$     = option!.getOptionData("ITEM_ID_2")
	type$        = option!.getOptionData("ITEM_TYPE")
	percent      = num( option!.getOptionData("PERCENT_CHANGE") )
	
	price_code$=""; rem Price code

rem --- Open all files

	num_files = 4
	open_beg  = 1
	open_end  = num_files
	
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	
	open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
	open_tables$[2]="IVX_ITEMPRWH", open_opts$[2]="OTA"
	open_tables$[3]="IVM_ITEMMAST", open_opts$[3]="OTA"
	open_tables$[4]="IVM_ITEMWHSE", open_opts$[4]="OTA"
	open_tables$[5]=entry$,         open_opts$[4]="OTA"
	
	call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		call sypdir$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
		status=912
		goto std_exit
	endif

	params_dev   = num( open_chans$[1] )
	itemprwh_dev = num( open_chans$[2] )
	itemmast_dev = num( open_chans$[3] )
	itemwhse_dev = num( open_chans$[4] )
	entry_dev    = num( open_chans$[5] )
	
	dim params_rec$:open_tpls$[1]
	dim itemprwh_rec$:open_tpls$[2]
	dim itemmast_rec$:open_tpls$[3]
	dim itemwhse_rec$:open_tpls$[4]
	dim entry_rec$:open_tpls$[5]

rem --- Parameters
	
	find record (params_dev, key=firm_id$+"IV00", dom=std_missing_params) params_rec$

rem --- Initializations
	
	precision num( params_rec.precision$ )
	more = 1
	updating_cost = (action$="C")

rem --- Initial read
	
	call pgmdir$+"adc_progress.aon","N","","","","",0,itemprwh_dev,1,ignore_status
	
	first$ = firm_id$ + "C"
	k$ = first$ + begwhse$
	if begwhse$ <> "" then k$ = k$ + begprod$
	if k$ <> first$ then k$ = k$ + begitem$
	read (itemprwh_dev,key=k$,dom=*next)

	while more
	
rem --- Get next sort record

		itemprwh_key$ = key(itemprwh_dev,end=*break)
		if pos(first$=itemprwh_key$)<>1 then break 
		read (itemprwh_dev) itemprwh_rec$
		
		whse$    = itemprwh_rec.warehouse_id$
		product$ = itemprwh_rec.product_type$
		item$    = itemprwh_rec.item_id$

rem --- Test for in range, do trip reads

		if endwhse$<>"" and whse$>endwhse$ then break
		
		if begprod$<>"" and product$<begprod$ then
			read (itemprwh_dev, key=firm_id$+"C"+whse$+begprod$, dom=*continue)
			continue
		endif
		
		if endprod$<>"" and product$>endprod$ then
			read (itemprwh_dev, key=firm_id$+"C"+whse$+$ff$, dom=*continue)
			continue
		endif
		
		if begitem$<>"" and item$<begitem$ then
			read (itemprwh_dev, key=firm_id$+"C"+whse$+product$+begitem$, dir=0, dom=*continue)
			continue
		endif
		
		if enditem$<>"" and item$>enditem$ then
			read (itemprwh_dev, key=firm_id$+"C"+whse$+ivm03a.product$+$ff$, dom=*continue)
			continue
		endif

rem --- Read item and warehouse records

		call pgmdir$+"adc_progress.aon","S","","",""," ",0,0,1,meter_num,ignore_status
			
		find record (itemmast_dev, key=firm_id$+item$, dom=*continue) itemmast_rec$
		
		if type$<>"" and itemmast_rec.item_type$<>type$ then continue
		
		find record (itemwhse_dev, key=firm_id$+whse$+item$, dom=*continue) itemwhse_rec$
		
		if itemwhse_rec.stock_level<>"W" then
			vendor$=itemmast_rec.vendor_id$
		else
			vendor$=itemwhse_rec.vendor_id$
		endif
		
		if begvend$<>"" and vendor$<begvend$ then continue
		if endvend$<>"" and vendor$>endvend$ then continue
		if action$="R"  and cvs(itemwhse_rec.cur_price_cd$,2)<>price_code$ then continue

rem --- Generate price/cost change record

		if action$="C" then 

            entry_rec.firm_id$      = firm_id$
            entry_rec.effect_date$  = effect_date$
            entry_rec.item_id$      = item$
            entry_rec.warehouse_id$ = whse$
            entry_rec.std_cost      = fnp(itemwhse_rec.unit_cost, percent)
			
		else
          
            if action$="R" then
               
                entry_rec.firm_id$      = firm_id$
                entry_rec.price_code$   = price_code$
                entry_rec.warehouse_id$ = whse$
                entry_rec.product_type$ = product$
                entry_rec.item_id$      = item$
				
            else
			
	            if action$="P" then
	                
	                entry_rec.firm_id$      = firm_id$
	                entry_rec.price_code$   = price_code$
	                entry_rec.warehouse_id$ = whse$
	                entry_rec.unit_price    = fnp(itemwhse_rec.cur_price, percent)

	            endif
			endif
        endif

		entry_rec$ = field(entry_rec$)
        write record (entry_dev) entry_rec$

rem --- Loop back for next sort record

	wend

rem --- All done

	status=0
	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
	goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

	def fnp(q1,q2)=q1+((q1*q2)/100)
	
rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

 call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
