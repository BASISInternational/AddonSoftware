rem --- Transaction Register
rem --- Program ivr_aa v8.0.0 09Jul2007 (ivr_aa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:39:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0151)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0158)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0173)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0174)
rem --- v7.x Administrator reference ["sys-01"] (Line 0180)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0193)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0215)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0216)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0241)
rem --- BBx reference ["ivc_lf.bbx"] (Line 0384)
rem --- BBx reference ["ivu_aa.bbx"] (Line 0451)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file glt-14 referenced (Line 0116)
rem --- Cross-reference file ivm-08 referenced (Line 0124)
rem --- Cross-reference file ivm-08 referenced (Line 0312)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record glt14a replaced by index on glt-04 (Line 0136)
rem --- Cross-reference record ivm08a replaced by index on ivm-07 (Line 0139)

rem --- The following IOLIST's were removed from this program:

rem --- arm10d: iolist *,z9$
rem --- ars01a: iolist *,*,*,a9$
rem --- gls01a: iolist *,g1$,g2$,g3$,g4$,g5$,g6$,g7$
rem --- ive01a: iolist c0$(1)
rem --- ive11a: iolist a0$,a1$,a2$,a[all]
rem --- ivm01a: iolist b0$,b1$(1),b2$,b3$,b4$,b5$,z0$(1)
rem --- ivm02a: iolist d0$,d1$(1)
rem --- ivm10b: iolist x0$(1),x1$(1)

rem --- The following channel references have been identified:

rem --- glm01a: Channel reference (Line 0285)

rem --------------------------------------------------------------------------------
rem --- glt14a: Channel reference (Line 0304)
rem --- glw11a: Channel reference (Line 0283)
rem --- ivm04a: Channel reference (Line 0282)
rem --- ivm07a: Channel reference (Line 0280)
rem --- ivm08a: Channel reference (Line 0280)
rem --- ivm12a: Channel reference (Line 0267)
rem --- ivm17a: Channel reference (Line 0278)
rem --- ivs01a: (Generated by CodePort)
rem --- ivt01a: Channel reference (Line 0276)
rem --- ivt02a: Channel reference (Line 0275)
rem --- ivt03a: Channel reference (Line 0274)
rem --- ivt04a: Channel reference (Line 0261)
rem --- ivw04a: Channel reference (Line 0272)
rem --- sys01a: Channel reference (Line 0259)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=20,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-10"
    files$[3]="glm-01"
    files$[4]="glt-14"
    files$[5]="glw-11"
    files$[6]="ive-01"
    files$[7]="ive-11"
    files$[8]="ivm-01"
    files$[9]="ivm-02"
    files$[10]="ivm-04"
    files$[11]="ivm-07"
    files$[12]="ivm-08"
    files$[13]="ivm-10"
    files$[14]="ivm-12"
    files$[15]="ivm-17"
    files$[16]="ivt-01"
    files$[17]="ivt-02"
    files$[18]="ivt-03"
    files$[19]="ivt-04"
    files$[20]="ivw-04"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm10_dev=channels[2]
    glm01_dev=channels[3]
    glt14_dev=channels[4]
    glw11_dev=channels[5]
    ive01_dev=channels[6]
    ive11_dev=channels[7]
    ivm01_dev=channels[8]
    ivm02_dev=channels[9]
    ivm04_dev=channels[10]
    ivm07_dev=channels[11]
    ivm08_dev=channels[12]
    ivm10_dev=channels[13]
    ivm12_dev=channels[14]
    ivm17_dev=channels[15]
    ivt01_dev=channels[16]
    ivt02_dev=channels[17]
    ivt03_dev=channels[18]
    ivt04_dev=channels[19]
    ivw04_dev=channels[20]

rem --- Dimension string templates

    dim arm10a$:templates$[2],glm01a$:templates$[3],glt14a$:templates$[4],
:       glw11a$:templates$[5],ive01a$:templates$[6],ive11a$:templates$[7],
:       ivm01a$:templates$[8],ivm02a$:templates$[9],ivm04a$:templates$[10],
:       ivm07a$:templates$[11],ivm08a$:templates$[12],ivm10a$:templates$[13],
:       ivm12a$:templates$[14],ivm17a$:templates$[15],ivt01a$:templates$[16],
:       ivt02a$:templates$[17],ivt03a$:templates$[18],ivt04a$:templates$[19],
:       ivw04a$:templates$[20]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=21
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ive-01"
    files$[3]="ive-11"
    files$[4]="ivm-01"
    files$[5]="ivm-02"
    files$[6]="ivm-10"
    files$[7]="ivm-12"
    files$[8]="ivt-04"
    options$[1]="P"
    options$[2]="L"
    options$[3]="L"
    call pgmdir$+"adc_fileopen.aon",1,1,8,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ive01_dev=channels[2]
    ive11_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ivm10_dev=channels[6]
    ivm12_dev=channels[7]
    ivt04_dev=channels[8]

rem --- Parameters

    dim p[5],g[4],t$:stbl("+TASK_TMPL")
    t$=stbl("+TASK")
    f0$=t.f0$
    sysinfo.firm_name$=t.sysinfo.firm_name$
    sysinfo.task_desc$=t.sysinfo.task_desc$
    firm_id$=t.f0$(16,2)
    n2$="IV"
    ls$="N"
    lf$="N"
    source$=pgm(-2)
    when$=t.sysinfo.system_date$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g[0]=num(g2$(1,2))
    g[3]=num(g2$(7,2))
    g[4]=num(g2$(9,2))
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(7,2))
    p[2]=num(p2$(5,1))
    p[3]=num(p2$(9,2))
    p[4]=num(p2$(11,2))
    p[5]=num(p2$(13,2))
    dw=p[3]+p[4]+p[5]
    g5=len(g5$)
    g[0]=g[3]
    p9$=p3$(17,1)
    p8$="/Lot/Serial #"
    ar$="N"
    a9$="N"
    if pos(p3$(17,1)="LS") ls$="Y" else ls$="N",p8$=""
    if pos(p3$(3,1)="LF") lf$="Y"
    call pgmdir$+"adc_sizemask.aon",m1$,m1,11,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,5,12
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$<>"Y" goto l485
    find record (sys01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    a9$=a9$(11,1)
l485:
    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status goto std_exit

rem --- Initializations

    precision p[2]
    dim c0$(50),a[2],headings$[2],o[8],lf[10],item$[10]
    width=132
    page=0
    l9=59
    l=l9+1
    w=34
    units=0
    errors=0
    glh$=""
    glh=0
    if gl$="Y" glh$="GL Account",glh=max(g5,len(glh$)+2)
    headings=2
    headings$[0]=t.sysinfo.firm_name$
    headings$[1]=t.sysinfo.task_desc$
    glstatus=0
    places=p[2]
    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+p[0]+1
    o[4]=o[3]+dw
    o[5]=o[4]+m2
    o[6]=o[5]+m3
    o[7]=o[6]+m1+1
    o[8]=o[7]+glh
    if o[8]+3<width goto l555
    o[8]=width-3
    o[7]=o[8]-glh-1
    o[6]=o[7]-m1-1
    o[5]=o[6]-m3
    o[4]=o[5]-m2
    o[1]=o[0]+5
    o[2]=o[1]+3
    o[3]=o[2]+p[0]+1
    dw=o[4]-o[3]-1
l555:
    if ls$="N" goto l570
    files$[9]="ivm-07"
    files$[10]="ivm-08"
    files$[11]="ivm-17"
    files$[12]="ivt-01"
    files$[13]="ivt-02"
    files$[14]="ivt-03"
l570:
    if lf$="N" goto l580
    files$[15]="ivm-04"
    files$[16]="ivw-04"
    options$[16]="CL"
l580:
    if gl$<>"Y" goto l590
    files$[17]="glm-01"
    files$[18]=glw11$
    options$[18]="CL"
l590:
    if ar$="Y" and a9$="Y" files$[19]="arm-10"

rem --- Additional File Opens

    call pgmdir$+"adc_fileopen.aon",1,9,19,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[9]
    ivm08_dev=channels[10]
    ivm17_dev=channels[11]
    ivt01_dev=channels[12]
    ivt02_dev=channels[13]
    ivt03_dev=channels[14]
    ivm04_dev=channels[15]
    ivw04_dev=channels[16]
    glm01_dev=channels[17]
    glw11_dev=channels[18]
    arm10_dev=channels[19]
    lf[0]=ivm04_dev
    lf[1]=ivw04_dev
    lf[2]=ivm02_dev

l800: rem --- Run Report?

    v4$="Do you want to print the "+t.sysinfo.task_desc$
    call pgmdir$+"adc_yesno.aon",1,v4$,2,v$,v3
    on v3 goto l840,l800,l800,l800,std_exit,l840,std_exit
l840:
    if v$<>"Y" goto std_exit

rem --- Position file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N",t.sysinfo.task_desc$,"","Printing","",11,ive01_dev,1,0,ignore_status
    read (ive01_dev,key=firm_id$,dom=*next)

main_top: rem --- Read next ive-01 header

    k$=key(ive01_dev,end=all_done)
    if pos(firm_id$=k$)<>1 goto all_done
    read record (ive01_dev,end=all_done) ive01a$
    read (ive11_dev,key=k$(1,9),dom=*next)

detail_top: rem --- Read next ive-11 detail

    k$=key(ive11_dev,end=all_done)
    if pos(k$(1,9)=c0$)<>1 goto main_bottom
    read record (ive11_dev) ive11a$

rem --- Breaks

    if a0$(3,7)<>t0$ gosub ref_break
    call pgmdir$+"adc_progress.aon","S","","","",a0$(3,7)+"-"+a0$(10,3),0,0,1,0,ignore_status

rem --- Additional Reads

    dim b0$(22),b1$(60),z0$(g[4]),description$(dw)
    b0$(1)=firm_id$+a1$(3)
    b1$(1)="Unknown Item"
    find record (ivm01_dev,key=b0$,dom=*next) ivm01a$
    description$(1)=fnitem$(b1$,p[3],p[4],p[5])
    if ls$="N" or b2$(19,2)<>"YY" goto lifo_fifo
    goto new_page

lifo_fifo: rem --- LIFO/FIFO?

    if lf$="N" goto new_page
    if x0$(26,1)="C" goto new_page
    item$[0]=firm_id$
    item$[1]=a1$(1,2)
    item$[2]=a1$(3,20)
    lf_date$=c0$(15,3)
    action$=p3$(3,1)+"R"
    quantity=a[0]
    cost=a[1]
    ret_cost=0
    type$="R"
    if x0$(26,1)="I" action$=p3$(3,1)+"I"
    if x0$(26,1)="A" if quantity<0 action$=p3$(3,1)+"I"
    call pgmdir$+"ivc_lf.bbx",action$,type$,lf_date$,lf[all],item$[all],places,abs(quantity),cost,ret_cost,status

rem --- Cost change?

    if a[1]=ret_cost goto new_page
    if ret_cost a[1]=ret_cost
    a[2]=round(a[0]*a[1],2)
    write record (ive11_dev,key=a0$(1,12)) ive11a$

new_page: rem --- New page?

    if l+2<l9 goto print_detail
    gosub report_heading
    gosub trans_heading

print_detail: rem --- Print detail line

    account$=""
    lotser$=""
    t0=t0+a[2]
    l=l+2
    if gl$="Y" account$=fnmask$(a0$(28,g[0]),g5$)
    if ls$="Y" if b2$(20,1)="Y" lotser$=a2$(1,p[1])
    print (printer_dev)@(o[0]),a0$(10,3),@(o[1]),a1$(1,2),@(o[2]),a1$(3,p[0]),@(o[3]),description$,@(o[4]),a[0]:m2$,@(o[5]),a[1]:m3$,@(o[6]),a[2]:m1$,@(o[7]),account$,@(o[8]),a0$(38,3)
    print (printer_dev)@(o[3]),lotser$

rem --- G/L Distribution

    if gl$<>"Y" goto detail_bottom
    if x0$(26,1)="C" goto detail_bottom

rem --- Distribute by Item?

    if x0$(27,1)="N" goto detail_bottom
    if a9$="N" goto post_summary
    dim d1$(40)
    find record (ivm02_dev,key=firm_id$+a1$,dom=post_summary) ivm02a$
    find record (arm10_dev,key=firm_id$+"D"+d1$(13,2),dom=post_summary) arm10d$
    z0$(1)=z9$(61)

post_summary: rem --- Post summary record

    precision 2
    account$=z0$
    gldate$=c0$(15,3)
    memo$=a1$(3)+" "+description$
    ref1$="Inv Trn "+c0$(13,2)
    ref2$=a0$(3,7)
    ref3$=a0$(10,3)
    amount=a[2]
    if x0$(26,1)="I" amount=-amount
    gosub glrecap
    account$=a0$(28,g[4])
    amount=-amount
    gosub glrecap
    precision p[2]

detail_bottom: rem --- Loop back for next detail

    goto detail_top

main_bottom: rem --- Loop back for next header

    goto main_top

all_done: rem --- Totals

    let t9$="E",update$="ivu_aa.bbx"
    gosub ref_break
    if gl$="Y" run pgmdir$+"glr_recap.aon"
    run update$,err=std_exit

report_heading: rem --- Report Heading

    let l=headings+2
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[0]),"Seq",@(o[1]),"Wh",@(o[2]),"Item",@(o[3]),"Description",p8$,@(o[4]+m2-9),"Quantity",@(o[5]+m3-5),"Cost",@(o[6]+m1-11),"Total Cost",@(o[7]),glh$,@(o[8]),"Who"
    return

trans_heading: rem --- Trans Heading

    if l+6>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)"Reference ",c0$(3,7),@(23),"Transaction Code: ",c0$(13,2)," ",x0$(6,20),@(73),"Transaction Date: ",fndate$(c0$(15,3)),@(103),"Comment: ",c0$(18,20)
    if gl$<>"Y" goto l5270
    call pgmdir$+"glc_datecheck.aon",c0$(15,3),"N",period$,year$,glstatus
    if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,c0$(15,3),glstatus,l,errors,status
l5270:
    print (printer_dev)""
    let l=l+3
    return

ref_break: rem --- Reference break, previous totals

    if t0$="" goto l6100
    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[6]-27),"Total For Reference ",t0$,@(o[6]),t0:m1$
    let l=l+1

l6100: rem --- New reference

    if t9$<>"" goto l6190
    dim x0$(32),x1$(g[4])
    let t0$=c0$(3,7),x0$(6,20)="(Not On File)",t0=0
    find record (ivm10_dev,key=firm_id$+"B"+c0$(13,2),dom=*next) ivm10b$
    gosub trans_heading
l6190:
    return
glrecap: rem --- Standard G/L Recap Routine

    if gl$<>"Y" goto l6990
    call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
l6990:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
