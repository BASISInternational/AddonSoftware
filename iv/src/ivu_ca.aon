rem --- Inventory Period End Update
rem --- Program ivu_ca v8.0.0 09Jul2007 (ivu_ca)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:55:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0187)
rem --- Undefined function fnyear_yy21$ (Line 0340)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0116)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0123)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0138)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0139)
rem --- v7.x Administrator reference ["sys-01"] (Line 0149)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0162)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0167)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0173)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0174)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0178)
rem --- v7.x sys-01 reference [sys01_dev] (Line 0197)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0247)
rem --- BBx reference ["syc_ra.bbx"] (Line 0247)
rem --- v7.x sys-01 reference [sys01_dev,p[] (Line 0252)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0257)
rem --- BBx reference ["syc_rs.bbx"] (Line 0257)
rem --- BBx reference ["ivc_pa.bbx"] (Line 0294)
rem --- BBx reference ["ivc_ua.bbx"] (Line 0303)
rem --- BBx reference ["ivc_pa.bbx"] (Line 0307)
rem --- BBx reference ["ivc_ua.bbx"] (Line 0316)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0339)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0341)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following IOLIST's were removed from this program:

rem --- apm06a: iolist r0$,r1$,r[all]
rem --- aps01a: iolist x$,x$,x$,ap$(1)
rem --- gls01a: iolist x$,g1$,g2$,g3$,g4$,g5$,g6$,g7$
rem --- ivm01a: iolist c0$,c1$,c2$,c3$,c4$,c5$,c6$,c[all]
rem --- ivm02a: iolist a0$,a1$,a2$,a[all]
rem --- ivm07a: iolist d0$,d1$,d[all]
rem --- ivm12a: iolist b0$,b1$,b2$,b[all]
rem --- ivm17a: iolist b0$,b1$,b2$,b[all]

rem --- The following channel references have been identified:

rem --- ivs01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivt01a: Channel reference (Line 0235)
rem --- ivt04a: Channel reference (Line 0230)
rem --- sys01a: Channel reference (Line 0229)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-06"
    files$[3]="ivm-01"
    files$[4]="ivm-02"
    files$[5]="ivm-07"
    files$[6]="ivm-12"
    files$[7]="ivm-17"
    files$[8]="ivt-01"
    files$[9]="ivt-04"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm06_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm07_dev=channels[5]
    ivm12_dev=channels[6]
    ivm17_dev=channels[7]
    ivt01_dev=channels[8]
    ivt04_dev=channels[9]

rem --- Dimension string templates

    dim apm06a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm07a$:templates$[5],ivm12a$:templates$[6],ivm17a$:templates$[7],
:       ivt01a$:templates$[8],ivt04a$:templates$[9]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=9
    dim files$[files],options$[files],channels[files]
    files$[1]="ivm-01"
    files$[2]="ivm-02"
    files$[3]="ivm-12"
    files$[4]="ivt-04"
    files$[5]="sys-01"
    files$[6]="ivm-07"
    files$[7]="ivm-17"
    files$[8]="ivt-01"
    files$[9]="apm-06"
    options$[2]="L"
    options$[8]="R"
    call pgmdir$+"adc_fileopen.aon",1,1,5,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm01_dev=channels[1]
    ivm02_dev=channels[2]
    ivm12_dev=channels[3]
    ivt04_dev=channels[4]
    sys01_dev=channels[5]

rem --- Parameters

    dim info$[20],ap$(21)
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="IV"
    n3$=sysinfo.task_desc$
    apflag$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    call pgmdir$+"adc_application.aon","AP",info$[all]
    apflag$=info$[20]
    if apflag$<>"Y" goto l450
    find record (sys01_dev,key=firm_id$+"AP00",dom=l450) aps01a$
    apflag$=ap$(21,1)
    if apflag$=" " apflag$="N"
l450:
    dim p[7],g[4]
    g[0]=num(g2$(1,2))
    p[0]=num(p2$(1,2))
    p[2]=num(p2$(7,2))
    p[6]=num(p4$(1,2))
    p[7]=fnyy_year(p4$(3,2))

rem --- Init Data

    precision num(p2$(5,1))
    dim a[20],b[12],c[12],d[12],r[11]
    m0=len(m0$)
    m1=len(m1$)
    g5=len(g5$)
    dim channs[44],params[3],params$[4],item$[3],refs$[11],refs[53]
    channs[0]=sys01_dev
    channs[1]=ivm01_dev
    channs[2]=ivm02_dev
    channs[7]=ivm07_dev
    channs[12]=ivm12_dev
    channs[17]=ivm17_dev
    channs[41]=ivt01_dev
    channs[44]=ivt04_dev
    params[0]=p[0]
    params$[0]=sysinfo.system_date$
    params$[1]=sysinfo.user_id$
    params$[2]=p2$
    params$[3]=p3$
    params$[4]=p4$
    controls=3
    first=0
    last=controls
    action$=""
    dim control[controls],value$[controls],value[controls],mask$[controls]
    for ii=0 to 1
        control[ii]=3000+ii
    next ii
    control[3]=2000

rem --- Check on Lot/Serial Flag

    ls$="N"
    if pos(p3$(17,1)="LS")=0 goto l660
    call pgmdir$+"adc_fileopen.aon",1,6,8,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[6]
    ivm17_dev=channels[7]
    ivt01_dev=channels[8]
    channs[7]=ivm07_dev
    channs[17]=ivm17_dev
    channs[41]=ivt01_dev
    ls$=p3$(17,1)

l660: rem --- Check on Replenishment

    if apflag$="N" goto display_resource
    call pgmdir$+"adc_fileopen.aon",1,9,9,files$[all],options$[all],channels[all],batch,status
    if status apflag$="N"
    apm06_dev=channels[9]

display_resource: rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit

rem --- Determine Period Limits

    call pgmdir$+"adc_perioddates.aon",sys01_dev,p[6],p[7],v0$,v9$,status
    p8$=v0$
    p9$=v9$
    p9=p[6]
    h3$="Period "+str(p[6])+"  From "+fndate$(v0$)+" To "+fndate$(v9$)
    call pgmdir$+"syc_rs.bbx","",my_context,2000,h3$,0,"",status
    call pgmdir$+"adc_daydates.aon",v9$,when$,1

l900: rem --- Correct?

    call pgmdir$+"adc_yesno.aon",0,"Are You Ready To Close This Period",0,v$,v3
    on v3 goto l930,l900,l900,l900,std_exit,l930,std_exit
l930:
    if v$="NO" goto std_exit
    if v$<>"YES" goto l900
    call pgmdir$+"adc_progress.aon","N","","","Updating","",3+p[0],0,1,meter_num,status
    refs$[0]=when$

rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1

rem --- Process ivm-02

    read (ivm02_dev,key=firm_id$,dom=*next)

l1100: rem --- Main Read

    k0$=key(ivm02_dev,end=l2000)
    if k0$(1,2)<>firm_id$ goto l2000
    read record (ivm02_dev) ivm02a$
    read record (ivm01_dev,key=a0$(1,2)+a0$(5,20),dom=l1100) ivm01a$
    call pgmdir$+"adc_progress.aon","S","","","",k0$(3,2)+" "+k0$(5,p[0]),0,0,1,meter_num,status
    if ls$="N" or c2$(19,2)<>"YY" goto l1300
    read (ivm07_dev,key=a0$(1,24),dom=*next)

l1200: rem --- Check for Serial Numbers

    k07$=key(ivm07_dev,end=l1300)
    if pos(a0$(1,24)=k07$)<>1 goto l1300
    read record (ivm07_dev) ivm07a$
    find record (ivm17_dev,key=k07$+p4$(3,2)+p4$(1,2),dom=l1200) ivm17a$
    call pgmdir$+"ivc_pa.bbx","END",b[all],balance
    item$[0]=firm_id$
    item$[1]=a0$(3,2)
    item$[2]=a0$(5,20)
    item$[3]=b0$(25,20)
    refs$[10]=d1$(1,10)
    refs$[11]=d1$(14,40)
    refs[0]=balance
    refs[1]=d[3]
    call pgmdir$+"ivc_ua.bbx","BB",channs[all],params[all],params$[all],item$[all],refs$[all],refs[all],status
    goto l1200
l1300:
    find record (ivm12_dev,key=k0$+p4$(3,2)+p4$(1,2),dom=l1100) ivm12a$
    call pgmdir$+"ivc_pa.bbx","END",b[all],balance
    item$[0]=firm_id$
    item$[1]=a0$(3,2)
    item$[2]=a0$(5,20)
    item$[3]=""
    refs$[10]=""
    refs$[11]=""
    refs[0]=balance
    refs[1]=a[11]
    call pgmdir$+"ivc_ua.bbx","BB",channs[all],params[all],params$[all],item$[all],refs$[all],refs[all],status
    goto l1100

l2000: rem --- Update Replenishment File - Year End Only

    if apflag$="N" or p9<>g[0] goto done
    dim r[11]
    read (apm06_dev,key=firm_id$,dom=*next)
l3100:
    let key$=key(apm06_dev,end=done)
    if pos(firm_id$=key$)<>1 goto done
    extract record (apm06_dev,key=key$) apm06a$
    let r[4]=r[7],r[7]=0
    let r[5]=r[8],r[8]=0
    let r[6]=r[9],r[9]=0
    write record (apm06_dev,key=key$) apm06a$
    goto l3100

done: rem --- Increment Period

    if p9<p[6] goto l4100
    let p[6]=p[6]+1
    if p[6]>g[0] p[6]=1,p[7]=p[7]+1
    extract record (sys01_dev,key=firm_id$+n2$+"00",dom=*next) ivs01a$
    let p4$(1,2)=str(p[6]:"00"),p4$(3,2)=fnyear_yy21$(p[7])
    write record (sys01_dev,key=firm_id$+n2$+"00") ivs01a$
l4100:
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
