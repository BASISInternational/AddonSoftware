rem --- Inventory Vendor Listing (Report Overlay)
rem --- Program ivr_ib v8.0.0 16Jul2007 (ivr_ib)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:43:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem --- ivs01a: (Generated by CodePort)

    setesc std_error
    seterr std_error
rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    
rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$
    More=1

rem --- Init Data

    precision num(ivs01a.precision$)
    width=132
    headings=5
    dim d[12],o[13],headings$[headings]
    h=0
    l9=59
    l=l9+1
    when$=sysinfo.system_date$
    clock$=""
    x$=fndate$(when$)
    headings$[0]=n1$
    headings$[1]=n3$
    day_of_mth=num(x$(4,2))
    headings3$=fill(width)
    headings$[4]=fill(width)
    m9=len(m9$)
    if beg_item$="" headings3$(1)="From Item: First" else headings3$(1)="From Item: "+beg_item$
    if beg_prod$="" headings3$(113)="From Product: First" else letheadings3$(113)="From Product: "+beg_prod$
    if end_item$="" headings$[4](3)="To Item: Last" else headings$[4](3)="To Item: "+end_item$
    if end_prod$="" headings$[4](115)="To Product: Last" else headings$[4](115)="To Product: "+end_prod$
    if item_type$="" headings$[4](59,14)="Item Type: All" else letheadings$[4](60,14)="Item Type: "+item_type$
    base_peryr$=ivs01a.current_per$+ivs01a.current_year$
    

rem --- Print positions and headings

    gosub Position

rem --- Background
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm05_dev,1,meter_num,status

rem --- Initial Read
    dim ivm05a_key$:ivm05_key_tpl$
    read (ivm05_dev,key=firm_id$+beg_vend$,dom=*next)

rem ----  Loop Starting

    While More  
        ivm05a_key$=key(ivm05_dev,end=*break)
        if pos(firm_id$=ivm05a_key$)<>1 break
        if end_vend$<>"" 
            if ivm05a_key.vendor_id$>end_vend$  break
        endif
        if beg_item$ <>"" then
            if ivm05a_key.item_id$< beg_item$ ivm05a_key$=ivm05a_key.firmid$+ivm05a_key.vendor_id$+beg_item$
        else 
        if end_item$<>"" then
           if ivm05a_key.item_id$>end_item$ ivm05a_key$=ivm05a_key.firmid$+ivm05a_key.vendor_id$+$FF$
        endif

rem --- Position ivm-05
        read record (ivm05_dev,key=ivm05a_key$,dom=*Continue) ivm05a$

rem --- Additional Reads

        find record (ivm01_dev,key=firm_id$+ivm05a_key.item_id$,dom=*Continue) ivm01a$
        if beg_prod$<>"" then
              if ivm01a.product_type$<beg_prod$ Continue
        endif
        if end_prod$<>"" then
             if ivm01a.product_type$>end_prod$ Continue
        endif
        if item_type$<>"" then
             if ivm01a.item_type$>item_type$ Continue  
        endif

rem --- Breaks

        if ivm05a_key.firmid$<>firm_id$  break
        if ivm05a_key.vendor_id$<>t0$ gosub Vendor
        call pgmdir$+"adc_progress.aon","S","","","",fnmask$(ivm05a_key.vendor_id$,m9$)+" "+ivm05a_key.item_id$,0,0,1,meter_num,status

rem --- Get Actual Annual Usage & EOQ

        dim channs[12],item$[2],whse$[2],whse[20]
        channs[1]=ivm01_dev
        channs[2]=ivm02_dev
        channs[3]=ivm03_dev
        channs[12]=ivm12_dev
        item$[0]=firm_id$
        item$[1]=""
        item$[2]=ivm01a.item_id$
        call pgmdir$+"ivc_au.bbx","I",channs[all],item$[all],abcf[all],day_of_mth,base_peryr$,p4$(1,4),g[0],p[1],w0,estimated,flag$,status
        if flag$<>"" w0=estimated
        if status<>0 usage$=fill(m2,"*") else usage$=str(w0:m2$)
        if ivm01a.stock_level$="I" then
            eoq_code$=ivm01a.eoq_code$
            eoq_qty$=str(ivm01a.eoq:m2$) 
        else
            call pgmdir$+"ivc_wa.bbx","A",channs[all],item$[all],whse$[all],whse[all],value,status
            if status<>0 eoq_code$="*",eoq_qty$=fill(m2,"*") else eoq_code$=whse$[1](57,1),eoq_qty$=str(whse[6]:m2$)
        endif

rem --- Print

         if l+2>l9 gosub report_heading
         print (printer_dev)@(o[0]),ivm01a.item_id$,@(o[1]),ivm01a.product_type$,@(o[2]),ivm01a.purchase_um$,@(o[3]),ivm01a.stock_level$,@(o[4]),ivm05a.PRISEC_FLAG$,@(o[5]),ivm05a.VENDOR_ITEM$,@(o[6]),fndate$(ivm05a.last_po_date$),@(o[7]),ivm05a.LAST_PO_LEAD:"##0",@(o[8]),ivm05a.LAST_PO_COST:m3$,@(o[9]),eoq_qty$,@(o[10]),eoq_code$,@(o[11]),usage$,flag$,
         if ivm05a.UNIT_COST<>0 print (printer_dev)@(o[12]),ivm05a.BREAK_QTY:m2$,@(o[13]),ivm05a.UNIT_COST:m3$,
         print (printer_dev)""
         d9$=fnitem$(ivm01a.item_desc$)
         print (printer_dev)@(o[0]+3),d9$,
         if ivm05a.UNIT_COST<>0 print (printer_dev)@(o[12]),ivm05a.BREAK_QTY:m2$,@(o[13]),ivm05a.UNIT_COST:m3$,
         print (printer_dev)""
         l=l+2
         t0=t0+1
         if ivm05a.UNIT_COST=0 continue
         if l+1>l9 gosub report_heading
         print (printer_dev)@(o[12]),ivm05a.BREAK_QTY:m2$,@(o[13]),ivm05a.UNIT_COST:m3$
         l=l+1

    wend ; Rem ----  Loop ending

done: rem --- All done

    t9$="E"
    gosub Vendor
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,width,when$,clock$,status
    if status<>0 exitto std_exit
    print (printer_dev)@(o[1]),"Prod",@(o[3]-1),"Stk",@(o[4]),"P",@(o[5]),"Vendor",@(o[6]),fill(m3+13,"-"),@(o[6]+fncenter("Last Purchase",m3+13)),"LastPurchase",@(o[12]-7),"Annual",@(o[12]),fill(m2+m3,"-"),@(o[12]+fncenter("Price Breaks",m2+m3)),"Price Breaks"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Type",@(o[2]),"UM",@(o[3]-1),"Lev",@(o[4]),"S",@(o[5]),"Item id",@(o[6]+2),"Date",@(o[7]-1),"Lead",@(o[9]-10),"Unit Cost",@(o[10]-5),"EOQ",@(o[12]-7),"Usage",@(o[13]-9),"Quantity",@(width-10),"Unit Cost",'LF'
    l=l+3
    return
Vendor: rem --- Vendor
    if t0$<>"" then
        if l+2 >l9 gosub report_heading
        print (printer_dev)'LF',@(0),t0:"###,##0"," Items For ",h3$
        let l=l9+1,t1$=""
    endif
    if t9$<>"" return
    let headings$[3]=headings3$
    let t0$=ivm05a_key.vendor_id$,h3$="Vendor: Not On File",t0=0
    find record (apm01_dev,key=firm_id$+ivm05a_key.vendor_id$,dom=VendorInit) apm01a$
    let h3$=cvs("Vendor: "+fnmask$(apm01a.vendor_id$,m9$)+" "+apm01a.vendor_name$,2)
VendorInit:
    let headings$[3](fncenter(h3$,width),len(h3$))=h3$
    return

Position: rem --- Print positions
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    call pgmdir$+"adc_sizemask.aon",m2$,m2,8,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12
    o[0]=0
    o[1]=o[0]+p[0]+1
    o[2]=o[1]+5
    o[3]=o[2]+4
    o[4]=o[3]+3
    o[5]=o[4]+2
    o[6]=width-m2*3-m3*2-17
    o[7]=o[6]+9
    o[8]=o[7]+4
    o[9]=o[8]+m3
    o[10]=o[9]+m2+1
    o[11]=o[10]+2
    o[12]=o[11]+m2+1
    o[13]=o[12]+m2
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
