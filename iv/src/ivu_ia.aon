rem --- Purge Lot/Serial Activity
rem --- Program ivu_ia v8.0.0 09Jul2007 (ivu_ia)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:54:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0132)
rem --- Undefined function fnyear_yy21$ (Line 0138)
rem --- Undefined function fnyy_year (Line 0200)
rem --- Undefined function fnv (Line 0229)
rem --- Undefined function fnyy_year (Line 0276)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0090)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0096)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0107)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0108)
rem --- v7.x Administrator reference ["sys-01"] (Line 0115)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0119)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0123)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0128)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0154)
rem --- BBx reference ["syc_ra.bbx"] (Line 0154)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0199)
rem --- BBx reference ["syc_rs.bbx"] (Line 0199)
rem --- v7.x sys-01 reference [sys01_dev,nu] (Line 0200)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0269)
rem --- BBx reference ["syc_rs.bbx"] (Line 0269)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0270)
rem --- BBx reference ["syc_rs.bbx"] (Line 0270)
rem --- v7.x sys-01 reference [sys01_dev,nu] (Line 0276)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0277)
rem --- BBx reference ["syc_rs.bbx"] (Line 0277)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following IOLIST's were removed from this program:

rem --- ivm17a: iolist a0$,a1$,a2$

rem --- The following channel references have been identified:

rem --- ivs01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- sys01a: Channel reference (Line 0206)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-17"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm17_dev=channels[2]

rem --- Dimension string templates

    dim ivm17a$:templates$[2]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivs-01A"
    ids$[2]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivs01a$:templates$[1],sys01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=2
    dim files$[files],options$[files],channels[files]
    files$[1]="ivm-17"
    files$[2]="sys-01"
    call pgmdir$+"adc_fileopen.aon",1,1,2,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm17_dev=channels[1]
    sys01_dev=channels[2]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="IV"
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    dim p[7]
    p[0]=num(p2$(1,2))
    p[6]=num(p4$(1,2))
    p[7]=fnyy_year(p4$(3,2))-1
    p[2]=num(p2$(7,2))

rem --- Init Data

    period$=str(p[6]:"00")
    year$=fnyear_yy21$(p[7])
    controls=3
    action$=""
    first=0
    last=controls
    dim control[controls],value$[controls],value[controls],mask$[controls]
    for ii=0 to 1
        control[ii]=3000+ii
    next ii
    control[2]=2001

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    gosub flow_initializations
    goto flow_control

l1000: rem --- Period

    v0$="Z"
    v1$="REC"
    v2$=period$
    v3$=""
    v4$="Enter Fiscal Period To Purge Through"
    v0=2
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1060,l1060,flow_control,l1060,std_exit,l1060,std_exit
l1060:
    if v$<"00" or v$>"12" goto l1000
    period$=v$
    goto flow_control

l1100: rem --- Year

    v0$="D"
    v1$="RECY"
    v2$=year$
    v3$=""
    v4$="Enter Fiscal Year To PurgeThrough"
    v0=2
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1160,l1160,flow_control,l1160,std_exit,l1160,std_exit
l1160:
    if v$="" goto l1100
    year$=v$

l1200: rem --- Check For Current Period

    if validate=1 goto flow_control
    if p4$(3,2)+p4$(1,2)>year$+period$ goto l1300
    call pgmdir$+"syc_rs.bbx","",my_context,2001,"",0,"",status
    call pgmdir$+"adc_perioddates.aon",sys01_dev,num(p4$(1,2)),fnyy_year(p4$(3,2)),v0$,cur_date$,status
    call pgmdir$+"adc_yesno.aon",0,"Current Period Ends: "+fndate$(cur_date$)+". Continue",0,v$,v3
    on v3 goto l1250,l1200,l1200,l1200,std_exit,l1250,std_exit
l1250:
    if v$="NO" goto l1000
    if v$<>"YES" goto l1200
l1300:
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1100,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="NO"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    v4$="Is The Above Information Correct (Yes/No)?"
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    if v$="YES" goto validate_input else if v$="NO" goto do_nonkey1 else goto flow_control
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1

rem --- Purge ivm-17 Here

    read (ivm17_dev,key=firm_id$,dom=*next)
    call pgmdir$+"adc_progress.aon","N","","","Purging","",4+p[0]+p[2],0,1,meter_num,status

l4300: rem --- Main Read

    read record (ivm17_dev,end=std_exit) ivm17a$
    if a0$(1,2)<>firm_id$ goto std_exit
    if a0$(45,4)>year$+period$ read (ivm17_dev,key=a0$(1,44)+$FF$,dom=l4300)
    call pgmdir$+"adc_progress.aon","S","","","",a0$(3,2)+" "+a0$(5,p[0])+" "+a0$(25,p[2]),0,0,1,meter_num,status
remove (ivm17_dev,key=a0$,dom=l4351)

    goto l4300
display_fields:
    let control_id=3000,cid_cnt=0
l5010:
    if cid_cnt=0 disp_inp$=period$,disp_desc$=""
    if cid_cnt=1 disp_inp$=fndate$(year$),disp_desc$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5010
l5050:
    let disp_inp$="",disp_desc$=""
    call pgmdir$+"adc_perioddates.aon",sys01_dev,num(period$),fnyy_year(year$),v0$,end_date$,status
    call pgmdir$+"syc_rs.bbx","",my_context,2001,"Continuing Will Purge Activity Records Through "+fndate$(end_date$),0,"",status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
