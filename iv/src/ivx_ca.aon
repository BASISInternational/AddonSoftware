rem --- Rebuild Inventory Committed Quantities
rem --- Program ivx_ca v8.0.0 09Jul2007 (ivx_ca)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:55:18)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sym-06"] (Line 0092)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0120)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0126)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0137)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0138)
rem --- v7.x Administrator reference ["sys-01"] (Line 0144)
rem --- v7.x Administrator reference ["sym-06"] (Line 0145)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0160)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0165)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0434)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0435)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0448)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0456)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0460)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ope-61 referenced (Line 0102)
rem --- Cross-reference file ope-61 referenced (Line 0217)
rem --- Cross-reference file ope-61 referenced (Line 0304)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ope61a replaced by index on ope-11 (Line 0111)
rem --- Cross-reference record ope61a replaced by index on ope-11 (Line 0304)

rem --- The following IOLIST's were removed from this program:

rem --- ivm02a: iolist a0$,a1$,a2$,a[all]
rem --- ivm07a: iolist h0$,h1$,h[all]
rem --- ope01a: iolist x0$
rem --- ope11a: iolist b0$,b1$(1),b2$,b[all]
rem --- ope21a: iolist t0$,t1$,t2$,t[all]
rem --- ope61a: iolist c0$
rem --- opm02a: iolist x0$
rem --- sfe01a: iolist x0$
rem --- sfe23a: iolist w0$,w1$,w[all]
rem --- sym06a: iolist firm06$(1)

rem --- The following channel references have been identified:

rem --- ivs01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- sys01a: Channel reference (Line 0148)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-02"
    files$[3]="ivm-07"
    files$[4]="ope-01"
    files$[5]="ope-11"
    files$[6]="ope-21"
    files$[7]="ope-61"
    files$[8]="opm-02"
    files$[9]="sfe-01"
    files$[10]="sfe-23"
    files$[11]="sym-06"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm02_dev=channels[2]
    ivm07_dev=channels[3]
    ope01_dev=channels[4]
    ope11_dev=channels[5]
    ope21_dev=channels[6]
    ope61_dev=channels[7]
    opm02_dev=channels[8]
    sfe01_dev=channels[9]
    sfe23_dev=channels[10]
    sym06_dev=channels[11]

rem --- Dimension string templates

    dim ivm02a$:templates$[2],ivm07a$:templates$[3],ope01a$:templates$[4],
:       ope11a$:templates$[5],ope21a$:templates$[6],ope61a$:templates$[7],
:       opm02a$:templates$[8],sfe01a$:templates$[9],sfe23a$:templates$[10],
:       sym06a$:templates$[11]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivs-01A"
    ids$[2]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivs01a$:templates$[1],sys01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=11
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="sym-06"
    files$[3]="ivm-02"
    files$[4]="ivm-07"
    files$[5]="ope-01"
    files$[6]="ope-61"
    files$[7]="ope-11"
    files$[8]="ope-21"
    files$[9]="opm-02"
    files$[10]="sfe-01"
    files$[11]="sfe-23"
    options$[3]="L"
    options$[4]="L"
    options$[6]="C"
    call pgmdir$+"adc_fileopen.aon",1,1,2,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    sym06_dev=channels[2]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_exit) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="IV"
    dim info$[20]
    call pgmdir$+"adc_application.aon","IV",info$[all]
    if info$[3]<>"Y" goto std_exit
    dim info$[20]
    call pgmdir$+"adc_application.aon","OP",info$[all]
    op$=info$[3]
    dim info$[20]
    call pgmdir$+"adc_application.aon","SF",info$[all]
    wo$=info$[3]

rem --- Initialize Data

    width=47
    blanks$=fill(width)
    dim a[20],entry$[4]
    entry$[1]="ive-01"
    entry$[2]="ive-02"
    if wo$="Y" entry$[3]="sfe-14"

rem --- Verify no IV transactions/transfers & no L/S Materials Issues

    gosub entryfiles
    if index<>0 goto std_exit

rem --- Verify Rebuild

    v4$="Do You Wish To Rebuild Inventory Commitments"
    call pgmdir$+"adc_yesno.aon",0,v4$,0,v$,v3
    if v$<>"YES" goto std_exit

rem --- Additional Open/Lock Files

    if op$="Y" goto l640
    files$[5]="      "
    files$[6]="      "
    files$[7]="      "
    files$[8]="      "
    files$[9]="      "
l640:
    if wo$="Y" goto l660
    files$[10]="      "
    files$[11]="      "
l660:
    call pgmdir$+"adc_fileopen.aon",1,3,11,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm02_dev=channels[3]
    ivm07_dev=channels[4]
    ope01_dev=channels[5]
    ope61_dev=channels[6]
    ope11_dev=channels[7]
    ope21_dev=channels[8]
    opm02_dev=channels[9]
    sfe01_dev=channels[10]
    sfe23_dev=channels[11]

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","Updating","",width,0,1,meter_num,status

rem --- Clear ivm-02 Committed

    call pgmdir$+"adc_progress.aon","S","","","",blanks$,0,0,1,meter_num,status
    firm_id$=""
l1020:
    read (ivm02_dev,key=firm_id$,dom=*next)
l1030:
    k1$=key(ivm02_dev,end=l1200)
    if k1$(1,2)<>firm_id$ goto l1080
    read record (ivm02_dev) ivm02a$
    a[2]=0
    write record (ivm02_dev,key=k1$) ivm02a$
    call pgmdir$+"adc_progress.aon","S","","","",k1$(1,2)+" "+k1$(3,2)+" "+k1$(5),0,0,1,meter_num,status
    goto l1030
l1080:
    firm_id$=k1$(1,2)
    gosub getivparams
    if iv_firm_id$="Y" goto l1020
    if num(firm_id$)>=99 goto l1200
    read (ivm02_dev,key=str(num(k1$(1,2))+1:"00"),dom=*next)
    goto l1030

l1200: rem --- Clear ivm-07 Committed

    if ivm07_dev=0 goto l2000
    call pgmdir$+"adc_progress.aon","S","","","",blanks$,0,0,1,meter_num,status
    firm_id$=""; dim h[12]
l1220:
    read (ivm07_dev,key=firm_id$,dom=*next)
l1230:
    k07$=key(ivm07_dev,end=l2000)
    if k07$(1,2)<>firm_id$ goto l1280
    read record (ivm07_dev) ivm07a$
    h[1]=0
    write record (ivm07_dev,key=k07$) ivm07a$
    call pgmdir$+"adc_progress.aon","S","","","",k07$(1,2)+" "+k07$(3,2)+" "+k07$(5,i0)+""+k07$(5+i0),0,0,1,meter_num,status
    goto l1230
l1280:
    firm_id$=k07$(1,2)
    gosub getivparams
    if iv_firm_id$="Y" goto l1220
    if num(firm_id$)>=99 goto l2000
    read (ivm07_dev,key=str(num(k07$(1,2))+1:"00"),dom=*next)
    goto l1230

l2000: rem --- Rebuild From ope-11 Committed

    if op$<>"Y" goto l2500
    call pgmdir$+"adc_progress.aon","S","","","",blanks$,0,0,1,meter_num,status
    dim b1$(64),b[17]
    firm_id$=""
l2050:
    read (ope11_dev,key=firm_id$,dom=*next)

l2100: rem --- ope-11 Main Read

    k13$=key(ope11_dev,end=l2500)
    if k13$(1,2)<>firm_id$ goto l2300
    find record (ope01_dev,key=k13$(1,17)+"000",dom=headerless) ope01a$; rem "Check header records for quotes
    goto l2145
headerless:
    read (ope11_dev,key=k13$); rem "Move ptr
    goto l2290
l2145:
    if x0$(21,1)="P" qote$="Y" else qote$="N"
    read record (ope11_dev) ope11a$
    find record (opm02_dev,key=firm_id$+b0$(21,1),dom=l2290) opm02a$
    if pos(x0$(25,1)="MNO")<>0 goto l2290
    if x0$(27,1)="Y" goto l2250
    if qote$="Y" or b1$(44,1)="N" goto l2250
    call pgmdir$+"adc_progress.aon","S","","","",k13$(1,2)+" "+k13$(5,6)+" "+k13$(11,7)+""+k13$(18,3),0,0,1,meter_num,status
    read record (ivm02_dev,key=firm_id$+b0$(31),dom=l2290) ivm02a$
    a[2]=a[2]+b[2]
    write record (ivm02_dev,key=firm_id$+b0$(31)) ivm02a$
l2250:
    c0$=firm_id$+b0$(31)+b0$(3,2)+b0$(11,10)+b0$(5,6)
    write record (ope61_dev,key=c0$) ope61a$
l2290:
    goto l2100

l2300: rem --- Next ope-11 Firm

    firm_id$=k13$(1,2)
    gosub getivparams
    if iv_firm_id$="Y" and op_firm_id$="Y" goto l2050
    if num(firm_id$)>=99 goto l2500
    read (ope11_dev,key=str(num(k13$(1,2))+1:"00"),dom=*next)
    goto l2100

l2500: rem --- Rebuild From ope-21 Committed

    if op$<>"Y" goto l3000
    if ope21_dev=0 goto l3000
    call pgmdir$+"adc_progress.aon","S","","","",blanks$,0,0,1,meter_num,status
    dim h[12],t[2]
    firm_id$=""
    b0$=""
l2590:
    read (ope21_dev,key=firm_id$,dom=*next)

l2600: rem --- ope-21 Main Read

    k23$=key(ope21_dev,end=l3000)
    if k23$(1,2)<>firm_id$ goto l2800
    read record (ope21_dev) ope21a$
    call pgmdir$+"adc_progress.aon","S","","","",k23$(1,2)+" "+k23$(5,6)+" "+k23$(11,7)+"-"+k23$(18,3)+" "+k23$(21,3),0,0,1,meter_num,status
    if pos(k23$(1,20)=b0$)<>1 find record (ope11_dev,key=k23$(1,20),dom=l2750) ope11a$
    read record (ivm07_dev,key=firm_id$+b0$(31)+t1$,dom=l2750) ivm07a$
    h[1]=h[1]+t[0]
    write record (ivm07_dev,key=h0$) ivm07a$
    goto l2600

l2750: rem --- Remove Unmatched ope-21 Records

    remove (ope21_dev,key=k23$)

    goto l2600

l2800: rem --- Next ope-21 Firm

    firm_id$=k23$(1,2)
    gosub getivparams
    if iv_firm_id$="Y" and ls_firm_id$="Y" and op_firm_id$="Y" goto l2590
    if num(firm_id$)>=99 goto l3000
    read (ope21_dev,key=str(num(k23$(1,2))+1:"00"),dom=*next)
    goto l2600

l3000: rem --- Rebuild From sfe-23 Committed

    if wo$<>"Y" goto done
    call pgmdir$+"adc_progress.aon","S","","","",blanks$,0,0,1,meter_num,status
    dim w[4]
    firm_id$=""
l3050:
    read (sfe23_dev,key=firm_id$,dom=*next)

l3100: rem --- sfe-23 Main Read

    kw23$=key(sfe23_dev,end=done)
    if kw23$(1,2)<>firm_id$ goto l3300
    read record (sfe23_dev) sfe23a$
    call pgmdir$+"adc_progress.aon","S","","","",kw23$(1,2)+" "+kw23$(5,7)+" "+kw23$(12,3)+" "+w1$(21),0,0,1,meter_num,status
    read record (sfe01_dev,key=kw23$(1,11),dom=l3250) sfe01a$
    if x0$(15,1)="C" goto l3250; rem "Closed WO
    read record (ivm02_dev,key=firm_id$+w1$(19),dom=l3100) ivm02a$
    a[2]=a[2]+max(0,w[0]-w[1])
    write record (ivm02_dev,key=a0$) ivm02a$
    goto l3100

l3250: rem --- Remove Unmatched and Closed sfe-23 Records

    remove (sfe23_dev,key=kw23$,dom=l3100)

    goto l3100

l3300: rem --- Next sfe-23 Firm

    firm_id$=kw23$(1,2)
    gosub getivparams
    if iv_firm_id$="Y" and wo_firm_id$="Y" goto l3050
    if num(firm_id$)>=99 goto done
    read (sfe23_dev,key=str(num(kw23$(1,2))+1:"00"),dom=*next)
    goto l3100

done: rem --- Done

    goto std_exit

entryfiles: rem --- Make sure appropriate entry files are empty

    index=0
    number=4
    dim firm06$(2),message$[number]
    read (sym06_dev,key="",dom=*next)
l6050:
    k$=key(sym06_dev,end=l6150)
    read record (sym06_dev,key=k$) sym06a$
    for x=1 to 3
        filename$=entry$[x]
        batch=0
        if filename$="" goto l6130
        call pgmdir$+"adc_batchempty",firm06$,filename$,description$,batch,status
        if status gosub l6200
        if index=number exitto l6150
    l6130:
    next x
    goto l6050
l6150:
    if index=0 goto l6180
    message$[index]=fill(20)+"Press <Enter> To Continue"
    call pgmdir$+"adc_stdmessage.aon",3,message$[all],index,-1,-1,v$,v3
l6180:
    return

l6200: rem --- Entry file contains records

    on x goto l6340,transaction,transfer,materials,l6340
transaction:
    message$[index]="Inventory Transaction Register and Update must be run for Firm "+firm06$+"."
    index=index+1
    goto l6340
transfer:
    message$[index]="Inventory Transfer Register and Update must be runfor Firm "+firm06$+"."
    index=index+1
    goto l6340
materials:
    find (sys01_dev,key=k$(1,2)+"SF00",dom=l6340); rem "Verify WO installedfor this Firm
    find record (sys01_dev,key=k$(1,2)+"IV00",dom=l6340) ivs01a$; rem "Verify IVinstalled for this Firm
    if pos(x3$(17,1)="LS")=0 goto l6340; rem "Verify Serialized/Lottedinventory for this Firm
    message$[index]="Materials Issues Register and Update must be run for Firm "+firm06$+"."
    index=index+1
l6340:
    return

getivparams: rem --- Next Firm's Inventory Parameters

    iv_firm_id$="N"
    ls_firm_id$="N"
    op_firm_id$="N"
    wo_firm_id$="N"
    find record (sys01_dev,key=firm_id$+"IV00",dom=l6590) ivs01a1$
    iv_firm_id$="Y"
    if pos(iv3$(17,1)="LS")>0 ls_firm_id$="Y" else ls_firm_id$="N"
    i0=num(iv2$(1,2))
    precision num(iv2$(5,1))

rem --- Next Firm's Order Processing Parameters

    find (sys01_dev,key=firm_id$+"AR00",dom=l6590)
    let op_firm_id$="Y"

rem --- Next Firm's Work Order Parameters
    find (sys01_dev,key=firm_id$+"SF00",dom=l6590)
    let wo_firm_id$="Y"
l6590: return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
