rem --- Item Detail Listing (Input Overlay)
rem --- Program ivr_ra v8.0.0 09Jul2007 (ivr_ra)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:50:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    on o0 goto l70,l500

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="arm-10"
    files$[4]="glm-01"
    files$[5]="ivm-01"
    files$[6]="ivm-02"
    files$[7]="ivm-03"
    files$[8]="ivm-05"
    files$[9]="ivm-09"
    files$[10]="ivm-10"
    files$[11]="ivm-12"
    files$[12]="ivm-13"
    files$[13]="ivm-14"
    files$[14]="ivm-15"
    files$[15]="ivm-24"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    arm10_dev=channels[3]
    glm01_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm03_dev=channels[7]
    ivm05_dev=channels[8]
    ivm09_dev=channels[9]
    ivm10_dev=channels[10]
    ivm12_dev=channels[11]
    ivm13_dev=channels[12]
    ivm14_dev=channels[13]
    ivm15_dev=channels[14]
    ivm24_dev=channels[15]

rem --- Dimension string templates

    dim apm01a$:templates$[2],arm10a$:templates$[3],glm01a$:templates$[4],
:       ivm01a$:templates$[5],ivm02a$:templates$[6],ivm03a$:templates$[7],
:       ivm05a$:templates$[8],ivm09a$:templates$[9],ivm10a$:templates$[10],
:       ivm12a$:templates$[11],ivm13a$:templates$[12],ivm14a$:templates$[13],
:       ivm15a$:templates$[14],ivm24a$:templates$[15]

rem --- Retrieve miscellaneous templates

    files=6,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ars-01A"
    ids$[3]="gls-01A"
    ids$[4]="ivm-10C"
    ids$[5]="ivm-10F"
    ids$[6]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ars01a$:templates$[2],gls01a$:templates$[3],
:       ivm10c$:templates$[4],ivm10f$:templates$[5],ivs01a$:templates$[6]


rem --- Assign form input values to local variables

    include$=option!.getOptionData("include_comments")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    itemtype$=option!.getOptionData("item_type")
    

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
  

rem --- Parameters

    include$="Y"
    dim p[8],g[4],info$[20]
    firm_id$=sysinfo.firm_Id$
    n2$="IV"
    lf$="N"
    ls$="N"
    mf$="N"
    maxrow=15
    ar$="N"
    ap$="N"
    gl$="N"
    di$="N"
    find record (ads01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g[0]=num(gls01a.total_pers$)
    g[3]=num(gls01a.acct_length$)
    g[4]=num(gls01a.max_acct_length$)
    find record (ads01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    p[2]=num(ivs01a.ls_no_len$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    p[6]=num(ivs01a.curent_per$)
    p[7]=fnyy_year(ivs01a.curent_year$)
    p[8]=num(ivs01a.curent_year$)
   
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]
    call pgmdir$+"adc_application.aon","GL",info$[all]
    gl$=info$[20]
    if gl$<>"N" then 
        call pgmdir$+"adc_application.aon",n2$,info$[all]
        gl$=info$[9]
    endif

    if ar$<>"N" then
        find record (ads01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        custlen=num(ars01a.cust_size$)
        custmask$=m0$
        di$=ars01a.dist_by_item$
        if gl$="N" di$="N"
    endif

    if ap$<>"N" then
        find record (ads01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
        vendlen=num(aps01a.vendor_size$)
        vendmask$=m0$
    endif


rem --- Initializations

    dim datep[8],datew[8]
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    m4=len(m4$)
    m5=len(m5$)
    g5=len(g5$)
    months$=g3$(235,g[0]*3)
    m6$="###0.00-"
    item$=""
    nf$="(Not On File)"
    m9$="##0-"
    datep[1]=29
    datep[2]=32
    datep[3]=35
    datep[4]=38
    h1$=sysinfo.task_desc$
    datep[5]=41
    datep[6]=50
    datep[7]=44
    datep[8]=47
    datew[1]=28
    datew[2]=31
    datew[3]=34
    datew[4]=37
    datew[5]=43
    datew[6]=46
    datew[7]=40
    datew[8]=49
  
rem --- Run overlay

    run pgmdir$+"ivr_rb.bbx"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
