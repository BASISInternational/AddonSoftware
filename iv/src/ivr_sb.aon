rem --- Inventory Synonyms Listing (Report Overlay)
rem --- Program ivr_sb v8.0.0 16Jul2007 (ivr_sb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 01:03:34)
rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    rem milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    sequence$=fnget_fld_data$(table$,"Sequence")
    begsyn$=fnget_fld_data$(table$,"synonym_1")
    endsyn$=fnget_fld_data$(table$,"synonym_2")
    begprod$=fnget_fld_data$(table$,"prod_id_1")
    endprod$=fnget_fld_data$(table$,"prod_id_2")
    begitem$=fnget_fld_data$(table$,"item_1")
    enditem$=fnget_fld_data$(table$,"item_2")
    type$=fnget_fld_data$(table$,"item_type")


rem --- Initializations

    rem precision p[1]
    precision num(ivs01a.precision$)
    rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],headings$[7],o[3]
    dim headings$[7],o[3]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    when$=sysinfo.system_date$
    clock$=""
    width=80
    page=0
    l9=59
    l=l9+1
    headings=7
    number=0
    last$=""
    more=1

rem --- Print positions
    
    gosub Position

rem --- Background

    rem call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",20,ivm14_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm14_dev,1,meter_num,status

rem --- Report headings

    gosub Init_Heading

rem --- Position files

    read (ivm14_dev,key=firm_id$+begsyn$,dom=*next)
    read (ivm24_dev,key=firm_id$+begitem$,dom=*next)

rem --- Next Synonym
rem --- Loop starting
    While more
        if sequence$<>"I" then 
            ivm14a_key$=key(ivm14_dev,end=*break)
            if pos(firm_id$=ivm14a_key$)<>1 break
            if endsyn$<>"" if ivm14a_key$(3,len(endsyn$))>endsyn$ break
            read (ivm14_dev)
            if begitem$<>"" then
                if ivm14a_key$(23,len(begitem$))<begitem$ then
                     read (ivm14_dev,key=ivm14a_key$(1,22)+begitem$(1,len(begitem$)-1)+$FF$,dom=*continue)
                     continue
                endif
            endif
            if enditem$<>"" then
                if ivm14a_key$(23,len(enditem$))>enditem$ then
                    read (ivm14_dev,key=ivm14a_key$(1,22)+$FF$,dom=*continue)
                    continue
                endif
            endif
            synonym$=ivm14a_key$(3,20)
            item$=ivm14a_key$(23)
            x$=synonym$
           
        else
rem --- Next Item

            ivm24a_key$=key(ivm24_dev,end=*break)
            if pos(firm_id$=ivm14a_key$)<>1 break
            if enditem$<>"" if ivm24a_key$(3,len(enditem$))>enditem$ break
            read (ivm24_dev)
            if begsyn$<>"" then
                if ivm14a_key$(23,len(begsyn$))<begsyn$ then
                    read (ivm24_dev,key=ivm14a_key$(1,22)+begsyn$(1,len(begsyn$)-1)+$FF$,dom=*continue)
                    continue
                endif
            endif
            if endsyn$<>"" then
                if ivm24a_key$(23,len(endsyn$))>endsyn$ then
                    read (ivm24_dev,key=ivm24a_key$(1,22)+$FF$,dom=*continue)
                    continue
                endif
            endif
            synonym$=ivm24a_key$(23,20)
            item$=ivm24a_key$(3,20)
            x$=item$
        endif

Retrieve_Item: rem --- Retrieve item

        call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,meter_num,status
        ivm01a_key$(1)=firm_id$+item$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if begprod$<>"" then
            if ivm01a.product_type$<begprod$ then
                continue
            endif
        endif
        if endprod$<>"" then
            if ivm01a.product_type$>endprod$ then
                continue
            endif
        endif
        if type$<>"" then
            if ivm01a.item_type$<>type$ then
                continue
            endif 
        endif  

rem --- Format detail line

        dim buffer$(width)
        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        if sequence$="S" then
            buffer$(o[0])=synonym$
            buffer$(o[1])=item$
            char$=synonym$(1,1)
            buffer$(o[2])=description$
            buffer$(o[3])=ivm01a.product_type$
        endif
        if sequence$<>"S" then
            buffer$(o[0])=item$
            buffer$(o[1])=description$
            char$=item$(1,1)
            buffer$(o[2])=ivm01a.product_type$
            buffer$(o[3])=synonym$
        endif
        if char$=last$ and l+1>l9 then 
            if l+1>l9 gosub report_heading
            print (printer_dev)buffer$
            l=l+1
            number=number+1    
        else
            print (printer_dev)""
            l=l+1
            last$=char$
        endif

    wend; rem --- Loop Ending

done: rem --- All done

    if l+2>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)number," Synonyms Listed"
    goto std_exit

report_heading: rem --- Report Heading

    let l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if char$<>"" last$=char$
    return

Init_Heading: rem --- Initialize HEADINGS$

    dim h1$(width),h2$(width),h6$(width)
    if sequence$="S" headings$[1]=headings$[1]+" By Synonym"
    if sequence$="I" headings$[1]=headings$[1]+" By Item"
    x1$="First"
    x2$="First"
    x2=5
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$,x2=3
    if endprod$="" if x2=3 x2=4
    h1$(1)="From Item: "+x1$
    h1$(width-x2-13)="From Product: "+x2$
    x1$="Last"
    x2$="Last"
    x3$="All Item Types"
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if type$<>"" x3$="Item Type "+type$
    headings$[1]=headings$[1]+" For "+x3$
    h2$(1)="  To Item: "+x1$
    h2$(width-x2-13)="  To Product: "+x2$
    if sequence$="S" then
        h6$(o[0])="Synonym"
        h6$(o[1])="Item"
        h6$(o[2])="Description"
        h6$(o[3])="Prd"
    endif
    if sequence$<>"S" then
        h6$(o[0])="Item"
        h6$(o[1])="Description"
        h6$(o[2])="Prd"
        h6$(o[3])="Synonym"
    endif
    headings$[3]=h1$
    headings$[4]=h2$
    headings$[6]=h6$
Position: rem --- Print positions

    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,8,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,8,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12
    o[0]=1
    if sequence$="S" o[1]=22,o[2]=o[1]+p[0]+1,o[3]=width-3
    if sequence$="I" o[1]=p[0]+2,o[3]=width-20,o[2]=o[3]-4

return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
