rem Callpoint program for ADM_PROCBATCHMNT - Process Batch Control Record Maint
rem Program adm_procbatchmnt_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("ADM_PROCBATCHMNT.ADIS",40)+
:		pad("ADM_PROCBATCHMNT.AOPT-ORPH",40)+
:		pad("ADM_PROCBATCHMNT.AREC",40)+
:		pad("ADM_PROCBATCHMNT.BDEL",40)+
:		pad("ADM_PROCBATCHMNT.BNEX",40)+
:		pad("ADM_PROCBATCHMNT.BREX",40)+
:		pad("ADM_PROCBATCHMNT.BSHO",40)+
:		pad("ADM_PROCBATCHMNT.PROCESS_ID.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("ADM_PROCBATCHMNT.ADIS",40),callpoint_event_str$,40)			
			rem --- lock this process/batch record 
			
			batch_no$=callpoint!.getColumnData("ADM_PROCBATCHMNT.BATCH_NO")
			process_id$=callpoint!.getColumnData("ADM_PROCBATCHMNT.PROCESS_ID")
			
			lock_key$=firm_id$+process_id$+batch_no$
			lock_status$=""
			call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",lock_key$,"L",table_chans$[all],lock_status$
			
			if lock_status$<>"" then callpoint!.setStatus("NEWREC")
			
			rem ---  don't allow delete if this batch is referenced in entry files
			
			adm_proctables_dev=fnget_dev("ADM_PROCTABLES")
			dim adm_proctables$:fnget_tpl$("ADM_PROCTABLES")
			
			read (adm_proctables_dev,key=firm_id$+process_id$,dom=*next)
			callpoint!.setDevObject("can_delete","")
			if lock_status$<>"" then callpoint!.setDevObject("can_delete","NO")
			
			form_opts$=callpoint!.getTableAttribute("OPTS")
			
			while 1
				read record (adm_proctables_dev,end=*break)adm_proctables$
				if pos(firm_id$+process_id$=adm_proctables$)<>1 then break
				if pos("GLW_DAILYDETAIL"=adm_proctables.dd_table_alias$) then continue
			
				num_files=1
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]=adm_proctables.dd_table_alias$,open_opts$[1]="OTA"
				gosub open_tables
				file_dev=num(open_chans$[1])
			
				while file_dev
					read (file_dev,key=firm_id$+batch_no$,knum=1,dom=*next,err=*break)
					k$=key(file_dev,end=*break)
					if pos(firm_id$+batch_no$=k$)=1 then callpoint!.setDevObject("can_delete","NO")		
					break
				wend
			
				if file_dev
					num_files=1
					dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
					open_tables$[1]=adm_proctables.dd_table_alias$,open_opts$[1]="C"
					gosub open_tables
				endif
			wend
			
			if callpoint!.getDevObject("can_delete")="NO"
				callpoint!.setColumnData("<<DISPLAY>>.DSP_DATA","Y")
			else
				callpoint!.setColumnData("<<DISPLAY>>.DSP_DATA","N")
			endif
			
			callpoint!.setOptionEnabled("ORPH",1)
			callpoint!.setStatus("REFRESH")
		break
		case fnstr_pos(pad("ADM_PROCBATCHMNT.AOPT-ORPH",40),callpoint_event_str$,40)			
			rem --- read thru entry files for this process and see if there are any batches not in the batch file
			
			adm_proctables_dev=fnget_dev("ADM_PROCTABLES")
			dim adm_proctables$:fnget_tpl$("ADM_PROCTABLES")
			
			adm_procbatches_dev=fnget_dev("ADM_PROCBATCHMNT")
			dim adm_procbatches$:fnget_tpl$("ADM_PROCBATCHMNT")
			
			batch_no$=callpoint!.getColumnData("ADM_PROCBATCHMNT.BATCH_NO")
			process_id$=callpoint!.getColumnData("ADM_PROCBATCHMNT.PROCESS_ID")
			
			if process_id$<>""
			
				msg_id$=""
			
				read (adm_proctables_dev,key=firm_id$+process_id$,dom=*next)
			
				while 1
					read record (adm_proctables_dev,end=*break)adm_proctables$
					if pos(firm_id$+process_id$=adm_proctables$)<>1 then break
					if pos("GLW_DAILYDETAIL"=adm_proctables.dd_table_alias$) then continue
			
					num_files=1
					dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
					open_tables$[1]=adm_proctables.dd_table_alias$,open_opts$[1]="OTA"
					gosub open_tables
					file_dev=num(open_chans$[1])
					dim file_rec$:open_tpls$[1]
			
			
					while file_dev
			
						read (file_dev,key=firm_id$,knum=1,dom=*next,err=*break)
						sv_batch$=""
						orph_batches! = BBjAPI().makeVector()
						while 1
							read record (file_dev,end=*break)file_rec$
							if file_rec.batch_no$<>sv_batch$
								sv_batch$=file_rec.batch_no$	
								found=0			
								read (adm_procbatches_dev,key=firm_id$+process_id$+sv_batch$,dom=*next); found=1
								if !found then orph_batches!.addItem(sv_batch$)
							endif
						wend
						x=orph_batches!.size()
			
						if x
							msg_id$="AD_BATCH_ORPH"
							dim msg_tokens$[2]
							batches$=""
							msg_tokens$[1]=cvs(adm_proctables.dd_table_alias$,3)
							for y=0 to x-1
								batches$=batches$+orph_batches!.getItem(y)+$0A$
							next y
							msg_tokens$[2]=batches$
							gosub disp_message
						endif				
						break
					wend
			
					if file_dev
						num_files=1
						dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
						open_tables$[1]=adm_proctables.dd_table_alias$,open_opts$[1]="C"
						gosub open_tables
					endif
				wend
			
				if msg_id$=""
					msg_id$="AD_BATCH_NO_ORPH"
					gosub disp_message
				endif
			endif
		break
		case fnstr_pos(pad("ADM_PROCBATCHMNT.AREC",40),callpoint_event_str$,40)			
			callpoint!.setOptionEnabled("ORPH",0)
		break
		case fnstr_pos(pad("ADM_PROCBATCHMNT.BDEL",40),callpoint_event_str$,40)			
			rem --- don't allow delete if batch contains data
			
			if callpoint!.getDevObject("can_delete")="NO"
				msg_id$="AD_BATCH_DTL"
				gosub disp_message
				callpoint!.setStatus("ABORT")
			endif
		break
		case fnstr_pos(pad("ADM_PROCBATCHMNT.BNEX",40),callpoint_event_str$,40)			
			
		break
		case fnstr_pos(pad("ADM_PROCBATCHMNT.BREX",40),callpoint_event_str$,40)			
			rem --- unlock this process/batch record 
			
			batch_no$=callpoint!.getColumnData("ADM_PROCBATCHMNT.BATCH_NO")
			process_id$=callpoint!.getColumnData("ADM_PROCBATCHMNT.PROCESS_ID")
			
			lock_key$=firm_id$+process_id$+batch_no$
			lock_status$=""
			call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",lock_key$,"U",table_chans$[all],lock_status$
		break
		case fnstr_pos(pad("ADM_PROCBATCHMNT.BSHO",40),callpoint_event_str$,40)			
			rem --- open files
			
			num_files=1
			dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
			open_tables$[1]="ADM_PROCTABLES",open_opts$[1]="OTA"
			gosub open_tables
			
			callpoint!.setOptionEnabled("ORPH",0)
		break
		case fnstr_pos(pad("ADM_PROCBATCHMNT.PROCESS_ID.AVAL",40),callpoint_event_str$,40)			
			rem --- enable orph scan button
			
			callpoint!.setOptionEnabled("ORPH",1)
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[ADM_PROCBATCHMNT.<CUSTOM>]]


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

