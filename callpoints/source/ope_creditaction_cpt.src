rem Callpoint program for OPE_CREDITACTION - Credit Action for an Order / Invoice
rem Program ope_creditaction_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("OPE_CREDITACTION.ARAR",40)+
:		pad("OPE_CREDITACTION.ASVA",40)+
:		pad("OPE_CREDITACTION.BSHO",40)+
:		pad("OPE_CREDITACTION.CREDIT_ACTION.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("OPE_CREDITACTION.ARAR",40),callpoint_event_str$,40)			
			rem --- Display default status
			
				credit_action = num(callpoint!.getColumnData("OPE_CREDITACTION.CREDIT_ACTION"))
				gosub display_status
		break
		case fnstr_pos(pad("OPE_CREDITACTION.ASVA",40),callpoint_event_str$,40)			
			rem --- Make sure everything is entered
			
				credit_action = num(callpoint!.getColumnData("OPE_CREDITACTION.CREDIT_ACTION"))
				terms$        = callpoint!.getColumnData("OPE_CREDITACTION.AR_TERMS_CODE")
				pswd$         = callpoint!.getColumnData("OPE_CREDITACTION.ENTER_CRED_PSWRD")
			
				switch credit_action
			
				rem --- Hold this order
			
					case 1
						callpoint!.setDevObject("credit_action", "1")
						break
			
				rem --- Hold all future orders
			
					case 2
			
						if pswd$ <> user_tpl.password$ then
							msg_id$ = "OP_INVALID_PASSWD"
							gosub disp_message
							callpoint!.setStatus("ABORT")
						else
							callpoint!.setDevObject("credit_action", "2")
						endif
			
						break
			
				rem --- Release this order
			
					case 3
			
						abort = 0
			
						if terms$ = "" then 
							msg_id$ = "OP_TERM_NOT_ENTERED"
							gosub disp_message
							abort = 1
						else
							callpoint!.setDevObject("new_terms_code", terms$)
						endif
			
						if pswd$ <> user_tpl.password$ then
							msg_id$ = "OP_INVALID_PASSWD"
							gosub disp_message
							abort = 1
						endif
			
						if abort then 
							callpoint!.setStatus("ABORT")
						else
							callpoint!.setDevObject("credit_action", "3")
						endif
			
						break
			
				rem --- Delete this order
			
					case 4
			
						msg_id$="OP_REALLY_DELETE"
						gosub disp_message
			
						if msg_opt$<>"Y" then 
							callpoint!.setStatus("ABORT")
						else
							callpoint!.setDevObject("credit_action", "4")
						endif
			
						break
			
					case default
			
				swend
		break
		case fnstr_pos(pad("OPE_CREDITACTION.BSHO",40),callpoint_event_str$,40)			
			rem --- Get credit password
			
				num_files=1
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]="ARS_CREDIT", open_opts$[1]="OTA"
			
				gosub open_tables
			
				credit_dev=num(open_chans$[1])
				dim credit_rec$:open_tpls$[1]
				dim user_tpl$:"password:c(6*)"
				start_block = 1
			
				if start_block then
					find record(credit_dev, key=firm_id$+"AR01", dom=*endif) credit_rec$
					user_tpl.password$ = cvs(credit_rec.cred_passwd$, 2)
				endif
				
				callpoint!.setDevObject("credit_action", "none")
		break
		case fnstr_pos(pad("OPE_CREDITACTION.CREDIT_ACTION.AVAL",40),callpoint_event_str$,40)			
			rem --- Send back credit action response
				
				credit_action = num(callpoint!.getUserInput())
				gosub display_status
				callpoint!.setDevObject("credit_action", str(credit_action))
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[OPE_CREDITACTION.<CUSTOM>]]

rem ==========================================================================
display_status: rem --- Display Status by Action
rem                      IN: credit_action
rem ==========================================================================

    switch credit_action 
		case 1
			callpoint!.setColumnData("OPE_CREDITACTION.CREDIT_STATUS", "Order will be Held")
			break
		case 2
			callpoint!.setColumnData("OPE_CREDITACTION.CREDIT_STATUS", "Customer's Orders will be Held")
			break
		case 3
			callpoint!.setColumnData("OPE_CREDITACTION.CREDIT_STATUS", "Order will be Released")
			break
		case 4
			callpoint!.setColumnData("OPE_CREDITACTION.CREDIT_STATUS", "Order will be Deleted")
			break
		case default
	swend

	callpoint!.setStatus("REFRESH")

return


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

