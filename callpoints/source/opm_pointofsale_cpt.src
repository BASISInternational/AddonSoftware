rem Callpoint program for OPM_POINTOFSALE - Order Processing Point of Sale
rem Program opm_pointofsale_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("OPM_POINTOFSALE.BSHO",40)+
:		pad("OPM_POINTOFSALE.BWRI",40)+
:		pad("OPM_POINTOFSALE.CASH_BX_HEX.AVAL",40)+
:		pad("OPM_POINTOFSALE.CASH_BX_PORT.AVAL",40)+
:		pad("OPM_POINTOFSALE.CNTR_PRINTER.AVAL",40)+
:		pad("OPM_POINTOFSALE.LAST_MDP_HEX.AVAL",40)+
:		pad("OPM_POINTOFSALE.REC_PRINTER.AVAL",40)+
:		pad("OPM_POINTOFSALE.REC_PRT_PORT.AVAL",40)+
:		pad("OPM_POINTOFSALE.SKIP_WHSE.AVAL",40)+
:		pad("OPM_POINTOFSALE.TRANSPAR_OFF.AVAL",40)+
:		pad("OPM_POINTOFSALE.TRANSPAR_ON.AVAL",40)+
:		pad("OPM_POINTOFSALE.VAL_CTR_PRT.AVAL",40)+
:		pad("OPM_POINTOFSALE.VAL_REC_PRT.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("OPM_POINTOFSALE.BSHO",40),callpoint_event_str$,40)			
			rem --- Inits
			
				use ::ado_func.src::func
				use ::ado_config.src::Config
				use java.util.HashMap
			
				declare Config config!
				config! = new Config()
			
				declare HashMap UserObj! 
				UserObj! = new HashMap()
				UserObj!.put("config", config!)
				UserObj!.put("aliases", config!.getAliasBBxNames())
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.BWRI",40),callpoint_event_str$,40)			
			rem --- Re-check all tests and abort if fail
			
				list$  = callpoint!.getColumnData("OPM_POINTOFSALE.VAL_CTR_PRT")
				alias$ = callpoint!.getColumnData("OPM_POINTOFSALE.CNTR_PRINTER")
			
				if alias$ <> "" then
					gosub alias_in_list
			
					if !valid then
						callpoint!.setFocus("OPM_POINTOFSALE.CNTR_PRINTER")
					endif
				endif
			
				list$  = callpoint!.getColumnData("OPM_POINTOFSALE.VAL_REC_PRT")
				alias$ = callpoint!.getColumnData("OPM_POINTOFSALE.REC_PRINTER")
			
				if alias$ <> "" then
					gosub alias_in_list
			
					if !valid then
						callpoint!.setFocus("OPM_POINTOFSALE.REC_PRINTER")
					endif
				endif
			
				
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.CASH_BX_HEX.AVAL",40),callpoint_event_str$,40)			
			rem --- Valid Hex?
			
				hex$ = callpoint!.getUserInput()
			
				if hex$ <> "" and !func.isHex(hex$) then
					callpoint!.setMessage("NOT_HEX")
					callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.CASH_BX_PORT.AVAL",40),callpoint_event_str$,40)			
			rem --- Check alias, is it in the config file?
			
				port$ = callpoint!.getUserInput()
			
				if port$ <> "" then
			
					declare Config config!
					config! = cast(Config, UserObj!.get("config"))
			
					if !config!.isAlias(port$) then
						callpoint!.setMessage("NOT_AN_ALIAS")
						callpoint!.setStatus("ABORT")
					endif
			
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.CNTR_PRINTER.AVAL",40),callpoint_event_str$,40)			
			rem --- Must be in the entered list of valid printer aliases
			
				list$  = callpoint!.getColumnData("OPM_POINTOFSALE.VAL_CTR_PRT")
				alias$ = callpoint!.getUserInput()
			
				if alias$ <> "" then
					gosub alias_in_list
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.LAST_MDP_HEX.AVAL",40),callpoint_event_str$,40)			
			rem --- Valid Hex?
			
				hex$ = callpoint!.getUserInput()
			
				if hex$ <> "" and !func.isHex(hex$) then
					callpoint!.setMessage("NOT_HEX")
					callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.REC_PRINTER.AVAL",40),callpoint_event_str$,40)			
			rem --- Must be in the entered list of valid printer aliases
			
				list$  = callpoint!.getColumnData("OPM_POINTOFSALE.VAL_REC_PRT")
				alias$ = callpoint!.getUserInput()
			
				if alias$ <> "" then
					gosub alias_in_list
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.REC_PRT_PORT.AVAL",40),callpoint_event_str$,40)			
			rem --- Check alias, is it in the config file?
			
				port$ = callpoint!.getUserInput()
			
				if port$ <> "" then
			
					declare Config config!
					config! = cast(Config, UserObj!.get("config"))
			
					if !config!.isAlias(port$) then
						callpoint!.setMessage("NOT_AN_ALIAS")
						callpoint!.setStatus("ABORT")
					endif
			
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.SKIP_WHSE.AVAL",40),callpoint_event_str$,40)			
			rem --- Valid response?
			
				skip$ = callpoint!.getUserInput()
			
				if skip$ <> "Y" and skip$ <> "N" then
					callpoint!.setMessage("YES_OR_NO")
					callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.TRANSPAR_OFF.AVAL",40),callpoint_event_str$,40)			
			rem --- Valid Hex?
			
				hex$ = callpoint!.getUserInput()
			
				if hex$ <> "" and !func.isHex(hex$) then
					callpoint!.setMessage("NOT_HEX")
					callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.TRANSPAR_ON.AVAL",40),callpoint_event_str$,40)			
			rem --- Valid Hex?
			
				hex$ = callpoint!.getUserInput()
			
				if hex$ <> "" and !func.isHex(hex$) then
					callpoint!.setMessage("NOT_HEX")
					callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.VAL_CTR_PRT.AVAL",40),callpoint_event_str$,40)			
			rem --- Validate list of counter printers
			rem --- Currently, aliases can only be len=2
			
				list$ = callpoint!.getUserInput()
			
				if list$ <> "" then
					gosub valid_list
				endif
		break
		case fnstr_pos(pad("OPM_POINTOFSALE.VAL_REC_PRT.AVAL",40),callpoint_event_str$,40)			
			rem --- Validate list of counter printers
			rem --- Currently, aliases can only be len=2
			
				list$ = callpoint!.getUserInput()
			
				if list$ <> "" then
					gosub valid_list
				endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[OPM_POINTOFSALE.<CUSTOM>]]

rem ==========================================================================
valid_list: rem --- Are all aliases in the config file?
            rem     Currently aliases can only be a length of 2
            rem      IN: list$ - list of aliases
rem ==========================================================================

	if mod(len(list$), 2) <> 0 then
		callpoint!.setMessage("ALIAS_LEN_OF_TWO")
		callpoint!.setStatus("ABORT")
	else

		declare BBjVector aliases!
		aliases! = cast(BBjVector, UserObj!.get("aliases"))

		for i=1 to len(list$) step 2
			missing = 1

			for j=0 to aliases!.size()-1
				if list$(i,2) = str(aliases!.get(j)) then
					missing = 0
					break
				endif
			next j

			if missing then break

		next i

		if missing then
			callpoint!.setMessage("ALIAS_NOT_FOUND")
			callpoint!.setStatus("ABORT")
		endif

	endif

return

rem ==========================================================================
alias_in_list: rem --- Is this alias in the list of valid aliases?
               rem      IN: list$ - list of valid aliases
               rem          aliase$ - the alias to check
               rem     OUT: valid - true/false
rem ==========================================================================

	valid = 1

	if list$ = "" then
		callpoint!.setMessage("ALIAS_LIST_NOT_SET")
		valid = 0
	else
		missing = 1

		for i=1 to len(list$) step 2
			if alias$ = list$(i, 2) then
				missing = 0
				break
			endif
		next i

		if missing then
			callpoint!.setMessage("ALIAS_NOT_IN_LIST")
			valid = 0
		endif

	endif

return


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

