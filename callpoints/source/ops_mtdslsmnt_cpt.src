rem Callpoint program for OPS_MTDSLSMNT - Month to Date Sales Totals
rem Program ops_mtdslsmnt_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("OPS_MTDSLSMNT.ARAR",40)+
:		pad("OPS_MTDSLSMNT.ASVA",40)+
:		pad("OPS_MTDSLSMNT.BSHO",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("OPS_MTDSLSMNT.ARAR",40),callpoint_event_str$,40)			
			rem --- populate variables
				ops_mtdsales_dev=fnget_dev("OPS_MTDSALES")
				dim ops_mtdsales$:fnget_tpl$("OPS_MTDSALES")
				ars_mtdcash_dev=fnget_dev("ARS_MTDCASH")
				dim ars_mtdcash$:fnget_tpl$("ARS_MTDCASH")
				readrecord(ops_mtdsales_dev,key=firm_id$+"S",dom=*next)ops_mtdsales$
				readrecord(ars_mtdcash_dev,key=firm_id$+"C",dom=*next)ars_mtdcash$
			
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_CASH",str(ars_mtdcash.mtd_cash))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_COST",str(ops_mtdsales.mtd_cost))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_CSH_DISC",str(ars_mtdcash.mtd_csh_disc))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_CSH_GL",str(ars_mtdcash.mtd_csh_gl))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_CSH_SALE",str(ops_mtdsales.mtd_csh_sale))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_DISCOUNT",str(ops_mtdsales.mtd_discount))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_FREIGHT",str(ops_mtdsales.mtd_freight))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_RETURNS",str(ops_mtdsales.mtd_returns))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_SALES",str(ops_mtdsales.mtd_sales))
				callpoint!.setColumnData("OPS_MTDSLSMNT.MTD_TAX",str(ops_mtdsales.mtd_tax))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NMTD_CASHGL",str(ars_mtdcash.nmtd_cashgl))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NMTD_CASHSL",str(ops_mtdsales.nmtd_cashsl))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NMTD_CASH_DS",str(ars_mtdcash.nmtd_cash_ds))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NMTD_RETURNS",str(ops_mtdsales.nmtd_returns))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NMTD_SALES",str(ops_mtdsales.nmtd_sales))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NMTD_TAX",str(ops_mtdsales.nmtd_tax))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NXT_MTD_CASH",str(ars_mtdcash.nxt_mtd_cash))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NXT_MTD_COST",str(ops_mtdsales.nxt_mtd_cost))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NXT_MTD_DISC",str(ops_mtdsales.nxt_mtd_disc))
				callpoint!.setColumnData("OPS_MTDSLSMNT.NXT_MTD_FRGT",str(ops_mtdsales.nxt_mtd_frgt))
				callpoint!.setStatus("REFRESH")
		break
		case fnstr_pos(pad("OPS_MTDSLSMNT.ASVA",40),callpoint_event_str$,40)			
			rem --- populate variables
				ops_mtdsales_dev=fnget_dev("OPS_MTDSALES")
				dim ops_mtdsales$:fnget_tpl$("OPS_MTDSALES")
				ars_mtdcash_dev=fnget_dev("ARS_MTDCASH")
				dim ars_mtdcash$:fnget_tpl$("ARS_MTDCASH")
				readrecord(ops_mtdsales_dev,key=firm_id$+"S",dom=*next)ops_mtdsales$
				readrecord(ars_mtdcash_dev,key=firm_id$+"C",dom=*next)ars_mtdcash$
			
				ops_mtdsales.firm_id$=firm_id$
				ops_mtdsales.record_id_s$="S"
				ars_mtdcash.firm_id$=firm_id$
				ars_mtdcash.record_id_c$="C"
				ars_mtdcash.mtd_cash=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_CASH"))
				ops_mtdsales.mtd_cost=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_COST"))
				ars_mtdcash.mtd_csh_disc=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_CSH_DISC"))
				ars_mtdcash.mtd_csh_gl=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_CSH_GL"))
				ops_mtdsales.mtd_csh_sale=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_CSH_SALE"))
				ops_mtdsales.mtd_discount=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_DISCOUNT"))
				ops_mtdsales.mtd_freight=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_FREIGHT"))
				ops_mtdsales.mtd_returns=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_RETURNS"))
				ops_mtdsales.mtd_sales=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_SALES"))
				ops_mtdsales.mtd_tax=num(callpoint!.getColumnData("OPS_MTDSLSMNT.MTD_TAX"))
				ars_mtdcash.nmtd_cashgl=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NMTD_CASHGL"))
				ops_mtdsales.nmtd_cashsl=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NMTD_CASHSL"))
				ars_mtdcash.nmtd_cash_ds=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NMTD_CASH_DS"))
				ops_mtdsales.nmtd_returns=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NMTD_RETURNS"))
				ops_mtdsales.nmtd_sales=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NMTD_SALES"))
				ops_mtdsales.nmtd_tax=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NMTD_TAX"))
				ars_mtdcash.nxt_mtd_cash=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NXT_MTD_CASH"))
				ops_mtdsales.nxt_mtd_cost=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NXT_MTD_COST"))
				ops_mtdsales.nxt_mtd_disc=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NXT_MTD_DISC"))
				ops_mtdsales.nxt_mtd_frgt=num(callpoint!.getColumnData("OPS_MTDSLSMNT.NXT_MTD_FRGT"))
			
				ars_mtdcash$=field(ars_mtdcash$)
				ops_mtdsales$=field(ops_mtdsales$)
			
				writerecord(ars_mtdcash_dev)ars_mtdcash$
				writerecord(ops_mtdsales_dev)ops_mtdsales$
		break
		case fnstr_pos(pad("OPS_MTDSLSMNT.BSHO",40),callpoint_event_str$,40)			
			rem --- Open parameter tables
				num_files=2
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]="ops_mtdsales",open_opts$[1]="OTA"
				open_tables$[2]="ars_mtdcash",open_opts$[2]="OTA"
				gosub open_tables
				ops_mtdsales_dev=num(open_chans$[1]),ops_mtdsales$=open_tpls$[1]
				ars_mtdcash_dev=num(open_chans$[2]),ars_mtdcash$=open_tpls$[2]
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[OPS_MTDSLSMNT.<CUSTOM>]]


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

