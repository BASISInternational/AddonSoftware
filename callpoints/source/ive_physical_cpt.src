rem Callpoint program for IVE_PHYSICAL - Physical Inventory Entry
rem Program ive_physical_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("IVE_PHYSICAL.ADIS",40)+
:		pad("IVE_PHYSICAL.ARAR",40)+
:		pad("IVE_PHYSICAL.BSHO",40)+
:		pad("IVE_PHYSICAL.COUNT_STRING.AVAL",40)+
:		pad("IVE_PHYSICAL.ITEM_ID.AVAL",40)+
:		pad("IVE_PHYSICAL.LOTSER_ITEM.BINP",40)+
:		pad("IVE_PHYSICAL.PI_CYCLECODE.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("IVE_PHYSICAL.ADIS",40),callpoint_event_str$,40)			
			print "ADIS"; rem debug
			
			rem --- Is cycle in the correct stage?
			
				whse$  = callpoint!.getColumnData("IVE_PHYSICAL.WAREHOUSE_ID")
				cycle$ = callpoint!.getColumnData("IVE_PHYSICAL.PI_CYCLECODE")
			
				gosub check_whse_cycle
			
			rem --- Check item/warehouse
				
				item$ = callpoint!.getColumnData("IVE_PHYSICAL.ITEM_ID")
			
				gosub check_item_whse
		break
		case fnstr_pos(pad("IVE_PHYSICAL.ARAR",40),callpoint_event_str$,40)			
			print "ARAR"; rem debug
			
			rem --- Set default values
			
				if user_tpl.default_whse$ <> "" then
					callpoint!.setColumnData("IVE_PHYSICAL.WAREHOUSE_ID", user_tpl.default_whse$)
				endif
			
				if user_tpl.default_cycle$ <> "" then
					callpoint!.setColumnData("IVE_PHYSICAL.PI_CYCLECODE", user_tpl.default_cycle$)
				endif
		break
		case fnstr_pos(pad("IVE_PHYSICAL.BSHO",40),callpoint_event_str$,40)			
			print 'show',"BSHO"; rem debug
			
			rem --- Inits
			
				use ::ado_util.src::util
			
				dim user_tpl$:"default_whse:c(2), default_cycle:c(2), amt_mask:c(1*), ls:c(1)"
			
			rem --- Open files
			
				num_files=5
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]="IVE_PHYSICAL", open_opts$[1]="OTA"
				open_tables$[2]="IVS_PARAMS",   open_opts$[2]="OTA"
				open_tables$[3]="IVM_ITEMMAST", open_opts$[3]="OTA"
				open_tables$[4]="IVM_ITEMWHSE", open_opts$[4]="OTA"
				open_tables$[5]="IVC_PHYSCODE", open_opts$[5]="OTA"
			
				gosub open_tables
			
				physical_dev = num(open_chans$[1])
				params_dev   = num(open_chans$[2])
			
				dim physical_rec$:open_tpls$[1]
				dim params_rec$:open_tpls$[2]
			
			
			rem --- Get IV params, set mask, lot/serial
			
				find record (params_dev, key=firm_id$+"IV00", dom=std_missing_params) params_rec$ 
				user_tpl.amt_mask$ = params_rec.amount_mask$
				if pos(params_rec.lotser_flag$ = "LS") then ls$="Y" else ls$ = "N"
				user_tpl.ls$ = ls$
			
				if ls$ = "N" then
					callpoint!.setColumnEnabled("IVE_PHYSICAL.LOTSER_ITEM", -1)
				endif
			
			rem --- Additional file opens
			
				if ls$ = "Y" then
					open_beg=1, open_end=1
					open_tables$[1]="IVM_LSMASTER", open_opts$[1]="OTA"
					gosub open_tables
					lsmaster_dev = num(open_chans$[1])
					dim lsmaster_rec$:open_tpls$[1]
				endif
			
			rem --- Get the first record
			
				read (physical_dev, key=firm_id$, dom=*next)
				read record (physical_dev, end=*next) physical_rec$
			
				user_tpl.default_whse$   = physical_rec.warehouse_id$
				user_tpl.default_cycle$  = physical_rec.pi_cyclecode$
		break
		case fnstr_pos(pad("IVE_PHYSICAL.COUNT_STRING.AVAL",40),callpoint_event_str$,40)			
			print "COUNT_STRING:AVAL"; rem debug
			
			rem --- Parse count string, display total
			
				count$ = cvs( callpoint!.getColumnData("IVE_PHYSICAL.COUNT_STRING"), 1)
				p = mask(count$, "^[0-9]+(\.[0-9]+)?")
				total = 0
			
				while p
					if p <> 1 then goto count_error
					amt = num( count$(1, tcb(16)) )
					total = total + amt
					count$ = cvs( count$(tcb(16)), 1)
					p = mask(count$)
				wend
			
				callpoint!.setColumnData("IVE_PHYSICAL.ACT_PHYS_CNT", str(total:user_tpl.amt_mask$))
				
				goto count_string_end
			
			count_error:
				msg_id$ = "IV_BAD_COUNT_STR"
				gosub disp_message
				callpoint!.setStatus("ABORT")
			
			count_string_end:
		break
		case fnstr_pos(pad("IVE_PHYSICAL.ITEM_ID.AVAL",40),callpoint_event_str$,40)			
			print "ITEM_ID:AVAL"; rem debug
			
			rem --- Get Whse/Item record
			
				whse$ = callpoint!.getColumnData("IVE_PHYSICAL.WAREHOUSE_ID")
				item$ = callpoint!.getUserInput()
			
				gosub check_item_whse
		break
		case fnstr_pos(pad("IVE_PHYSICAL.LOTSER_ITEM.BINP",40),callpoint_event_str$,40)			
			print "LOTSER_NO:BINP"; rem debug
			
			rem --- Is there a lot/serial#?
			
				item$ = callpoint!.getColumnData("IVE_PHYSICAL.ITEM_ID")
				whse$ = callpoint!.getColumnData("IVE_PHYSICAL.WAREHOUSE_ID")
			
				gosub check_item_whse
			
				if failed then 
					callpoint!.setStatus("ABORT")
					goto lotser_item_end
				endif
			
				if !user_tpl.this_item_lot_ser then 
					util.disableField(callpoint!, "IVE_PHYSICAL.LOTSER_ITEM")
				endif
			
			lotser_item_end:
		break
		case fnstr_pos(pad("IVE_PHYSICAL.PI_CYCLECODE.AVAL",40),callpoint_event_str$,40)			
			print "PI_CYCLECODE:AVAL"; rem debug
			
			rem --- Is cycle in the correct stage?
			
				whse$  = callpoint!.getColumnData("IVE_PHYSICAL.WAREHOUSE_ID")
				cycle$ = callpoint!.getUserInput()
			
				gosub check_whse_cycle
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[IVE_PHYSICAL.<CUSTOM>]]

rem ===========================================================================
check_whse_cycle: rem --- Check the Physical Cycle code for the correct status
                  rem      IN: whse$
                  rem          cycle$
rem ===========================================================================

print "in check_whse_cycle"; rem debug

	file_name$ = "IVC_PHYSCODE"
	dim physcode$:fnget_tpl$(file_name$)
	find record (fnget_dev(file_name$), key=firm_id$+whse$+cycle$) physcode$

	if physcode.phys_inv_sts$ <> "2" then 
		if physcode.phys_inv_sts$ = "0" then
			msg_id$ = "IV_PHYS_NOT_FROZEN"
			gosub disp_message
			callpoint!.setStatus("ABORT")
		else
			if physcode.phys_inv_sts$ = "1" then
				msg_id$ = "IV_PHYS_NOT_PRINTED"
				gosub disp_message
				callpoint!.setStatus("ABORT")
			else
				if physcode.phys_inv_sts$ = "3" then	
					msg_id$ = "IV_PHYS_ALREADY_REG"
					gosub disp_message
					callpoint!.setStatus("ABORT")
				endif
			endif
		endif
	endif

	return

rem ===========================================================================
check_item_whse: rem --- Check that a warehouse record exists for this item
                 rem      IN: whse$
                 rem          item$
                 rem     OUT: failed  (true/false)
                 rem          itemmast_rec$ (item record)
                 rem          itemwhse_rec$ (item/whse record)
rem ===========================================================================

print "in check_item_whse"; rem debug

	item_file$ = "IVM_ITEMMAST"
	dim itemmast_rec$:fnget_tpl$(item_file$)
	find record (fnget_dev(item_file$), key=firm_id$+item$) itemmast_rec$

	this_item_lot_ser = (user_tpl.ls$ = "Y" and itemmast_rec.lotser_item$ = "Y" and itemmast_rec.inventoried$ = "Y")
	callpoint!.setStatus( "ENABLE:" + str(this_item_lot_ser) )

	if !this_item_lot_ser then
		rem callpoint!.setColumnEnabled("IVE_PHYSICAL.LOTSER_ITEM", 0)
		rem util.disableField(callpoint!, "IVE_PHYSICAL.LOTSER_ITEM")
	endif

	whse_file$ = "IVM_ITEMWHSE"
	dim itemwhse_rec$:fnget_tpl$(whse_file$)

	failed = 1
	find record (fnget_dev(whse_file$),key=firm_id$+whse$+item$,dom=check_item_whse_missing) itemwhse_rec$
	failed = 0

	callpoint!.setColumnData("IVE_PHYSICAL.LOCATION", itemwhse_rec.location$)

	goto check_item_whse_done

check_item_whse_missing:

	callpoint!.setMessage("IV_ITEM_WHSE_INVALID:" + whse$ )

check_item_whse_done:

return


rem ===========================================================================
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem ===========================================================================


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

