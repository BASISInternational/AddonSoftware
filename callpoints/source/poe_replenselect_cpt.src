rem Callpoint program for POE_REPLENSELECT - Replenishment Selection Options
rem Program poe_replenselect_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("POE_REPLENSELECT.ASVA",40)+
:		pad("POE_REPLENSELECT.AWIN",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("POE_REPLENSELECT.ASVA",40),callpoint_event_str$,40)			
			rem --- write poe-07
			rem --- run program is old poe.fb that builds poe-06/16/26/36 and 17(?)
			
			poe_repsel_dev=fnget_dev("POE_REPSEL")
			dim poe_repsel$:fnget_tpl$("POE_REPSEL")
			
			call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REPSEL","PRIMARY",key_tpl$,table_chans$[all],rd_stat$
			dim k$:key_tpl$
			
			first$=firm_id$+"00"
			last$=firm_id$+$FF$
			
			read (poe_repsel_dev,key=last$,dom=*next)
			k$=keyp(poe_repsel_dev,end=*next)
			
			if pos(firm_id$=k$)<>1 then k$=first$
			
			if k.sequence_num$<"99"
				poe_repsel.firm_id$=firm_id$
				poe_repsel.sequence_num$=str(num( k.sequence_num$)+1:"00")
				poe_repsel.begin_vend$=callpoint!.getColumnData("POE_REPLENSELECT.VENDOR_ID_1")
				poe_repsel.ending_vend$=callpoint!.getColumnData("POE_REPLENSELECT.VENDOR_ID_2")
				poe_repsel.beg_buyer$=callpoint!.getColumnData("POE_REPLENSELECT.BUYER_CODE_1")
				poe_repsel.end_buyer$=callpoint!.getColumnData("POE_REPLENSELECT.BUYER_CODE_2")
				poe_repsel.from_whse$=callpoint!.getColumnData("POE_REPLENSELECT.WAREHOUSE_ID_1")
				poe_repsel.thru_whse$=callpoint!.getColumnData("POE_REPLENSELECT.WAREHOUSE_ID_2")
				poe_repsel.begrev_date$=callpoint!.getColumnData("POE_REPLENSELECT.REVIEW_DATE_1")
				poe_repsel.endrev_date$=callpoint!.getColumnData("POE_REPLENSELECT.REVIEW_DATE_2")
				poe_repsel.rep_comments$=callpoint!.getColumnData("POE_REPLENSELECT.REP_COMMENTS")
			
				write record (poe_repsel_dev)poe_repsel$
			
				rem --- also set hidden seq# field to pass into backend program for use in updating poe-17 (poe_repxref)
				callpoint!.setColumnData("POE_REPLENSELECT.REPLEN_SEQ",poe_repsel.sequence_num$)
			else
				callpoint!.setMessage("PO_REP_SEL")
				callpoint!.setStatus("ABORT")
			endif
		break
		case fnstr_pos(pad("POE_REPLENSELECT.AWIN",40),callpoint_event_str$,40)			
			rem --- open tables, poe06/16/26/36/07/17
			
			num_files=6
			dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
			open_tables$[1]="POE_ORDHDR",open_opts$[1]="OTA"
			open_tables$[2]="POE_ORDDET",open_opts$[2]="OTA"
			open_tables$[3]="POE_ORDTOT",open_opts$[3]="OTA"
			open_tables$[4]="POE_REPSURP",open_opts$[4]="OTA"
			open_tables$[5]="POE_REPXREF",open_opts$[5]="OTA"
			open_tables$[6]="POE_REPSEL",open_opts$[6]="OTA"
			
			gosub open_tables
			poe_ordhdr_dev=num(open_chans$[1])
			poe_orddet_dev=num(open_chans$[2])
			poe_ordtot_dev=num(open_chans$[3])
			poe_repsurp_dev=num(open_chans$[4])
			poe_repxref_dev=num(open_chans$[5])
			poe_repsel_dev=num(open_chans$[6])
			
			rem --- See if we need to clear out poe-07
			
				while 1
					read(poe_repsel_dev,key=firm_id$,dom=*next)
					k$=key(poe_repsel_dev,end=*break)
					if pos(firm_id$=k$)<>1 break
					msg_id$="CLEAR_SEL"
					dim msg_tokens$[1]
					msg_opt$=""
					gosub disp_message
					if msg_opt$="Y"
						call stbl("+DIR_PGM")+"adc_clearpartial.aon","",poe_ordhdr_dev,firm_id$,status;if status then release
						call stbl("+DIR_PGM")+"adc_clearpartial.aon","",poe_orddet_dev,firm_id$,status; if status then release
						call stbl("+DIR_PGM")+"adc_clearpartial.aon","",poe_ordtot_dev,firm_id$,status; if status then release
						call stbl("+DIR_PGM")+"adc_clearpartial.aon","",poe_repsel_dev,firm_id$,status; if status then release
						call stbl("+DIR_PGM")+"adc_clearpartial.aon","",poe_repsurp_dev,firm_id$,status; if status then release
						call stbl("+DIR_PGM")+"adc_clearpartial.aon","",poe_repxref_dev,firm_id$,status; if status then release
					endif
					break
				wend
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[POE_REPLENSELECT.<CUSTOM>]]


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

