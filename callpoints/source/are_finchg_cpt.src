rem Callpoint program for ARE_FINCHG - Finance Charge Entry
rem Program are_finchg_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("ARE_FINCHG.AENA",40)+
:		pad("ARE_FINCHG.AR_INV_NO.AVAL",40)+
:		pad("ARE_FINCHG.AR_TERMS_CODE.AVAL",40)+
:		pad("ARE_FINCHG.BEND",40)+
:		pad("ARE_FINCHG.BSHO",40)+
:		pad("ARE_FINCHG.BTBL",40)+
:		pad("ARE_FINCHG.CUSTOMER_ID.AVAL",40)+
:		pad("ARE_FINCHG.CUSTOMER_ID.BINQ",40)+
:		pad("ARE_FINCHG.INVOICE_AMT.AVAL",40)+
:		pad("ARE_FINCHG.INVOICE_DATE.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("ARE_FINCHG.AENA",40),callpoint_event_str$,40)			
			rem --- disable invoice type (should only be F for Finance Charge)
				wctl$=str(num(callpoint!.getTableColumnAttribute("ARE_FINCHG.INVOICE_TYPE","CTLI")):"00000")
				wmap$=callpoint!.getAbleMap()
				wpos=pos(wctl$=wmap$,8)
				wmap$(wpos+6,1)="I"
				callpoint!.setAbleMap(wmap$)
				callpoint!.setStatus("ABLEMAP")
		break
		case fnstr_pos(pad("ARE_FINCHG.AR_INV_NO.AVAL",40),callpoint_event_str$,40)			
			rem --- check art-01 and be sure invoice# they've entered isn't in use for this cust.
			rem --- otherwise, display the selected invoice...
			rem --- note: this means it's possible to have same inv# assigned to diff customers
			art_invhdr_dev=fnget_dev("ART_INVHDR")
			dim art01a$:fnget_tpl$("ART_INVHDR")
			invhdr_key$=firm_id$+"  "+callpoint!.getColumnData("ARE_FINCHG.CUSTOMER_ID")+callpoint!.getUserInput()
			read(art_invhdr_dev,key=invhdr_key$,dom=*next)
			readrecord(art_invhdr_dev,end=*next)art01a$
			if art01a.firm_id$=firm_id$ and art01a.customer_id$=callpoint!.getColumnData("ARE_FINCHG.CUSTOMER_ID") and
:			                     art01a.ar_inv_no$=callpoint!.getUserInput()
					msg_id$="AR_INV_USED"
					dim msg_tokens$[1]
					gosub disp_message
					callpoint!.setUserInput("")                            
					callpoint!.setStatus("REFRESH-ABORT")
			endif
		break
		case fnstr_pos(pad("ARE_FINCHG.AR_TERMS_CODE.AVAL",40),callpoint_event_str$,40)			
			arc_termcode_dev=fnget_dev("ARC_TERMCODE")
			dim arm10a$:fnget_tpl$("ARC_TERMCODE")
			read record(arc_termcode_dev,key=firm_id$+"A"+callpoint!.getUserInput(),dom=*next)arm10a$
			user_tpl.disc_pct$=str(arm10a.disc_percent$)
			user_tpl.inv_days_due$=str(arm10a.inv_days_due$)
			user_tpl.disc_days$=str(arm10a.disc_days$)
			user_tpl.prox_days$=arm10a.prox_or_days$
			if num(callpoint!.getColumnData("ARE_FINCHG.INVOICE_AMT"))<>0
				wk_amt=num(callpoint!.getColumnData("ARE_FINCHG.INVOICE_AMT"))*num(user_tpl.disc_pct$)/100
				callpoint!.setColumnData("ARE_FINCHG.DISCOUNT_AMT",str(wk_amt))
				callpoint!.setColumnUndoData("ARE_FINCHG.DISCOUNT_AMT",str(wk_amt))
				callpoint!.setStatus("REFRESH")
			endif
			if cvs(callpoint!.getColumnData("ARE_FINCHG.INVOICE_DATE"),2)<>""
				call stbl("+DIR_PGM")+"adc_duedate.aon",user_tpl.prox_days$,callpoint!.getColumnData("ARE_FINCHG.INVOICE_DATE"),
:			                              num(user_tpl.inv_days_due$),wk_date_out$,status
				if status then callpoint!.setStatus("ABORT")
				callpoint!.setColumnData("ARE_FINCHG.INV_DUE_DATE",wk_date_out$)
				callpoint!.setColumnUndoData("ARE_FINCHG.INV_DUE_DATE",wk_date_out$)
				call stbl("+DIR_PGM")+"adc_duedate.aon",user_tpl.prox_days$,callpoint!.getColumnData("ARE_FINCHG.INVOICE_DATE"),
:			                               num(user_tpl.disc_days$),wk_date_out$,status
				if status then callpoint!.setStatus("ABORT")
				callpoint!.setColumnData("ARE_FINCHG.DISC_DATE",wk_date_out$)
				callpoint!.setColumnUndoData("ARE_FINCHG.DISC_DATE",wk_date_out$)
				callpoint!.setStatus("REFRESH")
		break
		case fnstr_pos(pad("ARE_FINCHG.BEND",40),callpoint_event_str$,40)			
			rem --- remove software lock on batch, if batching
			
				batch$=stbl("+BATCH_NO",err=*next)
				if num(batch$)<>0
					lock_table$="ADM_PROCBATCHES"
					lock_record$=firm_id$+stbl("+PROCESS_ID")+batch$
					lock_type$="U"
					lock_status$=""
					call stbl("+DIR_SYP")+"bac_lock_record.bbj",lock_table$,lock_record$,lock_type$,table_chans$[all],lock_status$
				endif
		break
		case fnstr_pos(pad("ARE_FINCHG.BSHO",40),callpoint_event_str$,40)			
			rem --- Open/Lock files
				files=7,begfile=1,endfile=7
				dim files$[files],options$[files],chans$[files],templates$[files]
				files$[1]="ARS_PARAMS";rem --- "ARS_PARAMS"..."ads-01"
				files$[2]="ARM_CUSTMAST";rem --- "arm-01"
				files$[3]="ARM_CUSTDET";rem --- "arm-02"
				files$[4]="ARC_TERMCODE";rem --- "arm-10" (A)
				files$[5]="ARC_DISTCODE";rem --- "arm-10 (D)
				files$[6]="ART_INVHDR";rem --- "art-01"
				files$[7]="GLS_PARAMS"
				for wkx=begfile to endfile
					options$[wkx]="OTA"
				next wkx
				call stbl("+DIR_SYP")+"bac_open_tables.bbj",begfile,endfile,files$[all],options$[all],
:			                                   chans$[all],templates$[all],table_chans$[all],batch,status$
				if status$<>"" then
					remove_process_bar:
					bbjAPI!=bbjAPI()
					rdFuncSpace!=bbjAPI!.getGroupNamespace()
					rdFuncSpace!.setValue("+build_task","OFF")
					release
				endif
				ars01_dev=num(chans$[1])
				gls01_dev=num(chans$[7])
				dim ars01a$:templates$[1],gls01a$:templates$[7]
			rem --- Dimension miscellaneous string templates
				dim user_tpl$:"firm_id:c(2),op_installed:C(1),glyr:C(4),glper:C(2),no_glpers:C(2),"+
:				    "disc_pct:C(7),inv_days_due:C(7),disc_days:C(7),prox_days:C(1)"
				user_tpl.firm_id$=firm_id$
			rem --- Retrieve parameter data/see if OP is installed
				call stbl("+DIR_PGM")+"adc_application.aon","OP",info$[all]
				op$=info$[20]
				user_tpl.op_installed$=op$
				ars01a_key$=firm_id$+"AR00"
				find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
				gls01a_key$=firm_id$+"GL00"
				find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$ 
				user_tpl.glyr$=gls01a.current_year$
				user_tpl.glper$=gls01a.current_per$
				user_tpl.no_glpers$=gls01a.total_pers$
		break
		case fnstr_pos(pad("ARE_FINCHG.BTBL",40),callpoint_event_str$,40)			
			rem --- Get Batch information
			
			call stbl("+DIR_PGM")+"adc_getbatch.aon",callpoint!.getAlias(),"",table_chans$[all]
			callpoint!.setTableColumnAttribute("ARE_FINCHG.BATCH_NO","PVAL",$22$+stbl("+BATCH_NO")+$22$)
			
			
		break
		case fnstr_pos(pad("ARE_FINCHG.CUSTOMER_ID.AVAL",40),callpoint_event_str$,40)			
			rem --- if on new rec, check are-02 and set default inv# to first one for this customer, if there is one.
			if cvs(callpoint!.getColumnData("ARE_FINCHG.AR_INV_NO"),2)=""
				arm_custdet_dev=fnget_dev("ARM_CUSTDET")
				dim arm02a$:fnget_tpl$("ARM_CUSTDET")
				readrecord(arm_custdet_dev,key=firm_id$+callpoint!.getUserInput()+"  ",dom=*next)arm02a$
				if arm02a.firm_id$=firm_id$ and arm02a.customer_id$=callpoint!.getUserInput()
					callpoint!.setColumnData("ARE_FINCHG.AR_DIST_CODE",arm02a.ar_dist_code$)
					callpoint!.setColumnUndoData("ARE_FINCHG.AR_DIST_CODE",arm02a.ar_dist_code$)
					callpoint!.setColumnData("ARE_FINCHG.AR_TERMS_CODE",arm02a.ar_terms_code$)
					callpoint!.setColumnUndoData("ARE_FINCHG.AR_TERMS_CODE",arm02a.ar_terms_code$)
					callpoint!.setStatus("REFRESH")
				endif
			endif
		break
		case fnstr_pos(pad("ARE_FINCHG.CUSTOMER_ID.BINQ",40),callpoint_event_str$,40)			
			dim filter_defs$[0,1]
			filter_defs$[0,0]="INVOICE_TYPE"
			filter_defs$[0,1]="='F'"
		break
		case fnstr_pos(pad("ARE_FINCHG.INVOICE_AMT.AVAL",40),callpoint_event_str$,40)			
			wk_amt=num(callpoint!.getUserInput())*num(user_tpl.disc_pct$)/100
			callpoint!.setColumnData("ARE_FINCHG.DISCOUNT_AMT",str(wk_amt))
			callpoint!.setColumnUndoData("ARE_FINCHG.DISCOUNT_AMT",str(wk_amt))
			callpoint!.setStatus("REFRESH")
		break
		case fnstr_pos(pad("ARE_FINCHG.INVOICE_DATE.AVAL",40),callpoint_event_str$,40)			
			call stbl("+DIR_PGM")+"adc_duedate.aon",user_tpl.prox_days$,callpoint!.getUserInput(),num(user_tpl.inv_days_due$),
:			                           wk_date_out$,status
			if status then callpoint!.setStatus("ABORT")
			callpoint!.setColumnData("ARE_FINCHG.INV_DUE_DATE",wk_date_out$)
			callpoint!.setColumnUndoData("ARE_FINCHG.INV_DUE_DATE",wk_date_out$)
			call stbl("+DIR_PGM")+"adc_duedate.aon",user_tpl.prox_days$,callpoint!.getUserInput(),num(user_tpl.disc_days$),
:			                           wk_date_out$,status
			if status then callpoint!.setStatus("ABORT")
			callpoint!.setColumnData("ARE_FINCHG.DISC_DATE",wk_date_out$)
			callpoint!.setColumnUndoData("ARE_FINCHG.DISC_DATE",wk_date_out$)
			callpoint!.setStatus("REFRESH"  )
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[ARE_FINCHG.<CUSTOM>]]

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src




open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

