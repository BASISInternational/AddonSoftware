rem Callpoint program for ADM_PROCBATCHES - Process Batch Control Record
rem Program adm_procbatches_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("ADM_PROCBATCHES.AOPT-SELB",40)+
:		pad("ADM_PROCBATCHES.ARNF",40)+
:		pad("ADM_PROCBATCHES.BATCH_NO.AVAL",40)+
:		pad("ADM_PROCBATCHES.BEND",40)+
:		pad("ADM_PROCBATCHES.BTBL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("ADM_PROCBATCHES.AOPT-SELB",40),callpoint_event_str$,40)			
			rem --- set exit stbl to be this batch number
			
			x$=stbl("+BATCH_NO",callpoint!.getColumnData("ADM_PROCBATCHES.BATCH_NO"))
			
			lock_table$=callpoint!.getAlias()
			lock_record$=firm_id$+callpoint!.getColumnData("ADM_PROCBATCHES.PROCESS_ID")+callpoint!.getColumnData("ADM_PROCBATCHES.BATCH_NO")
			lock_type$="L"
			lock_status$=""
			
			call stbl("+DIR_SYP")+"bac_lock_record.bbj",lock_table$,lock_record$,lock_type$,table_chans$[all],lock_status$
			if lock_status$=""
				callpoint!.setStatus("EXIT")
			else
				bbjAPI!=bbjAPI()
				rdFuncSpace!=bbjAPI!.getGroupNamespace()
				rdFuncSpace!.setValue("+build_task","OFF")
				release
			endif
		break
		case fnstr_pos(pad("ADM_PROCBATCHES.ARNF",40),callpoint_event_str$,40)			
			rem --- disallow user entering non-existent batch number
				if stbl("+ALLOW_NEW_BATCH",err=*next)<>"Y"
					callpoint!.setStatus("CLEAR-NEWREC")
				else
			rem --- set defaults
			
					callpoint!.setColumnData("ADM_PROCBATCHES.DATE_OPENED",date(0:"%Yd%Mz%Dz"))
					callpoint!.setColumnData("ADM_PROCBATCHES.LSTUSE_DATE",date(0:"%Yd%Mz%Dz"))
					callpoint!.setColumnData("ADM_PROCBATCHES.LSTUSE_TIME",date(0:"%hz%mz"))
					callpoint!.setColumnData("ADM_PROCBATCHES.PROCESS_ID",stbl("+PROCESS_ID"))
					callpoint!.setColumnData("ADM_PROCBATCHES.TIME_OPENED",date(0:"%hz%mz"))
					callpoint!.setColumnData("ADM_PROCBATCHES.USER_ID",sysinfo.user_id$)
					callpoint!.setColumnData("ADM_PROCBATCHES.DESCRIPTION",stbl("+BATCH_DESC"))
					callpoint!.setStatus("MODIFIED-REFRESH")
				endif
		break
		case fnstr_pos(pad("ADM_PROCBATCHES.BATCH_NO.AVAL",40),callpoint_event_str$,40)			
			rem --- don't allow user to assign new batch# -- use Barista seq# (BATCH_NO)
			rem --- if user made null entry (to assign next seq automatically) then getRawUserInput() will be empty
			rem --- if not empty, then the user typed a number -- if an existing batch#, fine; if not, abort
			
			if cvs(callpoint!.getRawUserInput(),3)<>""
				msk$=callpoint!.getTableColumnAttribute("ADM_PROCBATCHES.BATCH_NO","MSKI")
				process_id$=stbl("+PROCESS_ID",err=*next)
				find_batch$=str(num(callpoint!.getRawUserInput()):msk$)
				adm_procbatches_dev=fnget_dev("ADM_PROCBATCHES")
				dim adm_procbatches$:fnget_tpl$("ADM_PROCBATCHES")
				read record (adm_procbatches_dev,key=firm_id$+process_id$+find_batch$,dom=*next)adm_procbatches$
				if pos(firm_id$+process_id$+find_batch$=adm_procbatches$)<>1
					msg_id$="AD_INVAL_BATCH"
					gosub disp_message
					callpoint!.setStatus("ABORT")
				endif
			endif
		break
		case fnstr_pos(pad("ADM_PROCBATCHES.BEND",40),callpoint_event_str$,40)			
			release
		break
		case fnstr_pos(pad("ADM_PROCBATCHES.BTBL",40),callpoint_event_str$,40)			
			callpoint!.setTableColumnAttribute("ADM_PROCBATCHES.PROCESS_ID","PVAL",$22$+stbl("+PROCESS_ID")+$22$)
			if stbl("+ALLOW_NEW_BATCH")<>"Y"
				batch_opts$=callpoint!.getTableColumnAttribute("ADM_PROCBATCHES.BATCH_NO","OPTS")
				x=pos("#;"=batch_opts$,2)
				if x
					batch_opts$=batch_opts$(1,x-1)+batch_opts$(x+2)
					callpoint!.setTableColumnAttribute("ADM_PROCBATCHES.BATCH_NO","OPTS",batch_opts$)
				endif
			endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[ADM_PROCBATCHES.<CUSTOM>]]


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

