rem Callpoint program for COUNTER_PRINTERS - Select Valid Counter Printers
rem Program counter_printers_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("COUNTER_PRINTERS.ACUS",40)+
:		pad("COUNTER_PRINTERS.AWIN",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("COUNTER_PRINTERS.ACUS",40),callpoint_event_str$,40)			
			rem --- Interpret Events
			
				grid!      = callpoint!.getDevObject("grid_object")
				client_lb! = callpoint!.getDevObject("client_lb")
				server_lb! = callpoint!.getDevObject("server_lb")
				lastEvent! = BBjAPI().getLastEvent()
				control!   = lastEvent!.getControl()
			
			rem --- Double-click on grid
			
				if control! = grid! then
					row = lastEvent!.getRow()
					printer_name$  = grid!.getCellText(row, 0)
			
					if cvs(printer_name$, 2) <> "" then
						client_server$ = grid!.getCellText(row, 1)
						callpoint!.setColumnData("COUNTER_PRINTERS.SELECTED_PRINTER", cvs(printer_name$, 2) + ": " + client_server$)
					endif
				else
			
				rem --- Double-click on client listbox
			
					if control! = client_lb! then 
						lb_index% = client_lb!.getSelectedIndex()
			
						if lb_index% >= 0 then
							printer_name$ = str( client_lb!.getItemAt(lb_index%) )
							gosub is_name_in_grid
			
							if name_is_in_grid
								grid!.deleteRow(grid_row)
								user_tpl.last_grid_row = user_tpl.last_grid_row - 1
							else
								grid!.setCellText(user_tpl.last_grid_row, 0, printer_name$)
								grid!.setCellText(user_tpl.last_grid_row, 1, "Client")
								user_tpl.last_grid_row = user_tpl.last_grid_row + 1
							endif
						endif
					else
			
					rem --- Double-click on server listbox
			
						if control! = server_lb! then
							lb_index% = client_lb!.getSelectedIndex()
			
							if lb_index% >= 0 then
								printer_name$ = str( server_lb!.getItemAt(lb_index%) )
								gosub is_name_in_grid
			
								if name_is_in_grid
									grid!.deleteRow(grid_row)
									user_tpl.last_grid_row = user_tpl.last_grid_row - 1	
								else				
									grid!.setCellText(user_tpl.last_grid_row, 0, printer_name$)
									grid!.setCellText(user_tpl.last_grid_row, 1, "Server")
									user_tpl.last_grid_row = user_tpl.last_grid_row + 1
								endif
							endif
						endif
					endif
				endif
			
				callpoint!.setStatus("REFRESH")
		break
		case fnstr_pos(pad("COUNTER_PRINTERS.AWIN",40),callpoint_event_str$,40)			
			rem --- Inits
			
				use ::ado_util.src::util
			
				use javax.print.attribute
				use javax.print.attribute.standard
			
				dim user_tpl$:"grid_id:u(2), last_grid_row:u(2)"
				user_tpl.last_grid_row = 0
				client = 0
				server = 1
			
				declare auto BBjListBox        client_lb!
				declare auto BBjListBox        server_lb!
				declare      BBjVector         clientPrinters!
				declare      BBjVector         serverPrinters!
				declare      BBjTopLevelWindow Form!
				declare      BBjSysGui         SysGui!
				declare auto BBjStandardGrid   grid!
				declare auto BBjControl        control!
			
				declare javax.print.attribute.HashPrintServiceAttributeSet printerAttributes!
			
			rem --- Get list box controls
			
				client_lb! = util.getControl(callpoint!, "COUNTER_PRINTERS.CLIENT_PRINTERS")
				client_lb!.setSize(200, 100)
				callpoint!.setDevObject("client_lb", client_lb!)
				server_lb! = util.getControl(callpoint!, "COUNTER_PRINTERS.SERVER_PRINTERS")
				server_lb!.setSize(200, 100)
				callpoint!.setDevObject("server_lb", server_lb!)
			
			rem --- List client printers
				
				start_block = 1
			
				if start_block then
					printerAttributes! = new attribute.HashPrintServiceAttributeSet()
					printerAttributes!.add(standard.PrinterIsAcceptingJobs.ACCEPTING_JOBS)
					clientPrinters! = BBjAPI().lookupPrinters(printerAttributes!, client, err=*endif)
			
					for i=0 to clientPrinters!.size() - 1
			    		client_lb!.addItem( str(clientPrinters!.get(i)) )
					next i
				endif
			
			rem --- List server printers
				
				start_block = 1
			
				if start_block then
					printerAttributes! = new attribute.HashPrintServiceAttributeSet()
					printerAttributes!.add(standard.PrinterIsAcceptingJobs.ACCEPTING_JOBS)
					serverPrinters! = BBjAPI().lookupPrinters(printerAttributes!, server, err=*endif)
			
					for i=0 to serverPrinters!.size() - 1
						add_printer = 1
			
						for j=0 to clientPrinters!.size() - 1
							if serverPrinters!.get(i) = clientPrinters!.get(j) then
								add_printer = 0
								break
							endif
						next j
			
			    		if add_printer then server_lb!.addItem( str(serverPrinters!.get(i)) )
					next i
				endif
			
			rem --- Set Callbacks
			
				client_lb!.setCallback(client_lb!.ON_LIST_DOUBLE_CLICK, "custom_event")
				server_lb!.setCallback(server_lb!.ON_LIST_DOUBLE_CLICK, "custom_event")
			
			rem --- Create grid
			
				gosub create_grid
				util.resizeWindow(Form!, Sysgui!)
			
			rem --- Set Grid Callbacks
			
				grid!.setCallback(grid!.ON_GRID_DOUBLE_CLICK, "custom_event")
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[COUNTER_PRINTERS.<CUSTOM>]]

rem ==========================================================================
create_grid: rem --- Create grid
             rem     OUT: grid_id, global in user_tpl.grid_id
             rem          grid!,   global in DevObject("grid_object)
rem ==========================================================================

	grid_id = num( stbl("+CUSTOM_CTL") )
	ignore$ = stbl( "+CUSTOM_CTL", str( grid_id+1 ) )
	user_tpl.grid_id = grid_id

	grid_x = 130
	grid_y = 180
	grid_w = 400
	grid_h = 212
	grid! = Form!.addGrid(grid_id, grid_x, grid_y, grid_w, grid_h)
	callpoint!.setDevObject("grid_object", grid!)

	dim attr_def_col_str$[0,0]
	attr_def_col_str$[0,0] = callpoint!.getColumnAttributeTypes()
	def_inv_cols  = 2
	num_rpts_rows = 10

	dim attr_inv_col$[ def_inv_cols, len(attr_def_col_str$[0,0]) / 5 ]

	attr_inv_col$[1,fnstr_pos("DVAR",attr_def_col_str$[0,0],5)]="PRINTER_NAME"
	attr_inv_col$[1,fnstr_pos("LABS",attr_def_col_str$[0,0],5)]="Printer Name"
	attr_inv_col$[1,fnstr_pos("CTLW",attr_def_col_str$[0,0],5)]="150"

	attr_inv_col$[2,fnstr_pos("DVAR",attr_def_col_str$[0,0],5)]="CLIENT_SERVER"
	attr_inv_col$[2,fnstr_pos("LABS",attr_def_col_str$[0,0],5)]="Where?"
	attr_inv_col$[2,fnstr_pos("CTLW",attr_def_col_str$[0,0],5)]="30"

	for curr_attr=1 to def_inv_cols
		attr_inv_col$[0,1] = attr_inv_col$[0,1] + 
:			pad("COUNTER_PRINTERS." + attr_inv_col$[curr_attr, fnstr_pos("DVAR", attr_def_col_str$[0,0], 5)], 40)
	next curr_attr

	attr_disp_col$ = attr_inv_col$[0,1]

	call stbl("+DIR_PGM")+"adx_typesafe.aon::grid_init",
:		gui_dev,
:		grid!,
:		"COLH-LINES-LIGHT-AUTO-MULTI-SIZEC-CHECKS",
:		num_rpts_rows,
:		attr_def_col_str$[all],
:		attr_disp_col$,
:		attr_inv_col$[all]

	return

rem ==========================================================================
is_name_in_grid: rem --- Is this printer name in the grid?
                 rem      IN: printer_name$
                 rem     OUT: name_is_in_grid - true/false
                 rem          grid_row
rem ==========================================================================

	name_is_in_grid = 0

	for i=0 to user_tpl.last_grid_row - 1
		if grid!.getCellText(i, 0) = printer_name$ then
			name_is_in_grid = 1
			grid_row = i
			break
		endif
	next i

	return


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

