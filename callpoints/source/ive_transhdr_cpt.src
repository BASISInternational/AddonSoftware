rem Callpoint program for IVE_TRANSHDR - Inventory Transaction Header
rem Program ive_transhdr_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("IVE_TRANSHDR.AREA",40)+
:		pad("IVE_TRANSHDR.BEND",40)+
:		pad("IVE_TRANSHDR.BSHO",40)+
:		pad("IVE_TRANSHDR.BTBL",40)+
:		pad("IVE_TRANSHDR.TRANS_CODE.AINP",40)+
:		pad("IVE_TRANSHDR.TRANS_CODE.AVAL",40)+
:		pad("IVE_TRANSHDR.TRANS_DATE.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("IVE_TRANSHDR.AREA",40),callpoint_event_str$,40)			
			print "HEADER: after record read (AREA)"; rem debug
			
			rem --- Get trans code record and set flags
				
				rem can't use the method below because the data is not displayed yet
				rem trans_code$ = callpoint!.getColumnData("IVE_TRANSHDR.TRANS_CODE")
				trans_code$ = rec_data.trans_code$
				gosub get_trans_rec
		break
		case fnstr_pos(pad("IVE_TRANSHDR.BEND",40),callpoint_event_str$,40)			
			rem --- remove software lock on batch, if batching
			
				batch$=stbl("+BATCH_NO",err=*next)
				if num(batch$)<>0
					lock_table$="ADM_PROCBATCHES"
					lock_record$=firm_id$+stbl("+PROCESS_ID")+batch$
					lock_type$="U"
					lock_status$=""
					call stbl("+DIR_SYP")+"bac_lock_record.bbj",lock_table$,lock_record$,lock_type$,table_chans$[all],lock_status$
				endif
		break
		case fnstr_pos(pad("IVE_TRANSHDR.BSHO",40),callpoint_event_str$,40)			
			rem print 'show', ; rem debug
			
			rem --- Pre-inits
				
				use ::ado_util.src::util
				pgmdir$ = stbl("+DIR_PGM")
			
			rem --- Open files
			
				num_files=7
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
				open_tables$[2]="GLS_PARAMS",   open_opts$[2]="OTA"
				open_tables$[3]="IVC_TRANCODE", open_opts$[3]="OTA"
				open_tables$[4]="IVE_TRANSDET", open_opts$[4]="OTA"
				open_tables$[5]="IVM_ITEMMAST", open_opts$[5]="OTA"
				open_tables$[6]="IVM_ITEMWHSE", open_opts$[6]="OTA"
				open_tables$[7]="IVM_LSMASTER", open_opts$[7]="OTA"
			
				gosub open_tables
			
				ivs01_dev=num(open_chans$[1])
				gls01_dev=num(open_chans$[2])
				dim ivs01a$:open_tpls$[1]
				dim gls01a$:open_tpls$[2]
			
			rem --- Setup user template and object
			
				UserObj! = SysGUI!.makeVector(); rem to store objects in
			
				tpl_str$ = ""
				tpl_str$ = tpl_str$ + "gl:c(1), glw11:c(1*), ls:c(1), lf:c(1), m9:c(1*), prod_type:c(3),"
				tpl_str$ = tpl_str$ + "location_obj:u(1), qoh_obj:u(1), commit_obj:u(1), avail_obj:u(1),"
				tpl_str$ = tpl_str$ + "trans_post_gl:c(1), trans_type:c(1), trans_adj_acct:c(1*),"
				tpl_str$ = tpl_str$ + "this_item_lot_or_ser:u(1), lotted:u(1), serialized:u(1), ls_found:u(1),"
				tpl_str$ = tpl_str$ + "multi_whse:u(1), warehouse_id:c(2), avail:n(1*), commit:n(1*), qoh:n(1*),"
				tpl_str$ = tpl_str$ + "pgmdir:c(1*)"
				dim user_tpl$:tpl_str$
			
				user_tpl.pgmdir$ = pgmdir$
			
			rem --- Setup for display fields on header
			
				declare BBjControl location!
				declare BBjControl qty_on_hand!
				declare BBjControl qty_commit!
				declare BBjControl qty_avail!
			
				location!    = util.getControl(callpoint!, "<<DISPLAY>>.LOCATION")
				qty_on_hand! = util.getControl(callpoint!, "<<DISPLAY>>.QTY_ON_HAND")
				qty_commit!  = util.getControl(callpoint!, "<<DISPLAY>>.QTY_COMMIT")
				qty_avail!   = util.getControl(callpoint!, "<<DISPLAY>>.QTY_AVAIL")
			
				user_tpl.location_obj = 0
				user_tpl.qoh_obj      = 1
				user_tpl.commit_obj   = 2
				user_tpl.avail_obj    = 3
			
				UserObj!.addItem( location! )
				UserObj!.addItem( qty_on_hand! )
				UserObj!.addItem( qty_commit! )
				UserObj!.addItem( qty_avail! )
			
			rem --- Get parameter records
			
				find record (ivs01_dev ,key=firm_id$+"IV00", dom=std_missing_params) ivs01a$
				find record (gls01_dev, key=firm_id$+"GL00", err=set_iv_params) gls01a$
			
				set_iv_params:
				user_tpl.multi_whse$ = ivs01a.multi_whse$
				user_tpl.warehouse_id$ = ivs01a.warehouse_id$
			
				rem --- If we're not multi-warehouse, disable column
				if ivs01a.multi_whse$ <> "Y" then
					util.disableGridColumn(Form!, 0)
				endif
			
			rem --- Numeric masks
			
				user_tpl.m9$ = ivs01a.price_mask$
				call pgmdir$+"adc_sizemask.aon",user_tpl.m9$,ignore,8,10
			
			rem --- Lotted flags, Lifo/fifo
			
				user_tpl.lotted = 0
				user_tpl.serialized = 0
				user_tpl.ls$ = "N"
			
				if ivs01a.lotser_flag$="L" then 
					user_tpl.ls$="Y"
					user_tpl.lotted=1
				else 
					if ivs01a.lotser_flag$="S" then 
						user_tpl.ls$="Y"
						user_tpl.serialized=1
					endif
				endif
			
				if pos(ivs01a.lifofifo$="LF") then user_tpl.lf$="Y" else user_tpl.lf$ = "N"
			
			rem --- Is GL installed?
			
				status=0
				call pgmdir$+"glc_ctlcreate.aon",err=*next,pgm(-2),"IV",glw11$,gl$,status
				if status then goto std_exit
				user_tpl.gl$    = gl$
				user_tpl.glw11$ = glw11$
			
			rem --- Final inits
			
				precision num(ivs01a.precision$)
		break
		case fnstr_pos(pad("IVE_TRANSHDR.BTBL",40),callpoint_event_str$,40)			
			rem --- Get Batch information
			
			call stbl("+DIR_PGM")+"adc_getbatch.aon",callpoint!.getAlias(),"",table_chans$[all]
			callpoint!.setTableColumnAttribute("IVE_TRANSHDR.BATCH_NO","PVAL",$22$+stbl("+BATCH_NO")+$22$)
			
		break
		case fnstr_pos(pad("IVE_TRANSHDR.TRANS_CODE.AINP",40),callpoint_event_str$,40)			
			rem --- You can't modify the trans code use you've entered the record
			
				trans_code$      = pad(callpoint!.getUserInput(), 2)
				orig_trans_code$ = callpoint!.getColumnDiskData("IVE_TRANSHDR.TRANS_CODE")
			
				if cvs(orig_trans_code$, 2) <> "" and trans_code$ <> orig_trans_code$ then
					callpoint!.setMessage("IV_TRANS_CODE_CHANGE")
					callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("IVE_TRANSHDR.TRANS_CODE.AVAL",40),callpoint_event_str$,40)			
			print "in TRANS_CODE.AVAL"; rem debug
			
			rem --- Get trans code record and set flags
			
				trans_code$ = callpoint!.getUserInput()
				gosub get_trans_rec
		break
		case fnstr_pos(pad("IVE_TRANSHDR.TRANS_DATE.AVAL",40),callpoint_event_str$,40)			
			rem --- Does date fall into the GL period?
			
				if user_tpl.gl$ = "Y" then
					date$ = callpoint!.getUserInput()
					call stbl("+DIR_PGM")+"glc_datecheck.aon",date$,"Y",period$,year$,status
					if status > 99 then callpoint!.setStatus("ABORT")
				endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[IVE_TRANSHDR.<CUSTOM>]]

rem --------------------------------------------------------------------------
get_trans_rec: rem --- Get Transaction Code Record
               rem      IN: trans_code$, file opened
               rem     OUT: flags set
rem --------------------------------------------------------------------------

	transcode_dev = fnget_dev("IVC_TRANCODE")
	dim trans_rec$:fnget_tpl$("IVC_TRANCODE")

	trans_key$ = firm_id$ + "B" + trans_code$
	find record (transcode_dev, key=trans_key$) trans_rec$

	user_tpl.trans_type$     = trans_rec.trans_type$
	user_tpl.trans_post_gl$  = trans_rec.post_gl$
	user_tpl.trans_adj_acct$ = trans_rec.gl_adj_acct$

	print "in get_trans_rec: Got transaction code and set user_tpl$; post to GL = ", user_tpl.trans_post_gl$; rem debug

	rem --- Disable grid columns based on params 
	if user_tpl.gl$ <> "Y" or user_tpl.trans_post_gl$ <> "Y" then 
		util.disableGridColumn(Form!, 3)
		print "G/L entry should be disabled"; rem debug
	endif

return

rem --------------------------------------------------------------------------
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem --------------------------------------------------------------------------


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

