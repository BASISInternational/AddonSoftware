rem Callpoint program for OPS_PARAMS - OP Parameters
rem Program ops_params_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("OPS_PARAMS.AREA",40)+
:		pad("OPS_PARAMS.AREC",40)+
:		pad("OPS_PARAMS.BEG_CMT_LINE.AVAL",40)+
:		pad("OPS_PARAMS.BSHO",40)+
:		pad("OPS_PARAMS.END_CMT_LINE.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("OPS_PARAMS.AREA",40),callpoint_event_str$,40)			
			rem --- if not posting to GL, set 'print sales GL detail' flag to N as well
			
			if user_tpl.gl_post$="N" then 
				callpoint!.setColumnData("OPS_PARAMS.PRT_GL_DET","N")
				ctl_name$="PRT_GL_DET"
				ctl_stat$="D"
				gosub disable_fields
			endif
		break
		case fnstr_pos(pad("OPS_PARAMS.AREC",40),callpoint_event_str$,40)			
			callpoint!.setColumnData("OPS_PARAMS.INV_HIST_FLG","Y")
		break
		case fnstr_pos(pad("OPS_PARAMS.BEG_CMT_LINE.AVAL",40),callpoint_event_str$,40)			
			beg_cmt$=callpoint!.getUserInput()
			end_cmt$=callpoint!.getColumnData("OPS_PARAMS.END_CMT_LINE")
			gosub validate_cmt_lines
		break
		case fnstr_pos(pad("OPS_PARAMS.BSHO",40),callpoint_event_str$,40)			
			num_files=2
			dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
			open_tables$[1]="GLS_PARAMS",open_opts$[1]="OTA"
			open_tables$[2]="ARS_PARAMS",open_opts$[2]="OTA"
			
			gosub open_tables
			
			gls01_dev=num(open_chans$[1])
			ars01_dev=num(open_chans$[2])
			
			rem --- Dimension string templates
			
			dim gls01a$:open_tpls$[1]
			dim ars01a$:open_tpls$[2]
			
			rem --- check to see if main AR param rec (firm/AR/00) exists; if not, tell user to set it up first
			
				ars01a_key$=firm_id$+"AR00"
				find record (ars01_dev,key=ars01a_key$,err=*next) ars01a$
				if cvs(ars01a.current_per$,2)=""
					msg_id$="AR_PARAM_ERR"
					dim msg_tokens$[1]
					msg_opt$=""
					gosub disp_message
					gosub remove_process_bar
					release
				endif
			
			rem --- Retrieve parameter/application data
			
				dim info$[20]
			
				gls01a_key$=firm_id$+"GL00"
				find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$  
			
				call stbl("+DIR_PGM")+"adc_application.aon","GL",info$[all]
				gl$=info$[20]
				call stbl("+DIR_PGM")+"adc_application.aon","AP",info$[all]
				ap$=info$[20],br$=info$[9]
				call stbl("+DIR_PGM")+"adc_application.aon","IV",info$[all]
				iv$=info$[20]
				call stbl("+DIR_PGM")+"adc_application.aon","OP",info$[all]
				gl_post$=info$[9]
				if gl$<>"Y" gl_post$="N"
			
				dim user_tpl$:"app:c(2),gl_pers:c(2),gl_installed:c(1),gl_post:c(1),"+
:			                  "ap_installed:c(1),iv_installed:c(1),bank_rec:c(1)"
			
				user_tpl.app$="AR"
				user_tpl.gl_pers$=gls01a.total_pers$
				user_tpl.gl_installed$=gl$
				user_tpl.ap_installed$=ap$
				user_tpl.iv_installed$=iv$
				user_tpl.bank_rec$=br$
				user_tpl.gl_post$=gl_post$
		break
		case fnstr_pos(pad("OPS_PARAMS.END_CMT_LINE.AVAL",40),callpoint_event_str$,40)			
			beg_cmt$=callpoint!.getColumnData("OPS_PARAMS.BEG_CMT_LINE")
			end_cmt$=callpoint!.getUserInput()
			gosub validate_cmt_lines
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[OPS_PARAMS.<CUSTOM>]]

validate_cmt_lines:
rem make sure beg/end cmt lines are blank or >0, <99, and that beg < end

beg_cmt=0
end_cmt=0
beg_cmt=num(beg_cmt$,err=*next)
end_cmt=num(end_cmt$,err=*next)
passed$=""

if cvs(beg_cmt$,3)<>"" and cvs(end_cmt$,3)<>""
	if beg_cmt<=0 or beg_cmt>99 or beg_cmt>end_cmt or
:	   end_cmt<=0 or end_cmt>99 or end_cmt<beg_cmt
		passed$="N"
	endif
else
	if cvs(beg_cmt$,3)<>""
		if beg_cmt<=0 or beg_cmt>99
			passed$="N"
		endif
	endif
else
	if cvs(end_cmt$,3)<>""
		if end_cmt<=0 or end_cmt>99
			passed$="N"
		endif
	endif
endif

if passed$="N"
	msg_id$="OP_INVAL_CMT"
	gosub disp_message
	callpoint!.setStatus("ABORT")
endif

return

remove_process_bar:

bbjAPI!=bbjAPI()
rdFuncSpace!=bbjAPI!.getGroupNamespace()
rdFuncSpace!.setValue("+build_task","OFF")

return

disable_fields:
	rem --- used to disable/enable controls
	rem --- ctl_name$ sent in with name of control to enable/disable (format "ALIAS.CONTROL_NAME")
	rem --- ctl_stat$ sent in as D or space, meaning disable/enable, respectively

	wctl$=str(num(callpoint!.getTableColumnAttribute(ctl_name$,"CTLI")):"00000")
	wmap$=callpoint!.getAbleMap()
	wpos=pos(wctl$=wmap$,8)
	wmap$(wpos+6,1)=ctl_stat$
	callpoint!.setAbleMap(wmap$)
	callpoint!.setStatus("ABLEMAP-REFRESH-ACTIVATE")

return

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src



open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

