rem Callpoint program for ADX_BUILDSPROC - Build Sproc Utility
rem Program adx_buildsproc_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("ADX_BUILDSPROC.ARER",40)+
:		pad("ADX_BUILDSPROC.ASVA",40)+
:		pad("ADX_BUILDSPROC.AWIN",40)+
:		pad("ADX_BUILDSPROC.BSHO",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("ADX_BUILDSPROC.ARER",40),callpoint_event_str$,40)			
			db!=fnget_control!("DATABASE")
			db!.selectIndex(0)
		break
		case fnstr_pos(pad("ADX_BUILDSPROC.ASVA",40),callpoint_event_str$,40)			
			rem --- check to see if pathnames are valid
			
			svdir$=dir("")
			msg_id$="INVALID_PATH" 
			dim msg_tokens$[1]
			dim wdir$[1,1]
			
			wdir$[0,0]=callpoint!.getColumnData("ADX_BUILDSPROC.SPROC_PATH")
			wdir$[0,1]="ADX_BUILDSPROC.SPROC_PATH"
			wdir$[1,0]=callpoint!.getColumnData("ADX_BUILDSPROC.BARISTA_CFG_PATH")
			wdir$[1,1]="ADX_BUILDSPROC.BARISTA_CFG_PATH"
			
			for x=0 to 1
				while pos("\"=wdir$[x,0])<>0
						wdir$[x,0](pos("\"=wdir$[x,0]),1)="/"
				wend
				if wdir$[x,0](len(wdir$[x,0]),1)<>"/" wdir$[x,0]=wdir$[x,0]+"/"
				callpoint!.setColumnData(wdir$[x,1],wdir$[x,0])
			next x
			
			for x=0 to 1
				chdir wdir$[x,0],err=*next;continue
				msg_tokens$[1]=msg_tokens$[1]+$0A$+wdir$[x,0]
			next x
			
			chdir svdir$
			
			if msg_tokens$[1]<>""
				gosub disp_message
				callpoint!.setStatus("ABORT")
			endif
			
			db!=fnget_control!("DATABASE")
			if db!.getSelectedIndex()<0
				x=msgbox("No Database Selected")
				callpoint!.setStatus("ABORT")
			else
				if pos("(none)"=db!.getItemAt(db!.getSelectedIndex()))<>0
					x=msgbox("No Database Selected")
					callpoint!.setStatus("ABORT")
				else
					callpoint!.setColumnData("ADX_BUILDSPROC.DATABASE",db!.getItemAt(db!.getSelectedIndex()))
			endif
		break
		case fnstr_pos(pad("ADX_BUILDSPROC.AWIN",40),callpoint_event_str$,40)			
			rem --- load database listbutton w/ databases
			
			db!=fnget_control!("DATABASE")
			db!.removeAllItems()
			sqllist! = sqllist(0)
			list! = Arrays.asList(sqllist!.split($0a$))
			if list!.size()<>0
				for i=0 to list!.size()-1
					db$ = str(list!.get(i))
					db!.addItem(db$)
				next i
			else
				db!.addItem("(none)")
			endif
		break
		case fnstr_pos(pad("ADX_BUILDSPROC.BSHO",40),callpoint_event_str$,40)			
			use java.util.Arrays
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[ADX_BUILDSPROC.<CUSTOM>]]

rem fnget_control.src

def fnget_control!(ctl_name$)

ctlContext=num(callpoint!.getTableColumnAttribute(ctl_name$,"CTLC"))
ctlID=num(callpoint!.getTableColumnAttribute(ctl_name$,"CTLI"))
get_control!=SysGUI!.getWindow(ctlContext).getControl(ctlID)
return get_control!

fnend





open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

