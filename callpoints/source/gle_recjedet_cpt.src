rem Callpoint program for GLE_RECJEDET - Recurring Journal Entry Detail
rem Program gle_recjedet_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("GLE_RECJEDET.ADEL",40)+
:		pad("GLE_RECJEDET.AUDE",40)+
:		pad("GLE_RECJEDET.CREDIT_AMT.AVAL",40)+
:		pad("GLE_RECJEDET.CREDIT_AMT.AVEC",40)+
:		pad("GLE_RECJEDET.DEBIT_AMT.AVAL",40)+
:		pad("GLE_RECJEDET.DEBIT_AMT.AVEC",40)+
:		pad("GLE_RECJEDET.UNITS.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("GLE_RECJEDET.ADEL",40),callpoint_event_str$,40)			
			rem --- recal/display tots after deleting a grid row
			gosub calc_grid_tots
			gosub disp_totals
		break
		case fnstr_pos(pad("GLE_RECJEDET.AUDE",40),callpoint_event_str$,40)			
			rem --- recal/display tots after deleting a grid row
			gosub calc_grid_tots
			gosub disp_totals
		break
		case fnstr_pos(pad("GLE_RECJEDET.CREDIT_AMT.AVAL",40),callpoint_event_str$,40)			
			rem set debit amt to zero (since entering credit), then recalc/display hdr disp columns
			                    
			if num(callpoint!.getUserInput())<>0 callpoint!.setColumnData("GLE_RECJEDET.DEBIT_AMT",str(0))
			
			callpoint!.setStatus("MODIFIED-REFRESH")
		break
		case fnstr_pos(pad("GLE_RECJEDET.CREDIT_AMT.AVEC",40),callpoint_event_str$,40)			
			gosub calc_grid_tots
			gosub disp_totals
		break
		case fnstr_pos(pad("GLE_RECJEDET.DEBIT_AMT.AVAL",40),callpoint_event_str$,40)			
			rem set credit amt to zero (since entering debit), then recalc/display hdr disp columns
			                    
			if num(callpoint!.getUserInput())<>0 callpoint!.setColumnData("GLE_RECJEDET.CREDIT_AMT",str(0))
			
			callpoint!.setStatus("MODIFIED-REFRESH")
		break
		case fnstr_pos(pad("GLE_RECJEDET.DEBIT_AMT.AVEC",40),callpoint_event_str$,40)			
			gosub calc_grid_tots
			gosub disp_totals
		break
		case fnstr_pos(pad("GLE_RECJEDET.UNITS.AVAL",40),callpoint_event_str$,40)			
			gosub calc_grid_tots
			gosub disp_totals
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[GLE_RECJEDET.<CUSTOM>]]

rem calculate total debits/credits/units and display in form header

calc_grid_tots:

	recVect!=GridVect!.getItem(0)
	dim gridrec$:dtlg_param$[1,3]
	numrecs=recVect!.size()
	if numrecs>0
		for reccnt=0 to numrecs-1
			gridrec$=recVect!.getItem(reccnt)
			if cvs(gridrec$,3) <> "" and callpoint!.getGridRowDeleteStatus(reccnt)<>"Y"
				tdb=tdb+num(gridrec.debit_amt$)
				tcr=tcr+num(gridrec.credit_amt$)
				tunits=tunits+num(gridrec.units$)
				rem print 'show',gridrec.debit_amt$," ",gridrec.credit_amt$," ",tdb,tcr
			endif
		next reccnt

		tbal=tdb-tcr
		user_tpl.tot_db$=str(tdb)
		user_tpl.tot_cr$=str(tcr)
		user_tpl.tot_units$=str(tunits)
		user_tpl.tot_bal$=str(tbal)

	endif
return


disp_totals:

	rem --- get context and ID of display controls, and redisplay w/ amts from calc_grid_tots
	    
	debits!=UserObj!.getItem(num(user_tpl.debits_ofst$))
	debits!.setValue(num(user_tpl.tot_db$))
	callpoint!.setHeaderColumnData("<<DISPLAY>>.DEBIT_AMT",user_tpl.tot_db$)

	credits!=UserObj!.getItem(num(user_tpl.credits_ofst$))
	credits!.setValue(num(user_tpl.tot_cr$))
	callpoint!.setHeaderColumnData("<<DISPLAY>>.CREDIT_AMT",user_tpl.tot_cr$)

	bal!=UserObj!.getItem(num(user_tpl.bal_ofst$))
	bal!.setValue(num(user_tpl.tot_bal$))
	callpoint!.setHeaderColumnData("<<DISPLAY>>.BALANCE",user_tpl.tot_bal$)

	units!=UserObj!.getItem(num(user_tpl.units_ofst$))
	units!.setValue(num(user_tpl.tot_units$))
	callpoint!.setHeaderColumnData("<<DISPLAY>>.UNITS",user_tpl.tot_units$)

	return


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

