REM /**
REM  * CCRegistrationConfirmationModel.bbj
REM  * @author shaun
REM  * Copyright BASIS International Ltd.  All Rights Reserved.
REM  */

use ::CCRegistrationModel.bbj::CCRegistrationModel
use ::CCRegistrationModel.bbj::CCRegistrationRecord
use ::CCLoginModel.bbj::CCLoginModel
use ::ado_rptControl.src::ReportControl
use ::aro_CCUtil.bbj::CCUtil

use java.util.Base64
use java.util.UUID

class public CCRegistrationConfirmationModel

  field protected CCRegistrationModel RegistrationModel!=new CCRegistrationModel() 
  field protected BBjNumber SqlChan
 
  method public CCRegistrationConfirmationModel()
    #SqlChan=sqlunt
    sqlopen (#SqlChan) stbl("+DBNAME")
  methodend

  method public CCRegistrationRecord locateToken(BBjString token!)
    declare CCRegistrationRecord rec!
    declare BBjString result$
    
    sqlprep (#SqlChan) "select * from ARC_CC_REGISTER where CC_Token=?"
    sqlexec (#SqlChan) token!
    
    dim result$:sqltmpl(#SqlChan)
    result$=sqlfetch(#SqlChan,end=not_found)
    
    REM Check to see if username already exists in users and registration (duplicate registrations can happen) 
    if (#RegistrationModel!.userNameExistsInUsers(result.CC_USERNAME$)) then
     methodret null() 
    endif
    
    REM Check to see if this registration has already been taken care of 
    if (result.REGISTER_DATE$<>"") then 
        methodret null() 
    endif 
    
    rec!=new CCRegistrationRecord()
    rec!.setUserName(result.CC_USERNAME$)
    rec!.setFirstName(result.NAME_FIRST$)
    rec!.setLastName(result.NAME_LAST$)
    rec!.setCustomerID(result.CUSTOMER_ID$)
    rec!.setUserEmail(result.USER_EMAIL$)
    rec!.setGeneratedToken(result.CC_TOKEN$)
    rec!.setRequestDate(result.REQUEST_DATE$)
    rec!.setFirmID(result.FIRM_ID$)
    
    methodret rec!
    not_found: 
    methodret null() 
  methodend 

  method public void addUser(CCRegistrationRecord rec!)
    declare BBjAdminBase admin!
    REM TODO:  Validate data
    
    activatedDate$=CCUtil.today()
    
    REM Create User in database 
    sqlprep (#SqlChan) "INSERT INTO ARC_CC_USERS (FIRM_ID, CC_USERNAME, CUSTOMER_ID, NAME_FIRST, NAME_LAST, USER_EMAIL, ACTIVATED_DATE) VALUES(?,?,?,?,?,?,?)"
    sqlexec (#SqlChan) rec!.getFirmID(),rec!.getUserName(),rec!.getCustomerID(), rec!.getFirstName(),rec!.getLastName(), rec!.getUserEmail(),activatedDate$
    
    REM Create user in EM 
    password$=#generatePassword()
    admin!=CCUtil.getAdmin()
    admin!.addUser(CCUtil.getEMUserName(rec!.getUserName()),password$)
    
    REM Send the password to the new user's email address
    declare ReportControl reportControl!
    declare BBjNumber found 
    declare BBjTemplatedString recipientInfo!
    declare BBjString emailMessage!
    declare BBjString url!
    declare BBjString parameterTable$
    
    parameterTable$=#RegistrationModel!.getParameterTable()
    
    reportControl!=new ReportControl()
    reportControl!.setFirmID(rec!.getFirmID())
    reportControl!.getReportControl(parameterTable$)
    found=reportControl!.getRecipientInfo(#RegistrationModel!.getReportControlID(),rec!.getCustomerID(),"")
    if (found) 
        recipientInfo!=reportControl!.getAdmRptctlRcp() 
        emailMessage!="Here is your new password: "+password$
        
        REM Get the URL for payments from our parameter table
        sqlprep(#SqlChan) "select PAYMENT_URL from " + parameterTable$
        sqlexec(#SqlChan)
        dim result$:sqltmpl(#SqlChan)
        result$=sqlfetch(#SqlChan)
        url!=result.PAYMENT_URL$
        
        REM Append the URL and the specific generated token to the mail message then put the modified message back in our recipient info. 
        emailMessage!=emailMessage!.trim()+$0A$+url!.trim()
        recipientInfo!.setFieldValue("EMAIL_MESSAGE",emailMessage!)
        recipientInfo!.setFieldValue("EMAIL_SUBJECT","New account created")
        recipientInfo!.setFieldValue("EMAIL_TO",rec!.getUserEmail())
        reportControl!.setAdmRptctlRcp(recipientInfo!)
        
        REM Put our email on the document queue to be sent out. The document queue was designed with the assumption that any email sent out
        REM will have some sort of attached document to it. This is not the case for this document. Provide "PDF" for the extension and the 
        REM "NOATTACH" for the document ID, to appease the document queue that no attachment is really okay. 
        reportControl!.setDocExtension("PDF")
        reportControl!.addToDocQueue(parameterTable$,rec!.getCustomerID(),"","NOATTACH")
    else 
        REM TODO: Handle customer not being found in the recipient records. This means that the customer is not fully set up for payments. 
    endif 
    
  methodend 
  
  
  REM Generate a password for the credit card processing system using the BASE64 alphabet
  method protected BBjString generatePassword() 
    REM length of password
    declare BBjNumber length
  
    REM A unique ID to use as a random sequence
    declare BBjString randomSequence!
    
    REM the password to be generated 
    declare BBjString password!

    randomSequence!=UUID.randomUUID().toString().replace("-","")
    password!=Base64.getEncoder().encode(randomSequence!)
    length=8+rnd(9)
    password!=password!.substring(0,length)
    
    methodret password!
  methodend 
    
  method public void deleteRegistration(CCRegistrationRecord rec!)
    sqlprep (#SqlChan) "DELETE FROM ARC_CC_REGISTER WHERE CC_USER_NAME=?"
    sqlexec (#SqlChan) rec!.getUserName() 
  methodend 
  

classend