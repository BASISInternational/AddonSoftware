REM /**
REM  * CCLoginManager.aon
REM  * @author shaun
REM  * Copyright BASIS International Ltd.  All Rights Reserved.
REM  */

use ::CCLoginView.aon::CCLoginView
use ::CCRegistrationView.aon::CCRegistrationView
use ::CCRegistrationModel.aon::CCRegistrationModel
use ::CCRegistrationModel.aon::CCRegistrationRecord
use ::CCRegistrationModel.aon::CCCustomerFirmInfo
use ::aro_CCUserModel.aon::CCUserModel
use ::aro_CCUserModel.aon::CCUserRecord
use ::aro_CCUtil.aon::CCUtil

class public CCLoginManager
	field protected CCUtil Util!=new CCUtil()
	field protected CCLoginView LoginView!=new CCLoginView()
	rem field protected CCLoginModel LoginModel!=new CCLoginModel()
	field protected CCRegistrationView RegistrationView!=new CCRegistrationView() 
	field protected CCRegistrationModel RegistrationModel!=new CCRegistrationModel() 
	field protected CCUserModel UserModel!=new CCUserModel() 

	method public CCLoginManager()
	    
	    REM Set up user interface 
        #LoginView!.registerRegisterButton_OnButtonPushCallback(#this!,"handleRegistration")
        #LoginView!.registerLoginButton_OnButtonPushCallback(#this!,"handleLogin")
        #LoginView!.registerCancelButton_OnButtonPushCallback(#this!,"handleCancel")
        
        #RegistrationView!.registerRegisterButton_OnButtonPushCallback(#this!,"sendRegistrationRequest")
        #RegistrationView!.registerCancelButton_OnButtonPushCallback(#this!,"cancelRegistrationRequest")
        #RegistrationView!.registerCustomerIDEB_OnFocusLostCallback(#this!, "handleCustomerModification")
        #RegistrationView!.registerDesiredUserNameEB_OnFocusLostCallback(#this!,"handleUserNameModification")
        #RegistrationView!.registerFirstNameEB_OnFocusLostCallback(#this!,"handleLostFocus")
        #RegistrationView!.registerLastNameEB_OnFocusLostCallback(#this!,"handleLostFocus")
        #RegistrationView!.registerUserEmailEB_OnFocusLostCallback(#this!,"handleLostFocus")
        
        #RegistrationModel!.setUserModel(#UserModel!)
	methodend

	method public void doModal()
		#LoginView!.show()
		process_events
	methodend

	method public void handleRegistration(BBjButtonPushEvent event!)
			#LoginView!.hide()
			#RegistrationView!.show()
	methodend

	method public void handleLogin(BBjButtonPushEvent event!)
		declare BBjString username!
		declare BBjString password!

		username!=#LoginView!.getUserName()
		password!=#LoginView!.getPassword()

		if (#UserModel!.login(username!,password!)) then
			#LoginView!.hide()

			REM TODO:  Resolve where User account settings should be
			REM Prepare the account settings view
			REM #AccountSettingsView!=new CCAccountSettingsView()
			REM #AccountSettingsView!.show()
			REM We'll need to put user settings in the future.  I want this to conform to good web design rather 
			REM than putting in "Additional Options" in the Addon dialog since your typical paying customer is not 
			REM an Addon user. 

			customerID$=#UserModel!.getAssociatedCustomerID()
			firmID$=#UserModel!.getAssociatedFirmID()


			if (customerID$<>"" and firmID$<>"") then
				declare BBjCommandLineObject cmd!
				cmd!=BBjAPI().getConfig().getCurrentCommandLineObject()
				
				REM TODO: Discuss this. Due to this piece of code we're requiring the user to call their 
				REM account aliases APP1 and APP2.  Mostly we want them to create a suitable account user 
				REM with suitable aliases but perhaps should not restrict what they choose to call those 
				REM aliases. At this point, we're safe harvesting the application username and password 
				REM to put on the commandline because they're not exposed to the website user. The problem is 
				REM more if someone were to accidently configure this interface to be a desktop app.
				declare BBjAdminBase admin!
				admin!=CCUtil.getAdmin()
				applicationUser$=admin!.getUser()
				applicationPassword$=admin!.getPassword()

				cmd!.setProgramName("sys/prog/bax_launch_task.bbj")
				arguments$=""
				arguments$=arguments$+"-tARE_CCPMT_CSTHST "
				arguments$=arguments$+"-oARE_CCPMT_CSTHST "
				arguments$=arguments$+"-mMNT "
				arguments$=arguments$+"-f"+firmID$+" "
				arguments$=arguments$+"-k"+customerID$+" "
				arguments$=arguments$+"-u"+applicationUser$+" -p"+applicationPassword$
				arguments$=arguments$+" &"
				cmd!.setProgramArgs(arguments$)
				x=scall("bbj "+cmd!.toString())
				release
			else 
			    REM TODO: Handle situation where there's a login for a user who is not set up properly
			endif
		else
			#LoginView!.show()
			#RegistrationView!.displayMessage("Login Failed. Please Try Again.")
		endif

	methodend
	
	method public void handleCustomerModification(BBjLostFocusEvent event!)
	    declare BBjString customerID!
		declare BBjString customerName$
	    declare BBjNumber customerFound
	    
	    REM Get the corresponding customer name
	    customerID!=event!.getEditBox().getText()
	    customerID!=customerID!.trim()
	    if (customerID!.length()>0) then 
	        customerName$=#RegistrationModel!.getCorrespondingCustomerName(customerID!)
	    else
			customerName$="NOT_FOUND" 
	    endif 
	    	    
	    REM Set the static text with the customer name 
	    customerFound=(customerName$<>"NOT_FOUND")
	    if  customerFound then 
	        #RegistrationView!.updateCustomerNameText(customerName$)
	    else 
	       #RegistrationView!.clearCustomerNameText()
	    endif 
	    
	    REM Enable the registration button if all our fields are populated.
	    #handleLostFocus(event!)
	    
	    REM Display this error message as the last thing, since it's awkward to display it when the state of all the GUI controls has not been set. 
	    if !customerFound then 
	        #RegistrationView!.displayMessage("It looks like this customer is not signed up for online payments. Please contact us to set up online payments.")
	    endif 
	    
	methodend 
	
	method public void handleUserNameModification(BBjLostFocusEvent event!)
	    declare BBjString name!
	    
	    name!=event!.getEditBox().getText()
	    valid = #RegistrationModel!.newUserNameIsValid(name!)
		if !valid
			#RegistrationView!.displayMessage("This username is not available; please select a different one.")
		endif
rem	    #RegistrationView!.setUserNameValid(valid)
	    #handleLostFocus(event!)
	methodend 
		
	method public void handleLostFocus(BBjLostFocusEvent event!)
	    enable=#RegistrationView!.allFieldsHaveValues() and #RegistrationModel!.newUserNameIsValid(#RegistrationView!.getUserName())
	    #RegistrationView!.setRegistrationEnabled(enable)
	methodend 

	method public void handleCancel(BBjButtonPushEvent event!)
        release
    methodend

	REM Get the registration information from the view and have the model send it to the servlet
    method public void sendRegistrationRequest(BBjButtonPushEvent event!)
      declare CCRegistrationRecord rec!
      declare CCUserRecord user!
      declare CCRegistrationEmailConfiguration emailConfiguration!
      declare BBjVector firmSelectionList!
      declare CCCustomerFirmInfo firmInfo!
      
      rec!=new CCRegistrationRecord()
      user!=new CCUserRecord()
      
	  user!.setFirmID(stbl("+FIRM_ID"))
      user!.setUserName(#RegistrationView!.getUserName())
      user!.setFirstName(#RegistrationView!.getFirstName())
      user!.setLastName(#RegistrationView!.getLastName())
      user!.setUserEmail(#RegistrationView!.getUserEmail())
      user!.setCustomerID(#RegistrationView!.getCustomerID())
      rec!.setUserRecord(user!)
      rec!.setGeneratedToken(#RegistrationModel!.generateToken())
      rec!.setRequestDate(CCUtil.today())
      
      REM Add the registration to the database and send the registration request email
      #RegistrationModel!.addRegistration(rec!)
      
      REM Switch GUI back to login screen
      #RegistrationView!.showRegistrationMessage()
      #RegistrationView!.hide()
      #LoginView!.show()   
    methodend

	REM Cancel registration
    method public void cancelRegistrationRequest(BBjButtonPushEvent event!)
      REM Switch GUI back to login screen
      #RegistrationView!.hide()
      #LoginView!.show()   
    methodend
    
classend


declare CCLoginManager cclm!
cclm!=new CCLoginManager()
cclm!.doModal()
release

