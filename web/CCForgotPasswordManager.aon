REM /**
REM  * CCConfigurePasswordManager.aon
REM  * @author shaun
REM  *
REM  */

use ::aro_CCUtil.aon::CCUtil
use ::aro_CCForgotPasswordModel.aon::CCForgotPasswordModel
use ::aro_CCUserModel.aon::CCUserModel
use ::aro_CCConfigurePasswordView.aon::CCConfigurePasswordView

REM Driver code called by bax_launch_task by way of the web app. 
declare CCForgotPasswordManager fpm!
fpm!=new CCForgotPasswordManager() 
fpm!.doModal()
release

class public CCForgotPasswordManager
    field protected CCUtil Util!=new CCUtil()
    field protected CCConfigurePasswordView ConfigurePasswordView!=new CCConfigurePasswordView()
    field protected CCUserModel UserModel!=new CCUserModel()
    field protected CCForgotPasswordModel ForgotPasswordModel!=new CCForgotPasswordModel()
    field protected BBjString UserName$
    
    method public CCForgotPasswordManager()
        declare BBjString token$
        declare BBjString userName$
    
        REM Get the token variable from the BUI application
        token$=clientenv("token",err=no_token)
        userName$=#ForgotPasswordModel!.getUserNameForToken(token$)
        if (userName$="") then goto no_token
        
        REM At this point, we've found the token, so set the user name and configure our buttons. 
        #UserName$=userName$
        #ConfigurePasswordView!.registerOKBtn_OnButtonPushCallback(#this!,"handleOK")
        #ConfigurePasswordView!.registerCancelBtn_OnButtonPushCallback(#this!,"handleCancel")
        methodret 
        
        no_token: 
        #ConfigurePasswordView!.displayMessage("Invalid token")
        release
    methodend 
    
    method public void doModal()
        #ConfigurePasswordView!.show()
        process_events
    methodend
    
    method public void handleOK(BBjButtonPushEvent event!) 
        if (#ConfigurePasswordView!.passwordsMatch()) then 
            #UserModel!.changePassword(#UserName$, #ConfigurePasswordView!.getPassword())
            #ConfigurePasswordView!.hide()
            release
        else 
            #ConfigurePasswordView!.displayMessage("Passwords must not be blank and must match.")
        endif 
    methodend 

    method public void handleCancel(BBjButtonPushEvent event!) 
        #ConfigurePasswordView!.hide()
        release
    methodend 

    
classend 