REM /**
REM  * aro_AO_CCForgotPasswordModel.aon
REM  * @author shaun
REM  *
REM  * 
REM  */

use ::aro_CCUtil.aon::CCUtil
use ::aro_CCUserModel.aon::CCUserModel

use java.time.LocalDate
use java.time.format.DateTimeFormatter

class public AO_CCForgotPasswordModel

    field protected BBjString FirmID$=stbl("+FIRM_ID")
    field protected BBjNumber SqlChan=sqlunt
    field protected CCUserModel UserModel!
    
    
    method public AO_CCForgotPasswordModel()
        sqlopen(#SqlChan) stbl("+DBNAME")
    methodend 
    
    method public void setUserModel(CCUserModel model!)
        #UserModel!=model!
    methodend 

    REM This method returns the generated token after the request is added. 
    method public BBjString addRequest(BBjString customerID$, BBjString userName$)
    
        declare BBjString token$
        declare BBjNumber expirationDays
        declare BBjString expirationDays$
        declare LocalDate today!
        declare LocalDate expirationDate!
        declare BBjString expirationDate$
        declare DateTimeFormatter formatter!
        
        REM Generate the token for this request.
        token$=CCUtil.generateToken()
        
        REM Calculate the expiration date for the request
        expirationDays$=CCUtil.getADSConfigValue(CCUtil.getPasswordRequestTimeoutVariable(),err=*next)
        if (expirationDays$<>"") then 
            expirationDays=num(expirationDays$) 
        else
            expirationDays=CCUtil.getPasswordTimeoutDefault()
        endif 
        
        today!=LocalDate.now()
        expirationDate!=today!.plusDays(expirationDays)
        
        formatter!=DateTimeFormatter.BASIC_ISO_DATE
        
        expirationDate$=formatter!.format(expirationDate!)
    
        sqlprep (#SqlChan) "insert into arc_cc_pwdreq (token,firm_id,customer_id,username,expiration) values (?,?,?,?,?)"
        sqlexec (#SqlChan) token$, #FirmID$, customerID$, userName$, expirationDate$
        
        methodret token$
    methodend 
    
    method public void removeRequest(BBjString token$)
        sqlprep (#SqlChan) "delete from arc_cc_pwdreq where firm_id=? and token=?"
        sqlexec (#SqlChan) #FirmID$, token$
    methodend 
    
    method public BBjString getUserNameForToken(BBjString token$)
        declare BBjString result$
        sqlprep (#SqlChan) "select username, expiration from arc_cc_pwdreq where firm_id=? and token=?"
        sqlexec (#SqlChan) #FirmID$, token$
        
        dim result$:sqltmpl(#SqlChan)
        result$=sqlfetch(#SqlChan,end=user_not_found)
        
        REM Check expiration for token
        expiration$=result.expiration$
        expiration!=LocalDate.parse(expiration$,DateTimeFormatter.BASIC_ISO_DATE)
        today!=LocalDate.now()
        if (today!.isAfter(expiration!)) then 
            #removeRequest(token$)
            throw "Token has expired.",17
        endif 
        
        methodret result.username$
		
		user_not_found: 
		throw "User not found for token",17
		
    methodend 
    
    method public void sendForgotPasswordEmail(BBjString email!)
        declare BBjString email!
        declare BBjString url!
        declare BBjString token!

        REM First look up the user corresponding to the email address
        user!=#UserModel!.getUserFromEmail(email!)
                      
        REM At this point, we don't provide any indication of email being found and the operation 
        REM succeeding.  This is mostly to prevent malicious users from successfully determining 
        REM whether particular email addresses are associated with accounts on the site. 
        if (user!=null()) then
            methodret
        endif 
        
        REM Next, add the new request to the request table.
        token!=#addRequest(user!.getCustomerID(), user!.getUserName())
 
        
        REM Send the user a link to change their credentials.
        REM obtain the link
        declare BBjString result$
        sqlprep(#SqlChan) "select password_url from "+CCUtil.getParameterTable()+" where firm_id=? and UCASE(allow_cust_cc)='Y'"
        sqlexec(#SqlChan) #FirmID$
        dim result$:sqltmpl(#SqlChan)
        result$=sqlfetch(#SqlChan)
        url!=result.password_url$
        url!=url!.trim()
        
        REM send the email
        subject$="Someone has requested a password reset on your account."
        message$="Someone has requested a password reset on your account. If it was you, you can reset your password with the following link. Otherwise, please ignore this message."+$0A$+url!+"?token="+token!
        CCUtil.emailCustomMessage(user!.getFirmID(),user!.getCustomerID(),user!.getUserEmail(),subject$,message$) 
        
    methodend 
    
classend 