REM /**
REM  * aro_AO_CCUtil.aon
REM  * @author shaun
REM  * Copyright BASIS International Ltd.  All Rights Reserved.
REM  */
use com.basis.api.admin.BBjAdminBase

REM AO_CCUtil
REM An Addon utility class that provides constants and methods needed by the Customer Portal for online credit card payments
class public AO_CCUtil

    field protected static BBjString DATE_MASK!="%Yl%Mz%Dz"
    field public static BBjString ParameterTable$="ARS_CC_CUSTPMT"
    field public static BBjString ReportControlID$=pad(#ParameterTable$,16)

    method public AO_CCUtil()
        #initializeBaristaEnvironment()
        #openQueryTables()
    methodend

    method public static BBjString getDATE_MASK()
        methodret #DATE_MASK!
    methodend 
    
    method public static BBjAdminBase getAdmin()
        declare BBjString keyName$
        declare BBjNamespace ns!
        declare BBjAdminBase admin!
   
        keyName$="+bar_admin_"+cvs(stbl("+USER_ID"),11);rem CAH
        ns!=BBjAPI().getGroupNamespace()
        admin!=cast(BBjAdminBase,ns!.getValue(keyName$))
    
        methodret admin!
    methodend
  
    method public static BBjString today()
        methodret date(0:#DATE_MASK!)
    methodend 
    
    method public static void initializeBaristaEnvironment()
        declare BBjNumber curr_arg
        declare BBjString temp_arg$
        declare BBjString user_id$
        declare BBjString temp$

        for curr_arg=1 to argc-1
            temp_arg$=argv(curr_arg)
            if pos("-u"=temp_arg$)=1 then user_id$=cvs(temp_arg$(3),4)
            if pos("-f"=temp_arg$)=1 then cust_user_firm$=cvs(temp_arg$(3),3)
        next curr_arg
        temp$=stbl("+USER_ID",user_id$)
        call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,table_chans$[all]
        temp$=stbl("+FIRM_ID",cust_user_firm$)
    methodend

    method public static void openQueryTables()
        declare BBjNumber temp
        declare BBjNumber num_files
        declare BBjNumber open_beg
        declare BBjNumber open_end
        declare BBjNumber open_batch
        declare BBjString open_tables$
        declare BBjString open_opts$
        declare BBjString open_chans$
        declare BBjString open_tpls$
        declare BBjString table_chans$
        declare BBjString open_status$
        declare BBjString msg_id$
        declare BBjString msg_tokens$
        declare BBjString msg_opt$
        
        rem --- open, then close tables to ensure they get created if not yet present; prevents err 77 in queries
        num_files=4
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="ARC_CC_REGISTER",open_opts$[1]="OTA"
        open_tables$[2]="ARC_CC_USERS",open_opts$[2]="OTA"
        open_tables$[3]="ARM_CUSTMAST",open_opts$[3]="OTA"
        open_tables$[4]="ARS_CC_CUSTPMT",open_opts$[4]="OTA"

        call stbl("+DIR_SYP")+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],table_chans$[all],open_batch,open_status$

        if open_status$<>""
            msg_id$="ENTRY_OPEN_ERROR"
            dim msg_tokens$[1]
                msg_tokens$[1]=open_status$
            call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
            release
        endif
        
        for temp=1 to num_files
            open_opts$[temp]="CX"
        next temp
        
        call stbl("+DIR_SYP")+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],table_chans$[all],open_batch,open_status$
    methodend
    
    method public static void emailCustomMessage(BBjString firmID!, BBjString customerID!, BBjString email!, BBjString subject!, BBjString message!) 
        declare ReportControl reportControl!
        declare BBjNumber found
        declare BBjNumber sqlChan
    
        reportControl!=new ReportControl()
        reportControl!.setFirmID(firmID!)
        reportControl!.getReportControl(#ParameterTable$)
        found=reportControl!.getRecipientInfo(#ReportControlID$,customerID$,"")
        if (found) 
            recipientInfo!=reportControl!.getAdmRptctlRcp() 
            emailMessage!=recipientInfo!.getFieldAsString("EMAIL_MESSAGE")
            
            REM Append the URL and the specific generated token to the mail message then put the modified message back in our recipient info. 
            if ! message!.isEmpty() then 
                recipientInfo!.setFieldValue("EMAIL_MESSAGE",message!)
            endif 
            
            if ! subject!.isEmpty() then 
                recipientInfo!.setFieldValue("EMAIL_SUBJECT",subject!)
            endif
            
            if ! email!.isEmpty() then 
                recipientInfo!.setFieldValue("EMAIL_TO",rec!.getUserEmail())
            endif 
            
            reportControl!.setAdmRptctlRcp(recipientInfo!)
            
            REM Put our email on the document queue to be sent out. The document queue was designed with the assumption that any email sent out
            REM will have some sort of attached document to it. This is not the case for this document. Provide "PDF" for the extension and the 
            REM "NOATTACH" for the document ID, to appease the document queue that no attachment is really okay. 
            reportControl!.setDocExtension("PDF")
            reportControl!.addToDocQueue(#ParameterTable!,customerID!,"","NOATTACH")
      else 
            REM TODO: Handle customer not being found in the recipient records. This means that the customer is not fully set up for payments. 
      endif 
    
  methodend 
    
classend 