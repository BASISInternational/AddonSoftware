rem Callpoint program for APE_MANCHECKHDR
rem Program ape_mancheckhdr_cpt.aon v8.0.0 25Apr2006

rem AddonSoftware Version 8.0.0 - 01Oct2006
rem Copyright (c) 1981-2006 AddonSoftware
rem All Rights Reserved


rem --- ****************
rem --- left off in ap_inv_no aval -- need to see if invoice is in apt01/11... ideally, need inquiry for same?

	seterr std_error
	setesc std_error

	enter callpoint$,
:		aon_tpl$,
:		AONObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		rdSysGUI!,
:		rdForm!,
:		attr_tbl$[all],
:		attr_col$[all],
:		attr_def_tbl$[all],
:		attr_def_col$[all],
:		rec_data$,
:		rec_data$[all],
:		table_chans$[all],
:		dtlg_param$[all],
:		rdGridVect!,
:       hrec_data$[all],
:       hattr_col$[all],
:		err=*next

rem --- Initializations

	dim cp_data$:fattr(callpoint$)
	cp_data$=callpoint$

	callpoint_alias$=cp_data.callpoint_alias$
	callpoint_type$=cp_data.callpoint_type$
	callpoint_id$=cp_data.callpoint_id$(1,4)
	callpoint_ctl$=cp_data.callpoint_ctl$
	callpoint_var$=cp_data.callpoint_dvar$
	callpoint_data$=cp_data.callpoint_data$
	callpoint_key$=cp_data.callpoint_key$
	callpoint_pfx$=cp_data.callpoint_pfx$

rem --- Local variables

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$


rem --- Callpoints and tables handled by this program

	callpoint_id_str$=
:		"ACAL;ACUS;ADEL;ADEQ;ADIS;AENA;AGCL;AGDS;AGRD;AKEY;AOPT;AOVE;APRA;APRT;ARAR;ARCO;AREA;AREC;AREM;ASHO;ASIZ;AWIN;AWRI;"+
:		"BDEL;BDEQ;BENA;BEND;BGRD;BNEK;BNEX;BOVE;BPRI;BPRK;BRCO;BREA;BREC;BREM;BSAV;BSHO;BWAR;BWRI;"+
:		"AINP;AINQ;AVAL;BINP;BINQ;ARNF;"

	callpoint_var_str$=
:		pad("APE_MANCHECKHDR.AP_TYPE",40)+
:		pad("APE_MANCHECKHDR.CHECK_DATE",40)+
:		pad("APE_MANCHECKHDR.CHECK_NO",40)+
:		pad("APE_MANCHECKHDR.FIRM_ID",40)+
:		pad("APE_MANCHECKHDR.RESERVED_NUM",40)+
:		pad("APE_MANCHECKHDR.RESERVED_NUM",40)+
:		pad("APE_MANCHECKHDR.RESERVED_NUM",40)+
:		pad("APE_MANCHECKHDR.RESERVED_STR",40)+
:		pad("APE_MANCHECKHDR.TRANS_TYPE",40)+
:		pad("APE_MANCHECKHDR.VENDOR_ID",40)+
:		pad("APE_MANCHECKHDR.VENDOR_NAME",40)+
:		pad("APE_MANCHECKDET.INVOICE_AMT",40)+
:		pad("APE_MANCHECKDET.DISCOUNT_AMT",40)+
:		pad("APE_MANCHECKDET.AP_INV_NO",40)

	callpoint_opt_str$="AVEN;VCMT;"; rem --- option string for AOPT callpoints

rem --- Route table callpoint to correct subroutine (Table callpoint if callpoint_var$=null)

	if cvs(callpoint_var$,2)=""
		switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
			case fnstr_pos("ACAL",callpoint_id_str$,5);rem After Form Callbacks
			break
			case fnstr_pos("ACUS",callpoint_id_str$,5);rem After Custom Event
			break
			case fnstr_pos("ADEL",callpoint_id_str$,5);rem After Record Delete
			break
			case fnstr_pos("ADEQ",callpoint_id_str$,5);rem After Delete Query
			break
			case fnstr_pos("ADIS",callpoint_id_str$,5);rem After Record Display

				aon_tpl.existing_tran$="Y"
				aon_tpl.open_check$=""
				aon_tpl.reuse_chk$=""

				gosub display_vendor_address
				gosub display_vendor_comments

				ctl_name$="APE_MANCHECKHDR.TRANS_TYPE"
				ctl_stat$="D"
				gosub disable_fields
				ctl_name$="APE_MANCHECKHDR.VENDOR_ID"
				gosub disable_fields

				if fnget_rec$("APE_MANCHECKHDR.TRANS_TYPE")="M"

					gosub calc_tots

					rec_data$[fnstr_pos("<<DISPLAY>>.DISP_TOT_INV",rec_data$[0,0],40),0]=str(tinv)
					rec_data$[fnstr_pos("<<DISPLAY>>.DISP_TOT_DISC",rec_data$[0,0],40),0]=str(tdisc)
					rec_data$[fnstr_pos("<<DISPLAY>>.DISP_TOT_RETEN",rec_data$[0,0],40),0]=str(tret)
					rec_data$[fnstr_pos("<<DISPLAY>>.DISP_TOT_CHECK",rec_data$[0,0],40),0]=str(tinv-tdisc-tret)
				else
					ctl_name$="APE_MANCHECKHDR.CHECK_DATE"
					ctl_stat$="D"
					gosub disable_fields
					gosub disable_grid
				endif
				
			break
			case fnstr_pos("AENA",callpoint_id_str$,5);rem After Enable Map
			break
			case fnstr_pos("AGCL",callpoint_id_str$,5);rem After Grid Clear
			break
			case fnstr_pos("AGDS",callpoint_id_str$,5);rem After Grid Display
			break
			case fnstr_pos("AGRD",callpoint_id_str$,5);rem After Grid Exit
			break
			case fnstr_pos("AKEY",callpoint_id_str$,5);rem After Key Build
			break
			case fnstr_pos("AOPT",callpoint_id_str$,5);rem After Option Select
				switch fnstr_pos(callpoint.callpoint_id$(6),callpoint_opt_str$,5)
					case fnstr_pos("AVEN",callpoint_opt_str$,5);rem Add a Vendor

						rd_user_id$=stbl("+USER_ID")
						dim rd_dflt_data$[1,1]
						rd_key_pfx$=fnget_rec$("APE_MANCHECKHDR.FIRM_ID")+fnget_rec$("APE_MANCHECKHDR.VENDOR_ID")
						call stbl("+DIR_PGM")+"rdm_run_prog.aon",
:							"APM_VENDMAST",
:							rd_user_id$,
:							"MNT",
:							rd_key_pfx$,
:							rd_table_chans$[all],
:							"",
:							rd_dflt_data$[all]
					break

					case fnstr_pos("VCMT",callpoint_opt_str$,5);rem View Vendor Comments

						rd_user_id$=stbl("+USER_ID")
						dim rd_dflt_data$[1,1]
						rd_key_pfx$=fnget_rec$("APE_MANCHECKHDR.FIRM_ID")+fnget_rec$("APE_MANCHECKHDR.VENDOR_ID")
						call stbl("+DIR_PGM")+"rdm_run_prog.aon",
:							"APM_VENDCMTS",
:							rd_user_id$,
:							"",
:							rd_key_pfx$,
:							rd_table_chans$[all],
:							"",
:							rd_dflt_data$[all]
					break
rem					case fnstr_pos("OPT3",callpoint_opt_str$,5);rem Option 3 Select Sample
rem					break
					case default
					break
				swend
			break
			case fnstr_pos("AOVE",callpoint_id_str$,5);rem After Table Overview
			break
			case fnstr_pos("APRA",callpoint_id_str$,5);rem After Print All Select
			break
			case fnstr_pos("APRT",callpoint_id_str$,5);rem After Print Rec Select
			break
			case fnstr_pos("ARAR",callpoint_id_str$,5);rem After Array Transfer
			break
			case fnstr_pos("ARCO",callpoint_id_str$,5);rem After Record Copy
			break
			case fnstr_pos("AREA",callpoint_id_str$,5);rem After Record Read

				aon_tpl.existing_tran$="Y"
				aon_tpl.open_check$=""
				aon_tpl.reuse_chk$=""

			break
			case fnstr_pos("AREC",callpoint_id_str$,5);rem After New Record

				aon_tpl.reuse_chk$=""
				aon_tpl.open_check$=""

			break
			case fnstr_pos("AREM",callpoint_id_str$,5);rem After Record Removal
			break
			case fnstr_pos("ARNF",callpoint_id_str$,5);rem After Record Not Found
	
				if aon_tpl.open_check$<>"Y" or fnget_rec$("APE_MANCHECKHDR.TRANS_TYPE")<>"R"
					ape_openchecks_dev=fnget_dev("APE_OPENCHECKS")
					dim ape05a$:fnget_tpl$("APE_OPENCHECKS")
					ape05k1$=firm_id$+fnget_rec$("APE_MANCHECKHDR.AP_TYPE")+fnget_rec$("APE_MANCHECKHDR.CHECK_NO")
					ape05klen=len(ape05k1$)

					read (ape_openchecks_dev,key=ape05k1$,dom=*next)
					readrecord (ape_openchecks_dev,end=*break)ape05a$
					if ape05a$(1,ape05klen)=ape05k1$
						aon_tpl.open_check$="Y"
						if pos(ape05a.check_type$="CM")
							msg_id$="AP_REVERSE"
							msg_opt$=""
							gosub disp_message
							if msg_opt$="Y"
								rec_data$[fnstr_pos("APE_MANCHECKHDR.TRANS_TYPE",rec_data$[0,0],40),0]="R"
								rec_data$[fnstr_pos("APE_MANCHECKHDR.TRANS_TYPE",rec_data$[0,0],40),1]="R"
								ctl_name$="APE_MANCHECKHDR.TRANS_TYPE"
								ctl_stat$="D"
								gosub disable_fields
								ctl_name$="APE_MANCHECKHDR.VENDOR_ID"
								gosub disable_fields
								rec_data$[fnstr_pos("APE_MANCHECKHDR.CHECK_DATE",rec_data$[0,0],40),0]=ape05a.check_date$
								rec_data$[fnstr_pos("APE_MANCHECKHDR.VENDOR_ID",rec_data$[0,0],40),0]=ape05a.vendor_id$
								gosub display_vendor_address
								gosub display_vendor_comments
								gosub disable_grid
							else
								callpoint.callpoint_stat$="ABORT"
							endif
						else
							msg_id$="AP_OPEN_CHK"
							msg_opt$=""
							gosub disp_message
							if msg_opt$="Y"
								aon_tpl.reuse_chk$="Y"
								rec_data$[fnstr_pos("APE_MANCHECKHDR.TRANS_TYPE",rec_data$[0,0],40),0]="M"
								callpoint.callpoint_stat$="REFRESH"
							else
								callpoint.callpoint_stat$="ABORT"
							endif
						endif
					endif
				endif

			break
			case fnstr_pos("ASHO",callpoint_id_str$,5);rem After Window Show
			break
			case fnstr_pos("ASIZ",callpoint_id_str$,5);rem After Window Resize
			break
			case fnstr_pos("AWIN",callpoint_id_str$,5);rem After Window Create

				rem --- Open/Lock files

                files=30,begfile=1,endfile=11
                dim files$[files],options$[files],chans$[files],templates$[files]
                files$[1]="APE_MANCHECKHDR";rem --- "ape-02"
                files$[2]="APE_MANCHECKDIST";rem --- "ape-12"
                files$[3]="APE_MANCHECKDET";rem --- "ape-22"
                files$[4]="APM_VENDMAST";rem --- "apm-01"
                files$[5]="APM_VENDHIST";rem --- "apm-02"
                files$[6]="APT_INVOICEHDR";rem --- "apt-01"
                files$[7]="APT_INVOICEDET";rem --- "apt-11"
                files$[8]="APE_OPENCHECKS";rem --- "ape-05
                files$[9]="APC_TYPECODE";rem --- "apm-10A"
				files$[10]="APM_VENDCMTS";rem --- "apm-09
                files$[11]="APS_PARAMS";rem --- "ads-01"

                for wkx=begfile to endfile
                    options$[wkx]="OTA"
                next wkx

                call pgmdir$+"adc_open_tables.aon",begfile,endfile,files$[all],options$[all],
:                                   chans$[all],templates$[all],table_chans$[all],batch,status$

                if status$<>"" goto std_exit
                ads01_dev=num(chans$[11])

				rem --- Retrieve miscellaneous templates

                files=2,begfile=1,endfile=files
                dim ids$[files],templates$[files]
                ids$[1]="aps-01A"
                ids$[2]="gls-01A"
                call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
                if status goto std_exit

				rem --- Dimension miscellaneous string templates

                dim aps01a$:templates$[1],gls01a$:templates$[2]
                aon_tpl_str$="firm_id:c(2),glint:c(1),glyr:c(4),glper:c(2),glworkfile:c(16),"
				aon_tpl_str$=aon_tpl_str$+"amt_msk:c(15),multi_types:c(1),multi_dist:c(1),ret_flag:c(1),"
				aon_tpl_str$=aon_tpl_str$+"misc_entry:c(1),post_closed:c(1),units_flag:c(1),"
				aon_tpl_str$=aon_tpl_str$+"existing_tran:c(1),open_check:c(1),existing_invoice:c(1),reuse_chk:c(1)"

				dim aon_tpl$:aon_tpl_str$
                aon_tpl.firm_id$=firm_id$

				rem --- Additional File Opens

                gl$="N"
                status=0
                source$=pgm(-2)
                call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,"AR",glw11$,gl$,status
                if status<>0 goto std_exit
                aon_tpl.glint$=gl$
                aon_tpl.glworkfile$=glw11$

                if gl$="Y"
                    files=21,begfile=20,endfile=21
                    dim files$[files],options$[files],chans$[files],templates$[files]
                    files$[20]="GLM_ACCT",options$[20]="OTA";rem --- "glm-01"
                    files$[21]=glw11$,options$[21]="OTAS";rem --- s means no err if tmplt not found
                    rem --- will need alias name, not disk name, when opening work file
                    rem --- will also need option to lock/clear file [21]; not using in this pgm for now, so bypassing.CAH

	                call pgmdir$+"adc_open_tables.aon",begfile,endfile,files$[all],options$[all],
:	                  chans$[all],templates$[all],table_chans$[all],batch,status$

                    if status$<>"" goto std_exit

				endif

				rem --- Retrieve parameter data - not keeping any of it here, just make sure params exist
               
                aps01a_key$=firm_id$+"AP00"
                find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
				aon_tpl.amt_msk$=aps01a.amount_mask$
				aon_tpl.multi_types$=aps01a.multi_types$
				aon_tpl.multi_dist$=aps01a.multi_dist$
				aon_tpl.ret_flag$=aps01a.ret_flag$
				aon_tpl.misc_entry$=aps01a.misc_entry$
				aon_tpl.post_closed$=aps01a.post_closed$

                gls01a_key$=firm_id$+"GL00"
                find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
				aon_tpl.units_flag$=gls01a.units_flag$

			break
			case fnstr_pos("AWRI",callpoint_id_str$,5);rem After Record Write
			break
			case fnstr_pos("BDEL",callpoint_id_str$,5);rem Before Record Delete
			break
			case fnstr_pos("BDEQ",callpoint_id_str$,5);rem Before Delete Query
			break
			case fnstr_pos("BENA",callpoint_id_str$,5);rem Before Enable Map
			break
			case fnstr_pos("BEND",callpoint_id_str$,5);rem Before Table Exit
			break
			case fnstr_pos("BGRD",callpoint_id_str$,5);rem Before Grid Entry
			break
			case fnstr_pos("BNEK",callpoint_id_str$,5);rem Before Next Record Key
			break
			case fnstr_pos("BNEX",callpoint_id_str$,5);rem Before Next Record
			break
			case fnstr_pos("BOVE",callpoint_id_str$,5);rem Before Table Overview
			break
			case fnstr_pos("BPRI",callpoint_id_str$,5);rem Before Previous Record
			break
			case fnstr_pos("BPRK",callpoint_id_str$,5);rem Before Prev Record Key
			break
			case fnstr_pos("BRCO",callpoint_id_str$,5);rem Before Record Copy
			break
			case fnstr_pos("BREA",callpoint_id_str$,5);rem Before Record Read
			break
			case fnstr_pos("BREC",callpoint_id_str$,5);rem Before New Record
			break
			case fnstr_pos("BREM",callpoint_id_str$,5);rem Before Record Removal
			break
			case fnstr_pos("BSAV",callpoint_id_str$,5);rem Before Detail Save
			break
			case fnstr_pos("BSHO",callpoint_id_str$,5);rem Before Window Show

				rem --- disable ap type control if param for multi-types is N
				rem --- aon_tpl.multi_types$="N";rem --- temp for testing.CAH
				if aon_tpl.multi_types$="N" 
					ctl_name$="APE_MANCHECKHDR.AP_TYPE"
					ctl_stat$="I"
					gosub disable_fields
				endif
				
				rem --- disable retention/balance columns in grid, and dist code, if param indicates
				w!=rdForm!.getChildWindow(1109)
				c!=w!.getControl(5900)
				c!.setColumnEditable(6,0)
				c!.setColumnEditable(7,0)
				if aon_tpl.multi_dist$="N" c!.setColumnEditable(2,0)

			break
			case fnstr_pos("BWAR",callpoint_id_str$,5);rem Before Write Array
			break
			case fnstr_pos("BWRI",callpoint_id_str$,5);rem Before Record Write
			break
			case default
			break
		swend
	endif

rem --- Route column callpoint to correct subroutine (Column callpoint if callpoint_var$<>null)
rem		Column Events:
rem			AINP-After Column Input
rem			AINQ-After Column Inquiry
rem			AVAL-After Column Validation
rem			BINP-Before Column Input
rem			BINQ-Before Column Inquiry

	if cvs(callpoint_var$,2)<>""
		switch fnstr_pos(callpoint_var$,callpoint_var_str$,40)
			case fnstr_pos("APE_MANCHECKHDR.AP_TYPE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.CHECK_DATE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)

						gl$=aon_tpl.glint$
						ckdate$=callpoint_data$        
						if gl$="Y" 
							call pgmdir$+"glc_datecheck.aon",ckdate$,"Y",per$,yr$,status
							if status>99
								callpoint.callpoint_stat$="ABORT"
							else
								aon_tpl.glyr$=yr$
								aon_tpl.glper$=per$
							endif
						endif

					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.CHECK_NO",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.FIRM_ID",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.RESERVED_NUM",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.RESERVED_NUM",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.RESERVED_NUM",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.RESERVED_STR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.TRANS_TYPE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					
						if fnget_rec$("APE_MANCHECKHDR.TRANS_TYPE")="R"
							msg_id$="AP_REUSE_ERR"
							gosub disp_message
							callpoint.callpoint_stat$="ABORT"
						endif
						
						if fnget_rec$("APE_MANCHECKHDR.TRANS_TYPE")="V"
							ctl_name$="APE_MANCHECKHDR.VENDOR_ID"
							ctl_stat$="D"
							gosub clear_vendor
							gosub disable_fields
							gosub disable_grid							
						endif
						
						if fnget_rec$("APE_MANCHECKHDR.TRANS_TYPE")="M"
							ctl_name$="APE_MANCHECKHDR.VENDOR_ID"
							ctl_stat$=" "
							gosub disable_fields
							gosub enable_grid							
						endif

					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.VENDOR_ID",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)

						if cvs(rec_data$[fnstr_pos("APE_MANCHECKHDR.VENDOR_ID",rec_data$[0,0],40),0],3)<>"" and 
:							rec_data$[fnstr_pos("APE_MANCHECKHDR.VENDOR_ID",rec_data$[0,0],40),0]<>
:							rec_data$[fnstr_pos("APE_MANCHECKHDR.VENDOR_ID",rec_data$[0,0],40),1]					
						
							gosub display_vendor_address					
							gosub display_vendor_comments
							rec_data$[fnstr_pos("APE_MANCHECKHDR.VENDOR_ID",rec_data$[0,0],40),1]=
:								rec_data$[fnstr_pos("APE_MANCHECKHDR.VENDOR_ID",rec_data$[0,0],40),0]
							callpoint.callpoint_stat$="REFRESH"
						endif

					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("APE_MANCHECKHDR.VENDOR_NAME",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break

			case fnstr_pos("APE_MANCHECKDET.AP_INV_NO",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					rem --- see if inv entered is in apt-01/11; if so, display inv#,date,dist cd,inv bal,disc,reten,net

						apt_invoicehdr_dev=fnget_dev("APT_INVOICEHDR")
						apt_invoicedet_dev=fnget_dev("APT_INVOICEDET")

						dim apt01a$:fnget_tpl$("APT_INVOICEHDR")
						dim apt11a$:fnget_tpl$("APT_INVOICEDET")

						inv_amt=0,disc_amt=0,ret_amt=0

						apt01ak1$=firm_id$+fnget_rec$("APE_MANCHECKDET.AP_TYPE")+fnget_rec$("APE_MANCHECKDET.VENDOR_ID")+
:							fnget_rec$("APE_MANCHECKDET.AP_INV_NO")+"00"
						apt11ak1$=apt01ak1$(1,len(apt01ak1$)-2)
						readrecord(apt_invoicehdr_dev,dom=*next)apt01a$
						if apt01a$(1,len(apt01ak1$))=apt01ak1$
							inv_amt=num(apt01a.invoice_amt$)
							disc_amt=num(apt01a.discount_amt$)
							ret_amt=num(apt01a.retention$)
							more_dtl=1
							read(apt_invoicedet_dev,key=apt11ak1$,dom=*next)
							
							while more_dtl
								readrecord(apt_invoicedet_dev,end=*next)apt11a$
								
							
						

						endif

					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break

			case fnstr_pos("APE_MANCHECKDET.INVOICE_AMT",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					rem --- see if inv entered is in apt-01/11; if so, display inv#,date,dist cd,inv bal,disc,reten,net

						net_paid=num(fnget_rec$("APE_MANCHECKDET.INVOICE_AMT"))-num(fnget_rec$("APE_MANCHECKDET.DISCOUNT_AMT"))
                        rec_data$[fnstr_pos("APE_MANCHECKDET.NET_PAID_AMT",rec_data$[0,0],40),0]=str(net_paid)
                        callpoint.callpoint_stat$="MODIFIED-REFRESH"

					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)

						gosub calc_tots
						gosub disp_tots

					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break

			case fnstr_pos("APE_MANCHECKDET.DISCOUNT_AMT",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)

						net_paid=num(fnget_rec$("APE_MANCHECKDET.INVOICE_AMT"))-num(fnget_rec$("APE_MANCHECKDET.DISCOUNT_AMT"))
                        rec_data$[fnstr_pos("APE_MANCHECKDET.NET_PAID_AMT",rec_data$[0,0],40),0]=str(net_paid)
                        callpoint.callpoint_stat$="MODIFIED-REFRESH"

					break
					case fnstr_pos("AVEC",callpoint_id_str$,5)

						gosub calc_tots
						gosub disp_tots

					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break

			case default
			break
		swend
	endif

rem --- All done

	goto std_exit

clear_vendor:

	rec_data$[fnstr_pos("APE_MANCHECKHDR.VENDOR_ID",rec_data$[0,0],40),0]=""
	rec_data$[fnstr_pos("<<DISPLAY>>.DISP_ADDR1",rec_data$[0,0],40),0]=""
	rec_data$[fnstr_pos("<<DISPLAY>>.DISP_ADDR2",rec_data$[0,0],40),0]=""
	rec_data$[fnstr_pos("<<DISPLAY>>.DISP_CTSTZIP",rec_data$[0,0],40),0]=""

return


display_vendor_address:

    apm01_dev=fnget_dev("APM_VENDMAST")
	dim apm01a$:fnget_tpl$("APM_VENDMAST")
    readrecord(apm01_dev,key=firm_id$+fnget_rec$("APE_MANCHECKHDR.VENDOR_ID"),dom=*next)apm01a$
	if apm01a.firm_id$+apm01a.vendor_id$=firm_id$+fnget_rec$("APE_MANCHECKHDR.VENDOR_ID")
	    rec_data$[fnstr_pos("<<DISPLAY>>.DISP_ADDR1",rec_data$[0,0],40),0]=apm01a.addr_line_1$
	    rec_data$[fnstr_pos("<<DISPLAY>>.DISP_ADDR2",rec_data$[0,0],40),0]=apm01a.addr_line_2$               
	  rec_data$[fnstr_pos("<<DISPLAY>>.DISP_CTSTZIP",rec_data$[0,0],40),0]=cvs(apm01a.city$,2)+
:		  ", "+apm01a.state_code$+"  "+apm01a.zip_code$
	endif

return

display_vendor_comments:

	apm_vendcmts_dev=fnget_dev("APM_VENDCMTS")
	dim apm09a$:fnget_tpl$("APM_VENDCMTS")
	apm09ak1$=firm_id$+fnget_rec$("APE_MANCHECKHDR.VENDOR_ID")

	read(apm_vendcmts_dev,key=apm09ak1$,dom=*next)
	readrecord(apm_vendcmts_dev,end=*next)apm09a$
	if apm09a$(1,len(apm09ak1$))=apm09ak1$
		rd_user_id$=stbl("+USER_ID")
		dim rd_dflt_data$[1,1]
		rd_key_pfx$=fnget_rec$("APE_MANCHECKHDR.FIRM_ID")+fnget_rec$("APE_MANCHECKHDR.VENDOR_ID")
		call stbl("+DIR_PGM")+"rdm_run_prog.aon",
:			"APM_VENDCMTS",
:			rd_user_id$,
:			"",
:			rd_key_pfx$,
:			rd_table_chans$[all],
:			"",
:			rd_dflt_data$[all]

		rdForm!.focus()
	endif

return

disable_grid:

	w!=rdForm!.getChildWindow(1109)
	c!=w!.getControl(5900)
	c!.setEnabled(0)

return

enable_grid:

	w!=rdForm!.getChildWindow(1109)
	c!=w!.getControl(5900)
	c!.setEnabled(1)

return

disable_fields:
	rem --- used to disable/enable controls depending on parameter settings
	rem --- send in control to toggle (format "ALIAS.CONTROL_NAME"), and D or space to disable/enable

	wctl$=str(num(fngetv_attr$(ctl_name$,"CTLI")):"00000")
	wpos=pos(wctl$=callpoint.callpoint_map$,8)
	callpoint.callpoint_map$(wpos+6,1)=ctl_stat$
	callpoint.callpoint_stat$="ABLEMAP-REFRESH"

return

calc_tots:

	recVect!=rdGridVect!.getItem(0)
	dim gridrec$:dtlg_param$[1,3]
	numrecs=recVect!.size()
	tinv=0,tdisc=0,tret=0
	if numrecs>0
		for reccnt=0 to numrecs-1
			gridrec$=recVect!.getItem(reccnt)
			tinv=tinv+num(gridrec.invoice_amt$)
			tdisc=tdisc+num(gridrec.discount_amt$)
			tret=tret+num(gridrec.retention$)
		next reccnt
	endif


return

disp_tots:

    rem --- get context and ID of display controls for totals, and redisplay w/ amts from calc_tots
    
    ctlContext=num(fngetv_hattr$("<<DISPLAY>>.DISP_TOT_INV","CTLC"))
    ctlID=num(fngetv_hattr$("<<DISPLAY>>.DISP_TOT_INV","CTLI"))
    tinv!=rdSysGUI!.getWindow(ctlContext).getControl(ctlID)
    tinv!.setValue(tinv)

    ctlContext=num(fngetv_hattr$("<<DISPLAY>>.DISP_TOT_DISC","CTLC"))
    ctlID=num(fngetv_hattr$("<<DISPLAY>>.DISP_TOT_DISC","CTLI"))
    tdisc!=rdSysGUI!.getWindow(ctlContext).getControl(ctlID)
    tdisc!.setValue(tdisc)

    ctlContext=num(fngetv_hattr$("<<DISPLAY>>.DISP_TOT_RETEN","CTLC"))
    ctlID=num(fngetv_hattr$("<<DISPLAY>>.DISP_TOT_RETEN","CTLI"))
    tret!=rdSysGUI!.getWindow(ctlContext).getControl(ctlID)
    tret!.setValue(tret)

    ctlContext=num(fngetv_hattr$("<<DISPLAY>>.DISP_TOT_CHECK","CTLC"))
    ctlID=num(fngetv_hattr$("<<DISPLAY>>.DISP_TOT_CHECK","CTLI"))
    tchk!=rdSysGUI!.getWindow(ctlContext).getControl(ctlID)
    tchk!.setValue(tinv-tdisc-tret)

    return

open_tables:rem --- Open Tables

	call stbl("+DIR_PGM")+"rdc_open_tables.aon",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_PGM")+"adc_message.aon",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fngetv_hattr$(att0$,att1$)=hattr_col$[fnstr_pos(att0$,hattr_col$[0,1],40),fnstr_pos(att1$,hattr_col$[0,0],5)]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(tmp0$=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[int(pos(tmp0$=table_chans$[0,0],20)/20)+1,0]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)
		

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) err_text$=pgm(tcb(5),err=*next)
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$

	if pos("EXIT"=err_act$) goto std_error_exit
	if pos("ESCAPE"=err_act$) seterr 0;setesc 0
	if pos("RETRY"=err_act$) retry

std_error_exit:
	
	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ escape
	
std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) exit 
	release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

rem #endinclude std_exit.src

	end

