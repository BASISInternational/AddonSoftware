rem --- AP Invoice Image Viewer
rem --- Program apc_imageviewer.aon

rem --- AddonSoftware Version 22.01 - April 2022
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- ap_type$       : AP type of vendor the invoice is from (input)
rem --- vendor_id$     : ID of vendor the invoice is from (input)
rem --- ap_inv_no$     : Invoice number the images are for (input)
rem --- table_chans$[] : Barista table channel info, do not modify (input)
rem --- urls!          : Vector of URLs used for each invoice image file (returned)

    seterr std_error
    setesc std_error

    enter ap_type$, vendor_id$, ap_inv_no$, table_chans$[all], urls!

rem --- Declarations and initializations
    use ::BBUtils.bbj::BBUtils

    urls! = BBjAPI().makeVector()
    
rem --- Retrieve sysinfo data
    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Is this a historical invoice whose images shouldn't be removed?
    aptInvoiceHdr_dev=fnget_dev("APT_INVOICEHDR")
    dim aptInvoiceHdr$:fnget_tpl$("APT_INVOICEHDR")
    aptInvoiceHdr_key$ = firm_id$ + ap_type$ + vendor_id$ + ap_inv_no$ 
    readrecord(aptInvoiceHdr_dev, key=aptInvoiceHdr_key$, dom=*next)aptInvoiceHdr$
    if pos(aptInvoiceHdr_key$ = aptInvoiceHdr$)<>1 then
        rem --- Historical Invoice record NOT found, so okay to remove images
        ok2remove=1
    else
        ok2remove=0
    endif

rem --- Get image files for the invoice
    invimage_dev=fnget_dev("APT_INVIMAGE")
    dim invimage$:fnget_tpl$("APT_INVIMAGE")
    imageMap!=new java.util.TreeMap()

    read (invimage_dev, key=firm_id$+vendor_id$+ap_inv_no$, dom=*next)
    while 1
        invimage_key$=key(invimage_dev,end=*break)
        if pos(firm_id$+vendor_id$+ap_inv_no$=invimage_key$)<>1 then break

        read record(invimage_dev)invimage$
        imageMap!.put(invimage_key$,invimage$)
    wend

rem --- Now iterate over imageMap! to run viewer program for each url

    map_size=imageMap!.size()
    image_count=0
    mapIter!=imageMap!.keySet().iterator()
    while mapIter!.hasNext()
        redim invimage$
        invimage_key$=mapIter!.next()
        invimage$=imageMap!.get(invimage_key$)
        thisFile$=cvs(invimage.doc_url$,2)
        ap_inv_no$=cvs(invimage.ap_inv_no$,2)
        scan_docs_to$=cvs(invimage.scan_docs_to$,2)
        image_count=image_count+1
        viewerTitle$=ap_inv_no$
        if map_size>1
            viewerTitle$=ap_inv_no$+"--"+str(image_count)+"_of_"+str(map_size)+"_images"
        endif

        rem --- If not an historical invoice, set the key to allow removing the image

        if ok2remove then
            removeKey$=invimage.firm_id$+invimage.vendor_id$+invimage.ap_inv_no$+invimage.sequence_num$
        else
            removeKey$=""
        endif

        rem --- If launching a single form via BUI, use TC > browse
        frameMode!=BBjAPI().getConfig().getCurrentCommandLineObject().getChildFrameMode()
        if frameMode!=null()
            if scan_docs_to$<>"GD" then
                sslReq = BBUtils.isWebServerSSLEnabled()
                thisFile$ = BBUtils.copyFileToWebServer(thisFile$,"appreviewtemp", sslReq)
                urls!.addItem(thisFile$)
            endif
            
            BBjAPI().getThinClient().browse(thisFile$)

        else
        rem --- Show the invoice image(s) in BBjHtmlView control(s)
            
            cmd$=$22$+"apr_imageviewer.aon"+$22$+" - -c"+str(image_count)+" -f"+thisFile$+" -i"+viewerTitle$+" -r"+$22$+removeKey$+$22$+" -s"+scan_docs_to$+" -u"+stbl("+USER_ID")
            cmdObj!=BBjAPI().getConfig().getCommandLineObject(cmd$)
            if scan_docs_to$="GD" and info(3,6)<>"5"
                returnCode=BBjAPI().newSynchBBjSession(cmdObj!);rem --- use Synch session for GDocs in GUI to avoid prompt for credentials
            else
                returnCode=BBjAPI().newBBjSession(cmdObj!)
            endif
        endif        
    wend        

rem --- Done

    goto std_exit

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
