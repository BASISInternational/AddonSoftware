rem --- BBjHtmlView AP Invoice Image Viewer
rem --- Program apr_imageviewer.aon

rem --- AddonSoftware Version 22.01 - April 2022
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    seterr std_error
    setesc std_error

    use ::BBUtils.bbj::BBUtils
    use ::bbtranslator.bbj::BBTranslator

rem --- Get progarm arguments
    if argc>1
        for i=1 to argc-1
            arg$=argv(i)
            if pos("-c"=arg$)=1 then count=num(arg$(3)); rem --- Count of which image we're displaying (always 1 unless >1 image for this invoice)
            if pos("-f"=arg$)=1 then imageFile$=arg$(3); rem --- Full path to the image file
            if pos("-i"=arg$)=1 then viewerTitle$=arg$(3); rem --- Viewer window title (<invoice#> -- x of y images or just <invoice#> if only 1 image)
            if pos("-r"=arg$)=1 then removeKey$=arg$(3); rem --- The apt_invimage key if removing image is allowed for the invoice
            if pos("-s"=arg$)=1 then scan_docs_to$=arg$(3);rem --- Scanning to GD (Google Docs) or BDA (Barista Doc Archive)
            if pos("-u"=arg$)=1 then user_id$=arg$(3); rem --- User ID
        next i
    endif

    if user_id$=""
        use ::sys/prog/bao_security.bbj::Security
        user_id$=Security.getURLUser()
        if cvs(user_id$,2)="" then user_id$="ADMIN"
    endif

    ap_inv_no$=viewerTitle$
    if pos("--"=viewerTitle$) then ap_inv_no$=viewerTitle$(1,pos("--"=viewerTitle$)-1)

rem --- Make sure needed STBLs are set, and get Translator
    call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,rd_table_chans$[all]

    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif

rem --- Initializations
    removeLable$=Translate!.getTranslation("AON_REMOVE")
    margin=50
    xpos=margin*count-25
    ypos=margin*count-25

rem --- If running GUI and accessing GDocs, set user data dir so user doesn't have to provide credentials every time

    if info(3,6)<>"5" and scan_docs_to$="GD"
        userhome! = System@.getProperty("user.home")
        if userhome!<>null() then
            chromium_user_dir$ = userhome! + "/chromium-user-data-dir-" + info(3,2)
            chromium_switches$ = " --user-data-dir=" + chromium_user_dir$
        endif
    endif

rem --- Use BBjHtmlView control for invoice images
    rem --- Add window for BBjHtmlView control
    thisGui!=BBjAPI().openSysGui(stbl("+GUI_DEVICE"))

    if BBjAPI().isInMDI() then
        mdi!=BBjAPI().getMDI()
        width=mdi!.getClientWidth()-5*margin
        height=mdi!.getClientHeight()-3*margin
    else
        screenSize!=thisGui!.getSystemMetrics().getScreenSize()
        width=screenSize!.width-100
        height=screenSize!.height-100
    endif

    htmlWinContext=thisGui!.getAvailableContext()
    htmlWin!=thisGui!.addWindow(htmlWinContext,xpos,ypos,width,height,viewerTitle$,$00080083$)
    htmlWin!.setCallback(htmlWin!.ON_CLOSE,"win_close")
    htmlWin!.setCallback(htmlWin!.ON_RESIZE,"win_resize")

    htmlViewCtrlID=htmlWin!.getAvailableControlID()
    htmlView!=htmlWin!.addHtmlView(htmlViewCtrlID,1,1,htmlWin!.getWidth()-2,htmlWin!.getHeight()-2,"",$0800$,chromium_switches$)

    rem --- Copy to web server used so file can be viewed if local or connected via Destop App
    rem --- Skip copy to web server if it's a GDOC (i.e., http://.... or https://....)
    if pos("http"=imageFile$)<>1
        sslReq = BBUtils.isWebServerSSLEnabled()
        imageFile$ = BBUtils.copyFileToWebServer(imageFile$,"appreviewtemp", sslReq)
    endif

    htmlView!.setUrl(imageFile$)

    rem --- "Remove" button
    if removeKey$<>"" then
        font! = thisGui!.makeFont("Tahoma", 8, thisGui!.PLAIN)
        menuBar!=htmlWin!.addMenuBar()
    
        remove! = menuBar!.addMenu(-100, removeLable$)
        remove!.setFont(font!)
        remove!.setCallback(remove!.ON_MENU_ITEM_SELECT, "remove_image")
    endif

    process_events,err=*same

rem --- Done
    goto std_exit

win_close:
    htmlWin!.destroy()
    goto std_exit
    
win_resize:
    htmlView!.setSize(htmlWin!.getWidth()-2,htmlWin!.getHeight()-2)
    return
    
remove_image:
    msg_id$="AP_REMOVE_IMAGE"
    dim msg_tokens$[1]
    msg_tokens$[1]=ap_inv_no$
    gosub disp_message
    if msg_opt$="Y" then
        rem --- Remove image from apt_invimage
        pgmdir$=stbl("+DIR_PGM",err=*next)
        files=1,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="apt_invimage",ids$[1]="APT_INVIMAGE"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status return
        aptInvImage_dev=channels[1]

        success=0
        remove(aptInvImage_dev,key=removeKey$,err=*next); success=1
        close(aptInvImage_dev,err=*next)
        if success then goto win_close
    endif
    return

disp_message: rem --- Display Message Dialog
    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    release

rem #endinclude std_exit.src

    end
