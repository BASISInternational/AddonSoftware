rem apr - Vendor Ledger Cards
rem Program apr_ledgers v8.0.0 15Aug2006 (apr_lb)
rem Created by adx_progconv.bbx v1.0.3 (08/15/2006 01:07:03)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS";rem "aps-01
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="apm-02",ids$[3]="APM_VENDHIST"
    files$[4]="apc_typecode",ids$[4]="APC_TYPECODE";rem "apm-10A
    files$[5]="apt-01",ids$[5]="APT_INVOICEHDR"
    files$[6]="apt-11",ids$[6]="APT_INVOICEDET"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apm02_dev=channels[3]
    apm10_dev=channels[4]
    apt01_dev=channels[5]
    apt11_dev=channels[6]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm02a$:templates$[3],apm10a$:templates$[4],
:       apt01a$:templates$[5],apt11a$:templates$[6],aps01a$:templates$[1]

rem --- Assign form input values to local variables

    begvendor$=Option!.getOptionData("VENDOR_ID_1")
    endvendor$=Option!.getOptionData("VENDOR_ID_2")
    thrudate$=Option!.getOptionData("REPORT_DATE")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    call pgmdir$+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    call pgmdir$+"adc_getmask.aon","","AP","A","",m1$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,9,15
    multiple_types$=aps01a.multi_types$
    retention$=aps01a.ret_flag$
    m0=len(m0$)
    m1=len(m1$)

rem --- Initializations

    headings=4
    dim headings$[headings],o[8]
    more=1
    page=0
    width=80
    total=0
    maxlines=59
    lines=maxlines+1
    morevendors=1
    moreheaders=1
    moredetail=1
    nf$="(Not on file)"
    when$=sysinfo.system_date$
    clock$=""
    if begvendor$="" x$="From the First Vendor" 
:               else x$="From Vendor "+fnmask$(begvendor$(1,vendor_size),m0$)
    x$=x$+" Through "
    if endvendor$="" x$=x$+"the Last Vendor"
:               else x$=x$+"Vendor "+fnmask$(endvendor$(1,vendor_size),m0$)
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=x$
    if cvs(thrudate$,2)="" headings$[3]="Includes All Transactions"
:       else headings$[3]="Includes Transactions Through "+fndate$(thrudate$)
    x$=""
    if retention$="Y" x$="Retention"
    dim columns$[0,10]
    columns$[0,0]="  ",columns$[0,1]="C",columns$[0,2]="85"

rem --- Define print positions

    o[0]=1
    o[1]=m0+2
    o[2]=m0+13
    o[3]=m0+22
    o[4]=m0+31
    o[5]=m0+34
    o[8]=width-m1+1
rem    if retention$="Y" o[8]=width-m1+1
    o[7]=o[8]-m1+1
    o[6]=o[7]-m1+1

rem --- Start progress meter and position Vendor Master file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,apm01_dev,1,meter_num,status
    while begvendor$<>""
          read (apm01_dev,key=firm_id$+begvendor$)
          read (apm01_dev,dir=-1,err=*next)
          begvendor$=""
    wend

rem --- Read next Vendor Master (apm-01) record

    while morevendors
          apm01_key$=key(apm01_dev,end=*break)
          if pos(firm_id$=apm01_key$)<>1 break
          read record (apm01_dev,key=apm01_key$) apm01a$
          if endvendor$<>"" if apm01a.vendor_id$>endvendor$ break

          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status 

          rem --- Output Vendor headings

          OutVect!.addItem("")
          dim pbuf$(width)
          pbuf$(o[0])="Vendor"
          pbuf$(o[1])="Invoice"
          pbuf$(o[2])="Date"
          pbuf$(o[3])="Due Date"
          pbuf$(o[4])="Pg"
          pbuf$(o[5])="H"
          pbuf$(o[6]+m1-7)="Amount"
          pbuf$(o[7]+m1-9)="Discount"
          pbuf$(o[8]+m1-10)=x$
          OutVect!.addItem(pbuf$)

          rem --- Read vendor detail records

          first=1
          printed=0
          read (apm02_dev,key=apm01_key$,dom=*next)
          while more
                k$=key(apm02_dev,end=*break)
                if pos(apm01_key$=k$)<>1 break
                read record (apm02_dev) apm02a$

                rem --- Retrieve AP Type code and description

                typetotal=0
                aptype$=""
                if multiple_types$="Y"
                   dim apm10a$:fattr(apm10a$)
                   apm10a.firm_id$=firm_id$
                   apm10a.ap_type$=apm02a.ap_type$
                   apm10a.code_desc$=nf$
                   apm10_key$=apm10a.firm_id$+"A"+apm10a.ap_type$
                   find record (apm10_dev,key=apm10_key$,dom=*proceed) apm10a$
                   aptype$="Total for AP Type "+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
                endif

                rem --- Print invoices

                balance=0
                x$=""
                if retention$="Y" x$="Retention"
                if lines+4>maxlines gosub report_heading
                vendor$=apm02a.firm_id$+apm02a.ap_type$+apm02a.vendor_id$
                read (apt01_dev,key=vendor$,dom=*next)

                rem --- Read next invoice header record

                while moreheaders
                      apt01_key$=key(apt01_dev,end=*break)
                      if pos(vendor$=apt01_key$)<>1 break
                      read record (apt01_dev) apt01a$
                      if cvs(thrudate$,2)<>""
                        if apt01a.invoice_date$>thrudate$ continue
                      endif
                      amount$=""
                      if retention$="Y" amount$=str(apt01a.retention:m1$)
                      if first gosub vendor_heading
                      if lines+1>maxlines gosub report_heading
                      dim pbuf$(width)

                      pbuf$(o[1])=apt01a.ap_inv_no$
                      pbuf$(o[2])=fndate$(apt01a.invoice_date$)
                      pbuf$(o[3])=fndate$(apt01a.inv_due_date$)
                      pbuf$(o[4])=apt01a.payment_grp$
                      pbuf$(o[5])=apt01a.hold_flag$
                      pbuf$(o[6])=str(apt01a.invoice_amt:m1$)
                      pbuf$(o[7])=str(apt01a.discount_amt:m1$)
                      pbuf$(o[8])=amount$
                      OutVect!.addItem(pbuf$)
                      lines=lines+1
                      printed=1
                      amount=apt01a.invoice_amt
                      discount=apt01a.discount_amt
                      retention=apt01a.retention
                      balance=balance+apt01a.invoice_amt
                      typetotal=typetotal+apt01a.invoice_amt
                      detail=0
                      apt01_key$=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+
:                                apt01a.ap_inv_no$
                      read (apt11_dev,key=apt01_key$,dom=*next)

                      rem --- Read next invoice detail record

                      while moredetail
                            k$=key(apt11_dev,end=*break)
                            if pos(apt01_key$=k$)<>1 break
                            read record (apt11_dev) apt11a$
                            if cvs(thrudate$,2)<>"" 
                                if apt11a.trans_date$>thrudate$ continue
                            endif    
                            detail=1
                            type$=apt11a.trans_type$
                            amount$=""
                            if retention$="Y" amount$=str(apt11a.trans_ret:m1$)
                            if apt11a.trans_type$="S" type$="M" 
                            if lines+1>maxlines gosub report_heading
                            dim pbuf$(width)
                            pbuf$(o[1]+1)=type$+" "+apt11a.trans_ref$
                            pbuf$(o[2])=fndate$(apt11a.trans_date$)
                            pbuf$(o[6])=str(apt11a.trans_amt:m1$)
                            pbuf$(o[7])=str(apt11a.trans_disc:m1$)
                            pbuf$(o[8])=amount$
                            OutVect!.addItem(pbuf$)
                            lines=lines+1
                            amount=amount+apt11a.trans_amt
                            discount=discount+apt11a.trans_disc
                            retention=retention+apt11a.trans_ret
                            balance=balance+apt11a.trans_amt
                            typetotal=typetotal+apt11a.trans_amt
                      wend

                      rem --- Print type total and loop back for next invoice header

                wend
                if multiple_types$<>"Y" continue
                if lines>maxlines gosub report_heading
                dim pbuf$(width)
                pbuf$(o[6]-len(aptype$)-1)=aptype$
                pbuf$(o[6])=str(typetotal:m1$)
                OutVect!.addItem(pbuf$)
                lines=lines+1
                
                rem --- Loop back for next Vendor Detail

          wend

          rem --- Print vendor total and loop back for next Vendor Master

          if printed=0 continue
          if lines>maxlines gosub report_heading
          dim pbuf$(width)
          pbuf$(o[6]-13)="Vendor Total"
          pbuf$(o[6])=str(balance:m1$)
          OutVect!.addItem(pbuf$)
          lines=lines+1
          total=total+balance
    wend

rem --- All done

    if lines>maxlines gosub report_heading
    dim pbuf$(width)
    pbuf$(o[6]-13)="Report Total"
    pbuf$(o[6])=str(total:m1$)
    OutVect!.addItem(pbuf$)
    goto std_exit

report_heading: rem --- Report heading
return
    lines=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto done
    print (printer_dev) @(o[0]),"Vendor",@(o[1]),"Invoice",@(o[2]),"Date",@(o[3]),"Due Date",@(o[4]),"Pg",
:                       @(o[5]),"H",@(o[6]+m1-7),"Amount",@(o[7]+m1-9),"Discount",@(o[8]+m1-10),x$
    lines=lines+1
    return

vendor_heading: rem --- Print vendor heading

    if lines+3>maxlines gosub report_heading
    OutVect!.addItem("")
    dim pbuf$(width)
    pbuf$(o[0])=apm01a.vendor_id$(1,vendor_size)+" "+apm01a.vendor_name$
    lines=lines+2
    first=0
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    done:
    end
