rem --- Check Printing (Print Overlay)
rem --- Program apr_apchecks v8.0.0 19Oct2007 (apr_eb)
rem --- Created by adx_codeport.bbx v1.1.5 (10/19/2007 05:37:14)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="ape-04",ids$[2]="APE_CHECKS"
    files$[3]="apm-01",ids$[3]="APM_VENDMAST"
    files$[4]="ape-04",ids$[4]="APE_CHECKS"
    files$[5]="apm_payaddr",ids$[5]="APM_PAYADDR"
    files$[6]="apc_typecode",ids$[6]="APC_TYPECODE"
    files$[7]="apt-02",ids$[7]="APT_INVOICEDIST"
    files$[8]="apw-01",ids$[8]="APW_CHECKINVOICE"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01_dev=channels[1]
    ape04_dev=channels[2]
    apm01_dev=channels[3]
    ape04_dev2=channels[4]
    apm08_dev=channels[5]
    apm10_dev=channels[6]
    apt02_dev=channels[7]
    apw01_dev=channels[8]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ape04a$:templates$[2],apm01a$:templates$[3]
    dim ape04b$:templates$[4],apm08a$:templates$[5],apm10a$:templates$[6]
    dim apt02a$:templates$[7],apw01a$:templates$[8]

rem --- Assign form input values to local variables

    check_date$=option!.getOptionData("CHECK_DATE")
    check_no$=option!.getOptionData("CHECK_NO")
    restart$=option!.getOptionData("PICK_CHECK")
    ap_type$=option!.getOptionData("AP_TYPE")
    vendor_id$=option!.getOptionData("VENDOR_ID")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_length
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length

initializations: rem --- Initializations

    dimlen=80-(h0+24+3*m1)
    q6=0
    show_progress=1
    t0$=""
    t1$=""
    dim t[2],h9$(20,$0a$)
    m1$="########.00CR"
    m8$="*#######"
    m9$="*"+m1$(2,10)
    l9=12
    l=0
    h0=0
    answer$="Y"
    msg_id$="PRINT_TEST_PATTERN"
    more=1
    printer_open$="N"

rem --- Print test patterns until the user is satisfied

    while answer$="Y"
        dim msg_tokens$[1]
        msg_opt$=""
        gosub disp_message
        if msg_opt$<>"Y" break

        rem --- Print test pattern

        if printer_open$="N"
            call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
            if status exitto std_exit
            printer_open$="Y"
        endif
        gosub test_pattern
        msg_id$="ANOTHER_PATTERN"
    wend
    if msg_opt$="C" goto std_exit
    
    if printer_open$="N"
        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status goto std_exit
    endif

rem --- Display Resource

    if aps01a.multi_types$="Y" and aps01a.ap_check_seq$="Y" ap_type$=fill(23) else ap_type$=""

rem --- Start progress meter and position check File (ape-04)

    call pgmdir$+"adc_progress.aon","NC","","","","",0,ape04_dev,1,meter_num,status

rem --- Init Read

    read (ape04_dev,key=firm_id$,dom=*next)
    if restart$="Y" read (ape04_dev,key=firm_id$+ap_type$+vendor_id$,dom=*next)

rem --- Main Read

    while more
        k$=key(ape04_dev,end=*break)
        if k$(1,2)<>firm_id$ break
        read record (ape04_dev) ape04a$

rem --- Breaks

        if k$(3,2)<>t0$ gosub ap_type_break
        if k$(3,8)<>t1$ gosub new_vendor
        gosub l5200

rem --- Accumulate

        t[0]=t[0]+ape04a.invoice_amt
        t[1]=t[1]+ape04a.discount_amt
        t[2]=t[2]+ape04a.retention
    wend

done: rem --- Totals

    t9$="E"
    gosub new_vendor
    goto std_exit

check_header: rem --- Check Stub Header

    l=0
    print (printer_dev)@(h0+25),x1$,@(h0+40),"Check No: ",check_no$
    print (printer_dev)@(h0+25),vend_name$
    print (printer_dev)@(h0+25),"Check Date: ",fndate$(check_date$),@(h0+50),"Account ID#: ",accntid$
    print (printer_dev)@(h0),"Inv Date",@(h0+11),"Inv Number",@(h0+23+m1-8),"Inv Amt",@(h0+23+2*m1-9),"Discount",@(h0+23+3*m1-9),"Amt Paid",
    h1=0
    if aps01a.ap_chk_memo$<>"Y" goto l5100
    print (printer_dev)@(h0+24+3*m1),"Memo",
    h1=5
    if aps01a.ap_chk_dist$<>"Y" goto l5100
    print (printer_dev)"/",
l5100:
    if aps01a.ap_chk_dist$="Y" print (printer_dev)@(h0+24+3*m1+h1),"Distribution",
    print (printer_dev)""
    return

l5200: rem --- Invoice Detail

    if l>l9 gosub l5700
    print (printer_dev)@(h0),fndate$(ape04a.invoice_date$),@(h0+11),ape04a.ap_inv_no$,
:   @(h0+23),ape04a.invoice_amt:m1$,ape04a.discount_amt:m1$,ape04a.invoice_amt-ape04a.retention-ape04a.discount_amt:m1$,
    l1=0
    if pos(" "<>ape04a.ap_inv_memo$)=0 goto l5258
    if h0+24+3*m1+16>79 h3=h0+24+3*m1+16-80 else h3=0
    if aps01a.ap_check_memo$="Y" print (printer_dev)@(h0+24+3*m1),ape04a.ap_inv_memo$(1,16-h3),
    if aps01a.ap_chk_dist$="N" goto l5380
    if aps01a.ap_check_memo$="Y" print (printer_dev)'LF',
    if aps01a.ap_check_memo$="Y" l=l+1,l1=l1+1
l5258:
    if aps01a.ap_chk_dist$="N" goto l5380
    read (apt02_dev,key=firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$,dom=*next)
l5270:
    k1$=key(apt02_dev,end=l5380)
    if k1$(1,21)<>firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$ goto l5380
    read record (apt02_dev) apt02a$
    if l>l9 gosub l5700
    if ape04a.orig_inv_amt x0=apt02a.gl_post_amt*(ape04a.invoice_amt-ape04a.retention)/ape04a.orig_inv_amt else x0=0
    x$=pad(fnmask$(apt02a.gl_account$(1,acct_length),g0$),dimlen)
    y$=str(x0:m1$)
    y$=y$(pos(" "<>y$))
    if len(cvs(g0$,2)+" "+y$)<=dimlen goto l5350
    if l+1>l9 gosub l5700
    print (printer_dev)@(h0+24+3*m1),x$
    l1=l1+1
    l=l+1
    x$(1)=""
l5350:
    x$(dimlen-len(y$))=" "+y$
    print (printer_dev)@(h0+24+3*m1),x$
    l1=l1+1
    l=l+1
    goto l5270
l5380:
    if l1=0 print (printer_dev)'LF',
    if l1=0 l=l+1
    return

l5400: rem --- Stub Total

    print (printer_dev)h9$(1,l9-l+1)
    print (printer_dev)@(h0+24),t[0]:m1$,t[1]:m1$,t[0]-t[2]-t[1]:m1$
    return

check_face: rem --- Print Check

    call pgmdir$+"adc_address.aon",address$,24,3,9,35
    print (printer_dev)h9$(1,6)
    print (printer_dev)@(h0+69),check_no$,'LF','LF'
    x$=str(fpt(t[0]-t[2]-t[1])*100:"00")
    if x$="00" x$="NO"
    print (printer_dev)@(h0+7),"Exactly*",int(t[0]-t[2]-t[1]):m8$,"*Dollars*And*",x$,"*Cents",'LF'
    print (printer_dev)@(h0+52),fndate$(check_date$),@(80-m9),t[0]-t[1]-t[2]:m9$
    print (printer_dev)@(h0+7),vend_name$,'LF',@(h0+7),address$(1,35),'LF',@(h0+7),address$(36,35),'LF',@(h0+7),address$(71,30)," ",h9$(1,6)
    dim apw01a$:fattr(apw01a$)
    apw01a.firm_id$=firm_id$
    apw01a.ap_type$=t1$(1,2)
    apw01a.check_no$=check_no$
    apw01a.comp_or_void$="C"
    apw01a.check_date$=check_date$
    apw01a.vendor_id$=t1$(3,6)
    apw01a.ap_inv_no$=t2.ap_inv_no$
    if aps01a.multi_types$<>"Y" apw01a.ap_type$=""
    if aps01a.multi_types$="Y" remove (apw01_dev,key=firm_id$+"  "+apw01a.check_no$,dom=*next)
    write record (apw01_dev,key=firm_id$+apw01a.ap_type$+apw01a.check_no$) apw01a$
    return

l5700: rem --- Overflow

    gosub l7000
    gosub check_header
    return

void_check: rem --- Void check

    print (printer_dev)h9$(1,6)
    print (printer_dev)@(h0+69),check_no$,'LF','LF'
    print (printer_dev)@(h0+7),"***Void***Void***Void***Void***",'LF'
    print (printer_dev)@(h0+52),fndate$(check_date$),@(h0+68),"***Void***",'LF'
    print (printer_dev)h9$(1,8)

rem --- Write Void

    apw01a.firm_id$=firm_id$
    apw01a.ap_type$=ape04a.ap_type$
    apw01a.check_no$=check_no$
    apw01a.comp_or_void$="V"
    apw01a.vendor_id$=ape04a.vendor_id$
    apw01a.check_date$=check_date$
    apw01a.ap_inv_no$=ape04a.ap_inv_no$
    if aps01a.multi_types$<>"Y" apw01a.ap_type$=""
    write record (apw01_dev,key=firm_id$+apw01a.ap_type$+apw01a.check_no$) apw01a$
    gosub l6800
    return

new_vendor: rem --- New Vendor

    if t1$="" goto l6500
    if t[0]-t[2]-t[1]<0 goto l6500
    gosub l5400
    gosub check_face
rem now go back and re-write ape-04 using ape04_dev2 and ape04b$
rem using the current check number and firm_id$ + t1$ (ap type and vendor number)
    
dim ape04b$:fattr(ape04b$)

    read(ape04_dev2,key=firm_id$+t1$,dom=*next)
    while more
        readrecord(ape04_dev2,end=*break)ape04b$
        if pos(firm_id$+t1$=ape04b$)<>1 break
        ape04b.check_no$=check_no$
        writerecord(ape04_dev2,key=firm_id$+ape04b.ap_type$+ape04b.vendor_id$+ape04b.ap_inv_no$)ape04b$
    wend

l6400:
    gosub l6800

l6500:

    if t9$<>"" goto l6790
    dim x1$(m0),t[2],address$(81)
    dim t2$:fattr(ape04a$)
    t2$=ape04a$
    accntid$=""
    find record (apm01_dev,key=firm_id$+ape04a.vendor_id$,dom=*next) apm01a$;
:   address$(1)=apm01a.addr_line_1$+apm01a.addr_line_2$+apm01a.city$+apm01a.state_code$+apm01a.zip_code$,
:   vend_name$=apm01a.vendor_name$
    x1$(1)=fnmask$(ape04a.vendor_id$(1,vendor_length),m0$)
    t1$=k$(3,8)
    accntid$=apm01a.vendor_acct$
    find record (apm08_dev,key=firm_id$+ape04a.vendor_id$,dom=*next) apm08a$;
:   address$(1)=apm08a.addr_line_1$+apm08a.addr_line2$+apm08a.city$+apm08a.state_code$+apm08a.zip_code$,
:   vend_name$=apm08a.vendor_name$
    gosub check_header
l6790:
    return

l6800: rem --- Increment Check #

    p8=num(check_no$)+1
    if p8>9999999 p8=1
    check_no$=str(p8:fill(7,"0"))
    if show_progress call pgmdir$+"adc_progress.aon","S","","","",check_no$,0,0,1,0,ignore_status
    return


l7000: rem --- Continue and Void Check

    print (printer_dev)h9$(1,l9-l+1)
    print (printer_dev)@(h0+22+2*m1),"*Continued*"
    gosub void_check
    return

ap_type_break: rem --- AP Type Break

    while more
        q5=1
        t9$="A"
        gosub new_vendor
        t0$=ape04a.ap_type$
        t1$=""
        t9$=""
        ap_type$=""
        if aps01a.multi_types$<>"Y" gosub test_pattern; break
        if aps01a.ap_check_seq$="N" and q6 break
        q6=1
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status

rem --- New Checks

        if aps01a.ap_check_seq$="N" break
        dim ap_type$(25),tokens$[1]
        find record (apm10_dev,key=firm_id$+"A"+t0$,dom=*next) apm10a$
        ap_type$=cvs(ap_type$(6,20),1+2)+" "
        tokens$[1]=ap_type$
        call pgmdir$+"syc_xb.bbx",0,"MOUNT_AP_CHECKS",tokens$[all],1,-1,-1,v$,v3
    wend
    return

test_pattern: rem --- Test Pattern
    
    dim z0$:fattr(ape04a$)
    z0$=ape04a$
    z1$=b1$
    z0=ape04a.invoice_amt
    z1=ape04a.discount_amt
    z2=ape04a.retention
    z3=ape04a.orig_inv_amt
    z4=t[0]
    z5=t[1]
    z6=t[2]
    show_progress=0
    ape04a.vendor_id$="XXXXXX"
    ape04a.ap_inv_no$="XXXXXXXXXX"
    vend_name$=fill(30,"X")
    accntid$="XXXXXX"
    
    dim t[2]
    ape04a.invoice_amt=9999.99
    ape04a.discount_amt=9999.99
    t[0]=9999.99
    t[1]=9999.99
    ape04a.ap_type$=""
    ape04a.invoice_date$=check_date$
    gosub check_header
    for ii=1 to 3
        gosub l5200
    next ii
    ape04a$=z0$
    b1$=z1$
    gosub l7000
l6975:
    ape04a$=z0$
    b1$=z1$
    ape04a.invoice_amt=z0
    ape04a.discount_amt=z1
    ape04a.retention=z2
    ape04a.orig_inv_amt=z3
    t[0]=z4
    t[1]=z5
    t[2]=z6
    show_progress=1
    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
