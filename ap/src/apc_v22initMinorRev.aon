rem --- AP Initialize Data File Changes Implemented During Minor Releases of v22
rem --- Program apc_v22initMinorRev.aon

rem --- AddonSoftware Version 22.03
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- theFirm$     : The firm ID to rebuild. Use blank ("") for all firms. (input)
rem --- rdForm!      : Window object to hold progress meter (input)
rem --- status       : Status/0=No error (returned)

    use java.io.File
    use ::bbtranslator.bbj::BBTranslator
    use ::ado_file.src::FileObject

    seterr std_error
    setesc std_error
    
    enter theFirm$,rdForm!,status

rem --- Initializations
    status=0

rem --- Get program path
    pgmdir$=stbl("+DIR_PGM",err=*next)
    
rem --- Retrieve sysinfo data
    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)

rem --- Open/Lock files
    num_files=8
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",      open_opts$[1]="OTA"
    open_tables$[2]="APT_CHECKHISTORY", open_opts$[2]="OTA"
    open_tables$[3]="APT_VENDPAYMENTS", open_opts$[3]="OTA"
    open_tables$[4]="ADC_BANKACCTCODE", open_opts$[4]="OTA"
    open_tables$[5]="APM_VENDMAST",   open_opts$[5]="OTA"
    open_tables$[6]="APT_INVOICEHDR",   open_opts$[6]="OTA"
    open_tables$[7]="APT_INVOICEDET",   open_opts$[7]="OTA"
    open_tables$[8]="APT_CHECKHISTORY",   open_opts$[8]="OTAN"

    gosub open_tables

    ddm_systems=num(open_chans$[1]);         dim ddm_systems$:open_tpls$[1]
    aptCheckHistory_dev=num(open_chans$[2]); dim aptCheckHistory$:open_tpls$[2]
    aptVendPayments_dev=num(open_chans$[3]); dim aptVendPayments$:open_tpls$[3]
    adcBankAcctCode_dev=num(open_chans$[4]); dim adcBankAcctCode$:open_tpls$[4]
    apmVendMast_dev=num(open_chans$[5]); dim apmVendMast$:open_tpls$[5]
    aptInvoiceHdr_dev=num(open_chans$[6]); dim aptInvoiceHdr$:open_tpls$[6]
    aptInvoiceDet_dev=num(open_chans$[7]); dim aptInvoiceDet$:open_tpls$[7]
    aptCheckHistory_dev2=num(open_chans$[8]); dim aptCheckHistory2$:open_tpls$[8]
    
rem --- Open log file in aon/logs directory
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log

rem --- Verify have BBTranslator object Translate!
    if Translate!=null() then 
        gosub get_translate_object
        if status then
            err_msg$="Cannot open Barista file adm_modules.dat. Status="+str(status)
            err_no$="12"
        else
            if Translate!=null() then
                err_msg$="Cannot create BBTranslator object Translate!"
                err_no$="999"
            endif
        endif
        if err_msg$<>"" then
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),"",err_no$,err_msg$,err_act$
            print(log_dev)"***** Error: "+err_msg$+" *****"
            print(log_dev)
            print(log_dev)"Initdata log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
            close(log_dev)
            
            msg_id$="GENERIC_WARN"
            dim msg_tokens$[1]
            msg_tokens$[1]=err_msg$
            gosub disp_message
            
            status=num(err_no$)
            goto std_exit
        endif
    endif

rem --- As necessary, creating a small invisible window to hold progress meter
    if rdForm!=null() then
        sysGUI!=BBjAPI().getSysGui()
        if BBjAPI().isInMDI() then
            desktop_w=BBjAPI().getMDI().getClientWidth()
            desktop_h=BBjAPI().getMDI().getClientHeight()
        else
            screenSize!=sysGUI!.getSystemMetrics().getScreenSize()
            desktop_w=screenSize!.width
            desktop_h=screenSize!.height
        endif
        rdForm!=sysGUI!.addWindow(int(desktop_w/2),int(desktop_h/2),1,1,"",$00000000$)
        rdForm!.setTitleBarVisible(0)
        rdForm!.setVisible(0)
    endif
    
rem --- Start progress meter
    meter_title$="apc_v22initMinorRev.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter

rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE","Update")+" "+"APT_CHECKHISTORY"
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

rem --- Copy apt-05 to a backup rather than rename because we want to keep current records
    BLOCKSIZE=2^20
    sourceFile$=stbl("+APDATA")+"apt-05"
    targetFile$=sourceFile$+".bak"
    erase targetFile$, err=*next

    sourceChan=unt
    open(sourceChan,isz=-1)sourceFile$
    targetChan=unt
    open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")targetFile$
    while 1
        read(sourceChan,siz=BLOCKSIZE,end=*break)record$
        write(targetChan)record$
    wend
    close(sourceChan)
    close(targetChan)

rem --- Rebuild APT_CHECKHISTORY from APT_INVOICEDET
    currentFirm$=""
    currentVendor$=""
    vendorNotFound$=Translate!.getTranslation("AON_VENDOR")+" "+Translate!.getTranslation("AON_NOT_FOUND")
    read(aptInvoiceHdr_dev,key=theFirm$,dom=*next)
    while 1
        readrecord(aptInvoiceHdr_dev,end=*break)aptInvoiceHdr$
        if cvs(theFirm$,2)<>"" and theFirm$<>aptInvoiceHdr.firm_id$ then break
        discCode$=aptInvoiceHdr.ap_dist_code$
        if currentFirm$<>aptInvoiceHdr.firm_id$ then
            rem --- Log next firm processed
            print(log_dev)"    APT_INVOICEHDR.FIRM_ID = "+aptInvoiceHdr.firm_id$
            currentFirm$=aptInvoiceHdr.firm_id$
        endif

        rem --- Get current vendor's name.
        if currentVendor$<>aptInvoiceHdr.vendor_id$ then
            currentVendor$=aptInvoiceHdr.vendor_id$
            redim apmVendMast$
            apmVendMast.vendor_name$=vendorNotFound$
            readrecord(apmVendMast_dev,key=currentFirm$+currentVendor$,dom=*next)apmVendMast$
            vendorName$=apmVendMast.vendor_name$
        endif

        rem --- Get Invoice History Detail to build Check History
        aptInvoiceDet_trip$=aptInvoiceHdr.firm_id$+aptInvoiceHdr.ap_type$+aptInvoiceHdr.vendor_id$+aptInvoiceHdr.ap_inv_no$
        read(aptInvoiceDet_dev,key=aptInvoiceDet_trip$,dom=*next)
        while 1
            aptInvoiceDet_key$=key(aptInvoiceDet_dev,end=*break)
            if pos(aptInvoiceDet_trip$=aptInvoiceDet_key$)<>1 then break
            readrecord(aptInvoiceDet_dev)aptInvoiceDet$
            if pos(aptInvoiceDet.trans_type$="ACMRV")=0 then continue

            redim aptCheckHistory$
            aptCheckHistory.firm_id$=aptInvoiceDet.firm_id$
            aptCheckHistory.ap_type$=aptInvoiceDet.ap_type$
            aptCheckHistory.bnk_acct_cd$=""; rem --- Added for v22
            aptCheckHistory.check_no$=aptInvoiceDet.trans_ref$
            aptCheckHistory.vendor_id$=aptInvoiceDet.vendor_id$
            aptCheckHistory.ap_inv_no$=aptInvoiceDet.ap_inv_no$
            aptCheckHistory.trans_type$=aptInvoiceDet.trans_type$
            aptCheckHistory.ap_dist_code$=discCode$
            aptCheckHistory.check_date$=aptInvoiceDet.trans_date$
            aptCheckHistory.vendor_name$=vendorName$
            aptCheckHistory.invoice_amt=(-aptInvoiceDet.trans_amt)+aptInvoiceDet.trans_disc+aptInvoiceDet.trans_disc
            aptCheckHistory.discount_amt=-aptInvoiceDet.trans_disc
            aptCheckHistory.retention=-aptInvoiceDet.trans_disc

            if aptCheckHistory.trans_type$="C" then
                x=-1
                x=num(aptCheckHistory.check_no$,err=*next)
                if x=-1 then aptCheckHistory.trans_type$="A"
            endif
            if aptCheckHistory.trans_type$="R" then aptCheckHistory.ap_dist_code$=""
            if aptCheckHistory.trans_type$="V" then
                aptCheckHistory.ap_dist_code$=""
                aptCheckHistory.vendor_id$=""
            endif

            rem --- Do NOT overwrite existing apt_checkhistory (apt-05) records
            aptCheckHistory$=field(aptCheckHistory$)
            writerecord(aptCheckHistory_dev,dom=*next)aptCheckHistory$
        wend
    wend

    rem --- Remove apt_checkhistory (apt-05) records that are duplicates except bnk_acct_cd is blank
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APT_CHECKHISTORY","PRIMARY",key_tpl$,table_chans$[all],status$
    dim aptCheckHistory_key$:key_tpl$
    read(aptCheckHistory_dev,key=theFirm$,dom=*next)
    while 1
        aptCheckHistory_key$=key(aptCheckHistory_dev,end=*break)
        read(aptCheckHistory_dev)
        if cvs(theFirm$,2)<>"" and theFirm$<>aptCheckHistory_key$.firm_id$ then break
        if cvs(aptCheckHistory_key$.bnk_acct_cd$,2)="" then continue

        rem --- Remove record with same key except bnk_acct_cd is blank
        aptCheckHistory_key.bnk_acct_cd$=""
        remove(aptCheckHistory_dev2,key=aptCheckHistory_key$,dom=*next)
    wend

rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_INITIALIZING","Initializing")+" "+"APT_VENDPAYMENTS"
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

rem --- Build new APT_VENDPAYMENTS from APT_CHECKHISTORY
    currentFirm$=""
    read(aptCheckHistory_dev,key=theFirm$,dom=*next)
    while 1
        readrecord(aptCheckHistory_dev,end=*break)aptCheckHistory$
        if cvs(theFirm$,2)<>"" and theFirm$<>aptCheckHistory.firm_id$ then break
        if aptCheckHistory.trans_type$="V" then continue; rem --- Skip Voids
        if currentFirm$<>aptCheckHistory.firm_id$ then
            rem --- Log next firm processed
            print(log_dev)"    APT_CHECKHISTORY.FIRM_ID = "+aptCheckHistory.firm_id$
            currentFirm$=aptCheckHistory.firm_id$
        endif
    
        foundRec=0      
        aptVendPayments_key$=aptCheckHistory.firm_id$+aptCheckHistory.vendor_id$+aptCheckHistory.check_no$+aptCheckHistory.bnk_acct_cd$
        readrecord(aptVendPayments_dev,key=aptVendPayments_key$,dom=*next)aptVendPayments$; foundRec=1
        if !foundRec then
            redim aptVendPayments$
            aptVendPayments.firm_id$=aptCheckHistory.firm_id$
            aptVendPayments.vendor_id$=aptCheckHistory.vendor_id$
            aptVendPayments.check_no$=aptCheckHistory.check_no$
            aptVendPayments.bnk_acct_cd$=aptCheckHistory.bnk_acct_cd$
            aptVendPayments.check_date$=aptCheckHistory.check_date$
            aptVendPayments.trans_type$=aptCheckHistory.trans_type$
            aptVendPayments.payment_amt=aptCheckHistory.invoice_amt - aptCheckHistory.discount_amt - aptCheckHistory.retention
    
            redim adcBankAcctCode$
            readrecord(adcBankAcctCode_dev,key=aptCheckHistory.firm_id$+aptCheckHistory.bnk_acct_cd$,dom=*next)adcBankAcctCode$
            aptVendPayments.acct_desc$=adcBankAcctCode.acct_desc$
        else
            aptVendPayments.payment_amt=aptVendPayments.payment_amt + aptCheckHistory.invoice_amt - aptCheckHistory.discount_amt - aptCheckHistory.retention
        endif
    
        writerecord(aptVendPayments_dev)aptVendPayments$
    wend

done: rem --- All done
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v22initMinorRevAP log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    goto std_exit

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v22initMinorRevAP_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v22initMinorRevAP log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return

get_translate_object: rem --- Get BBTranslator object Translate!

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ADM_MODULES", open_opts$[1]="OTA"
    gosub open_tables
    if status then return

    adm_modules=num(open_chans$[1]);dim adm_modules$:open_tpls$[1]
    readrecord(adm_modules,key=pad("01007514AD",11),dom=*next)adm_modules$
    if adm_modules.locale_resource$="" or adm_modules.locale_path$=""
        readrecord(adm_modules,key=pad(sysinfo.lic_feature$,11),dom=*next)adm_modules$
    endif
    if adm_modules.locale_resource$<>"" and adm_modules.locale_path$<>""
        locale_path$=adm_modules.locale_path$
        rdTransSpaceKey$=adm_modules.locale_resource$+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
        Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
        if Translate!=null()
            Translate!=BBTranslator.getInstance(adm_modules.locale_resource$,stbl("+USER_LOCALE"),null(),locale_path$)
            BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
        endif
    endif

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
   
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src