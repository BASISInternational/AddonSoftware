rem --- Recurring Invoice Entry Register
rem --- Program apr_recurring v8.0.0 11Feb2007 (apr_na)
rem --- Created by adx_codeport.bbx v1.1.5 (02/11/2007 11:28:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]=files$[1];rem "aps-01A
    files$[2]="ape-01",ids$[2]="APE_INVOICEHDR"
    files$[3]="ape-03",ids$[3]="APE_RECURRINGHDR"
    files$[4]="ape-11",ids$[4]="APE_INVOICEDET"
    files$[5]="ape-13",ids$[5]="APE_RECURRINGDET"
    files$[6]="apm-01",ids$[6]="APM_VENDMAST"
    files$[7]="apc_typecode",ids$[7]=files$[7];rem "apm-10a
    files$[8]="apt-01",ids$[8]="APT_INVOICEHDR"
    files$[9]="apc_distribution",ids$[9]=files$[9];rem "apm-10B
    files$[10]="apc_termscode",ids$[10]=files$[10];rem "apm-10C
    files$[11]="gls_params",ids$[11]=files$[11];rem "gls-01
    options$[3]="L"
    options$[5]="L"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01_dev=channels[1]
    ape01_dev=channels[2]
    ape03_dev=channels[3]
    ape11_dev=channels[4]
    ape13_dev=channels[5]
    apm01_dev=channels[6]
    apm10a_dev=channels[7]
    apt01_dev=channels[8]
    apm10b_dev=channels[9]
    apm10c_dev=channels[10]
    gls01_dev=channels[11]
    

rem --- Dimension string templates

    dim aps01a$:templates$[1]
    dim ape01a$:templates$[2],ape03a$:templates$[3],ape11a$:templates$[4],
:       ape13a$:templates$[5],apm01a$:templates$[6],
:       apm10a$:templates$[7],apt01a$:templates$[8],apm10b$:templates$[9],
:       apm10c$:templates$[10],gls01a$:templates$[11]


rem --- Assign form input values to local variables

    month$=Option!.getOptionData("month")
    year$=Option!.getOptionData("year")
    month=num(month$)
    year=num(year$)

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    vendor_size=num(aps01a.vendor_size$)
    multitypes=aps01a.multi_types$="Y"
    retention=aps01a.ret_flag$="Y"
    cashbasis=aps01a.cash_basis$="Y"
    m0$=aps01a.vendor_output$
    m1$=aps01a.amount_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,9,13
    m0=len(m0$)
    m1=len(m1$)
    max_acct_len=num(gls01a.max_acct_len$)
    acct_length=num(gls01a.acct_length$)
    g0$=gls01a.acct_output$
    g1$=gls01a.amount_mask$
    g0=len(g0$)
    g1=len(g1$)

rem --- Is General Ledger installed and being used?

    application$="AP"
    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,application$,glw11$,gl$,status
    if status goto std_exit

rem --- Initializations

    headings=1
    dim headings$[headings],underline$(m1*2,"-"),o[11],h[11],gd[2],gh[2]
    dim pt[2],rt[2],at[2],vt[2]
    units=0
    errors=0
    glstatus=0
    done=0
    page=0
    width=132
    printed=0
    maxlines=59
    lines=maxlines+1
    moreheaders=1
    moredetail=1
    when$=sysinfo.system_date$
    clock$=""
    nf$="(Not on File)"
    lasttype$=""
    lastacct$=""
    lastvendor$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    h2$=""
    h3$="Discount"
    if retention 
       h2$=h3$+"/"
       h3$="Retention"
    endif

rem --- Define invoice print and header positions

    o[0]=0
    o[1]=max(7,o[0]+m0+1)
    o[11]=width-m1
    o[10]=o[11]-m1
    o[9]=o[10]-17
    o[8]=o[9]-10
    o[7]=o[8]-10
    o[6]=o[7]-3
    o[5]=o[6]-3
    o[4]=o[5]-3
    o[3]=o[4]-3
    o[2]=o[3]-12
    vw=min(30,o[2]-o[1]-1)
    for x=0 to 9
        h[x]=o[x]
    next x
    h[10]=o[10]+m1-8
    h[11]=o[11]+m1-(max(len(h2$),len(h3$))+1)

rem --- Update report heading with month and year

    x=jul(year,month,1)
    headings$[1]=headings$[1]+" For "+date(x:"%Ms")+" "+date(x:"%Yl")

rem --- Define GL print and header positions

    gd[0]=o[2]
    gd[1]=gd[0]+g0+1
    gd[2]=o[10]-g1-1
    gh[0]=gd[0]
    gh[1]=gd[1] 
    gh[2]=gd[2]+g1-7
    gw=min(35,gd[2]-gd[1]-1)

rem --- Additional file opens

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]=glw11$
    options$[2]="CL"
    if gl$="Y" call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                             ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    glw11_dev=channels[2]

rem --- Dimension string templates

    if gl$="Y" dim glm01a$:templates$[1]

rem --- Open printer, start progress meter and position header file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","","",0,ape03_dev,1,meter_num,status
    read (ape03_dev,key=firm_id$,dom=*next)

rem --- Read next Recurring Invoice Header (ape-03) record

    while moreheaders
          read record (ape03_dev,end=*break) ape03a$
          if ape03a.firm_id$<>firm_id$ break
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Level breaks

          if ape03a.ap_type$<>lasttype$ gosub type_break
          if ape03a.vendor_id$<>lastvendor$ gosub vendor_break

          rem --- Retrieve vendor name

          dim vendor$(m0),name$(30),vendorref$(10)
          if pos("TEMP"=ape03a.vendor_id$)<>1
             dim apm01a$:fattr(apm01a$)
             apm01a.firm_id$=ape03a.firm_id$
             apm01a.vendor_id$=ape03a.vendor_id$
             apm01a.vendor_name$=nf$
             k$=apm01a.firm_id$+apm01a.vendor_id$
             find record (apm01_dev,key=k$,dom=*proceed) apm01a$
             vendor$(1)=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
             name$(1)=apm01a.vendor_name$
          endif
          if pos("TEMP"=ape03a.vendor_id$)=1
             dim apm03a$:fattr(apm03a$)
             apm03a.firm_id$=ape03a.firm_id$
             apm03a.ap_type$=ape03a.ap_type$
             apm03a.ap_inv_no$=ape03a.ap_inv_no$
             apm03a.vendor_name$=nf$
             k$=apm03a.firm_id$+apm03a.ap_type$+apm03a.ap_inv_no$
             find record (apm03_dev,key=k$,dom=*proceed) apm03a$
             vendor$(1)=ape03a.vendor_id$
             name$(1)=apm03a.vendor_name$
          endif
          vendorref$(1)=vendor$
          errors=errors+(pos(nf$=name$)=1)

          rem --- Retrieve terms code for this invoice

          dim apm10c$:fattr(apm10c$)
          apm10c.firm_id$=ape03a.firm_id$
          apm10c.record_id_c$="C"
          apm10c.terms_codeap$=ape03a.ap_terms_code$
          apm10c.code_desc$=nf$
          k$=apm10c.firm_id$+apm10c.record_id_c$+apm10c.terms_codeap$
          find record (apm10c_dev,key=k$,dom=*next) apm10c$
          errors=errors+(pos(nf$=apm10c.code_desc$)=1)

          rem --- Recalculate dates for this recurring invoice

          wrong=1
          calculating=1
          d=num(ape03a.invoice_date$(7,2))
          while calculating
                while wrong
                      x=jul(year,month,d,err=*break)
                      invoice_date$=date(0:"%Yl%Mz%Dz")
                      wrong=0
                wend
                if wrong=0 break
                d=d-1
          wend
          ape03a.invoice_date$=invoice_date$
          ape03a.accting_date$=invoice_date$
          call pgmdir$+"adc_duedate.aon",apm10c.prox_or_days$,ape03a.invoice_date$,
:                                        apm10c.due_days,ape03a.inv_due_date$,status
          call pgmdir$+"adc_duedate.aon",apm10c.prox_or_days$,ape03a.invoice_date$,
:                                        apm10c_disc_days,ape03a.disc_date$,status

          rem --- Generate unique invoice number for this recurring invoice

          wrong=1
          calculating=1
          d=num(ape03a.invoice_date$(7,2))+1
          invoice$=""
          while calculating
                while wrong        
                      d=d-1
                      x=jul(year,month,d,err=*continue)
                      break
                wend
                x$=str(x:"0000000")
                invoice$=ape03a.ap_inv_no$(1,6)+x$(5)
                k$=ape03a.firm_id$+ape03a.ap_type$+ape03a.vendor_id$+invoice$
                find record (apt01_dev,key=k$,dom=*break)
          wend           

          rem --- Initializations for this invoice

          dim a[2]
          a[0]=ape03a.invoice_amt
          a[1]=ape03a.discount_amt
          a[2]=ape03a.retention

          rem --- Retrieve distribution code and update GL recap

          while gl$="Y"
                while cashbasis=0
                      dim apm10b$:fattr(apm10b$)
                      apm10b.firm_id$=ape03a.firm_id$
                      apm10b.record_id_b$="B"
                      apm10b.ap_dist_code$=ape03a.ap_dist_code$
                      apm10b.code_desc$=nf$
                      k$=apm10b.firm_id$+apm10b.record_id_b$+apm10b.ap_dist_code$
                      find record (apm10b_dev,key=k$,dom=*break) apm10b$
                      account$=apm10b.gl_ap_acct$
                      gldate$=ape03a.accting_date$
                      ref1$=vendorref$
                      ref2$=ape03a.ap_inv_no$
                      ref3$=""
                      memo$=name$
                      if multitypes ref3$="AP Type "+ape03a.ap_type$
                      amount=ape03a.retention-ape03a.invoice_amt
                      units=0
                      gosub glrecap
                      if retention
                         if ape03a.retention
                            account$=apm10b.gl_ret_acct$
                            amount=-ape03.retention
                            gosub glrecap
                         endif
                      endif
                      break
                wend
                break
          wend    
 
          rem --- Print invoice header

          if lines+3>maxlines gosub report_heading
          invdate$=""
          duedate$=""
          acctdate$=""
          discdate$=""
          retention$=""
          if retention retention$=str(ape03a.retention:m1$)
          if cvs(ape03a.invoice_date$,2)<>"" invdate$=fndate$(ape03a.invoice_date$)
          if cvs(ape03a.inv_due_date$,2)<>"" duedate$=fndate$(ape03a.inv_due_date$)
          if cvs(ape03a.accting_date$,2)<>"" acctdate$=fndate$(ape03a.accting_date$)
          if cvs(ape03a.disc_date$,2)<>"" discdate$=fndate$(ape03a.disc_date$)
          print (printer_dev) ""
          print (printer_dev) @(o[0]),vendor$,@(o[1]),name$(1,vw),@(o[2]),ape03a.ap_inv_no$,
:                             @(o[3]),ape03a.ap_dist_code$,@(o[4]),ape03a.payment_grp$,
:                             @(o[5]),ape03a.ap_terms_code$,@(o[6]),ape03a.hold_flag$,
:                             @(o[7]),invdate$,@(o[8]),acctdate$,@(o[9]),ape03a.reference$,
:                             @(o[10]),ape03a.invoice_amt:m1$,@(o[11]),ape03a.discount_amt:m1$
          print (printer_dev) @(o[2]),invoice$,@(o[7]),duedate$,@(o[8]),discdate$,
:                             @(o[9]),ape03a.ap_inv_memo$,@(o[11]),retention$
          lines=lines+3
          printed=printed+1
          if gl$="Y" call pgmdir$+"glc_datecheck.aon",ape03a.accting_date$,"N",period$,year$,glstatus
          if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,ape03a.accting_date$,glstatus,lines,errors,status

          rem --- Accumulate totals

          for x=0 to 2
              vt[x]=vt[x]+a[x]
              at[x]=at[x]+a[x]
              rt[x]=rt[x]+a[x]
          next x

          rem --- Position the Recurring Invoice Detail (ape-13) file

          if gl$<>"Y" continue
          gllines=0
          total=0
          invoice$=ape03a.firm_id$+ape03a.ap_type$+ape03a.vendor_id$+
:                  ape03a.ap_inv_no$
          read (ape13_dev,key=invoice$,dom=*next)

          rem --- Read the next Recurring Invoice Detail (ape-13) record

          while moredetail
                k$=key(ape13_dev,end=*break)
                if pos(invoice$=k$)<>1 break
                read record (ape13_dev) ape13a$

                rem --- Retrieve GL account master

                dim glm01a$:fattr(glm01a$),description$(gw)
                glm01a.firm_id$=ape13a.firm_id$
                glm01a.gl_account$=ape13a.gl_account$
                glm01a.gl_acct_desc$=nf$
                k$=glm01a.firm_id$+glm01a.gl_account$
                find record (glm01_dev,key=k$,dom=*next) glm01a$
                description$(1)=glm01a.gl_acct_desc$
                errors=errors+(pos(nf$=description$)=1)
                
                rem --- Print the detail line

                if gllines=0 gosub account_heading
                if lines+1>maxlines
                   gosub report_heading
                   gosub account_heading
                endif
                print (printer_dev) @(gh[0]),fnmask$(pad(ape13a.gl_account$(1,acct_length),acct_length),g0$),
:                                   @(gh[1]),description$,@(gh[2]),ape13a.gl_post_amt:g1$
                lines=lines+1
                gllines=gllines+1
                total=total+ape13a.gl_post_amt

                rem --- Update the GL recap

                while cashbasis=0
                      account$=ape13a.gl_account$
                      gldate$=ape03a.accting_date$
                      ref3$="Line "+ape13a.sequence_num$
                      amount=ape13a.gl_post_amt
                      units=ape13a.units
                      gosub glrecap
                      break
                wend

          wend

          rem --- Check for out of balance condition

          if gllines=0 continue
          if total=ape03a.invoice_amt continue
          difference=ape03a.invoice_amt-total
          if lines+2>maxlines
             gosub report_heading
             gosub account_heading
          endif
          print (printer_dev) ""
          print (printer_dev) @(gh[0]),"WARNING: This transaction is out of balance by ",
:                             @(gh[2]),difference:g1$
          lines=lines+2

          rem --- Loop back for next Recurring Invoice Header

    wend

rem --- All done

    done=1
    gosub type_break
    aptype$=""
    total$="Totals For Report"
    for x=0 to 2
        pt[x]=rt[x]
    next x
    gosub print_total

rem --- Any errors encountered?

    while errors
          if lines+2>maxlines gosub report_heading
          print (printer_dev) ""
          print (printer_dev) @(o[1]),"WARNING: This register is out of balance or missing information"
          lines=lines+2
          break
    wend

rem --- Destroy the progress meter and run the next overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    update$=pgmdir$+"apu_recurring.aon"
    overlay$=update$
    if gl$="Y" overlay$=pgmdir$+"glr_recap.aon"
    run overlay$,err=std_exit

report_heading: rem --- Report Heading

    lines=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if cvs(aptype$,2)<>""
       print (printer_dev) @(fncenter(aptype$,width)),aptype$
       lines=lines+1
    endif
    print (printer_dev) ""
    print (printer_dev) @(h[7]),"Inv Date",@(h[8]),"Acct Date",@(h[9]),"Reference/",@(h[10]),"Invoice",
:                       @(h[11]),h2$
    print (printer_dev) @(h[0]),"Vendor",@(h[1]),"Name",@(h[2]),"Invoice",@(h[3]),"DC",@(h[4]),"PG",@(h[5]),"TC",
:                       @(h[6]),"HD",@(h[7]),"Due Date",@(h[8]),"Disc Date",@(h[9]),"Memo",@(h[10])," Amount",
:                       @(h[11]),h3$
    lines=lines+3
    return

account_heading: rem --- Account subheading

    if lines+3>maxlines gosub report_heading
    print (printer_dev) ""
    print (printer_dev) @(gh[0]),"Account",@(gh[1]),"Description",@(gh[2]),"Amount"
    lines=lines+2
    return

print_total: rem --- Print totals

    if lines+3>maxlines gosub report_heading
    print (printer_dev) @(o[10]),underline$
    print (printer_dev) @(o[10]-len(total$)),total$,@(o[10]),pt[0]:m1$,@(o[11]),pt[1]:m1$
    if retention print (printer_dev) @(o[11]),pt[2]:m1$
:           else print (printer_dev) ""
    lines=lines+3
    return

type_break: rem --- AP Type break

    while lasttype$<>""
          gosub vendor_break
          if multitypes
             total$="Total for "+aptype$
             for x=0 to 2
                 pt[x]=at[x]
             next x
             gosub print_total
          endif
          break
    wend
    if multitypes=0 return
    if done return
    dim apm10a$:fattr(apm10a$),at[2]
    apm10a.firm_id$=ape03a.firm_id$
    apm10a.record_id_a$="A"
    apm10a.ap_type$=ape03a.ap_type$
    apm10a.code_desc$=nf$
    k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
    find record (apm10a_dev,key=k$,dom=*next) apm10a$
    aptype$="AP Type "+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
    lines=maxlines+1
    lasttype$=apm10a.ap_type$
    return

vendor_break: rem --- Vendor break

    while lastvendor$<>""
          if printed=1 break
          x$=lastvendor$(1,4)
          if x$<>"TEMP" x$=fnmask$(lastvendor$(1,vendor_size),m0$)
          total$="Total for Vendor "+x$
          for x=0 to 2
              pt[x]=vt[x]
          next x
          gosub print_total
          break
    wend
    if done return
    dim vt[2]
    printed=0
    lastvendor$=ape03a.vendor_id$
    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
