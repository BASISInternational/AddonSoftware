rem --- Export Year-end 1099s to txt for 3rd party print product
rem --- Program apx_export_1099_1 v8.0.0 13Oct2007 (apx_ya)
rem --- Created by adx_codeport.bbx v1.1.5 (10/13/2007 08:39:22)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    use java.util.HashMap
    use java.util.Properties

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="apm-02",ids$[3]="APM_VENDHIST"
    files$[4]="aps_report",ids$[4]="APS_REPORT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update
    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apm02_dev=channels[3]
    aps_report_dev=channels[4]

rem --- Dimension string templates

    dim aps01a$:templates$[1],apm01a$:templates$[2],apm02a$:templates$[3]
    dim aps01b$:templates$[4]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    aps01b_key$=firm_id$+"AP02"
    find record (aps_report_dev,key=aps01b_key$,err=std_missing_params) aps01b$

rem --- Get Option Data

    minimum=num(option!.getOptionData("MINIMUM_AMT"))
    export_path!=option!.getOptionData("EXPORT_LOC")
    client_dir!=option!.getOptionData("CLIENT_DIR")

rem --- Parameters

    export_path$=export_path!.replace("\","/")
    client_dir$=client_dir!.replace("\","/")
    if export_path$(len(export_path$))<>"/" then export_path$=export_path$+"/"
    if client_dir$<>"" and client_dir$(len(client_dir$))<>"/" then client_dir$=client_dir$+"/"
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size

rem --- Init Data

    dim msgs$[5],msg_tokens$[3]
    m1$="#######.00-"
    phonem$="XXX-XXX-XXXX"
    sysyear$=aps01a.cur_1099_yr$
    ten99file$="ap1099?_"+firm_id$+"_"+sysyear$+".txt"
    clientfile$="apclient_"+firm_id$+"_"+sysyear$+".txt"
    formTypes! = new Properties()
    formTypes!.setProperty("DIV","")
    formTypes!.setProperty("INT","")
    formTypes!.setProperty("MISC","")
    formTypes!.setProperty("NEC","")

    gosub init_client; rem "Initialize export variables

rem --- Display file information

    msg_id$="1099_EXPORT_NOTE"
    msg_tokens$[1]=firm_id$
    msg_tokens$[2]=export_path$+clientfile$
    msg_tokens$[3]=export_path$+ten99file$
    gosub disp_message
    if msg_opt$="N" then goto std_exit_no_update

rem --- Check for company phone number

    if num(aps01b.phone_no$,err=*next) goto start_export
    msg_id$="AP_1099_PHONE"
    dim msg_tokens$[1]
    gosub disp_message
    goto std_exit_no_update

start_export:

rem --- Get list of 1099 Forms this company is using
    read(apm02_dev,key=firm_id$,dom=*next)
    while 1
        readrecord(apm02_dev,end=*break)apm02a$
        if apm02a.firm_id$<>firm_id$ then break
        if cvs(apm02a.irs1099_type_box$,2)="X" then continue

        iter!=formTypes!.keySet().iterator()
        while iter!.hasNext()
            typeKey$=iter!.next()
            if pos(typeKey$=apm02a.irs1099_type_box$) then
                typeBoxes$=formTypes!.getProperty(typeKey$)
                type_box$=apm02a.irs1099_type_box$
                if pos(type_box$+";"=typeBoxes$)=0 then
                    typeBoxes$=typeBoxes$+type_box$+";"
                    formTypes!.setProperty(typeKey$,typeBoxes$)
                endif
            endif
        wend
    wend

rem --- Initialize the text export files

    erase export_path$+clientfile$,err=*next; rem "'Client' equates to Employer
    string export_path$+clientfile$
    client_dev=unt
    open (client_dev,isz=-1,err=open_error)export_path$+clientfile$

    formDevs! = new HashMap()
    ten99file!=ten99file$
    iter!=formTypes!.keySet().iterator()
    while iter!.hasNext()
        formKey$=iter!.next()
        typeBoxes$=formTypes!.getProperty(formKey$)
        if typeBoxes$="" then continue
        
        fileName$=ten99file!.replace("?",formKey$)
        erase export_path$+fileName$,err=*next
        string export_path$+fileName$
        ten99_dev=unt
        open (ten99_dev,isz=-1,err=open_error)export_path$+fileName$
        formDevs!.put(formKey$,ten99_dev)
    wend
    goto fix_fed

open_error: rem --- Error on open of text files

    message$=Translate!.getTranslation("AON_UNABLE_TO_CREATE_TEXT_FILES_IN_THE_DATA_DIRECTORY_LISTED_FOR")
    message$=message$+" "+Translate!.getTranslation("AON_THE_AP_SYSTEM_IN_THE_'APPLICATION_DESCRIPTION_MAINTENANCE'_TASK.")
    message$=message$+$0A$+Translate!.getTranslation("AON_MODIFY_THE_'DATA_PATH'_FIELD_FOR_THE_AP_SYSTEM_DESCRIPTION_RECORD")
    message$=message$+" "+Translate!.getTranslation("AON_OR_ADJUST_THE_PERMISSIONS_ON_THE_DIRECTORY_LISTED.")
    msg_id$="GENERIC_WARN"
    dim msg_tokens$[1]
    msg_tokens$[1]=message$
    gosub disp_message
    goto std_exit_no_update

fix_fed: rem --- Fix Up Fed ID Number (Strip out all but the 9 digits)

    tin_type$="EIN"
    taxpayer_id$=""
    if len(aps01b.federal_id$)>0 then
        for i=1 to len(aps01b.federal_id$)
            if aps01b.federal_id$(i,1)>="0" and aps01b.federal_id$(i,1)<="9" taxpayer_id$=taxpayer_id$+aps01b.federal_id$(i,1)
        next i
    endif
    taxpayer_id$=pad(taxpayer_id$,9)

rem --- Client (ie Employer) data

    client_id$=fndequote$(sysyear$+"AP"+firm_id$)
    name1$=fndequote$(aps01b.name$)
    if cvs(aps01b.phone_no$,2)<>"" phone$=str(cvs(aps01b.phone_no$,2):phonem$)
    address1$=fndequote$(aps01b.addr_line_1$)
    address2$=fndequote$(aps01b.addr_line_2$)
    city$=fndequote$(aps01b.city$)
    state$=aps01b.state_code$
    zip$=aps01b.zip_code$

rem --- Corp address

    corp_name1$=name1$
    corp_address1$=address1$
    corp_address2$=address2$
    corp_city$=city$
    corp_state$=state$
    corp_zip$=zip$

rem --- Write to Client export file

    rec$=$22$+client_id$+$22$+","
    rec$=rec$+$22$+name1$+$22$+","
    rec$=rec$+$22$+name2$+$22$+","
    rec$=rec$+$22$+address1$+$22$+","
    rec$=rec$+$22$+address2$+$22$+","
    rec$=rec$+$22$+city$+$22$+","
    rec$=rec$+$22$+state$+$22$+","
    rec$=rec$+$22$+zip$+$22$+","
    rec$=rec$+$22$+corp_name1$+$22$+","
    rec$=rec$+$22$+corp_name2$+$22$+","
    rec$=rec$+$22$+corp_address1$+$22$+","
    rec$=rec$+$22$+corp_address2$+$22$+","
    rec$=rec$+$22$+corp_city$+$22$+","
    rec$=rec$+$22$+corp_state$+$22$+","
    rec$=rec$+$22$+corp_zip$+$22$+","
    rec$=rec$+$22$+report_corp_2irs$+$22$+","
    rec$=rec$+$22$+combo_fedst$+$22$+","
    rec$=rec$+$22$+final_return$+$22$+","
    rec$=rec$+$22$+name_control$+$22$+","
    rec$=rec$+$22$+tin_type$+$22$+","
    rec$=rec$+$22$+taxpayer_id$+$22$+","
    rec$=rec$+$22$+employer_type$+$22$+","
    rec$=rec$+$22$+kind_of_employer$+$22$+","
    rec$=rec$+$22$+rt_num$+$22$+","
    rec$=rec$+$22$+phone$+$22$+","
    rec$=rec$+$22$+main_contact$+$22$+","
    rec$=rec$+$22$+fax$+$22$+","
    rec$=rec$+$22$+email$+$22$+","
    rec$=rec$+$22$+establish$+$22$+","
    rec$=rec$+$22$+other_ein$+$22$+","
    rec$=rec$+$22$+ACA_contact_first$+$22$+","
    rec$=rec$+$22$+ACA_contact_mi$+$22$+","
    rec$=rec$+$22$+ACA_contact_last$+$22$+","
    rec$=rec$+$22$+ACA_contact_suffix$+$22$+","
    rec$=rec$+$22$+ACA_contact_phone$+$22$+","
    for state_cnt=1 to 49
        rec$=rec$+$22$+state1$+$22$+","
        rec$=rec$+$22$+state1_id$+$22$+","
    next state_cnt
    rec$=rec$+$22$+state1$+$22$+","
    rec$=rec$+$22$+state1_id$+$22$+$0D$
    print (client_dev)rec$

    if client_dir$<>"" then
        cfs! = BBjAPI().getThinClient().getClientFileSystem()
        cf!=cfs!.getClientFile(client_dir$+clientfile$)
        cf!.copyToClient(export_path$+clientfile$)
    endif

rem --- Now do 1099 file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,apm01_dev,1,meter_num,status
    while 1
        gosub init_1099; rem "Init text file variables
        k$=key(apm01_dev,end=*break)
        if k$(1,2)<>firm_id$ break
        dim apm01a$:fattr(apm01a$)
        read record (apm01_dev) apm01a$
        if apm01a.vendor_1099$<>"Y" continue; rem "1099 flag
        name_line_1$=fndequote$(apm01a.vendor_name$)
        optional_acct_num$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Accumulate payments

        rem --- Must handle multiple boxes being used for the same 1099 type
        iter!=formTypes!.keySet().iterator()
        while iter!.hasNext()
            formKey$=iter!.next()
            typeBoxes$=formTypes!.getProperty(formKey$)
            if typeBoxes$="" then continue
            boxAmts! = new HashMap()

            while len(typeBoxes$)
                type_box$=typeBoxes$(1,pos(";"=typeBoxes$)-1)
                typeBoxes$=typeBoxes$(pos(";"=typeBoxes$)+1)
            
                curr_calendar_paymts=0
                read (apm02_dev,key=k$,dom=*next)
                while 1
                    apm02_k$=key(apm02_dev,end=*break)
                    if apm02_k$(1,8)<>k$ break
                    readrecord(apm02_dev,end=*break)apm02a$
                    if apm02a.firm_id$+apm02a.vendor_id$<>k$ then continue
                    if apm02a.irs1099_type_box$<>type_box$ then continue
                    curr_calendar_paymts=curr_calendar_paymts+apm02a.cur_cal_pmts
                wend    

                if curr_calendar_paymts=0 or curr_calendar_paymts<minimum continue
                boxAmts!.put(cvs(type_box$,2),curr_calendar_paymts)
            wend
    
rem --- Assign export variables
            if boxAmts!.size()=0 then continue;rem nothing for any of the box types on this form
            iter!=boxAmts!.keySet().iterator()
            while iter!.hasNext()
                type_box$=iter!.next()

                if type_box$="DIV1" then ordinary_dividends=boxAmts!.get(type_box$)
                if type_box$="DIV2" then qualified_dividends=boxAmts!.get(type_box$)
                if type_box$="DIV3" then cap_gain_distributions=boxAmts!.get(type_box$)
                if type_box$="DIV4" then unrecaptured_1250_gain=boxAmts!.get(type_box$)
                if type_box$="DIV5" then nondividend_distribution=boxAmts!.get(type_box$)

                if type_box$="INT1" then interest_income=boxAmts!.get(type_box$)

                if type_box$="MISC1" then rents=boxAmts!.get(type_box$)
                if type_box$="MISC2" then royalties=boxAmts!.get(type_box$)
                if type_box$="MISC3" then other_income=boxAmts!.get(type_box$)
                if type_box$="MISC4" then fishing_boat_proceeds=boxAmts!.get(type_box$)
                if type_box$="MISC5" then medical_health_care=boxAmts!.get(type_box$)
                if type_box$="MISC6" then substitute_payments=boxAmts!.get(type_box$)
                if type_box$="MISC7" then crop_insurance_proceeds=boxAmts!.get(type_box$)
                if type_box$="MISC8" then gross_paid_to_attorney=boxAmts!.get(type_box$)
                if type_box$="MISC9" then fish_purchased_for_resale=boxAmts!.get(type_box$)
                if type_box$="MISC10" then section_409_deferrals=boxAmts!.get(type_box$)
                if type_box$="MISC11" then golden_parachute_payments=boxAmts!.get(type_box$)
                if type_box$="MISC12" then nonqualified_deferred_compensation=boxAmts!.get(type_box$)
    
                if type_box$="NEC1" then nonemployee_compensation=boxAmts!.get(type_box$)
            wend
  
rem --- Fix Up Fed ID Number (Strip out all but the 9 digits)
    
            tmp_fedid$=cvs(apm01a.federal_id$,2)
            taxpayer_id$=""
            tin_type$="N/A"
            if len(tmp_fedid$)=0 goto address
            tin_type$="EIN"
            for i=1 to len(tmp_fedid$)
                if tmp_fedid$(i,1)>="0" and tmp_fedid$(i,1)<="9" taxpayer_id$=taxpayer_id$+tmp_fedid$(i,1)
            next i
            taxpayer_id$=pad(taxpayer_id$,9)
    
address: rem --- Address
    
            street_addr1$=fndequote$(apm01a.addr_line_1$)
            street_addr2$=fndequote$(apm01a.addr_line_2$)
            city$=fndequote$(apm01a.city$)
            state$=apm01a.state_code$
            zip$=apm01a.zip_code$
    
rem --- Write record. Loop up for next Vendor
    
            rec$=rec$+$22$+name_line_1$+$22$
            rec$=rec$+","+$22$+name_line_2$+$22$
            rec$=rec$+","+$22$+street_addr1$+$22$
            rec$=rec$+","+$22$+street_addr2$+$22$
            rec$=rec$+","+$22$+city$+$22$
            rec$=rec$+","+$22$+state$+$22$
            rec$=rec$+","+$22$+zip$+$22$
            rec$=rec$+","+$22$+usps_delivery_point$+$22$
            rec$=rec$+","+$22$+foreign_addr_flag$+$22$
            rec$=rec$+","+$22$+foreign_postal_code$+$22$
            rec$=rec$+","+$22$+tin_type$+$22$
            rec$=rec$+","+$22$+taxpayer_id$+$22$
            rec$=rec$+","+$22$+name_control$+$22$
            rec$=rec$+","+$22$+optional_acct_num$+$22$
            rec$=rec$+","+$22$+cfsp_code$+$22$
            rec$=rec$+","+$22$+second_tin_notice_flag$+$22$
            if formkey$<>"NEC" then rec$=rec$+","+$22$+fatca_filing_req_flag$+$22$
            if formkey$="DIV" then
                rec$=rec$+","+str(ordinary_dividends)
                rec$=rec$+","+str(qualified_dividends)
                rec$=rec$+","+str(cap_gain_distributions)
                rec$=rec$+","+str(unrecaptured_1250_gain)
                rec$=rec$+","+str(section_1202_gain)
                rec$=rec$+","+str(collectibles_gain)
                rec$=rec$+","+str(section_897_ordinary_dividends)
                rec$=rec$+","+str(section_897_cap_gain)
                rec$=rec$+","+str(nondividend_distribution)
                rec$=rec$+","+str(fed_income_tax_withheld)
                rec$=rec$+","+str(section_199A_dividends)
                rec$=rec$+","+str(investment_expenses)
                rec$=rec$+","+str(foreign_tax_paid)
                rec$=rec$+","+$22$+foreign_country$+$22$
                rec$=rec$+","+str(cash_liquidation_dist)
                rec$=rec$+","+str(noncash_liquidation_dist)
                rec$=rec$+","+str(exempt_dividends)
                rec$=rec$+","+str(private_activity_bond_dividends)
            endif
            if formkey$="INT" then
                rec$=rec$+","+str(interest_income)
                rec$=rec$+","+str(early_withdraw_penalty)
                rec$=rec$+","+str(US_savings_bond_interest)
                rec$=rec$+","+str(fed_income_tax_withheld)
                rec$=rec$+","+str(investment_expenses)
                rec$=rec$+","+str(foreign_tax_paid)
                rec$=rec$+","+$22$+foreign_country$+$22$
                rec$=rec$+","+str(exempt_interest)
                rec$=rec$+","+str(private_activity_bond_interest)
                rec$=rec$+","+str(market_discount)
                rec$=rec$+","+str(bond_premium)
                rec$=rec$+","+str(Treasury_obligation_bond_premium)
                rec$=rec$+","+str(tax_exempt_bond_premium)
                rec$=rec$+","+$22$+tax_exempt_bond_CUSIP$+$22$
            endif
            if formkey$="MISC" then
                rec$=rec$+","+str(rents)
                rec$=rec$+","+str(royalties)
                rec$=rec$+","+str(other_income)
                rec$=rec$+","+str(fed_income_tax_withheld)
                rec$=rec$+","+str(fishing_boat_proceeds)
                rec$=rec$+","+str(medical_health_care)
                rec$=rec$+","+$22$+direct_sales_flag$+$22$
                rec$=rec$+","+str(substitute_payments)
                rec$=rec$+","+str(crop_insurance_proceeds)
                rec$=rec$+","+str(gross_paid_to_attorney)
                rec$=rec$+","+str(fish_purchased_for_resale)
                rec$=rec$+","+str(section_409_deferrals)
                rec$=rec$+","+str(golden_parachute_payments)   
                rec$=rec$+","+str(nonqualified_deferred_compensation)
            endif       
            if formkey$="NEC" then
                rec$=rec$+","+str(nonemployee_compensation)
                rec$=rec$+","+$22$+direct_sales_indicator$+$22$
                rec$=rec$+","+str(fed_income_tax_withheld)
            endif
            rec$=rec$+","+$22$+state1$+$22$
            if formkey$="MISC" or formkey$="NEC" then rec$=rec$+","+str(state1_income)
            rec$=rec$+","+str(state1_tax_withheld)
            rec$=rec$+","+$22$+state2$+$22$
            if formkey$="MISC" or formkey$="NEC" then rec$=rec$+","+str(state2_income)
            rec$=rec$+","+str(state2_tax_withheld)
            rec$=rec$+","+$22$+do_not_print_indicator$+$22$
            rec$=rec$+","+$22$+email_address$+$22$
            rec$=rec$+","+$22$+idms$+$22$
    
            ten99_dev=formDevs!.get(formKey$)
            print (ten99_dev)rec$,$0D0A$,
        wend
    wend

    if client_dir$<>"" then
        iter!=formDevs!.keySet().iterator()
        while iter!.hasNext()
            formKey$=iter!.next()
            fileName$=ten99file!.replace("?",formKey$)
            cf!=cfs!.getClientFile(client_dir$+fileName$)
            cf!.copyToClient(export_path$+fileName$)
        wend
    endif

done:

    goto std_exit

init_client: rem --- Init variables for Client text file

rem --- NOTE: 'Client' equates to PAYER

    client_id$=""
    name1$=""
    name2$=""
    address1$=""
    address2$=""
    city$=""
    state$=""
    zip$=""
    corp_name1$=""
    corp_name2$=""
    corp_address1$=""
    corp_address2$=""
    corp_city$=""
    corp_state$=""
    corp_zip$=""
    report_corp_2irs$=""
    combo_fedst$=""
    final_return$=""
    name_control$=""
    tin_type$=""
    taxpayer_id$=""
    employer_type$=""
    kind_of_employer$=""
    rt_num$=""
    phone$=""
    main_contact$=""
    fax$=""
    email$=""
    establish$=""
    other_ein$=""
    ACA_contact_first$=""
    ACA_contact_mi$=""
    ACA_contact_last$=""
    ACA_contact_suffix$=""
    ACA_contact_phone$=""
    state1$=""
    state1_id$=""
    state2$=""
    state2_id$=""
    state3$=""
    state3_id$=""
    state4$=""
    state4_id$=""
    state5$=""
    state5_id$=""
    return

init_1099: rem --- Init variables for 1099 text file

    name_line_1$=""
    name_line_2$=""
    street_addr1$=""
    street_addr2$=""
    city$=""
    state$=""
    zip$=""
    usps_delivery_point$=""
    foreign_addr_flag$=""
    foreign_postal_code$=""
    tin_type$=""
    taxpayer_id$=""
    name_control$=""
    optional_acct_num$=""
    cfsp_code$=""
    second_tin_notice_flag$=""
    fatca_filing_req_flag$=""
    ordinary_dividends=0
    qualified_dividends=0
    cap_gain_distributions=0
    unrecaptured_1250_gain=0
    section_1202_gain=0
    collectibles_gain=0
    section_897_ordinary_dividends=0
    section_897_cap_gain=0
    nondividend_distribution=0
    fed_income_tax_withheld=0
    section_199A_dividends=0
    investment_expenses=0
    foreign_tax_paid=0
    foreign_country$=""
    cash_liquidation_dist=0
    noncash_liquidation_dist=0
    exempt_dividends=0
    private_activity_bond_dividends=0
    interest_income=0
    early_withdraw_penalty=0
    US_savings_bond_interest=0
    exempt_interest=0
    private_activity_bond_interest=0
    market_discount=0
    bond_premium=0
    Treasury_obligation_bond_premium=0
    tax_exempt_bond_premium=0
    tax_exempt_bond_CUSIP$=""
    rents=0
    royalties=0
    other_income=0
    fed_income_tax_withheld=0
    fishing_boat_proceeds=0
    medical_health_care=0
    direct_sales_flag$=""
    substitute_payments=0
    crop_insurance_proceeds=0
    gross_paid_to_attorney=0
    fish_purchased_for_resale=0
    section_409_deferrals=0
    golden_parachute_payments=0
    nonqualified_deferred_compensation=0
    nonemployee_compensation=0
    direct_sales_indicator$=""
    state1$=""
    state1_income=0
    state1_tax_withheld=0
    state2$=""
    state2_income=0
    state2_tax_withheld=0
    do_not_print_indicator$=""
    email_address$=""
    idms$=""
    rec$=""
return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
	return


rem " --- Remove quotes and trailing spaces  

    def fndequote$(q$)                           
        q$=cvs(q$,1+2)                           
        q=pos($22$=q$)                           
        while q                                      
            q$(q,1)="'",q=pos($22$=q$)               
        wend                                         
        return q$                                    
    fnend                                        

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:      else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
