rem --- Computer Check Register Update
rem --- Program apu_chkregister v8.0.0 27Oct2007 (apu_ba)
rem --- Created by adx_codeport.bbx v1.1.5 (10/27/2007 10:21:46)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0218)
rem --- Undefined function fnyy_year (Line 0221)
rem --- Undefined function fni$ (Line 0231)
rem --- Undefined function fni$ (Line 0232)
rem --- Undefined function fnyear_yy21$ (Line 0234)
rem --- Undefined function fnyy_year (Line 0234)
rem --- Undefined function fnyy_yy21$ (Line 0497)
rem --- Undefined function fnyy_yy21$ (Line 0505)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0143)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0149)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0162)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0163)
rem --- v7.x Administrator reference ["sys-01"] (Line 0175)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0195)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0207)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0211)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0213)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file glt-14 referenced (Line 0126)
rem --- Cross-reference file glt-14 referenced (Line 0243)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record glt14a replaced by index on glt-04 (Line 0135)

rem --- The following IOLIST's were removed from this program:

rem --- ape04a: iolist b0$,b[all]
rem --- apm01a: iolist *,h1$
rem --- apm02a: iolist x0$,x1$,x2$,x[all]
rem --- apm10b: iolist *,z0$
rem --- apt01a: iolist d0$,d[all]
rem --- apt02a: iolist x0$,x[all]
rem --- apt05a: iolist c0$(1),c1$,c[all]
rem --- apt11a: iolist y0$,y1$,y[all]
rem --- apw01a: iolist a0$
rem --- gls01a: iolist *,*,g2$,g3$
rem --- glt05a: iolist x0$,x1$,x[all]

rem --- The following channel references have been identified:

rem --- ape06a: Channel reference (Line 0240)

rem --------------------------------------------------------------------------------
rem --- aps01a: (Generated by CodePort)
rem --- glm01a: Channel reference (Line 0242)
rem --- glt04a: Channel reference (Line 0241)
rem --- glt14a: Channel reference (Line 0240)
rem --- sys01a: Channel reference (Line 0234)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files
escape;rem ape-04 is locked. this won't work yet...
    files=17,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="ape-04",ids$[2]="APE_CHECKS"
    files$[3]="gls_params",ids$[3]="GLS_PARAMS"
    files$[5]="apm-01",ids$[3]="APM_VENDMAST"
    files$[6]="apm-02",ids$[4]="APM_VENDHIST"
    files$[8]="apc_distribution",ids$[8]="APC_DISTRIBUTION"
    files$[9]="apt-01",ids$[9]="APT_INVOICEHDR"
    files$[10]="apt-02",ids$[10]="INVOICEDIST"
    files$[11]="apt-05",ids$[11]="APT_CHECKHISTORY"
    files$[12]="apt-11",ids$[12]="APT_INVOICEDET"
    files$[13]="apw-01",ids$[13]="APW_CHECKINVOICE"
    files$[14]="glm-01",ids$[14]="GLM_ACCT"
    files$[15]="glt-04",ids$[15]="GLE_DAILYDETAIL"
    files$[16]="glt-05",ids$[16]="GLT_BANKCHECKS"
    files$[17]="glt-14",ids$[17]="";rem what's this? jpb
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ape04_dev=channels[2]
    apm01_dev=channels[5]
    apm02_dev=channels[6]
    apm10b_dev=channels[8]
    apt01_dev=channels[9]
    apt02_dev=channels[10]
    apt05_dev=channels[11]
    apt11_dev=channels[12]
    apw01_dev=channels[13]
    glm01_dev=channels[14]
    glt04_dev=channels[15]
    glt05_dev=channels[16]
    glt14_dev=channels[17]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ape04a$:templates$[2],gls01a$:templates$[3],
:       apm01a$:templates$[5],apm02a$:templates$[6],
:       apm10a$:templates$[8],apt01a$:templates$[9],apt02a$:templates$[10],
:       apt05a$:templates$[11],apt11a$:templates$[12],apw01a$:templates$[13],
:       glm01a$:templates$[14],glt04a$:templates$[15],glt05a$:templates$[16],
:       glt14a$:templates$[17]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$

rem --- Parameters

    dim p[6],g[4],info$[20]
    br$=aps01a.br_interface$
    for x=0 to 4
        g[x]=num(g2$(x*2+1,2),err=*next)
l360:
    next x
    g[2]=fnyy_year(g2$(5,2))
    p[0]=num(p2$(1,2))
    p[5]=num(p4$(1,2))
    p[6]=fnyy_year(p4$(3,2))
    call pgmdir$+"adc_application.aon",n2$,info$[all]
    gl$=info$[9]

rem --- Initializations

    dim b[3],c[2],d[2],x[13],t[2],j1$(40),y[2]
    g9$=g3$(g[0]*2-1,2)
    w=p[6]
    if g9$<g3$(1,2) w=w+1
    g9$=fni$(w)+g9$
    prior_g9$=fni$(w-1)+g9$(2,2)
    g8$=fndate$("1231"+p4$(5,2))
    prior_g8$=fndate$("1231"+fnyear_yy21$(fnyy_year(p4$(5,2))-1))

rem --- Additional File Opens

    if gl$<>"Y" goto confirm_update
    call pgmdir$+"adc_fileopen.aon",1,14,16,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[14]
    glt04_dev=channels[15]
    glt14_dev=channels[16]
    if br$<>"Y" goto confirm_update
    call pgmdir$+"adc_fileopen.aon",1,17,17,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    glt05_dev=channels[17]

confirm_update: rem --- Run Update?

    call pgmdir$+"adc_yesno.aon",0,"UPDATE_AP_CHECK_REG",0,v$,v3
    if v$<>"YES" goto std_exit

rem --- File initializations

    call pgmdir$+"adc_progress.aon","N",n3$,"","Updating","",10,apw01_dev,1,meter_num,status

rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1

rem --- Init Read

    read (apw01_dev,key=firm_id$,dom=*next)

l1100: rem --- Main Read

    k0$=key(apw01_dev,end=done)
    read record (apw01_dev) apw01a$
    if pos(firm_id$=a0$)<>1 goto done
    call pgmdir$+"adc_progress.aon","S","","","",a0$(3,2)+" "+a0$(5,7),0,0,1,meter_num,status
    if a0$(12,1)="V" goto l3800

rem --- Check Detail

    k1$=k0$(1,4)+a0$(16,16)
    read record (ape04_dev,key=k1$,dom=l3800) ape04a$
    if len(b0$)<62 goto l3800
    if b0$(56,7)<>a0$(5,7) goto l3800
    goto l1400

l1300: rem --- Next Invoice

    k1$=key(ape04_dev,end=l3900)
    if k1$(1,10)<>k0$(1,4)+a0$(16,6) goto l3900
    if k1$(5,4)="TEMP" goto l3900
    read record (ape04_dev) ape04a$

l1400: rem --- Open Invoice

    t0=0
    gosub l6000

rem --- Vendor

    if b0$(5,4)="TEMP" goto l1600
    extract record (apm02_dev,key=firm_id$+b0$(5,6)+b0$(3,2),dom=l1600) apm02a$
    x1$(10,3)=a0$(13,3)
    x[0]=x[0]-b[0]+b[2]
    if a0$(13,3)<=prior_g9$ x[6]=x[6]+b[1],x[9]=x[9]+b[0]-b[2]-b[1]
    if a0$(13,3)>prior_g9$ and a0$(13,3)<=g9$ x[5]=x[5]+b[1],x[8]=x[8]+b[0]-b[2]-b[1]
    if a0$(13,3)>g9$ x[7]=x[7]+b[1],x[10]=x[10]+b[0]-b[2]-b[1]
    if a0$(13,3)<=prior_g8$ x[12]=x[12]+b[0]-b[2]-b[1]
    if a0$(13,3)>prior_g8$ and a0$(13,3)<=g8$ x[11]=x[11]+b[0]-b[2]-b[1]
    if a0$(13,3)>g8$ x[13]=x[13]+b[0]-b[2]-b[1]
    write record (apm02_dev,key=firm_id$+b0$(5,6)+b0$(3,2)) apm02a$

l1600: rem --- G/L Reference Fields

    if gl$<>"Y" goto l1700
    ref2$=b0$(11,10)
    ref3$=a0$(5,7)+" "+a0$(3,2)
    when$=a0$(13,3)
    memo$="Unknown Vendor"
    ref1$=fnmask$(b0$(5,p[0]),m0$)
    find record (apm01_dev,key=firm_id$+b0$(5,6),dom=l1700) apm01a$
    memo$=h1$

l1700: rem --- Dist Code

    if d9$=k2$ goto l1800
    k2$=d9$
    dim z0$(4*g[4],"0")
    find record (apm10b_dev,key=firm_id$+"B"+k2$,dom=*next) apm10b$

l1800: rem --- Cash Basis

    if p3$(4,1)<>"Y" goto l2200
    account$=""
    t9=0
    read (apt02_dev,key=b0$(1,10)+"I"+b0$(11,10),dom=*next)
l2050:
    k$=key(apt02_dev,end=l2120)
    if len(k$)<21 goto l2120
    if k$(1,21)<>b0$(1,10)+"I"+b0$(11,10) goto l2120
    read record (apt02_dev) apt02a$
    if t0=0 t0=b[0]-b[2]
    if t0=0 goto l2050
    account$=x0$(22,g[4])
    amount=x[0]*((b[0]-b[2])/t0)
    units=x[1]*((b[0]-b[2])/t0)
    gosub glpost
    t9=t9+amount
    goto l2050
l2120:
    if account$="" goto l2150
    if t9=b[0]-b[2] goto l2150
    amount=b[0]-b[2]-t9
    gosub glpost
l2150:

l2200: rem --- Dist Cash

    account$=z0$(g[4]+1,g[4])
    amount=(-b[0])+b[2]+b[1]
    units=0
    gosub glpost

rem --- Payable

    if p3$(4,1)="Y" goto l2400
    account$=z0$(1,g[4])
    amount=b[0]-b[2]
    units=0
    gosub glpost

l2400: rem --- Discount

    if b[1]=0 goto l2500
    account$=z0$(2*g[4]+1,g[4])
    amount=-b[1]
    units=0
    gosub glpost

l2500: rem --- Open Checks

    c0$=a0$(1,11)+b0$(5,16)+a0$(13,3)+"C"+k2$
    c1$=""
    c[0]=b[0]
    c[1]=b[1]
    c[2]=b[2]
    c$=a0$(1,4)+c0$(5,23)
l2900:
    write record (apt05_dev,key=c$,dom=l2990) apt05a$
    if br$="Y" gosub l6500
    goto l3000
l2990:

l3000: rem --- Delete Open Invoice

rem --- Remove Check Detail
    remove (ape04_dev,key=k1$)

    goto l1300

l3800: rem --- Void Check

    c0$=a0$(1,11)+j1$(1,16)+a0$(13,3)+"V"
    c1$=""
    c$=a0$(1,4)+c0$(5,23)
    dim c[2]
    write record (apt05_dev,key=c$,dom=l3890) apt05a$
    if br$="Y" x9$=x9$+c$(5,7)
    goto l3900
l3890:

l3900: rem --- Remove Check

remove (apw01_dev,key=k0$,dom=*next)

    goto l1100

done: rem --- Clear Remainder
    
    read (ape04_dev,key=firm_id$,dom=*next)
    while more
        k$=key(ape04_dev,end=*break)
        if pos(firm_id$=k$)<>1 break
        remove (ape04_dev,key=k$)
    wend

rem --- All done

    if gl$="Y" call pgmdir$+"glc_ctlupdate.aon",status
    goto std_exit

l6000: rem --- UPDATE OPEN INVOICE

    y0$=b0$(1,20)+"00"
    t0=0
    find record (apt01_dev,key=y0$,dom=l6490) apt01a$
    t[0]=d[0]
    t[1]=d[1]
    t[2]=d[2]
    d9$=d0$(23,2)
    t0=d[0]
    read (apt11_dev,key=y0$,dom=*next)

l6100: rem --- Accumulate any adjustments/payments

    k$=key(apt11_dev,end=l6300)
    if pos(k$(1,20)=b0$(1,20))<>1 goto l6300
    read record (apt11_dev) apt11a$
    lastseq=num(y0$(21,2))
    t[0]=t[0]+y[0]
    t[1]=t[1]+y[1]
    t[2]=t[2]+y[2]
    if pos(y1$(1,1)="IA") t0=t0+d[0]
    goto l6100

l6300: rem --- Initialize new detail

    y0$=b0$(1,20)+str(lastseq+1:"00")
    dim y1$(11),y[2]

rem --- WRITE DETAIL

    y1$(1)="C"+a0$(13,3)+a0$(5,7)
    y[0]=(-b[0])+b[2]
    y[1]=-b[1]
    write record (apt11_dev,key=y0$) apt11a$
    t[0]=t[0]+y[0]
    t[1]=t[1]+y[1]
    t[2]=t[2]+y[2]
l6490:
    return

l6500: rem --- UPDATE glt-05

    if gl$<>"Y" goto l6700
l6515:
    dim x1$(50),x[2]
    if x9$="" goto l6600
    let x0$=c0$(1,2)+z0$(g[4]+1,g[4])+x9$(1,7),x1$(1,2)="AV"
    let x1$(3,6)=fnyy_yy21$(fndate$(fndate$(c0$(28,3)))),x1$(9,30)="VOID"
    write record (glt05_dev,key=x0$) glt05a$
    if len(x9$)>7 x9$=x9$(8) else x9$=""
    goto l6515

l6600: rem --- Detail

    let x0$=c0$(1,2)+z0$(g[4]+1,g[4])+c0$(5,7),x1$(1,2)="AO"
    let x1$(3,6)=fnyy_yy21$(fndate$(fndate$(c0$(28,3))))
    if c0$(12,4)="TEMP" x1$(9,30)=c1$; goto l6660
    find record (apm01_dev,key=c0$(1,2)+c0$(12,6),dom=l6660) apm01a$
    let x1$(9,30)=h1$
    let q$=x1$(9,30)
l6660:
    let x[0]=c[0]-c[1]-c[2]
    find record (glt05_dev,key=x0$,dom=l6690) glt05a$
    let x[0]=x[0]+c[0]-c[1]-c[2],x1$(9,30)=q$
l6690:
    write record (glt05_dev,key=x0$) glt05a$
l6700:
    dim x[13]
    return
rem --- Standard G/L Posting Routine
glpost:
    if gl$<>"Y" goto l6990
    call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,glt14_dev,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,status
l6990:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
