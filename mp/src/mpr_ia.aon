rem --- Purchase Requisition Register (Input Overlay)
rem --- Program mpr_ia v8.0.0 05Feb2008 (mpr_ia)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/05/2008 03:05:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=23,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="apm-01",ids$[1]="APM_VENDMAST"
    files$[2]="apm-02",ids$[2]="APM_VENDHIST"
    files$[3]="apm-03",ids$[3]="APM_TEMPVEND"
    files$[4]="APS_PARAMS",ids$[4]="APS_PARAMS"
    files$[5]="ARS_PARAMS",ids$[5]="ARS_PARAMS"
    files$[6]="ivm-01",ids$[6]="IVM_ITEMMAST"
    files$[7]="ivm-02",ids$[7]="IVM_ITEMWHSE"
    files$[8]="ivm-05",ids$[8]="IVM_ITEMVEND"
    files$[9]="IVC_BUYCODE",ids$[9]="IVC_BUYCODE"
    files$[10]="IVS_PARAMS",ids$[10]="IVS_PARAMS"
    files$[11]="mpm-01",ids$[11]="MPM_FORECAST"
    files$[12]="mpe-05",ids$[12]="MPE_PEGGING"
    files$[13]="mpw-03",ids$[13]="MPX_REQVEND"
    files$[14]="mpw-04",ids$[14]="MPW_REQVEND"
    files$[15]="poe-01",ids$[15]="POE_REQHDR"
    files$[16]="poe-02",ids$[16]="POE_POHDR"
    files$[17]="poe-11",ids$[17]="POE_REQDET"
    files$[18]="poe-21",ids$[18]="POE_REQPRINT"
    files$[19]="poe-31",ids$[19]="POE_REQBYREQ"
    files$[20]="poe-41",ids$[20]="POE_REQBYITM"
    files$[21]="poe-52",ids$[21]="POE_POBYREQ"
    files$[22]="pom-02",ids$[22]="POC_LINECODE"
    files$[23]="pos-10",ids$[23]="POS_NUMBERS"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01a_dev=channels[1]
    apm02a_dev=channels[2]
    apm03a_dev=channels[3]
    aps01a_dev=channels[4]
    ars01a_dev=channels[5]
    ivm01a_dev=channels[6]
    ivm02a_dev=channels[7]
    ivm05a_dev=channels[8]
    ivm10f_dev=channels[9]
    ivs01a_dev=channels[10]
    mpm01a_dev=channels[11]
    mpe05a_dev=channels[12]
    mpw03a_dev=channels[13]
    mpw04a_dev=channels[14]
    poe01a_dev=channels[15]
    poe02a_dev=channels[16]
    poe11a_dev=channels[17]
    poe21a_dev=channels[18]
    poe31a_dev=channels[19]
    poe41a_dev=channels[20]
    poe52a_dev=channels[21]
    pom02a_dev=channels[22]
    pos10n_dev=channels[23]

rem --- Dimension string templates

    dim apm01a$:templates$[1],apm02a$:templates$[2],apm03a$:templates$[3],
:   aps01a$:templates$[4],ars01a$:templates$[5],ivm01a$:templates$[6],
:   ivm02a$:templates$[7],ivm05a$:templates$[8],ivm10f$:templates$[9],
:   ivs01a$:templates$[10],mpm01a$:templates$[11],mpe05a$:templates$[12],
:   mpw03a$:templates$[13],mpw04a$:templates$[14],poe01a$:templates$[15],
:   poe02a$:templates$[16],poe11a$:templates$[17],poe21a$:templates$[18],
:   poe31a$:templates$[19],poe41a$:templates$[20],poe52a$:templates$[21],
:   pom02a$:templates$[22],pos10n$:templates$[23]

rem --- Assign form input values to local variables

    forecast$=Option!.getOptionData("fore_cast")
    whse$=Option!.getOptionData("warehouse_code")
    begdate$=Option!.getOptionData("begining_date")
    enddate$=Option!.getOptionData("through_date")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    mps01a_key$=firm_id$+"MP00"
    find record (mps01a_dev,key=mps01a_key$,err=std_missing_params) mps01a$

rem --- Parameters

    n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(ivs01a.item_id_len$)
    ivs01_precision=num(ivs01a.precision$)
    number=1
    p[2]=num(ivs01a.desc_len_1$)
    p[3]=num(ivs01a.desc_len_2$)
    p[4]=num(ivs01a.desc_len_3$)
    find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    ap=num(aps10a.vendor_size$)

rem --- Initializations

    precision ivs01_precision
    dim description$[number],field[number],position[number],length[number]
    dim forecast$(3),whse$(2)
    whse$(1)=i3$(6,2)
    begdate$="",enddate$=""
    headings=2
    dim headings$[headings]
    headings$[0]=n1$
    headings$[1]=n3$,l9=59,l=l9+1
    clock$=""
    when$=sysinfo.system_date$,page=0,width=132

rem --- run overlay

    run pgmdir$+"mpr_ib.aon"


rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:   cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:   cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:   fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:   q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:

    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
