rem --- Planned Work Order Update
rem --- Program mpu_da v8.0.0 31Jan2008 (mpu_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/31/2008 10:41:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
rem 25Oct96 JJD: Force page break at startup. (590)


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=19,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="bmm-01",ids$[1]="BMM_BILLMAST"
        files$[2]="bmm-02",ids$[2]="BMM_BILLMAT"
        files$[3]="bmm-03",ids$[3]="BMM_BILLOPER"
        files$[4]="bmm-05",ids$[4]="BMM_BILLSUB"
        files$[5]="bmm-08",ids$[5]="BMC_OPCODES"
        files$[6]="bmm-09",ids$[6]="BMM_BILLCMTS"
        files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
        files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
        files$[9]="mpm-01",ids$[9]="MPM_FORECAST"
        files$[10]="mps-01a",ids$[10]=""
        files$[11]="mpw-05",ids$[11]="MPW_PLANWO"
        files$[12]="sfe-01",ids$[12]="SFE_WOMASTR"
        files$[13]="sfe-02",ids$[13]="SFE_WOOPRTN"
        files$[14]="sfe-03",ids$[14]=""
        files$[15]="sfe-07",ids$[15]="SFE_WOCOMNT"
        files$[16]="sfe-22",ids$[16]="SFE_WOMATL"
        files$[17]="sfe-32",ids$[17]="SFE_WOSUBCNT"
        files$[18]="sfs-10",ids$[18]=""
        files$[19]="woe-22",ids$[19]=""
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        bmm01a_dev=channels[1]
        bmm02a_dev=channels[2]
        bmm03a_dev=channels[3]
        bmm05a_dev=channels[4]
        bmm08a_dev=channels[5]
        bmm09a_dev=channels[6]
        ivm01a_dev=channels[7]
        ivm02a_dev=channels[8]
        mpm01a_dev=channels[9]
        mps01a_dev=channels[10]
        mpw05a_dev=channels[11]
        sfe01a_dev=channels[12]
        sfe02a_dev=channels[13]
        sfe03x_dev=channels[14]
        sfe07a_dev=channels[15]
        sfe22a_dev=channels[16]
        sfe32a_dev=channels[17]
        sfs10a_dev=channels[18]
        woe22a_dev=channels[19]

rem --- Dimension string templates

        dim bmm01a$:templates$[1],bmm02a$:templates$[2],bmm03a$:templates$[3],
:       bmm05a$:templates$[4],bmm08a$:templates$[5],bmm09a$:templates$[6],
:       ivm01a$:templates$[7],ivm02a$:templates$[8],mpm01a$:templates$[9],
:       mps01a$:templates$[10],mpw05a$:templates$[11],sfe01a$:templates$[12],
:       sfe02a$:templates$[13],sfe03x$:templates$[14],sfe07a$:templates$[15],
:       sfe22a$:templates$[16],sfe32a$:templates$[17],sfs10a$:templates$[18],
:       woe22a$:templates$[19]

rem --- Assign form input values to local variables

        value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

        mps01a_key$=firm_id$+"MP00"
        find record (mps01a_dev,key=mps01a_key$,err=std_missing_params) mps01a$

rem --- Open/Lock Files
rem --- Initializations

        precision ivs01_precision
        dim r[10],l[11],s[9],xw[13]
        headings$[2]="Scheduling Report"
        dim params[0],params$[4],items$[3],refs$[11],refs[5],ivfiles[44]
        params$[0]=sysinfo.system_date$
        params$[1]=sysinfo.user_id$
        params$[2]=i2$,params$[3]=i3$
        params$[4]=i4$
        ivfiles[0]=sys01_dev
        ivfiles[1]=ivm01_dev
        ivfiles[2]=ivm02_dev
        l=l9+1

rem --- Options

        v4$="Are You Ready to Update the "+n3$
        call pgmdir$+"adc_yesno.aon",0,v4$,0,v$,v3
        if v$<>"YES" then goto std_exit

rem --- Disallow 'M'enu option in Error Routine

        exit_ctrl=1
        more=1

rem --- Position File

        lock (mpw05_dev)

main_read: rem --- main_read

        print @(column-9,11),'sb',"Updating",'sf',j1$(1,p[0]+10),
        last$=""
        item$=""
        read (mpw05_dev,key=firm_id$,dom=*next)

rem --- retrieve template for BMM_BILLCMTS record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLCMTS","PRIMARY",bmm09a_key_tpl$,table_chans$[all],status$
        dim bmm09a_key$:bmm09a_key_tpl$

rem --- retrieve template for BMM_BILLMAT record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,table_chans$[all],status$
        dim bmm02a_key$:bmm02a_key_tpl$

rem --- retrieve template for BMM_BILLOPER record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,table_chans$[all],status$
        dim bmm03a_key$:bmm03a_key_tpl$

rem --- retrieve template for BMM_BILLSUB record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,table_chans$[all],status$
        dim bmm05a_key$:bmm05a_key_tpl$

rem --- retrieve template for MPW_PLANWO record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","MPW_PLANWO","PRIMARY",mpw05a_key_tpl$,table_chans$[all],status$
        dim mpw05a_key$:mpw05a_key_tpl$


while more; rem --- Read next mpw-05 record

                mpw05a_key$=key(mpw05_dev,end=done)
                if pos(prefix$=mpw05a_key$)<>1 then goto done
                read record (mpw05_dev) mpw05a$
                if mpw05a_key.item_id$<>last$ then
                    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                endif
                last$=mpw05a_key.item_id$
                if mpw05a_key.forecast$<>type$ then gosub get_wo_type_code
                if wotype$="ERR" then goto std_exit

rem ----------- Generate woe-01 Planned Work Order


             while more
                gosub next_w_o
                sfe01a.firm_id$=firm_id$
                sfe01a.wo_location$="  "
                sfe01a.wo_no$=wonum$
                find (sfe01_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*break)
             wend
                sfe01a.wo_type$=wotype$
                sfe01a.wo_category$="I"
                sfe01a.wo_status$="P"
                sfe01a.opened_date$=to_day$
                sfe01a.eststt_date$=fndate$(fndate$(mpw05a.trns_date$))
                sfe01a.estcmp_date$=fndate$(fndate$(mpw05a.reqd_date$))
                sfe01a.priority$="5"
                sfe01a.sched_flag$="B"
                sfe01a.forecast$=type$
                whs$=mpw05a.warehouse_id$
                item$=mpw05a.item_id$
                sfe01a.warehouse_id$=whs$
                sfe01a.item_id$=item$

                find record (ivm01_dev,key=firm_id$+item$,dom=main_read) ivm01a$
                sfe01a.unit_measure$=ivm01a.unit_of_sale$
                if pos(i3$(17,1)="SL")>0 then
                    if ivm01a.lotser_item$+ivm01a.inventoried$="YY" then
                        let sfe01a.lotser_item$="Y"
                    endif
                endif
                extract record (bmm01_dev,key=firm_id$+item$,dom=main_read) bmm01a$
                sfe01a.bill_rev$=bmm01a.bill_rev$
                sfe01a.drawaing_no$=bmm01a.drawaing_no$
                sfe01a.drawaing_rev$=bmm01a.drawaing_rev$

                sfe01a.sch_prod_qty=mpw05a.qty_required
                sfe01a.est_yield=bmm01a.est_yield

                if bmm01a.lstact_date$<sfe10a.opened_date$ then 

                    bmm01a.lstact_date$=sfe10a.opened_date$
                    bmm01a.source_code$="W"
                    write record (bmm01_dev,key=bmm01a.firm_id$+bmm01a.bill_no$) bmm01a$
                endif

rem ----------- Initialize Here

                dim t0$(0),t[10,1]
                x=0
                t[x,0]=1
                t[x,1]=1
                t=1

rem ----------- Write

                write record (sfe01_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$) sfe01a$
                
                sfe03a.firm_id$=firm_id$
                sfe03a.record_id_a$="A"
                sfe03a.wo_type$=sfe01a.wo_type$
                sfe03a.wo_location$=sfe01a.wo_location$
                sfe03a.wo_no$=sfe01a.wo_no$
                
                write record (sfe03_dev,key=cross_ref$) sfe03x$
                
                sfe03c.firm_id$=firm_id$
                sfe03c.record_id_c$="C"
                sfe03c.warehouse_id$=sfe01a.warehouse_id$
                sfe03c.item_id$=sfe01a.item_id$
                sfe03c.wo_location$=sfe01a.wo_location$
                sfe03c.wo_no$=sfe01a.wo_no$


                write record (sfe03_dev,key=sfe03c.firm_id$+sfe03c.record_id_c$+sfe03c.warehouse_id$+sfe03c.item_id$+sfe03c.wo_location$+sfe03c.wo_no$) sfe03x$

rem ----------- Comments here

                read (bmm09_dev,key=firm_id$+item$,dom=*next)
              while more
                bmm09a_key$=key(bmm09_dev,end=*break)
                if pos(firm_id$+item$=bmm09a_key$)<>1 then break
                read record (bmm09_dev,key=bmm09a_key$) bmm09a$

                sfe07a.firm_id$=sfe01a.firm_id$
                sfe07a.wo_location$=sfe01a.wo_location$
                sfe07a.wo_no$=sfe01a.wo_no$
                sfe07a.sequence_no$=str(num(bmm09a_key.sequence_no$):"000")
                write record (sfe07_dev,key=sfe07a.firm_id$+sfe07a.wo_location$+sfe07a.wo_no$+sfe07a.sequence_no$) sfe07a$
              wend

explode_bills: rem --- Explode Bills

                dim yld[99]
                t0$=item$
                t9$=t0$
                o$=sfe01a.item_id$
                o=sfe01a.sch_prod_qty
                y=sfe01a.est_yield
                subs$=""
                mats$=""
                yld[0]=bmm01a.est_yield
                yld=bmm01a.est_yield
            while more
                            read (bmm02_dev,key=firm_id$+t9$,dom=*next)

                        read_find_rec: rem --- Do it Here!

                            bmm02a_key$=key(bmm02_dev,end=back_up_level)
                            if bmm02a_key.firm_id$+bmm02a_key.bill_no$<>firm_id$+t9$ then goto back_up_level
                            print @(column+9,11),bmm02a_key.material_seq$
                            read record (bmm02_dev,key=bmm02a_key$) bmm02a$
                            edate$=bmm02a.effect_date$
                            odate$=bmm02a.obsolt_date$
                            gosub verify_date
                            if ok$="N" then goto read_find_rec
                            
                            sfe22a.firm_id$=sfe01a.firm_id$
                            sfe22a.wo_location$=sfe01a.wo_location$
                            sfe22a.wo_no$=sfe01a.wo_no$
                            sfe22a.record_id_b$="B"

                            sfe22a.material_seq$=str(num(sfe22a.material_seq$)+5:"000")
                            if bmm02a.line_type$="M" then
                                sfe22a.line_type$="M"
                                sfe22a.ext_comments$=bmm02a.ext_comments$
                                break
                            endif

                            let ivm01a.item_desc$="*** Not On File ***"
                            find record (ivm01_dev,key=firm_id$+bmm02a.item_id$,dom=initial) ivm01a$
                            find record (ivm02_dev,key=firm_id$+whs$+bmm02a.item_id$,dom=*next) ivm02a$
                            initial:

                            sfe22a.unit_measure$=ivm10a.unit_of_sale$
                            cost=ivm02a.unit_cost
                            sfe22a.require_date$=sfe01a.eststt_date0$
                            sfe22a.warehouse_id$=sfe01a.warehouse_id$
                            sfe22a.item_id$=bmm02a.item_id$
                            t[x,1]=num(bmm02a_key.item_id$)
                            sfe22a.line_type$="S"
                            if r[0]=0 then let r[0]=1
                            if r[1]=0 then let r[1]=1
                            if r[3]=0 then let r[3]=1
                            sfe22a.divisor=bmm02a.divisor
                            sfe22a.qty_required=bmm02a.qty_required*t
                            sfe22a.alt_factor=bmm02a.alt_factor
                            sfe22a.unit_cost=cost
                            sfe22a.scrap_factor=bmm02a.scrap_factor
                            yld=yld[x]

                            if yld=0 then let yld=100
                            sfe22a.units=fnqty(x)*t
                            sfe22a.unit_cost=fnqty(x)*cost*t
                            sfe22a.total_units=o*fnqty(x)*t
                            sfe22a.total_cost=o*fnqty(x)*cost*t
                            precision 2
                            let sfe22a.total_cost=sfe22a.total_cost*1
                            precision ivs01_precision

rem ----------------------- Phantom?

                            find record (bmm01_dev,key=firm_id$+r1$,dom=*break) bmm01a$
                            if bmm01a.phantom_bill$="N" then break

rem ----------------------- Down One Level Here

                            t0$=t0$+bmm02a.item_id$
                            t9$=bmm02a.item_id$
                            bmm$=bmm02a.item_id$
                            x=len(t0$)/20-1
                            t[x,0]=sfe22a.units
                            t[x,1]=num(bmm02a_key.material_seq$)
                            t=1
                            t=t[x,0]
                            yld[x]=bmm01a.est_yield
                            extract record (bmm01_dev,key=firm_id$+bmm$,dom=*continue) bmm01a$
                            if sfe01a.opened_date$<bmm01a.lstact_date$ then continue
                            bmm01a.lstact_date$=sfe10a.opened_date$
                            bmm01a.source_code$="W"
                            write record (bmm01_dev,key=firm_id$+bmm$) bmm01a$
                        
                wend

rem ----------- Write Materials Here

                read (sfe22_dev,key=sfe22a.firm_id$+sfe22a.wo_location$+sfe22a.wo_no$+sfe22a.record_id_b$+$ff$,dom=*next)
                sfe22a.material_seq$="000"
                z$=keyp(sfe22_dev,end=record_write)
                if pos(sfe22a.firm_id$+sfe22a.wo_location$+sfe22a.wo_no$+sfe22a.record_id_b$=z$)=1 then
                    let sfe22a.material_seq$=z$(13,3)
                endif
                if sfe22a.material_seq$="999" then let module$="Materials"; gosub warning_subs; goto back_up_level

record_write:
                sfe22a.material_seq$=str(num(sfe22a.material_seq$)+1:"000")
                write record (sfe22_dev,key=bw0$) sfe22a$
                if sfe22a.line_type$="S" then 
                        sfe03e.firm_id$=firm_id$
                        sfe03e.record_id_e$="E"
                        sfe03e.warehouse_id$=sfe22a.warehouse_id$
                        sfe03e.wo_no$=sfe22a.wo_no$
                        sfe03e.material_seq$=sfe22a.material_seq$
                        write record (sfe03_dev,key=cross_ref$) sfe03x$
                endif
                if bmm02a.op_seq$<>"   " then
                    mats$=mats$+bmm02a.bill_no$+bmm02a.op_seq$+sfe22a.material_seq$
                endif
                goto read_find_rec

labor_do: rem --- Do Labor Here

                read (bmm03_dev,key=firm_id$+t9$,dom=*next)

                sfe02a.firm_id$=sfe01a.firm_id$
                sfe02a.wo_location$=sfe01a.wo_location$
                sfe02a.wo_no$=sfe01a.wo_no$
                sfe02a.record_id_a$="A"

            while more

                        bmm03a_key$=key(bmm03_dev,end=*break)
                        if bmm03a_key.firm_id$+bmm03a_key.bill_no$<>firm_id$+t9$ then break
                        read record (bmm03_dev,key=bmm03a_key$) bmm03a$
                        edate$=bmm03a.effect_date$
                        odate$=bmm03a.obsolt_date$; gosub verify_date; if ok$="N" then continue
                        if bmm03a.line_type$<>"M" then 
                             find record (bmm08_dev,key=firm_id$+bmm03a.op_code$,dom=*continue) bmm08a$
                        endif

                        sfe02a.op_code$=bmm03a.op_code$
                        sfe02a.require_date$=sfe01a.eststt_date$
                        sfe02a.code_desc$=bmm08a.code_desc$
                        sfe02a.line_type$=bmm03a.line_type$

                        if bmm03a.line_type$="M" then let sfe02a.ext_comments$=bmm03a.ext_comments$
                            else
                                if bmm03a.pcs_per_hour=0 then
                                    if op1<>0 then
                                        let bmm03a.pcs_per_hour=op1
                                    else
                                        let bmm03a.pcs_per_hour=1
                                    endif
                                endif
                                sfe02a.hrs_per_pce=bmm03a.hrs_pre_pce*t/yld*100
                                sfe02a.pcs_per_hour=bmm03a.pcs_per_hour
                                sfe02a.direct_rate=op0
                                sfe02a.ovhd_rate=sfe02a.direct_rate*op2
                                sfe02a.setup_time=bmm03a.setup_time
                                sfe02a.move_time=bmm03a.move_time
                                sfe02a.runtime_hrs=fnopnoset(x)*t
                                sfe02a.unit_cost=fnopnosetdol(x)*t
                                sfe02a.total_time=fnop(x)
                                sfe02a.tot_std_cost=fnopdol(x)
                                sfe02a.tot_std_cost=round(sfe02a.tot_std_cost,2)
                        endif

rem ------------------- Write Operation Records

                        read (sfe02_dev,key=sfe02a.firm_id$+sfe02a.wo_location$+sfe02a.wo_no$+sfe02a.record_id_a$+$ff$,dom=*next)
                        sfe02a.op_seq$="000"
                        z$=keyp(sfe02_dev,end=write_record)
                        if pos(sfe02a.firm_id$+sfe02a.wo_location$+sfe02a.wo_no$+sfe02a.record_id_a$=z$)=1 then
                            let sfe02a.op_seq$=z$(13,3)
                        endif
                        if sfe02a.op_seq$="999" then let module$="Operations"; gosub warning_subs; goto back_up_level
                        write_record:
                        sfe02a.op_seq$=str(num(sfe02a.op_seq$)+1:"000")
                        write record (sfe02_dev,key=sfe02a.firm_id$+sfe02a.wo_location$+sfe02a.wo_no$+sfe02a.record_id_a$+sfe02a.op_seq$) sfe02a$
                        subs$=subs$+t9$+bmm03a.op_seq$+sfe02a.op_seq$

                        if sfe02a.line_type$="S" then 
                            sfe03d.firm_id$=firm_id$
                            sfe03d.record_id_d$="D"
                            sfe03d.op_code$=sfe02a.op_code$
                            sfe03d.require_date$=sfe02a.require_date$
                            sfe03d.wo_no$=sfe02a.wo_no$
                            sfe03d.op_seq$=sfe02a.op_seq$
                            write record (sfe03_dev,key=cross_ref$) sfe03x$
                        endif
                    
                        y0=pos(bmm03a.bill_no$+bmm03a.op_seq$=mats$,26)
                        if y0=0 then continue
                        extract record (sfe22_dev,key=sfe02a.firm_id$+sfe02a.wo_location$+sfe02a.wo_no$+"B"+mats$(y0+23,3),dom=*continue) woe22a1$
                        sfe22a.op_seq$=sfe02a.op_seq$
                        write record (sfe22_dev,key=sfe02a.firm_id$+sfe02a.wo_location$+sfe02a.wo_no$+"B"+mats$(y0+23,3)) woe22a1$
                    
             wend
             return

back_up_level: rem --- Back Up The Levels

                if t0$<>o$ then 
                            gosub labor_do; rem "Do component labor
                            gosub explode_subcontracts; rem "Do component subs
                            t[x,0]=0
                            t[x,1]=0
                            d_o_m:
                            t0$=t0$(1,x*20)
                            x=x-1,t9$=t0$(x*20+1,20),t=1
                            if x<>0 then 
                                 t=t[x,0]
                            endif
                            read (bmm02_dev,key=firm_id$+t9$+str(t[x,1]:"000"),dom=d_o_m)
                            goto read_find_rec
                endif
                t9$=t0$; gosub labor_do; rem "Now do final assembly labor
                gosub explode_subcontracts; rem "Now do final assembly subs
                gosub schedule_it; rem "Go Schedule it!
                write record (sfe01_dev,key=w0$(1,11)) sfe01a$
wend

explode_subcontracts: rem --- Explode Subcontracts here

                read (bmm05_dev,key=firm_id$+t9$,dom=*next)

                sfe32a.firm_id$=sfe01a.firm_id$
                sfe32a.wo_location$=sfe01a.wo_location$
                sfe32a.wo_no$=sfe01a.wo_no$
                sfe32a.record_id_c$="C"

while more

rem ----------- Read 4

                bmm05a_key$=key(bmm05_dev,end=*break)
                if bmm05a_key.firm_id$+bmm05a.bill_no$<>firm_id$+t9$ then break
                read record (bmm05_dev,key=bmm05a_key$) bmm05a$
                edate$=bmm05a.effect_date$
                odate$=bmm05a.obsolt_date$; gosub verify_date; if ok$="N" then continue
                sfe32a.require_date$=sfe01a.eststt_date$
                sfe32a.vendor_id$=bmm05a.vendor_id$
                sfe32a.line_type$=bmm05a.line_type$
                if bmm05a.line_type$="S" then
                    sfe32a.unit_measure$=""
                    sfe32a.description$=bmm05a.ext_comments$(1,30)
                    sfe32a.op_seq$=""
                    sfe32a.units=fnsub(x)
                    sfe32a.unit_cost=fnsub(x)*bmm05a.unit_cost
                    sfe32a.total_units=o*sfe32a.units
                    sfe32a.total_cost=o*sfe32a.unit_cost
                    sfe32a.rate=bmm05a.unit_cost
                    sfe32a.lead_time=bmm05a.lead_time
                else
                    sfe32a.unit_measure$=""
                    sfe32a.description$=""
                endif
                cw0=pos(bmm05a.bill_no$+bmm05a.op_seq$=subs$,26)
                if cw0>0 then let sfe32a.op_seq$=subs$(cw0+23,3)
                if bmm05a.line_type$<>"S" then let sfe32a.ext_comments$=bmm05a.ext_comments$
                read (sfe32_dev,key=sfe32a.firm_id$+sfe32a.wo_location$+sfe32a.wo_no$+sfe32a.record_id_c$+$ff$,dom=*next)
                sfe32a.subcont_seq$="000"
                z$=keyp(sfe32_dev,end=write_cross_ref)
                if pos(sfe32a.firm_id$+sfe32a.wo_location$+sfe32a.wo_no$+sfe32a.record_id_c$=z$)=1 then let sfe32a.subcont_seq$=z$(13,3)
                if sfe32a.subcont_seq$="999" then let module$="Subcontracts"; gosub warning_subs; break

write_cross_ref:

                sfe32a.subcont_seq$=str(num(sfe32a.subcont_seq$)+1:"000")
                write record (sfe32_dev,key=cw0$) sfe32a$; continue
                if sfe32a.line_type$<>"S" then break

                sfe03f.firm_id$=firm_id$
                sfe03f.record_id_f$="F  "
                sfe03f.vendor_id$=sfe32a.vendor_id$
                sfe03f.wo_no$=sfe32a.wo_no$
                sfe03f.subcont_seq$=sfe32a.subcont_seq$
                write record (sfe03_dev,key=cross_ref$) sfe03x$
                break
wend

return

rem ---------- Loop back for next record

                goto explode_bills

done: rem --- All done

                goto std_exit

warning_subs: rem --- Issue warning for subs

                dim message$[1]
                message$[0]="Not enough free sequence numbers for "+module$+"."
                message$[1]="<Enter> to continue ",v0=1,v1=40+int(len(v2$)/2),v2=22
                print 'rb',
                call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
                return

verify_date: rem --- Verify date within Effective and Obsolete dates

                ok$="Y"
                if edate$<>"   " then 
                if sfe01a.opened_date$<edate$ then let ok$="N";return
                if odate$<>"   " then
                    if sfe01a.opened_date$>=odate$ then
                        let ok$="N"
                    endif
                endif
                return

report_heading: rem --- Report Heading

                l=0
                call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,width,when$,clock$,status
                if status then exitto std_exit
                print (printer_dev)"Work",@(42),"--- Scheduled ---"
                print (printer_dev)"Order",@(8),"Item",@(29),"Pri Mthd Sts",@(44),"Start",
:                                   @(51),"Complete",@(61),"Cat",@(66),"Scheduling Status",'lf'
                return

next_w_o: rem --- Next W/O #

                extract record (sfs10_dev,key=firm_id$+"N",dom=initial1) sfs10a$
                goto write_rec_sfs

initial1:
                ws0=1000
write_rec_sfs:
                ws0=ws0+1
                if ws0>9999999 then let ws0[0]=1000
                wonum$=str(ws0:"0000000")
                write record (sfs10_dev,key=firm_id$+"N") sfs10a$
                return

get_wo_type_code: rem --- GET WO Type code

                type$=mpw05_key.forecast$
                mpm01a.firm_id$=firm_id$
                mpm01a.forecast$=type$
                find record (mpm01_dev,key=for0$) mpm01a$
                if mpm01a.wo_type$<>"  " then let wotype$=mpm01a.wo_type$;return
                print 'rb'
                dim message$[1]
                title=2
                message$[0]="No Work Order Type Code Assigned to Forecast Type "+type$+".",message$[1]="Press <Enter> and Create One"
                call pgmdir$+"adc_stdmessage.aon",title,message$[all],1,22,-1,v$,v3
                wotype$="ERR"
                return

schedule_it: rem --- Schedule it!

                if pos(sfe01a.sched_flag$="BF")<>0 then
                    if sfe01a.sched_flag$="F" then
                        let sdate$=sfe01a.eststt_date$
                    else
                        let sdate$=sfe01a.estcmp_date$
                    endif
                    edate$=""
                    status$="00"
                    call pgmdir$+"sfc_aa.bbx",sfe01a.wo_no$,sdate$,edate$,sfe01a.sched_flag$,bmm08_dev,status$
                    dim linerec$(132)
                    linerec$(1)=sfe01a.wo_no$
                    linerec$(9)=sfe01a.item_id$
                    linerec$(30)=sfe01a.priority$
                    linerec$(34)=sfe01a.sched_flag$
                    linerec$(39)=sfe01a.wo_status$
                    m$=""
                    on num(status$(2,1)) goto Successful_Schedule,Unscheduled_Date,invalid_from_date,File_Missing,Invalid_Sch_Method,Unsch_Date_Purchase,Undeterminded_Error

Successful_Schedule: rem --- Successful Schedule

                    if sfe01a.sched_flag$="B" then
                        sfe01a.eststt_date$=edate$
                        sfe01a.estcmp_date$=sdate$
                    else
                        sfe01a.eststt_date$=sdate$
                        sfe01a.estcmp_date$=edate$
                    endif
                    linerec$(43)=fndate$(sfe01a.eststt_date$)
                    linerec$(52)=fndate$(sfe01a.estcmp_date$)
                    linerec$(62)=sfe01a.wo_category$
                    m$="Scheduled"
                    goto Now_Print_Line

Unscheduled_Date: rem --- Unscheduled Date in Calendar

                    m$="Unscheduled Date Found in Operations Calendar"
                    goto Now_Print_Line

invalid_from_date: rem --- Invalid 'From' Date

                    if sfe01a.sched_flag$="B" then
                        let mess$="Completion"
                    else
                        let mess$="Start"
                    endif
                    m$="Invalid Estimated "+mess$+" Date"
                    goto Now_Print_Line
                endif

Invalid_Sch_Method: rem --- Invalid Scheduling Method

                if sfe01a.sched_flag$="M" then
                    linerec$(13)=sfe01a.priority$
                    linerec$(17)=sfe01a.sched_flag$
                    linerec$(22)=sfe01a.wo_status$
                    linerec$(25)="Manual Method. No Rescheduling Performed"; goto Now_Print_Line
                endif
                linerec$(9)="***"
                linerec$(13)=sfe01a.priority$
                linerec$(17)=sfe01a.sched_flag$
                linerec$(22)=sfe01a.wo_status$
                linerec$(25)="Invalid Scheduling Method"
                goto Now_Print_Line

Unsch_Date_Purchase: rem --- Unscheduled Date in Purchase Calendar

                m$="Unscheduled Date Found In Purchase Order Calendar"
                goto Now_Print_Line

Undeterminded_Error: rem --- Undetermined error

                m$="An Undetermined Error Has Occurred"

Now_Print_Line: rem --- Now print the line!

                if l+2>l9 then gosub report_heading
                linerec$(67)=m$
                print (printer_dev)@(0),linerec$
                l=l+1
                if status$(1,1)<>"0" then
                    print (printer_dev)@(8),"A Required Date Changed For A Subcontract For This Work Order"
                    l=l+1
                endif
                return

File_Missing: rem --- File Missing
                dim message$[1]
                let message$[0]="A necessary Shop Floor Control file is missing. Make sure the"
                let message$[1]="Calendar File and Work Orders exist, then rerun this task."
                call pgmdir$+"adc_stdmessage.aon",1,message$[all],1,22,-1,v$,v3
                goto done

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

        def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem --- #endinclude std_end.src

        end
