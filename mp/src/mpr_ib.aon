rem --- Purchase Requisition Register (Report Overlay)
rem --- Program mpr_ib v8.0.0 05Feb2008 (mpr_ib)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/05/2008 03:06:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open Printer

    call pgmdir$+"mpc_fa.bbx",mpe05_dev,"mpe-05",firm_id$,forecast$,filename$,status
    if status then goto std_exit
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Initializations

    more=1
    precision ivs01_precision
    dim j1$(40),o[9],r[1],poreq_sort$(45)
    prefix$=cvs(firm_id$+forecast$+whse$,2)
    last$="",l1=0
    hr=width-max(len(h7$),len(h8$))
    t0$="",t1$=""

rem --- Print positions

    call pgmdir$+"adc_sizemask.aon",ivs01a.amount_mask$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",ivs01a.unit_mask$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",ivs01a.cost_mask$,m3,8,12
    o[7]=width-m1
    o[6]=o[7]-m2
    o[5]=o[6]-9
    o[4]=o[5]-m3
    o[3]=o[4]-25
    o[2]=o[3]-4
    o[1]=p[0]
    dw=o[2]-o[1]

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,mpw03a_dev,1,meter_num,status

rem --- Extract Planned Purchase records from mpe-05

    gosub sort_file

rem --- Position file

    print @(column-9,11),'sb',"Printing",'sf',j1$(1,p[0]+10),
    last$=""
    read (mpw03a_dev,key=firm_id$,dom=*next)

rem --- retrieve template for MPX_REQVEND record key
    call stbl("+DIR_SYP")+"bac_key_template.bbj","MPX_REQVEND","PRIMARY",mpw03a_key_tpl$,table_chans$[all],status$
    dim mpw03a_key$:mpw03a_key_tpl$

rem --- Read next mpw-03 record

    while more

        mpw03a_key$=key(mpw03a_dev,end=done)
        if pos(prefix$=mpw03a_key$)<>1 then break
        read (mpw03a_dev)
        if mpw03a_key.vendor_id$+mpw03a_key.item_id$<>last$ then
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            last$=mpw03a_key.vendor_id$+mpw03a_key.item_id$
        endif

rem --- Level breaks

        if mpw03a_key.vendor_id$<>t0$ then gosub vend_break
        if mpw03a_key.item_id$<>t1$ then gosub item_break

rem --- Additional reads

        mpe05a.firm_id$=mpw03a_key.firm_id$
        mpe05a.forcast_id$=mpw03a_key.forcast$
        mpe05a.warehouse_id$=mpw03a_key.warehouse_id$
        mpe05a.item_id$=mpw03a_key.item_id$
        mpe05a.trns_date$=mpw03a_key.trns_date$
        mpe05a.source_code$=mpw03a_key.peg_source$
        mpe05a.seq_no$=mpw03a_key.seq_no$

        find record (mpe05_dev,key=mpe05a.firm_id$+mpe05a.forcast_id$+mpe05a.warehouse_id$+mpe05a.item_id$+mpe05a.trns_date$+mpe05a.source_code$+mpe05a.seq_no$,dom=*continue) mpe05a$
        qty=mpe05a.planned_rel
        gosub date_break

rem --- Loop back for next record

    wend

done: rem --- All done

    t9$="END"
    gosub vend_break
    if l+2>l9 then gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(o[6]-18),"Totals For Report",@(o[7]),r[1]:ivs10a.amount_mask$
    run pgmdir$+"mpu_ca.bbx"

report_heading: rem --- Report Heading

    l=headings+2
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)h5$,@(hr),h7$
    print (printer_dev)h6$,@(hr),h8$
    print (printer_dev)""
    print (printer_dev)@(o[4]+m3-5),"Unit",@(o[5]+2),"Date",@(o[6]+m2-9),"Quantity"
    print (printer_dev)"Item",@(o[1]),"Description",@(o[2]),"UM",@(o[3]),"Buyer",
:                                 @(o[4]+m3-5),"Cost",@(o[5]),"Required",
:                                 @(o[6]+m2-9),"Required",@(o[7]+m1-10),"Extension"
    print (printer_dev)""
    l=l+6
    return

vend_break: rem --- Vendor Break

    if t0$<>"" then
        gosub item_break
        if l1<>0 then 
            if l+1>l9 then gosub report_heading
            print (printer_dev)@(o[6]-18),"Totals For Vendor",@(o[7]),t[1]:ivs10a.amount_mask$
            l=l+1
        endif
    endif

    if t9$<>"" then
        return
    endif
    dim t[1]
    apm01a.firm_id$=firm_id$
    apm01a.vendor_id$=mpw03a_key.vendor_id$
    apm01a.vendor_name$="Unknown Vendor"
    t0$=apm01a.vendor_id$
    find record (apm01a_dev,key=apm01a.firm_id$+apm01a.vendor_id$,dom=*next) apm01a$
    if l+2>l9 then gosub report_heading
    print (printer_dev)fnmask$(apm01a.vendor_id$(1,ap),aps01a.vendor_output$)," ",apm01a.vendor_name$
    print (printer_dev)""
    l=l+2

    return

item_break: rem --- Item Break

    if t1$<>"" then
        if l+3>l9 then gosub report_heading
        print (printer_dev)""
        print (printer_dev)@(o[6]-16),"Totals For Item",@(o[6]),mpm01a.no_of_pers:ivs01a.unit_mask$,
:                              @(o[7]),mpm01a.days_in_per:ivs01a.amount_mask$
        print (printer_dev)""
        l=l+3
    endif


    if t9$<>"" then
        return
    endif

    dim desc$(dw)
    ivm01a.firm_id$=firm_id$
    ivm01a.item_id$=mpw03a_key.item_id$

    ivm02a.firm_id$=firm_id$
    ivm02a.warehouse_id$=mpw03a_key.warehouse_id$
    ivm02a.item_id$=mpw03a_key.item_id$
    t1$=ivm01a.item_id$

    find record (ivm01a_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
    find record (ivm02a_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next) ivm02a$
    item$=t1$
    desc$(1)=fnzipcode$(ivm01a.item_desc$,p[2],p[3],p[4])
    buyer$=ivm02a.buyer_code$
    um$=ivm01a.purchase_um$

    ivm10f.firm_id$=firm_id$
    ivm10f.record_id_f$="F"
    ivm10f.buyer_code$=buyer$
    factor=ivm01a.conv_factor
    find record (ivm10f_dev,key=ivm10f.firm_id$+ivm10f.record_id_f$+ivm10f.buyer_code$,dom=label1) ivm10f$
    buyer$=ivm10f.buyer_code$+" "+cvs(ivm10f.code_desc$,2)

label1:

    return

date_break: rem --- Date break

    gosub vend_item_disc
    if l+1>l9 then gosub report_heading
    x=qty*cost
    l=l+1,l1=l1+1
    print (printer_dev)item$,@(o[1]),desc$,@(o[2]),um$,@(o[3]),buyer$,
:                                @(o[4]),cost$,@(o[5]),fndate$(mpe05a.reqd_date$),
:                                @(o[6]),qty:ivs01a.unit_mask$,
:                                @(o[7]),x:ivs01a.amount_mask$

    mpw04a.firm_id$=mpe05a.firm_id$
    mpw04a.forecast$=mpe05a.forecast$
    mpw04a.warehouse_id$=mpe05a.warehouse_id$
    mpw04a.item_id$=mpe05a.item_id$
    mpw04a.require_date$=mpe05a.reqd_date$
    find record (mpw04a_dev,key=d0$,dom=*next,err=*next) mpw04a$

    mpw04a.firm_id$=um$
    mpw04a.conv_factor=factor
    mpw04a.unit_cost=cost
    mpw04a.qty_required=mpw04a.qty_required+mpe05a.planned_rel

    if mpe05a.reqd_date$<>"      " then
        mpw04a.require_date$=fndate$(fndate$(mpe05a.reqd_date$))
    endif
    write record (mpw04a_dev,key=mpw04a.firm_id$+mpw04a.forecast$+mpw04a.warehouse_id$+mpw04a.vendor_id$+mpw04a.item_id$+mpw04a.trns_date$) mpw04a$
    mpm01a.no_of_pers=mpm01a.no_of_pers+qty
    mpm01a.days_in_per=mpm01a.days_in_per+x
    t[1]=t[1]+x
    r[1]=r[1]+x
    item$=""
    desc$=""
    um$=""
    buyer$=""
    cost$=""
    return

sort_file: rem --- Sort mpe-05

    read (mpe05_dev,key=prefix$,dom=*next)

rem --- Read next mpe-05 record

    while more

        read record (mpe05_dev,end=*break) mpe05a$
        if pos(prefix$=mpe05a.firm_id$+mpe05a.forcast_id$+mpe05a.warehouse_id$+mpe05a.item_id$+mpe05a.trns_date$+mpe05a.source_code$+mpe05a.seq_no$)<>1 then break
        if mpe05a.source_code$<>"I" then continue
        if begdate$<>"" then
            if mpe05a.trns_date$<begdate$ then
                continue
            endif
        endif
        if enddate$<>"" then
            if mpe05a.trns_date$>enddate$ then
                continue
            endif
        endif
        if mpe05a.item_id$+mpe05a.trns_date$=last$ then
            poreq_sort$=mpe05a.firm_id$+mpe05a.forcast_id$+mpe05a.warehouse_id$+mpe05a.vendor_id$+mpe05a.item_id$
            write record (mpw03a_dev,key=poreq_sort$) mpw03a$
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        endif

    wend
rem --- Sort completed

        return

vend_item_disc: rem --- Get Vendor/Item discount price if any

    cost=ivm02a.unit_cost
    find record (ivm05a_dev,key=firm_id$+apm01a.vendor_id$+ivm10f.item_id$,dom=label2) ivm05a$
    if ivm05a.unit_cost_1>0 then
        if qty>=ivm05a.break_qty_1 then
            let cost=ivm05a.unit_cost_1
        endif
    endif
    if ivm05a.unit_cost_2 then
        if qty>=ivm05a.break_qty_2 then
            let cost=ivm05a.unit_cost_2
        endif
    endif
    if ivm05a.unit_cost_3>0 then
        if qty>=ivm05a.break_qty_3 then
            let cost=ivm05a.unit_cost_3
        endif
    endif

label2:
        cost$=str(cost:ivs10a.cost_mask$)
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:

    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:

    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

    end
