rem --- Planned Production Report (Report Overlay)
rem --- Program mpr_bb v8.0.0 30Jan2008 (mpr_bb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/30/2008 02:26:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
rem --- 16Oct96 JJD: Determine "projected availability" correctly. (2170)
    
        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock Files

        call pgmdir$+"mpc_fa.bbx",mpe03_dev,"mpe-03",firm_id$,forecast$,filename$,status
        if status then goto std_exit
        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Initializations

        more=1
        precision ivs01_precision
        headings$[1]=headings$[1]+" For "+h5$
        prefix$=firm_id$+forecast$+whse$
        lines=6
        number=endper-begper+3
        if allbuyers>0 then let buyer$=""

rem --- Print positions

        dim o[10],titles$[lines]
        o[10]=width-8
        o[9]=o[10]-10,o[8]=o[9]-10,o[7]=o[8]-11
        o[6]=o[7]-9
        o[5]=o[6]-m2-1,o[4]=o[5]-m2-1,o[3]=o[4]-4
        o[2]=o[3]-m5-1
        o[1]=p[0],dw=o[2]-o[1]+1,x=width-o[1]-15
        numcol=int(x/m2)
        if numcol>number then let numcol=number
        titles$[0]="           Forecast"
        titles$[1]="  Gross Requirement"
        titles$[2]="  Scheduled Receipt"
        titles$[3]="Projected Available"
        titles$[4]="    Net Requirement"
        x$=" No Bill Of Materials Defined"
        titles$[5]=" Plan Order Release"
        titles$[6]=" Plan Order Receipt"
        dim nb$(width-o[5],"-")
        begper=begper-1
        endper=endper-1,position=width-m2*numcol
        hr=width-max(len(h7$),len(h8$))
        nb$(fncenter(x$,len(nb$)),len(x$))=x$

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,mpe03_dev,1,meter_num,status

rem --- Position file

        read (mpe03_dev,key=prefix$+begitem$,dom=*next)

rem --- Stores the mpe03a numeric fields for Build detail blocks

        dim mpe03a_arrfield$[14]
        x= 0
        mpe03_field$=fattr(mpe03a$,"")
        mpe03_field$=mpe03_field$(pos("qty_on_hand"=cvs(mpe03_field$,8)))
        while mpe03_field$<>""
           xfield$=mpe03_field$(1,pos($0A$=mpe03_field$)-1)
           mpe03a_arrfield$[x]=xfield$
           x=x+1
           mpe03_field$=mpe03_field$(pos($0A$=mpe03_field$)+1)
        wend

rem --- Stores the mpe03a date fields for Build detail blocks

        dim mpe03a_datefield$[26]
        x= 0
        mpe03_field$=fattr(mpe03a$,"")
        mpe03_field$=mpe03_field$(pos("plan_date"=cvs(mpe03_field$,8)))
        while mpe03_field$<>""
           xfield$=mpe03_field$(1,pos($0A$=mpe03_field$)-1)
           mpe03a_datefield$[x]=xfield$
           x=x+1
           mpe03_field$=mpe03_field$(pos($0A$=mpe03_field$)+1)
           if cvs(xfield$,8)="qty_on_hand" then 
            print "hello"
            break
           endif
        wend


rem --- Stores the mpm01a numeric fields for Build detail blocks

        dim mpm01a_arrfield$[3]
        x= 0
        mpm01_field$=fattr(mpe03a$,"")
        mpm01_field$=mpm01_field$(pos("no_of_pers"=cvs(mpm01_field$,8)))
        while mpm01_field$<>""
           xfield$=mpm01_field$(1,pos($0A$=mpm01_field$)-1)
           mpm01a_arrfield$[x]=xfield$
           x=x+1
           mpm01_field$=mpm01_field$(pos($0A$=mpm01_field$)+1)
        wend

rem --- Stores the mpe01a numeric fields for Build detail blocks

        dim mpe01a_arrfield$[27]
        x= 0
        mpe01_field$=fattr(mpe01a$,"")
        mpe01_field$=mpe01_field$(pos("forecast_qty"=cvs(mpe01_field$,8)))
        while mpe01_field$<>""
           xfield$=mpe01_field$(1,pos($0A$=mpe01_field$)-1)
           mpe01a_arrfield$[x]=xfield$
           x=x+1
           mpe01_field$=mpe01_field$(pos($0A$=mpe01_field$)+1)
        wend

rem --- Read next mpe-03 record
        while more
            read record (mpe03_dev,end=done) mpe03a$
            if pos(prefix$=mpe03a.firm_id$+mpe03a.forcast$+mpe03a.warehouse_id$+mpe03a.item_id$+mpe03a.mrp_type$)<>1 then break
            if cvs(enditem$,2)<>"" then
                if mpe03a.item_id$>enditem$ then
                    break
                endif
            endif
            if pos(mpe03a.mrp_type$="B")=0 then continue
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Additional reads

            ivm01a.firm_id$=firm_id$
            ivm01a.item_id$=mpe03a.item_id$

            ivm02a.firm_id$=firm_id$
            ivm02a.warehouse_id$=whse$
            ivm02a.item_id$=mpe03a.item_id$

            mpe01a.firm_id$=mpe03a.firm_id$
            mpe01a.forcast$=mpe03a.forcast$
            mpe01a.warehouse_id$=mpe03a.warehouse_id$
            mpe01a.item_id$=mpe03a.item_id$


            find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
            find record (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next) ivm02a$
            if ivm01a.stock_level$="I" then
                let iv_buyer$=ivm01a.buyer_code$
            else
                let iv_buyer$=ivm02a.buyer_code$
            endif

            if buyer$<>"" then
                if iv_buyer$<>buyer$ then
                    continue
                endif
            endif
            find record (mpe01_dev,key=mpe01a.firm_id$+mpe01a.forcast$+mep01a.warehouse_id$+mpe01a.item_id$,dom=*next) mpe01a$
            desc$(1)=fnzipcode$(ivm01a.item_desc$,p[2],p[3],p[4])

rem --- Bill of materials?

            revcode$=""
            lot$=""
            phantom$=""
            yield$=""
            created$=""
            revision$=""
            used$=""
            bill$=""
            bmm01a.firm_id$=ivm01a.firm_id$
            bmm01a.bill_no$=ivm01a.item_id$
            find record (bmm01_dev,key=bmm01a.firm_id$+bmm01a.bill_no$,dom=print_item_heading) bmm01a$

rem --- Format bill fields

            revcode$=bmm01a.bill_rev$
            phantom$="No"
            created$=fndate$(bmm01a.create_date$)
            revision$=fndate$(bmm01a.lstrvs_date$)
            used$=fndate$(bmm01a.lstact_date$)
            bill$="Y"
            if bmm01a.phantom_bill$="Y" then let phantom$="Yes"
            if bmm01a.est_yield>999.99 then let bmm01a.est_yield=999.99
            if bmm01a.est_yield<-999.99 then let bmm01a.est_yield=-999.99
            yield$=str(bmm01a.est_yield:"-##0.00")+"%"
            lot$=str(bmm01a.est_std_lot_size:m2$)

print_item_heading: rem --- Print item heading

            if l+8>l9 then gosub report_heading
            gosub item_heading

rem --- Build detail

            dim required$[number],amounts[number,lines],plandate$[number]
            required$[1]="   Begin"
            amounts[1,3]=mpe03a.qty_on_hand
            n=1

            for x=begper to endper
                p=x*6
                n=n+1
                plandate$[n]=fndate$(FIELD(mpe03a$,mpe03a_datefield$[x*6+1]))
                required$[n]=fndate$(FIELD(mpm01a$,mpm01a_arrfield$[x*6+1]))
                amounts[n,0]=num(FIELD(mpe01a$,mpe01a_arrfield$[x]))
                amounts[n,1]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+2]))
                amounts[n,2]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+1]))
                amounts[n,3]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+6]))
                amounts[n,4]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+3]))
                amounts[n,5]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+4]))
                amounts[n,6]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+5]))
            next x

rem --- Detail printing initializations

            last=0
            required$[number]=" Totals "
            for x=2 to number-1
                for n=0 to lines
                    amounts[number,n]=amounts[number,n]+amounts[x,n]
                next n
            next x
            amounts[number,3]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+6]))

rem ------- Print detail
            while more
                first=last+1
                last=first+numcol-1,needed=4+lines
                if first>number then break
                if last>number then let last=number
                if l+needed>=l9 then
                    gosub report_heading
                    gosub item_heading
                endif

rem ----------- Required By

                dim buffer$(width)
                buffer$(position-12)="Required By"
                n=position
                for x=first to last
                    buffer$(n+m2-9)=required$[x]
                    n=n+m2
                next x
                print (printer_dev)""
                print (printer_dev)buffer$

rem ----------- Amounts

                for y=0 to lines
                    dim buffer$(width)
                    buffer$(position-20)=titles$[y]
                    n=position
                    for x=first to last
                        if x=1 then
                            if y=3 then
                                buffer$(n)=str(amounts[x,y]:m2$)
                            endif
                        endif
                        n=n+m2
                    next x
                    print (printer_dev)buffer$
                next y

rem ----------- Plan Date

                dim buffer$(width)
                buffer$(position-10)="Plan Date"
                n=position
                for x=first to last
                    buffer$(n+m2-9)=plandate$[x]
                    n=n+m2
                next x
                print (printer_dev)buffer$
                l=l+needed

            wend


rem --- Loop back for next record
        wend



done: rem --- All done

        goto std_exit

report_heading: rem --- Report Heading

        l=headings+5
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
        if status then exitto std_exit
        print (printer_dev)h6$,@(fncenter(p9$,width)),p9$,@(hr),h7$
        print (printer_dev)h9$,@(hr),h8$
        print (printer_dev)""
        print (printer_dev)@(o[2]),"Lead",@(o[5]+m2-4),"Lot",@(o[6]),"Phantom",
:                          @(o[7]),"Estimated",@(o[8]+2),"Bill",@(o[9]+2),"Last",
:                          @(o[10]+2),"Last"
        print (printer_dev)"Item",@(o[1]),"Description",@(o[2]),"Time",@(o[3]),"Rev",
:                                 @(o[4]+m2-4),"EOQ",@(o[5]+m2-5),"Size",@(o[6])," Bill?",
:                                 @(o[7]+2),"Yield",@(o[8]),"Created",@(o[9]),"Revision",
:                                 @(o[10]+2),"Used"
        return

item_heading: rem --- Item Heading

        print (printer_dev)""
        if bill$<>"" then
            print (printer_dev)ivm01a.item_id$,@(o[1]),desc$,@(o[2]),ivm01a.lead_time:m5$,
:                              @(o[3]),revcode$,@(o[4]),ivm01a.eoq:m2$,@(o[5]),lot$,
:                              @(o[6]+3),phantom$,@(o[7]),yield$,@(o[8]),created$,
:                              @(o[9]),revision$,@(o[10]),used$
        else
            print (printer_dev)ivm01a.item_id$,@(o[1]),desc$,@(o[2]),ivm01a.lead_time:m5$,
:                              @(o[4]),ivm01a.eoq:m2$,@(o[5]),nb$
        endif

        let l=l+2
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

        def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release

rem --- #endinclude std_end.src

        end
