rem --- Planned Work Order Register (Report Overlay)
rem --- Program mpr_planworegister_o1 v8.0.0 02Feb2008 (mpr_jb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/02/2008 02:45:51)
rem --- Last modified on 28/02/2008 14:19

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock Files

    call pgmdir$+"mpc_openalias.aon",mpe05_dev,"mpe-05","MPE_PEGGING",firm_id$,forecast$,filename$,mpe05a$,status
    if status then goto std_exit
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Initializations

    precision iv_precision
    dim o[9]
    prefix$=cvs(firm_id$+forecast$+whse$,2)
    last$="",l1=0,total=0,done=0
    hr=width-max(len(h7$),len(h8$))
    current_item$=""
    more=1

    call stbl("+DIR_SYP")+"bac_key_template.bbj","MPE_PEGGING","PRIMARY",mpe05a_key_tpl$,rd_table_chans$[all],status$
        
rem --- Resize masks and calculate print positions

    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12
    o[7]=width-m1
    o[6]=o[7]-m2,o[5]=o[6]-9,o[4]=o[5]-m3
    o[3]=o[4]-25
    o[2]=o[3]-4,o[1]=iv_length,dw=o[2]-o[1]

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,mpe05_dev,1,meter_num,status

rem --- Variable definitions

rem --- CURRENT_ITEM$: Current inventory item key
rem --- ITEM_AMT     : Total extended amount for item
rem --- ITEM_QTY     : Total quantity of item required
rem --- QTY          : Quantity required for pegged transaction
rem --- TOTAL        : Sum of extended amounts for report
rem --- Position mpe-05 Pegging Transaction Detail File

    read (mpe05_dev,key=firm_id$,dom=*next)

    dim mpe05a_key$:mpe05a_key_tpl$
    dim mpe05a_rec$:mpe05a$

next_mpe05: rem --- Read next mpe-05 record

    while more

        mpe05a_key$=key(mpe05_dev,end=*break)
        if pos(prefix$=mpe05a_key$)<>1 then break
        if (mpe05a_key.warehouse_id$+mpe05a_key.item_id$+mpe05a_key.trns_date$)<>last$ then
            milestone$=mpe05a_key.warehouse_id$+" "+mpe05a_key.item_id$+" "+fndate$(mpe05a_key.trns_date$)
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            last$=mpe05a_key.warehouse_id$+mpe05a_key.item_id$+mpe05a_key.trns_date$
        endif

rem --- Read next mpe-05 Pegging Transaction Detail record

        mpe05a_rec.firm_id$=mpe05a_key.firm_id$
        mpe05a_rec.forecast$=mpe05a_key.forecast$
        mpe05a_rec.warehouse_id$=mpe05a_key.warehouse_id$
        mpe05a_rec.item_id$=mpe05a_key.item_id$
        mpe05a_rec.trns_date$=mpe05a_key.trns_date$
        mpe05a_rec.source_code$=mpe05a_key.source_code$
        mpe05a_rec.seq_no$=mpe05a_key.seq_no$
        mpe05a_rec$=mpe05a_key$

        read record (mpe05_dev) mpe05a_rec$
        if mpe05a_rec.source_code$<>"H" then continue

rem --- New inventory item?

        if mpe05a_rec.item_id$<>current_item$ then 

rem --- Make sure a bill of materials exists for this item

            bmm01a.firm_id$=firm_id$
            bmm01a.bill_no$=mpe05a_rec.item_id$

            find record (bmm01_dev,key=(bmm01a.firm_id$+bmm01a.bill_no$),dom=*continue) bmm01a$
            if bmm01a.phantom_bill$<>"N" then 

rem --- This item is a phantom bill, skip remaining entries

                read (mpe05_dev,key=mpe05a_rec.firm_id$+mpe05a_rec.forecast$+mpe05a_rec.warehouse_id$+mpe05a_rec.item_id$+$ff$,dom=*continue)

            endif

rem --- Perform level break for new inventory item

            gosub item_break
        endif
rem --- 

        qty=mpe05a_rec.planned_rel
        if !(begdate$<>"" and mpe05a_rec.trns_date$<begdate$) and !(enddate$<>"" and mpe05a_rec.trns_date$>enddate$) then 
            if l+1>l9 then gosub report_heading
            extension=qty*cost
            l=l+1,l1=l1+1
            print (printer_dev)item$,@(o[1]),desc$,@(o[2]),um$,@(o[3]),buyer$,@(o[4]),cost$,@(o[5]),
:           fndate$(mpe05a_rec.reqd_date$),@(o[6]),qty:m2$,@(o[7]),extension:m1$

rem --- Generate (or update if existing) work file record for the date this item is required.

            dim d0$(33)
            d0$(1)=mpe05a_rec.firm_id$+mpe05a_rec.forecast$+mpe05a_rec.warehouse_id$+mpe05a_rec.item_id$+mpe05a_rec.reqd_date$
            mpw05a.firm_id$=mpe05a_rec.firm_id$
            mpw05a.forecast$=mpe05a_rec.forecast$
            mpw05a.warehouse_id$=mpe05a_rec.warehouse_id$
            mpw05a.item_id$=mpe05a_rec.item_id$
            mpw05a.reqd_date$=mpe05a_rec.reqd_date$

            find record (mpw05_dev,key=d0$+$ff$,dom=*next) mpw05a$

            mpw05a.unit_measure$=um$
            mpw05a.trns_date$=mpe05a_rec.trns_date$
            mpw05a.conv_factor=factor
            mpw05a.unit_cost=cost
            mpw05a.qty_required=mpw05a.qty_required+qty

            write record (mpw05_dev,key=d0$+$ff$) mpw05a$

            item_qty=item_qty+qty
            item_amt=item_amt+extension,total=total+extension
            item$=""
            desc$="",um$="",buyer$="",cost$="",qty=0

         endif

rem --- Loop back for next record

    wend

done: rem --- All done

    done=1
    gosub item_break
    if l+2>l9 then gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(o[6]-18),"Totals For Report",@(o[7]),total:m1$
    close (printer_dev)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run pgmdir$+"mpu_woregister.aon"

report_heading: rem --- Report Heading

    l=headings+2
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)h5$,@(hr),h7$
    print (printer_dev)h6$,@(hr),h8$
    print (printer_dev)""
    print (printer_dev)@(o[4]+m3-5),"Unit",@(o[5]+2),"Date",@(o[6]+m2-9),"Quantity"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Description",@(o[2]),"UM",@(o[3]),"Buyer",@(o[4]+m3-5),"Cost",@(o[5]),"Required",@(o[6]+m2-9),"Required",@(o[7]+m1-10),"Extension"
    print (printer_dev)""
    l=l+6
    return

item_break: rem --- Item Break - Print totals for previous item (if any)

    if current_item$<>"" and l1<>0 then 
        print (printer_dev)""
        print (printer_dev)@(o[6]-16),"Totals For Item",@(o[6]),item_qty:m2$,@(o[7]),item_amt:m1$
        print (printer_dev)""
        l=l+3
    endif

rem --- Retrieve item master, warehouse detail and buyer information for this inventory item.

    if !done then 

        dim desc$(dw)
        ivm01a.firm_id$=firm_id$
        ivm01a.item_id$=mpe05a_rec.item_id$
        ivm02a.firm_id$=firm_id$
        ivm02a.warehouse_id$=mpe05a_rec.warehouse_id$
        ivm02a.item_id$=mpe05a_rec.item_id$
        current_item$=ivm01a.item_id$

        item_qty=0
        item_amt=0
        find record (ivm01_dev,key=(ivm01a.firm_id$+ivm01a.item_id$),dom=*next) ivm01a$
        find record (ivm02_dev,key=(ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$),dom=*next) ivm02a$
        item$=current_item$
        desc$(1)=fnitem$(ivm01a.item_desc$,i[2],i[3],i[4]),buyer$=ivm01a.buyer_code$
        cost$=str(ivm02a.unit_cost:m3$)
        um$=ivm01a.purchase_um$
        cost=ivm02a.unit_cost
        factor=ivm01a.conv_factor
        find record (ivm10f_dev,key=(firm_id$+"F"+buyer$),dom=item_break_exit) ivm10f$
        buyer$=ivm10f.buyer_code$+" "+cvs(ivm10f.code_desc$,2)
        l1=0
    endif

item_break_exit:

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        if cvs(q$,2)="" return ""
        if pos("9"<>q$)=0 return q$
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        return testdate$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
