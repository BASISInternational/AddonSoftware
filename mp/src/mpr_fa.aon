rem --- Pegging Report (Input Overlay)
rem --- Program mpr_fa v8.0.0 04Feb2008 (mpr_fa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/04/2008 02:26:20)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
rem 31Dec98 WGH: Use Inventory ABC Analysis Factors, and current Period and Year (310,405,422,570)

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=18,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="apm-01",ids$[1]="APM_VENDMAST"
        files$[2]="APS_PARAMS",ids$[2]="APS_PARAMS"
        files$[3]="arm-01",ids$[3]="ARM_CUSTMAST"
        files$[4]="ARS_PARAMS",ids$[4]="ARS_PARAMS"
        files$[5]="bmm-01",ids$[5]="BMM_BILLMAST"
        files$[6]="GLS_PARAMS",ids$[6]="GLS_PARAMS"
        files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
        files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
        files$[9]="ivm-03",ids$[9]="IVX_ITEMVEND"
        files$[10]="ivm-05",ids$[10]="IVM_ITEMVEND"
        files$[11]="IVC_WHSECODE",ids$[11]="IVC_WHSECODE"
        files$[12]="ivm-12",ids$[12]="IVM_ITEMACT"
        files$[13]="IVS_PARAMS",ids$[13]="IVS_PARAMS"
        files$[14]="IVS_ABCPARAM",ids$[14]="IVS_ABCPARAM"
        files$[15]="mpm-01",ids$[15]="MPM_FORECAST"
        files$[17]="sfe-01",ids$[17]="SFE_WOMASTR"
        files$[18]="sfs-01a",ids$[18]="SFS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        apm01a_dev=channels[1]
        aps01a_dev=channels[2]
        arm01a_dev=channels[3]
        ars01a_dev=channels[4]
        bmm01a_dev=channels[5]
        gls01a_dev=channels[6]
        ivm01a_dev=channels[7]
        ivm02a_dev=channels[8]
        ivm03h_dev=channels[9]
        ivm05a_dev=channels[10]
        ivm10a_dev=channels[11]
        ivm12a_dev=channels[12]
        ivs01a_dev=channels[13]
        ivs01c_dev=channels[14]
        mpm01a_dev=channels[15]
        sfe01a_dev=channels[17]
        sfs01a_dev=channels[18]

rem --- Dimension string templates

        dim apm01a$:templates$[1],aps01a$:templates$[2],arm01a$:templates$[3],
:       ars01a$:templates$[4],bmm01a$:templates$[5],gls01a$:templates$[6],
:       ivm01a$:templates$[7],ivm02a$:templates$[8],ivm03h$:templates$[9],
:       ivm05a$:templates$[10],ivm10a$:templates$[11],ivm12a$:templates$[12],
:       ivs01a$:templates$[13],ivs01c$:templates$[14],mpm01a$:templates$[15],
:       sfe01a$:templates$[17],sfs01a$:templates$[18]

rem --- Assign form input values to local variables

        forecast$=Option!.getOptionData("Forecast Type")
        whse$=Option!.getOptionData("Warehouse Code")
        selection$=Option!.getOptionData("Item Type")
        itemfrom$=Option!.getOptionData("Begin Item")
        itemthru$=Option!.getOptionData("End Item")
        trans$=Option!.getOptionData("Transaction Type")
        include$=Option!.getOptionData("Alternate Vendor")
        begper=num(Option!.getOptionData("From Period"))
        endper=num(Option!.getOptionData("Through Period"))

rem --- Retrieve parameter records

        aps01a_key$=firm_id$+"AP00"
        find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        ivs01c_key$=firm_id$+"IV00"
        find record (ivs01c_dev,key=ivs01c_key$,err=std_missing_params) ivs01c$
        mps01a_key$=firm_id$+"MP00"
        find record (mps01a_dev,key=mps01a_key$,err=std_missing_params) mps01a$
        sfs01a_key$=firm_id$+"SF00"
        find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$


rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$,today$=sys01t.current_date$
        find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
        find record (ivs01c_dev,key=firm_id$+n2$+"02",dom=std_missing_params) ivs01c$
        p[0]=num(ivs01a.item_id_len$)
        ivs01_precision=num(ivs01a.precision$)
        number=1
        p[2]=num(ivs01a.desc_len_1$)
        p[3]=num(ivs01a.desc_len_2$)
        p[4]=num(ivs01a.desc_len_3$)
        find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
        ap=num(aps01a.vendor_size$)
        ar$="N"
        w0$="N"
        ar=0

        call pgmdir$+"adc_application.aon","AR",info$[all]
        ar$=info$[20]
        if ar$="Y" then
            n2$="AR"
            find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
            ar=num(ars01a.customer_size$)
        endif

        call pgmdir$+"adc_application.aon","SF",info$[all]
        sf$=info$[20]
        if sf$="Y" then
            n2$="SF"
            find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
            sf$=ars01a.customer_size$
        endif

        n2$="GL"
        find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) gls01a$

rem --- Initializations

        precision ivs01_precision
        dim description$[number],field[number],position[number],length[number]
        dim forecast$(3),whse$(2),begvend$(6),endvend$(6)
        dim begitem$(20),enditem$(20),j0$(20,"0")
        option$=""
        selection$=""
        whse$(1)=ivs01a.warehous3e_id$
        begper=0,endper=0,mp=26,include$="Y"
        m5$="###0-"
        m5=len(m5$)
        m3=len(ivs01a.cost_mask$)
        vm0=len(aps01a.vendor_output$)
        cm0=len(ars01a.customer_output$)
        h1$=n1$
        h2$=n3$
        call pgmdir$+"adc_sizemask.aon",ivs01a.unit_mask$,m2,10,15
        headings=4
        dim headings$[headings]
        headings$[0]=n1$
        headings$[1]=n3$,l9=59,l=l9+1
        clock$=""
        when$=sysinfo.system_date$,page=0,width=132
        max_period$=gls01a.total_pers$
        curr_period$=ivs01a.current_per$
        curr_year$=ivs01a.current_year$

rem --- run overlay

        run pgmdir$+"mpr_fb.aon"

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

        def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release

rem --- #endinclude std_end.src

        end
