rem --- Production Schedule Listing (Report Overlay)
rem --- Program mpr_prodschdlist_o1 v8.0.0 31Jan2008 (mpr_gb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/31/2008 10:01:10)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Initializations

    precision ivprecision
    dim a0$(27),a1$(100),a[mp],b0$(52),b1$(30),b2$(57),b[11]
    dim c0$(22),c1$(60),c2$(64),c3$(40),c4$(21),c6$(90),c[9]
    dim d0$(24),d1$(64),d[20],o[10]
    h5$="Forecast: "+forecast$
    headings$[1]=headings$[1]+" For "+h5$
    prefix$=cvs(firm_id$+forecast$+whse$+begitem$,2)
    number=endper-begper+2
    x$=" No Bill Of Materials Defined "
    more=1

rem --- Print positions

    o[10]=width-8
    o[9]=o[10]-10
    o[8]=o[9]-10
    o[7]=o[8]-11
    o[6]=o[7]-9
    o[5]=o[6]-m2-1
    o[4]=o[5]-m2-1
    o[3]=o[4]-4
    o[2]=o[3]-m5-1
    o[1]=ivlength
    dw=o[2]-o[1]+1
    x=width-o[1]-15
    numcol=int(x/m2)
    if numcol>number then let numcol=number

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,mpe01a_dev,1,meter_num,status

rem --- Finalize headings

    h6$=" Warehouse: "+cvs(whse$,2)
    if begitem$<> "" then h7$="Beginning Item: "+cvs(begitem$,2) else h7$="Beginning Item: First"
    if enditem$<> "" then h8$="   Ending Item: "+cvs(enditem$,2) else h8$="   Ending Item: Last"
    if buyer$="" then h9$="Buyer Code: All" else h9$="Buyer Code: "+cvs(buyer$,2)
    if begper=1 and endper=mpm01a.no_of_pers then p9$="All Periods" else p9$="Periods "+str(begper)+" Through "+str(endper)
escape
    dim plandate$[number]
    dim nb$(width-o[5],"-")
    begper=begper-1
    endper=endper-1,position=width-m2*numcol,n=0
    hr=width-max(len(h7$),len(h8$))
    nb$(fncenter(x$,len(nb$)),len(x$))=x$
    for x=begper to endper
        date_fields$=field(mpm01a$,"plan_date_0"+str(x+1),err=next_per)
        n=n+1
        plandate$[n]=fndate$(date_fields$)
    next_per:
    next x
    plandate$[number]="  Totals"

rem --- Position mpe-01 production forecast file

    read (mpe01a_dev,key=prefix$,dom=*next)

rem --- Read next mpe-01 production forecast record

    while more 
        read record (mpe01a_dev,end=done) mpe01a$
        if pos(prefix$=mpe01a.firm_id$+mpe01a.forecast$+mpe01a.warehouse_id$+mpe01a.item_id$)<>1 then  goto std_exit
        if cvs(enditem$,2)<>"" then if mpe01a.item_id$>enditem$ then  goto std_exit
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Retreive item and warehouse

        dim c0$(22),c1$(60),c2$(64),c3$(40),c4$(21),c6$(90),c[9]
        dim d0$(24),d1$(64),d[20],desc$(dw)
        ivm01a.firm_id$=firm_id$
        ivm01a.item_id$=mpe01a.item_id$
        ivm02a.firm_id$=firm_id$
        ivm02a.warehouse_id$=whse$
        ivm02a.item_id$=mpe01a.item_id$
        find record (ivm01a_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
        find record (ivm02a_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next) ivm02a$
        if buyer$<>"" then if ivm02a.buyer_code$<>buyer$ then continue
        eoq=ivm01a.eoq
        leadtime=ivm01a.lead_time
        if ivm01a.stock_level$="W" then let eoq=ivm02a.eoq,leadtime=ivm02a.lead_time
        desc$(1)=fnitem$(ivm01a.item_desc$,i[2],i[3],i[4])

rem --- Bill of materials?

        dim b0$(52),b1$(30),b2$(57),b[11]
        revcode$=""
        lot$="",phantom$="",yield$="",created$=""
        revision$=""
        used$=""
        bill$=""
        bmm01a.firm_id$=ivm01a.firm_id$
        bmm01a.bill_no$=ivm01a.item_id$
        find record (bmm01a_dev,key=bmm01a.firm_id$+bmm01a.bill_no$,dom=*next) bmm01a$

rem --- Format bill fields

        revcode$=bmm01a.bill_rev$
        phantom$="No"
        created$=fndate$(bmm01a.create_date$)
        revision$=fndate$(bmm01a.lstrvs_date$)
        used$=fndate$(bmm01a.lstact_date$)
        bill$="Y"
        if bmm01a.phantom_bill$="Y" then let phantom$="Yes"
        if bmm01a.est_yield>999.99 then let bmm01a.est_yield=999.99
        if bmm01a.est_yield<-999.99 then let bmm01a.est_yield=-999.99
        yield$=str(bmm01a.est_yield:"-##0.00")+"%"
        lot$=str(bmm01a.std_lot_size:m2$)

rem --- Print item heading

        if l+5>l9 then gosub report_heading
        gosub item_heading

rem --- Build detail information

        dim amounts[number]
        n=0
        for x=begper to endper
            n=n+1
            amounts[n]=num(field(mpe01a$,"forecast_qty_0"+str(x+1)))
        next x

rem --- Accumulate total for periods being printed

        last=0
        for x=1 to number-1
            amounts[number]=amounts[number]+amounts[x]
        next x

rem --- Print forecast amounts by period for this item

        while more 
            first=last+1
            last=first+numcol-1
            if first>number then break
            if last>number then let last=number
            if l+3>l9 then 
                gosub report_heading
                gosub item_heading
            endif 

rem --- Print dates

            dim buffer$(width)
            buffer$(position-5)="Date"
            n=position
            for x=first to last
                buffer$(n+m2-9)=plandate$[x]
                n=n+m2
            next x
            print (printer_dev)""
            print (printer_dev)buffer$

rem --- Print amounts

            dim buffer$(width)
            buffer$(position-9)="Quantity"
            n=position
            for x=first to last
                buffer$(n)=str(amounts[x]:m2$)
                n=n+m2
            next x
            print (printer_dev)buffer$
            l=l+3
        wend 

rem --- Loop back for next mpe-01 production forecast record
    wend

done: rem --- All done

    goto std_exit

report_heading: rem --- Report Heading

    l=headings+5
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)h6$,@(fncenter(p9$,width)),p9$,@(hr),h7$
    print (printer_dev)h9$,@(hr),h8$
    print (printer_dev)""
    print (printer_dev)@(o[2]),"Lead",@(o[5]+m2-4),"Lot",@(o[6]),"Phantom",@(o[7]),"Estimated",@(o[8]+2),"Bill",@(o[9]+2),"Last",@(o[10]+2),"Last"
    print (printer_dev)"Item",@(o[1]),"Description",@(o[2]),"Time",@(o[3]),"Rev",@(o[4]+m2-4),"EOQ",
:   @(o[5]+m2-5),"Size",@(o[6])," Bill?",@(o[7]+2),"Yield",@(o[8]),"Created",@(o[9]),"Revision",@(o[10]+2),"Used"
    return

item_heading: rem --- Item heading

    print (printer_dev)""
    if bill$<>"" then 
        print (printer_dev)ivm01a.item_id$,@(o[1]),desc$,@(o[2]),leadtime:m5$,@(o[3]),revcode$,@(o[4]),
:       eoq:m2$,@(o[5]),lot$,@(o[6]+3),phantom$,@(o[7]),yield$,@(o[8]),created$,@(o[9]),revision$,@(o[10]),used$
    else
        print (printer_dev)ivm01a.item_id$,@(o[1]),desc$,@(o[2]),leadtime:m5$,@(o[4]),eoq:m2$,@(o[5]),nb$
    endif
    let l=l+2
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fndate$(q$)
        if cvs(q$,2)="" return ""
        if pos("9"<>q$)=0 return q$
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        return testdate$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
