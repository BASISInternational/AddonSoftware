rem --- Closed Work Order Update
rem --- Program sfu_ca v8.0.0 21Jan2008 (sfu_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/21/2008 09:38:24)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    next_overlay$="";rem --- clear next_var and outvect! so bas_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Get user approval to update

    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Get key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY", sfe02_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",  sfe22_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATDTL","PRIMARY",sfe23_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATISD","PRIMARY",sfe25_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFX_WOSCHDXR","PRIMARY",sfm06_key_tpl$,rd_table_chans$[all],status$

rem --- Initialize inventory item update
    call stbl("+DIR_PGM")+"ivc_itemupdt.aon::init",ivfiles[all],ivs01a$,items$[all],refs$[all],refs[all],table_chans$[all],status

rem --- Start progress meter and position header file

    call stbl("+DIR_PGM")+"adc_progress.aon","NC","","","","",0,sfe04_dev,1,meter_num,status
    read (sfe04_dev,key=firm_id$+"  ",dom=*next)

rem --- Read next Closed Work Order Transaction (SFE-CLOSEDWO) record

    while 1
        sfe04_key$=key(sfe04_dev,end=*break)
        if pos(firm_id$+"  "=sfe04_key$)<>1 then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        extract record (sfe01_dev,key=sfe04_key$,dom=remove_sfe04) sfe01a$; rem Advisory locking
        if sfe01a.wo_category$="R" then 
            read (sfe04_dev)
            continue
        endif
        refs$[1]=sfe01a.customer_id$
        refs$[2]=sfe01a.order_no$
        refs$[3]=sfe01a.wo_no$
        refs$[4]=sfe01a.wo_type$

        rem --- Calculate actuals from transactions
            dim d[4],t[5]
            for tran=1 to 3
                switch tran
                    case 1
                        wotran_dev=sft01_dev
                        dim sftran$:fattr(sft01a$)
                        break
                    case 2
                        wotran_dev=sft21_dev
                        dim sftran$:fattr(sft21a$)
                        break
                    case 3
                        wotran_dev=sft31_dev
                        dim sftran$:fattr(sft31a$)
                        break
                swend
                read(wotran_dev,key=sfe04_key$,dom=*next)
                while 1
                    wotran_key$=key(wotran_dev,end=*break)
                    if pos(sfe04_key$=wotran_key$)<>1 then break
                    readrecord(wotran_dev)sftran$
                    switch wotran_dev
                        case sft01_dev
                            rem --- split direct and overhead
                            d[1]=d[1]+sftran.units*sftran.direct_date
                            d[2]=d[2]+sftran.ext_cost-sftran.units*sftran.direct_date                            
                        break
                        case sft21_dev 
                            d[3]=d[3]+sftran.ext_cost
                        break
                        case sft31_dev 
                            d[4]=d[4]+sftran.ext_cost
                        break                       
                    swend
                    d[0]=d[0]+sftran.ext_cost
                wend
            next tran

            rem --- Calculate totals
            t[0]=-(d[0]-sfe01a.cls_cst_todt)
            t[1]=sfe01a.cls_inp_qty*sfe01a.closed_cost

            rem --- Update item on-order and issued quantities
            dim sfm10a$:fattr(sfm10a$)
            find record (sfm10_dev,key=firm_id$+"A"+sfe01a.wo_type$,dom=*next) sfm10a$
            if sfe01a.wo_category$="I" 
                rem --- Determine GL Posting Accounts
                read record (ivm01_dev,key=firm_id$+sfe01a.item_id$,dom=update_onorder_qty) ivm01a$
                if dist_by_item$<>"Y" then let gl_acct$=ivm01a.gl_inv_acct$
                read record (ivm02_dev,key=firm_id$+sfe01a.warehouse_id$+sfe01a.item_id$,dom=update_onorder_qty) ivm02a$
                if dist_by_item$="Y" then gosub item_distribution_code
rem wgh ... where does this get used???
                sfm10a.gl_close_to$=gl_acct$

rem wgh ... can we get rid of this label???
update_onorder_qty: rem --- Update Item ON ORDER Quantity
                action$="OO"
                items$[0]=firm_id$
                items$[1]=sfe01a.warehouse_id$
                items$[2]=sfe01a.item_id$
                items$[3]=""
                refs$[0]=sfe01a.cls_inp_date$
                refs$[3]=sfe01a.wo_no$
                close_qty=sfe01a.cls_inp_qty
                scheduled_wo_total=sfe01a.sch_prod_qty
                closed_prior=sfe01a.qty_cls_todt
                if scheduled_wo_total>=0 then 
                   sign=1 
                else 
                   sign=-1
                endif
                if sfe01a.complete_flg$="Y" then 
                   refs[0]=-(sign*max(0,min(sign*scheduled_wo_total,sign*(scheduled_wo_total-closed_prior))))
                endif
                if sfe01a.complete_flg$="N" and sign*close_qty>=0 then 
                   refs[0]=-(sign*max(0,min(sign*close_qty,sign*(scheduled_wo_total-closed_prior))))
                endif
                if sfe01a.complete_flg$="N" and sign*close_qty<0 then 
                   refs[0]=-(sign*max(sign*close_qty,sign*(close_qty+closed_prior-scheduled_wo_total)))
                endif
                gosub update_inventory

                rem --- Update Item ISSUED Quantity for non-lotted/serialized items
                if sfe01a.lotser_item$<>"Y" 
                    action$="WO"
                    refs[0]=sfe01a.cls_inp_qty
                    refs[1]=sfe01a.closed_cost
                    gosub update_inventory
                endif 
            endif

            rem --- Serial/Lotted
            if sfe01a.lotser_item$="Y" 
                read (sfe06_dev,key=sfe04_key$,dom=*next)
                while 1
                    sfe06_key$=key(sfe06_dev,end=*break)
                    if pos(sfe04_key$=sfe06_key$)<>1 then break
                    extract record (sfe06_dev,key=sfe06_key$) sfe06a$; rem Advisory locking
                    if sfe06a.cls_inp_qty=0 
                        if sfe01a.complete_flg$<>"Y" and sfe06a.complete_flg$<>"Y" 
                            read(sfe06_dev)
                            continue
                        endif
                    else
                        rem --- Update Lot ISSUED Quantity
                        refs[0]=sfe06a.cls_inp_qty
                        refs[1]=sfe06a.closed_cost,items$[3]=sfe06a.lotser_no$
                        gosub update_inventory
                    endif     

                    rem --- History Here
                    if sfe01a.complete_flg$="Y" then let sfe06a.complete_flg$="Y"
                    if sfe06a.complete_flg$="Y" and sfe06a.closed_flag$<>"Y" then 
                        sfe06a.closed_flag$="Y"
                        sfe06a.closed_date$=sfe01a.cls_inp_date$
                    endif
                    if sfe06a.cls_inp_qty<>0 then 
                         sfe06a.qty_cls_totd=sfe06a.qty_cls_totd+sfe06a.cls_inp_qty
                         sfe06a.cls_cst_totd=sfe06a.cls_cst_totd+sfe06a.cls_inp_qty*sfe06a.closed_cost
                         sfe06a.cls_inp_qty=0
                         sfe06a.closed_cost=0
                    endif
                    write record (sfe06_dev) sfe06a$
                wend
            endif

            rem --- Do Variances Here
            if sfe01a.complete_flg$<>"Y" then 
                t[0]=-t[1]
            else
                if sfm10a.stdact_flag$="A" then 
                    t[1]=d[0]-sfe01a.cls_cst_todt
                else
                    rem --- Calc Standards
                    dim e[4]
                    for req=1 to 3
                        switch req
                            case 1
                                sfreq_dev=sfe02_dev
                                dim sfreqa$:fattr(sfe02a$)
				cost_field$="TOT_STD_COST"
                                break
                            case 2
                                sfreq_dev=sfe22_dev
                                dim sfreqa$:fattr(sfe22a$)
				cost_field$="TOTAL_COST"
                                break
                            case 3
                                sfreq_dev=sfe32_dev
                                dim sfreqa$:fattr(sfe32a$)
				cost_field$="TOTAL_COST"
                                break
                        swend
                        read(sfreq_dev,key=sfe04_key$,dom=*next)
                        while 1
                            sfreq_key$=key(sfreq_dev,end=*break)
                            if pos(sfe04_key$=sfreq_key$)<>1 then break
                            readrecord(sfreq_dev)sfreqa$
                            switch sfreq_dev
                                case sfe02_dev
                                    e[1]=e[1]+sfreqa.total_time*sfreqa.direct_rate
                                    e[2]=e[2]+nfield(sfreqa$,cost_field$)-sfreqa.total_time*sfreqa.direct_rate
                                    break
                                case sfe22_dev
                                    let e[3]=e[3]+nfield(sfreqa$,cost_field$)
                                    break
                                case sfe32_dev
                                    let e[4]=e[4]+nfield(sfreqa$,cost_field$)
                                    break                                                           
                            swend 
                            e[0]=e[0]+nfield(sfreqa$,cost_field$)
                        wend
                    next req

                    rem --- Calc Variances
                    precision 2
                    if e[0]=0 then 
                        y0=0
                    else
                        if sfe01a.wo_category$<>"I" and
:                       (sfe01a.sch_prod_qty=sfe01a.qty_cls_todt+sfe01a.cls_inp_qty) or e[0]=0 or 
:                       sfe01a.recalc_flag$="N") then 
                            y0=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt 
                        else    
                            rem --- Pro-Rate Standards
                            if sfe01a.wo_category$<>"I" then 
                                if sfe01a.sch_prod_qty<>0 then 
                                    y0=e[0]*(sfe01a.qty_cls_todt+sfe01a.cls_inp_qty)/sfe01a.sch_prod_qty 
                                else 
                                    y0=0 
                                endif    
                            else
                                y0=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt
                            endif
                            if y0<>e[0] then 
                                if e[0]=0 then 
                                    e[1]=0
                                    e[3]=0
                                    e[4]=0    
                                else
                                    e[1]=e[1]*y0/e[0]
                                    e[3]=e[3]*y0/e[0]
                                    e[4]=e[4]*y0/e[0]
                                endif 
                                e[2]=y0-(e[1]+e[4]+e[3])
                            endif
                        endif
                    endif
                    rem --- Calc Variance
                    t[2]=d[1]-e[1]
                    t[4]=d[3]-e[3]
                    t[5]=d[4]-e[4]
                    t[3]=d[0]-(y0+t[2]+t[4]+t[5]); rem "Any left overs goto OH VNCE
                endif
             endif

rem wgh ... stopped here
escape; rem wgh ... stopped here
rem --- Post G/L Here
            precision 2
            sfm10a.gl_wip_acct$=sfm10a.gl_wip_acct$
            sfm10a.gl_close_to$=sfm10a.gl_close_to$
            sfm10a.gl_dir_lab$=""
            sfm10a.gl_ovh_lab$=""
            sfm10a.gl_pur_acct$=""
            sfm10a.gl_lab_var$= sfm10a.gl_lab_var$
            sfm10a.gl_ovh_var$=sfm10a.gl_ovh_var$
            sfm10a.gl_mat_var$= sfm10a.gl_mat_var$
            sfm10a.gl_sub_var$=sfm10a.gl_sub_var$

            for i=0 to 5
                if t[i]=0 then continue
                account$=y1$(i*10+1,10)
                when$=sfe01a.cls_inp_date$,amount=t[i],units=0
                if sfe01a.wo_category$<>"I" 
                      memo$=sfe01a.description_01$ 
                else 
                      memo$=desc$; rem escape where is desc$ coming from?
                endif      
                ref1$=Translate!.getTranslation("AON_WO_")+sfe01a.wo_no$
                ref2$=Translate!.getTranslation("AON_WHSE_")+sfe01a.warehouse_id$
                ref3$=Translate!.getTranslation("AON_TYPE_")+sfe01a.wo_type$
                gosub glpost
            next i

rem --- Complete It
            flag=0
            if sfe01a.complete_flg$<>"Y"  
                    if sfe01a.closed_date$<sfe01a.cls_inp_date$ then  
                        let sfe01a.closed_date$=sfe01a.cls_inp_date$
                    endif
rem --- Post To Customer Order Line Item (Partial)
                    if sfe01a.wo_category$="N" and ar$="Y" 
                        precision ivs01_precision
                        extract record (ope11_dev,key=firm_id$+"  "+sfe01a.customer_id$+sfe01a.order_no$+sfe01a.line_no$,dom=custom_order_partial) ope11a$
                        ope11a.unit_cost=sfe01a.closed_cost
                        ope11a.qty_shipped=sfe01a.cls_inp_qty
                        write record (ope11_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.line_no$) ope11a$
                        precision 2
                    endif 
custom_order_partial:
                    sfe01a.qty_cls_todt=sfe01a.qty_cls_todt+sfe01a.cls_inp_qty
                    sfe01a.cls_cst_todt=sfe01a.cls_cst_todt+sfe01a.cls_inp_qty*sfe01a.closed_cost,sfe01a.recalc_flag$=""
                    sfe01a.cls_inp_qty=0
                    sfe01a.closed_cost=0
                    flag=1
            endif 
rem --- Complete, Complete
            if flag=0 then
                gosub r_schedule_detail
                sfe01a.qty_cls_todt=sfe01a.qty_cls_todt+sfe01a.cls_inp_qty
                sfe01a.cls_cst_todt=sfe01a.cls_cst_todt+sfe01a.cls_inp_qty*sfe01a.closed_cost
                sfe01a.wo_status$="C"
                sfe01a.closed_date$=sfe01a.cls_inp_date$

rem --- Post To Customer Order (Complete)

                if sfe01a.wo_category$="N" and ar$="Y"  
                    precision ivs01_precision
                    extract record (ope11_dev,key=firm_id$+"  "+sfe01a.customer_id$+sfe01a.order_no$+sfe01a.line_no$,dom=custom_order_complete) ope11a$
                    ope11a.unit_cost=sfe01a.closed_cost
                    ope11a.qty_shipped=sfe01a.cls_inp_qty
                    write record (ope11_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.line_no$) ope11a$
                    precision 2
                endif 
custom_order_complete:
                sfe01a.cls_inp_qty=0
                sfe01a.closed_cost=0

rem --- Reset ivm-02 Committed If All Is Not Issued

                 remove (sfe13_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
                 read (sfe23_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
                 while 1
                    sfe23_key$=key(sfe23_dev,end=*break)
                    if sfe23_key.firm_id$+sfe23_key.wo_location$+sfe23_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
                    read record (sfe23_dev,key=sfe23_key$) sfe23a$
                    if sfe23a.qty_ordered<>sfe23a.tot_qty_iss 
                        action$="UC"
                        items$[0]=firm_id$
                        items$[1]=sfe23a.warehouse_id$
                        items$[2]=sfe23a.item_id$
                        refs[0]=sfe23a.qty_ordered-sfe23a.tot_qty_iss 
                        items$[3]=""
                        gosub update_inventory
                    endif 
                    remove (sfe23_dev,key=sfe23_key$,dom=*next)
                 wend 

                remove (sfe15_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$+"000",dom=*next)
                read (sfe25_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
                dim  sfe25_key$:sfe25_key_tpl$
                while 1
                    sfe25_key$=key(sfe25_dev,end=*break)
                    if sfe25_key.firm_id$+sfe25_key.wo_location$+sfe25_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
                    remove (sfe25_dev,key=sfe25_key$)
                wend 
            endif    
            precision ivs01_precision
            write record (sfe01_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$) sfe01a$
remove_sfe04: 
            remove (sfe04_dev,key=k0$,dom=*next)
    wend

done: rem --- End

        if gl$="Y" then call pgmdir$+"glc_ctlupdate.aon",status
        goto std_exit

update_inventory: rem --- Update Inventory Information
    call pgmdir$+"ivc_itemupdt.aon",action$,ivfiles[all],ivs01a$,items$[all],refs$[all],refs[all],table_chans$[all],status
    return                                                  


item_distribution_code: rem --- Item Distribution Code
        dim arc_distcode$:fattr(arc_distcode$)
        find (arc_distcode_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=label1)arc_distcode$
        let gl_acct$=arc_distcode.gl_inv_acct$
label1:
        return

r_schedule_detail:rem --- Remove Schedule Detail Records
        read (sfm06_dev,key=sfe01a.firm_id$+sfe01a.wo_no$,dom=*next)
        dim  sfm06_key$:sfm06_key_tpl$
        while 1
            let sfm06_key$=key(sfm06_dev,end=remove_sfm05)
            if pos(sfe01a.firm_id$+sfe01a.wo_no$=sfm06_key$)=1 
remove_sfm06:       remove (sfm06_dev,key=sfm06_key$)
            endif 
remove_sfm05: 
            remove (sfm05_dev,key=sfm06_key.firm_id$+sfm06_key.op_code$+sfm06_key.sched_date$+sfm06_key.wo_no$+sfm06_key.op_seq$,dom=remove_sfm06)
        wend 
        return

rem --- Standard G/L Posting Routine

glpost:
        if gl$<>"Y" then  return
        call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,glt14_dev,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,status

        return


disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update: 

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
