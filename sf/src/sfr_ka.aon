rem --- Closed Work Order Summary Register
rem --- Program sfr_ka v8.0.0 04Jan2008 (sfr_ka)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:36:00)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=21,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ARC_DISTCODE",ids$[1]="ARC_DISTCODE"
    files$[2]="ARS_PARAMS",ids$[2]="ARS_PARAMS"
    files$[3]="glm-01",ids$[3]="GLM_ACCT"
    files$[4]="GLS_PARAMS",ids$[4]="GLS_PARAMS"
    files$[5]="glt-14",ids$[5]="GLX_DAILYXRF"
    files$[6]="glw-11",ids$[6]="GLW_DAILYDETAIL"
    files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
    files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
    files$[9]="IVS_PARAMS",ids$[9]="IVS_PARAMS"
    files$[10]="sfe-01",ids$[10]="SFE_WOMASTR"
    files$[11]="sfe-02",ids$[11]="SFE_WOOPRTN"
    files$[12]="sfe-04",ids$[12]="SFE_WOTRANS"
    files$[13]="sfe-22",ids$[13]="SFE_WOMATL"
    files$[14]="sfe-32",ids$[14]="SFE_WOSUBCNT"
    files$[15]="sfm-10",ids$[15]="SFC_WOTYPECD"
    files$[17]="sfs-01a",ids$[17]="SFS_PARAMS"
    files$[18]="sft-01",ids$[18]="SFT_OPNOPRTR"
    files$[19]="sft-21",ids$[19]="SFT_OPNMATTR"
    files$[20]="sft-31",ids$[20]="SFT_OPNSUBTR"
    files$[21]="sfw-07",ids$[22]="SFW_CLSWOXTY"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm10d_dev=channels[1]
    ars01a_dev=channels[2]
    glm01a_dev=channels[3]
    gls01a_dev=channels[4]
    glt14a_dev=channels[5]
    glw11a_dev=channels[6]
    ivm01a_dev=channels[7]
    ivm02a_dev=channels[8]
    ivs01a_dev=channels[9]
    sfe01a_dev=channels[10]
    sfe02a_dev=channels[11]
    sfe04b_dev=channels[12]
    sfe22a_dev=channels[13]
    sfe32a_dev=channels[14]
    sfm10a_dev=channels[15]
    sfs01a_dev=channels[17]
    sft01a_dev=channels[18]
    sft21a_dev=channels[19]
    sft31a_dev=channels[20]
    sfw07a_dev=channels[21]

rem --- Dimension string templates

    dim arm10d$:templates$[1],ars01a$:templates$[2],glm01a$:templates$[3],
:       gls01a$:templates$[4],glt14a$:templates$[5],glw11a$:templates$[6],
:       ivm01a$:templates$[7],ivm02a$:templates$[8],ivs01a$:templates$[9],
:       sfe01a$:templates$[10],sfe02a$:templates$[11],sfe04b$:templates$[12],
:       sfe22a$:templates$[13],sfe32a$:templates$[14],sfm10a$:templates$[15],
:       sfs01a$:templates$[17],sft01a$:templates$[18],
:       sft21a$:templates$[19],sft31a$:templates$[20],sfw07a$:templates$[21]

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

    dim p[2],g[4],desc[3]
    n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$,source$=pgm(-2)
    find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    
    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=num(gls01a.current_year$)
    g[3]=num(gls01a.acct_length$)

    g[2]=fnyy_year(gls01a.current_year$)
    p[0]=num(sfs01a.empl_no_len$)
    p[1]=num(sfs01a.current_per$),p[2]=fnyy_year(sfs01a.current_year$)
    p1=num(ivs01a.precision$)
    r9$="N",ivs01_precision=p1
    if sfs01a.ar_interface$="Y"
        call pgmdir$+"adc_application.aon","AR",info$[all]
        if info$[20]="Y"
            find record (ars01a_dev,key=firm_id$+"AR00",dom=label1) ars01a$
            r9$=ars01a.dist_by_item$
        endif
    endif

label1:

    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11a$,gl$,status
    if status then goto std_exit
    desc[1]=num(ivs01a.desc_len_01$)
    desc[2]=num(ivs01a.desc_len_02$)
    desc[3]=num(ivs01a.desc_len_03$)

rem --- Initialize Data

    dim headings$[2],j$(80,"-"),j0$(10,"0"),u[7]
    fm1$=m1$
    fm2$=m2$,fm3$=m3$; rem "Save full masks"
    headings$[0]=n1$
    headings$[1]=n3$
    h0=132
    headings=2,h=0,when$=sysinfo.system_date$,clock$="",l9=59,l=l9+1
    m0=len(m0$)
    m1=len(m1$),m2=len(m2$),m3=len(m3$),g5=len(g5$)+2
    if g5<10 then let g5=10
    more=1
    if h0-fnw(m1,m2,m3)>16
        while more
            xm1=m1-1
            xm2=m2-1,xm3=m3-1
            call pgmdir$+"adc_sizemask.aon",m1$,m1,8,xm1
            if h0-fnw(m1,m2,m3)>16 then break
            call pgmdir$+"adc_sizemask.aon",m2$,m2,7,xm2
            if h0-fnw(m1,m2,m3)>16 then break
            call pgmdir$+"adc_sizemask.aon",m3$,m3,6,xm3
            if h0-fnw(m1,m2,m3)>16 then break
        wend
    endif

rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOTRANS","PRIMARY",sfe04b_key_tpl$,rd_table_chans$[all],status$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32a_key_tpl$,rd_table_chans$[all],status$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31a_key_tpl$,rd_table_chans$[all],status$

rem --- Additional headings

    fm1=len(fm1$)-m1
    fm2=len(fm2$)-m2,fm3=len(fm3$)-m3
    dim m9$(m1*4,"-"),m8$(g5*3,"-"),j9$(m1*8,"-")
    m9$(1,1)="+"
    m9$(len(m9$))="+",m8$(1,1)="+",m8$(len(m8$))="+"
    m9$(int(len(m9$)/2)-5,10)=" Variance "
    m9=fnw(m1,m2,m3)
    m8$(int(len(m8$)/2)-5,10)=" Variance "

rem --- Options

    title=0
    prompt$="Do You Want To Print The Closed Work Order Summary Register?",prompt=2
    call pgmdir$+"adc_yesno.aon",title,prompt$,prompt,v$,v3
    if v$<>"Y" then goto std_exit

rem --- Final Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe04b_dev,1,meter_num,ignore_status

rem --- Init Read

    precision ivs01_precision
    read (sfe04b_dev,key=firm_id$+"  B",dom=*next)

rem --- Main Read

    dim sfe04b_key$:sfe04b_key_tpl$
    while more

        sfe04b_key$=key(sfe04b_dev,end=done)
        if sfe04b_key.firm_id$<>firm_id$ then break
        if sfe04b_key.record_id_b$<>"B" then break
        read (sfe04b_dev,key=sfe04b_key$)

    rem --- Breaks

        read record (sfe01a_dev,key=sfe04b_key.firm_id$+sfe04b_key.wo_location$+sfe04b_key.wo_no$,dom=*continue) sfe01a$
        if sfe01a.wo_category$="R" then continue
        if sfe01a.wo_category$="I"
            find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=label2) ivm01a$
            sfe01a.description_01$=ivm01a.item_desc(1,min(desc[1],30))
        endif

    label2:

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,ignore_status
        dim b[4],c[4],t[7]

    rem --- Additional Reads

        sfw07a.firm_id$=firm_id$
        sfw07a.wo_type$=sfe01a.wo_type$
        dim y0$(40),y1$(100,"0")
        find record (sfw07a_dev,key=sfw07a.firm_id$+sfw07a.wo_type$,dom=*next) sfw07a$
        find record (sfm10a_dev,key=firm_id$+"A"+sfw07a.wo_type$,dom=label3) sfm10a$
        y0$=x0$
        y1$=x1$
    label3:

        while more

            if sfe01a.wo_category$<>"I" then break
            if r9$<>"Y"
                find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=*break) ivm01a$
                sfm10a.gl_close_to$=ivm01a.gl_inv_acct$
                break
            else
                find record (ivm02a_dev,key=firm_id$+sfe01a.warehouse_id$+sfe01a.item_id$,dom=*break) ivm02a$
                dim i6$(80,"0")
                find record (arm10d_dev,key=firm_id$+"D"+i1$(13,2),dom=*break) arm10d$
                sfm10a.gl_close_to$=i6$(61,10)
            endif

        wend

    rem --- Calculate Standards

        sfreq_dev=sfe02_dev
        dim sfreq_key$:sfe02a_key_tpl$

    while more

        read (sfreq_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
        while more

            sfreq_key$=key(sfreq_dev,end=*break)
            if sfreq_key.firm_id$+sfreq_key.wo_location$+sfreq_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
            read record (sfreq_dev,key=sfreq_key$) sfreq$
            x=pos(sfreq.record_id_a$="BC")+1
            if x<=1
                b[1]=b[1]+sfreq.total_time*sfreq.direct_rate
                b[4]=b[4]+sfreq.tot_std_cost-sfreq.total_time*sfreq.direct_rate; rem "Split Direct & OH
            else
                let b[x]=b[x]+sfreq.tot_std_cost
            endif
            b[0]=b[0]+sfreq.tot_std_cost

        wend

        if sfreq_dev=sfe02_dev
            sfreq_dev=sfe22a_dev
            dim sfreq_key$:sfe22a_key_tpl$
        else
            if sfreq_dev=sfe22a_dev
                sfreq_dev=sfe32a_dev
                dim sfreq_key$:sfe32a_key_tpl$
            endif
        else
            break
        fi

    wend

    rem --- Calculate Actuals

        sftran_dev=sft01a_dev
        dim sftran_key$:sft01a_key_tpl$

    while more

        read (sftran_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
        while more

            sftran_key$=key(sftran_dev,end=*break)
            if sftran_key.firm_id$+sftran_key.wo_location$+sftran_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
            read record (sftran_dev,key=sftran_key$) sftran$
            x=pos(sftran.record_id_o$="MS")+1
            if x<=1
                c[1]=c[1]+sftran.runtime_hrs*sftran.tot_std_cost
                c[4]=c[4]+sftran.total_time-sftran.runtime_hrs*sftran.tot_std_cost; rem "Split Direct & OH
            else
                 let c[x]=c[x]+sftran.total_time
            endif

            c[0]=c[0]+sftran.total_time

        wend

        if sftran_dev=sft01a_dev
            sftran_dev=sft21a_dev
            dim sftran_key$:sft21a_key_tpl$
        else
            if sftran_dev=sft21a_dev
                sftran_dev=sft31a_dev
                dim sftran_key$:sft31a_key_tpl$
            endif
        else
            break
        fi

    wend

    rem --- Calculate Close Value, Variances, etc.

        precision 2
        t[0]=c[0]*1
        t[1]=sfe01a.cls_cst_todt*1,t[2]=t[0]-t[1],t[3]=sfe01a.cls_inp_qty*sfe01a.closed_cost
        if sfe01a.complete_flg$="Y" then let t0=0 else let t0=sfe01a.sch_prod_qty-(sfe01a.qty_cls_todt+sfe01a.cls_inp_qty)
        if sfe01a.complete_flg$<>"N"
            if sfm10a.std_act_flag$<>"A"
                if !(sfe01a.wo_category$<>"I" and (sfe01a.sch_prod_qty=sfe01a.qty_cls_todt+sfe01a.cls_inp_qty or b[0]=0 or sfe01a.recalc_flag$="N"))
                    precision ivs01_precision

                rem --- Pro-Rate Standards If Needed

                    if sfe01a.wo_category$<>"I" then if sfe01a.sch_prod_qty<>0 then let y0=b[0]*(sfe01a.qty_cls_todt+sfe01a.cls_inp_qty)/
:                   sfe01a.sch_prod_qty else let y0=0 else let y0=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt
                    if y0<>b[0]
                        if b[0]<>0
                            b[1]=b[1]*y0/b[0]
                            b[2]=b[2]*y0/b[0]
                            b[3]=b[3]*y0/b[0]
                        else
                            let b[1]=0,b[2]=0,b[3]=0
                        endif
                        b[4]=y0-(b[1]+b[2]+b[3])
                    endif

                else
                     let y0=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt
                endif

            rem --- Now Calculate Variances

                precision 2
                t[4]=round(b[1])-round(c[1])
                t[5]=round(b[2])-round(c[2]),t[6]=round(b[3])-round(c[3])
                t[0]=t[0]*1
                t[1]=t[1]*1,t[2]=t[0]-t[1],t[3]=sfe01a.cls_inp_qty*sfe01a.closed_cost
                t[7]=round(y0)-t[0]-(t[4]+t[5]+t[6]); rem "All left overs in OH Vnce
            else
                 let t[3]=t[2]
            endif
        endif

        dim x1$(30)
        if sfe01a.wo_category$="I" then let x1$(1)=sfe01a.item_id$,x1$(1)=x1$(1,pos("   "=x1$+"   ")-1)+" "+sfe01a.description_01$ 
        else 
            let x1$=sfe01a.description_01$
        endif
        precision ivs01_precision

    rem --- Print

        if l+3>l9 then gosub report_heading
        print (printer_dev)sfe01a.wo_no$,@(9),sfe01a.wo_type$,@(14),sfe01a.wo_category$,@(17),fndate$(sfe01a.cls_inp_date$),"  ",x1$
        print (printer_dev)@(132-m9-fm2),sfe01a.sch_prod_qty:fm2$,@(132-m9+m2*2-fm2),sfe01a.cls_inp_qty:fm2$,@(132-m9+m2*4+2),sfe01a.complete_flg$,
:       @(132-m1*8-fm1),t[0]:fm1$,@(132-m1*6-fm1),t[2]:fm1$,@(132-m1*4-fm1),t[4]:fm1$,@(132-m1*2-fm1),t[5]:fm1$
        print (printer_dev)@(132-m9+m2-fm2),sfe01a.qty_cls_todt:fm2$,@(132-m9+m2*3-fm2),t0:fm2$,@(132-m9+m2*4+5-fm3),sfe01a.closed_cost:fm3$,
:       @(132-m1*7-fm1),t[1]:fm1$,@(132-m1*5-fm1),t[3]:fm1$,@(132-m1*3-fm1),t[7]:fm1$,@(132-m1-fm1),t[6]:fm1$
        for x=0 to 7
            u[x]=u[x]+t[x]
        next x
        l=l+3

    rem --- Sort By Type

        sfw07a.firm_id$=firm_id$
        sfw07a.wo_type$=sfe01a.wo_type$
        find record (sfw07a_dev,key=sfw07a.firm_id$+sfw07a.wo_type$,dom=*next) sfw07a$

        sfw07a.tot_act_cost=sfw07a.tot_act_cost+t[0]
        sfw07a.pri_cls_amt=sfw07a.pri_cls_amt+t[1]
        sfw07a.tot_wip_amt=sfw07a.tot_wip_amt+t[2]
        sfw07a.tot_clsd_amt=sfw07a.tot_clsd_amt+t[3]
        sfw07a.tot_dir_var=sfw07a.tot_dir_var+t[4]
        sfw07a.tot_mat_var=sfw07a.tot_mat_var+t[5]
        sfw07a.tot_sub_var=sfw07a.tot_sub_var+t[6]
        sfw07a.tot_ovhd_var=sfw07a.tot_ovhd_var+t[7]

        write record (sfw07a_dev,key=sfw07a.firm_id$+sfw07a.wo_type$) sfw07a$

    rem --- Sort By G/L

        if sfe01a.complete_flg$<>"Y" then let t[2]=t[3]
        for x=2 to 7
            if t[x]=0 then continue
            if x<4 then let y=(x-2)*10+1 else if x=4 then let y=51 else if x=7 then let y=61 else let y=x*10+21
            if x<>3 then let t[x]=-t[x]
            account$=y1$(y,10)
            gldate$=sfe01a.cls_inp_date$,amount=t[x],units=0
            memo$=sfe01a.description_0a$
            ref1$="WO "+sfe01a.wo_no$,ref2$="Whse "+sfe01a.warehouse_id$
            ref3$="Type "+sfe01a.wo_type$
            gosub glrecap
        next x

    wend

done: rem --- End

    if h=0 then gosub report_heading
    if l+3>l9 then gosub report_heading
    print (printer_dev)@(132-m1*8),j9$,'lf',@(132-m9),"Report Totals: ",
    print (printer_dev)@(132-m1*8-fm1),u[0]:fm1$,@(132-m1*6-fm1),u[2]:fm1$,@(132-m1*4-fm1),u[4]:fm1$,@(132-m1*2-fm1),u[5]:fm1$
    print (printer_dev)@(132-m1*7-fm1),u[1]:fm1$,@(132-m1*5-fm1),u[3]:fm1$,@(132-m1*3-fm1),u[7]:fm1$,@(132-m1-fm1),u[6]:fm1$
    l=l+3

rem --- Now Print By Type

    dim u[7]
    read (sfw07a_dev,key=firm_id$,dom=*next)
    if l+5>l9 then gosub report_heading
    print (printer_dev)'lf','lf',@(10),"Summary By Work Order Type"
    l=l+3
    while more
        k$=key(sfw07a_dev,end=*break)
        if pos(firm_id$=k$)<>1 then break
        read record (sfw07a_dev,key=k$) sfw07a$
        dim x0$(30),x1$(50,"0"); let x0$(6)="*** Not On File ***"
        find record (sfm10a_dev,key=firm_id$+"A"+sfw07a.wo_type$,dom=*next) sfm10a$
        if l+2>l9 then gosub report_heading
        print (printer_dev)@(95-m1*5),sfw07a.wo_type$," ",sfw07a.firm_id$+sfw07a.code_desc$,
        print (printer_dev)@(132-m1*6-fm1),sfw07a.tot_wip_amt:fm1$,@(132-m1*4-fm1),sfw07a.tot_dir_var:fm1$,@(132-m1*2-fm1),sfw07a.tot_mat_var:fm1$
        print (printer_dev)@(132-m1*5-fm1),sfw07a.tot_clsd_amt:fm1$,@(132-m1*3-fm1),sfw07a.tot_ovhd_var:fm1$,@(132-m1-fm1),sfw07a.tot_sub_var:fm1$
        l=l+2

        u[2]=u[2]+sfw07a.tot_wip_amt
        u[2]=u[2]+sfw07a.tot_clsd_amt
        u[2]=u[2]+sfw07a.tot_dir_var
        u[2]=u[2]+sfw07a.tot_mat_var
        u[2]=u[2]+sfw07a.tot_sub_var
        u[2]=u[2]+sfw07a.tot_ovhd_var

    wend

rem --- Report Totals Again

    if l+3>l9 then gosub report_heading
    print (printer_dev)@(132-m1*6),j9$(1,m1*6),'lf',@(98-m1*6),"Report Totals: ",
    print (printer_dev)@(132-m1*6-fm1),u[2]:fm1$,@(132-m1*4-fm1),u[4]:fm1$,@(132-m1*2-fm1),u[5]:fm1$
    print (printer_dev)@(132-m1*5-fm1),u[3]:fm1$,@(132-m1*3-fm1),u[7]:fm1$,@(132-m1-fm1),u[6]:fm1$

rem --- Run next overlay

    update$="sfu_ca.aon"
    width=h0,page=h
    if gl$="Y" then run pgmdir$+"glr_recap.aon"
    run update$

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit

rem --- Heading

    print (printer_dev)"WO #",@(8),"Typ Cat",@(17),"Close Date",@(126-m1*7),"Total",@(124-m1*5),"Current"
    print (printer_dev)@(127-m9+m2),"Prod",@(126-m9+m2*2),"Prior",@(127-m9+m2*3),"This",@(126-m9+m2*4),"Still",@(127-m1*8),"Unit",@(125-m1*7),
:   "Actual",@(126-m1*6),"Prior",@(124-m1*5),"Work In",@(125-m1*4),"Closed",@(132-m1*4),m9$
    print (printer_dev)@(128-m9+m2),"Qty",@(126-m9+m2*2),"Close",@(126-m9+m2*3),"Close",@(127-m9+m2*4),"Open",@(132-m9+m2*4),"Cmp?",@(127-m1*8),
:   "Cost",@(127-m1*7),"Cost",@(125-m1*6),"Closed",@(124-m1*5),"Process",@(126-m1*4),"Value",@(125-m1*3),"Direct",@(125-m1*2),"Ovrhd",@(125-m1),
:   "Mat'ls",@(127),"Subs",'lf'
    l=l+4
    return

glrecap: rem --- Standard G/L Recap Routine

    if gl$="Y"
        call pgmdir$+"glc_glpost.aon",glm01a_dev,glw11a_dev,glt14a_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
