rem --- Work Order Material Issues Register
rem --- Program sfr_da v8.0.0 04Jan2008 (sfr_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:02:56)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=35,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="ARC_TERMCODE",ids$[2]="ARC_TERMCODE"
    files$[3]="ARS_PARAMS",ids$[3]="ARS_PARAMS"
    files$[4]="glm-01",ids$[4]="GLM_ACCT"
    files$[5]="GLS_PARAM",ids$[5]="GLS_PARAMS"
    files$[6]="glt-04",ids$[6]="GLE_DAILYDETAIL"
    files$[7]="glt-14",ids$[7]="GLX_DAILYXRF"
    files$[8]="glw-11",ids$[8]="GLW_DAILYDETAIL"
    files$[9]="ivm-01",ids$[9]="IVM_ITEMMAST"
    files$[10]="ivm-02",ids$[10]="IVM_ITEMWHSE"
    files$[11]="ivm-04",ids$[11]="IVM_ITEMTIER"
    files$[12]="ivm-07",ids$[12]="IVM_LSMASTER"
    files$[13]="ivm-12",ids$[13]="IVM_ITEMACT"
    files$[14]="ivm-17",ids$[14]="IVM_LSACT"
    files$[15]="IVS_PARAMS",ids$[15]="IVS_PARAMS"
    files$[16]="ivt-01",ids$[16]="IVT_LSTRANS"
    files$[17]="ivt-02",ids$[17]="IVX_LSCUST"
    files$[18]="ivt-03",ids$[18]="IVX_LSVEND"
    files$[19]="ivt-04",ids$[19]="IVT_ITEMTRAN"
    files$[20]="ivw-04",ids$[20]="IVW_LFDET"
    files$[21]="ivw-05",ids$[21]="IVW_LFCOST"
    files$[22]="sfe-01",ids$[22]="SFE_WOMASTR"
    files$[23]="sfe-04",ids$[23]="SFE_WOTRANS"
    files$[24]="sfe-13",ids$[24]="SFE_WOMATHDR"
    files$[25]="sfe-14",ids$[25]="SFE_WOLSISSU"
    files$[26]="sfe-15",ids$[26]="SFE_WOMATISH"
    files$[27]="sfe-23",ids$[27]="SFE_WOMATDTL"
    files$[28]="sfe-25",ids$[28]="SFE_WOMATISD"
    files$[29]="sfm-07",ids$[29]="SFX_WOTRANXR"
    files$[30]="sfm-10",ids$[30]="SFC_WOTYPECD"
    files$[31]="sfs-01a",ids$[31]="SFS_PARAMS"
    files$[32]="sft-11",ids$[32]="SFT_OPNLSTRN"
    files$[33]="sft-21",ids$[33]="SFT_OPNMATTR"
    files$[34]="sfw-01",ids$[34]="SFW_ISSUXTYP"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm01a_dev=channels[1]
    arm10d_dev=channels[2]
    ars01a_dev=channels[3]
    glm01a_dev=channels[4]
    gls01a_dev=channels[5]
    glt04a_dev=channels[6]
    glt14a_dev=channels[7]
    glw11a_dev=channels[8]
    ivm01a_dev=channels[9]
    ivm02a_dev=channels[10]
    ivm04a_dev=channels[11]
    ivm07a_dev=channels[12]
    ivm12a_dev=channels[13]
    ivm17a_dev=channels[14]
    ivs01a_dev=channels[15]
    ivt01a_dev=channels[16]
    ivt02a_dev=channels[17]
    ivt03a_dev=channels[18]
    ivt04a_dev=channels[19]
    ivw04a_dev=channels[20]
    ivw05a_dev=channels[21]
    sfe01a_dev=channels[22]
    sfe04d_dev=channels[23]
    sfe13a_dev=channels[24]
    sfe14a_dev=channels[25]
    sfe15a_dev=channels[26]
    sfe23a_dev=channels[27]
    sfe25a_dev=channels[28]
    sfm07a_dev=channels[29]
    sfm10a_dev=channels[30]
    sfs01a_dev=channels[31]
    sft11a_dev=channels[32]
    sft21a_dev=channels[33]
    sfw01a_dev=channels[34]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm10d$:templates$[2],ars01a$:templates$[3],
:       glm01a$:templates$[4],gls01a$:templates$[5],glt04a$:templates$[6],
:       glt14a$:templates$[7],glw11a$:templates$[8],ivm01a$:templates$[9],
:       ivm02a$:templates$[10],ivm04a$:templates$[11],ivm07a$:templates$[12],
:       ivm12a$:templates$[13],ivm17a$:templates$[14],ivs01a$:templates$[15],
:       ivt01a$:templates$[16],ivt02a$:templates$[17],ivt03a$:templates$[18],
:       ivt04a$:templates$[19],ivw04a$:templates$[20],ivw05a$:templates$[21],
:       sfe01a$:templates$[22],sfe04d$:templates$[23],sfe13a$:templates$[24],
:       sfe14a$:templates$[25],sfe15a$:templates$[26],sfe23a$:templates$[27],
:       sfe25a$:templates$[28],sfm07a$:templates$[29],sfm10a$:templates$[30],
:       sfs01a$:templates$[31],sft11a$:templates$[32],sft21a$:templates$[33],
:       sfw01a$:templates$[34],wom10a$:templates$[35]

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

    dim p[2],g[4],desc[3]
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    p[0]=num(ivs01a.item_no_len$)
    ivs01_precision=num(ivs01a.precision),p[1]=num(ivs01a.precision$),p[2]=num(ivs01a.ls_no_len$)
    if pos(ivs01a.lifofifo$="LF")>0 then let lf$="Y"
    g0=num(gls01a.acct_length$)
    p9$=ivs01a.lotser_flag$,op$=sfs01a.ar_interface$,r9$="N"

    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_pers$)
    g[2]=num(gls01a.current_year$)
    g[3]=num(gls01a.acct_length$)
    g[4]=num(gls01a.max_acct_len$)

    g[2]=fnyy_year(gls01a.current_year$)
    if op$="Y"
        call pgmdir$+"adc_application.aon","AR",info$[all]
        op$=info$[20]
        if op$="Y"
            find record (sys01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
            c0=num(ars01a.cust_size$)
            r9$=ars01a.dist_by_item$
        endif
    endif

    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11a$,gl$,status
    if status then goto std_exit
    
    desc[1]=num(ivs01a.desc_len_01$)
    desc[2]=num(ivs01a.desc_len_02$)
    desc[3]=num(ivs01a.desc_len_03$)  
    desclen=desc[1]+desc[2]+desc[3]

rem --- Initialize Data

    dim headings$[2],j$(80,"-"),j1$(40)
    dim s[1]
    h0=132
    h=0,headings=2,when$=sysinfo.system_date$,clock$="",l9=59,l=l9+1
    m1=len(m1$)
    m2=len(m2$),m3=len(m3$)
    headings$[0]=n1$
    headings$[1]=n3$,h2=h0-m2*4-m1-m3
    if p9$="L" then let p8$="Lot Number: " else let p8$="Serial Number: "
    more=1

rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOTRANS","PRIMARY",sfe04d_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATISD","PRIMARY",sfe25a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOLSISSU","PRIMARY",sfe14a_key_tpl$,rd_table_chans$[all],status$

rem --- Options

    prompt$="Do You Want To Print The Materials Issue Register"
    call pgmdir$+"adc_yesno.aon",1,prompt$,2,v$,v3
    if v$<>"Y" then goto std_exit

rem --- Final Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfw01a_dev,1,meter_num,ignore_status
    call pgmdir$+"adc_clearfile.aon",sfw01a_dev
    if lf$="Y"
        call pgmdir$+"adc_clearfile.aon",ivw05a_dev
        call pgmdir$+"adc_clearfile.aon",ivw04a_dev
    endif

rem --- Init Read

    precision ivs01_precision
    read (sfe04d_dev,key=firm_id$+"  D",dom=*next)

rem --- Main Read

    dim sfe04d_key$:sfe04d_key_tpl$
    
    while more

        sfe04d_key$=key(sfe04d_dev,end=*break)
        if sfe04d_key.firm_id$+sfe04d_key.wo_location$+sfe04d_key.record_id_d$<>firm_id$+"  D" then break
        read (sfe04d_dev)

    rem --- WO Header

    next_sfe15a:

        read record (sfe15a_dev,key=sfe04d_key.firm_id$+sfe04d_key.wo_location$+sfe04d_key.wo_no$+"000",dom=*continue) sfe15a$
        read (sfe25a_dev,key=sfe04d_key.firm_id$+sfe04d_key.wo_location$+sfe04d_key.wo_no$,dom=*next)
        find record (sfe01a_dev,key=sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$,dom=*continue) sfe01a$
        if sfe01a.wo_category$="I"
        find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=label1) ivm01a$
        sfe01a.description_1$=ivm01a.item_desc$(1,min(desc[1],30))
        sfe01a.description_2$=ivm01a.item_desc$(31,min(desc[2],30))
    label1:
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        t0=0

    rem --- Additional Reads

        find record (sfm10a_dev,key=firm_id$+"A"+sfe01a.wo_type$,dom=*next) sfm10a$
        if cvs(sfe01a.customer_id$,2)<>""
            if op$="Y" then find record (arm01a_dev,key=firm_id$+sfe01a.customer_id$,dom=*next) arm01a$
        endif
        gosub wo_header

    rem --- Process Details

        dim sfe25a_key$:sfe25a_key_tpl$
        while more

            sfe25a_key$=key(sfe25a_dev,end=*break)
            if sfe25a_key.firm_id$+sfe25a_key.wo_location$+sfe25a_key.wo_no$<>sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$ then break

        next_sfe25a:

            read record (sfe25a_dev) sfe25a$
            if sfe25a.qty_issued=0 then continue
            if lf$="Y"
                gosub lifo_fifo
                sfe25a.issue_cost=icost
            endif

            ivm01a.item_desc$="*** Not On File ***"
            find record (ivm01a_dev,key=firm_id$+sfe25a.item_id$,dom=label2) ivm01a$
            if r9$="N" then let z0$=ivm01a.gl_inv_acct$
        label2:
            if r9$<>"N" then gosub dist_code
            gosub details
            t1=0
            t2=0

        rem --- Serialized ?

            if pos(p9$="LS")<>0 or ivm01a.lotser_item$+ivm01a.inventoried$="YY"

                read (sfe14a_dev,key=sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$+sfe25a.material_seq$,dom=*next)
                
                dim sfe14a_key$:sfe14a_key_tpl$
                while more

                    sfe14a_key$=key(sfe14a_dev,end=*break)
                    if pos(sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$+sfe25a.material_seq$=sfe14a_key.firm_id$+
:                   sfe14a_key.wo_location$+sfe14a_key.wo_no$+sfe14a_key.material_seq$)=1

                    next_sfe14a:
                        read record (sfe14a_dev) sfe14a$
                        gosub serial_detail
                        break

                    endif

                sfe14a_read: rem --- go back to read sfe14a

                wend

                error$=""
                if t1<>sfe25a.qty_issued

                    t9=t9+1
                    error$="* Missing"
                    if p9$="L" then let i=3 else let i=sfe25a.qty_issued-t1
                    if i<0 then let i=abs(i)
                    if l+i>l9 then let l=l9+2; gosub details
                    for x=1 to i
                        gosub serial_detail
                    next x

                endif

            rem --- Finish The Totals

                if l+2>l9 then gosub details
                print (printer_dev)@(h2+m2*3),j$(1,m2-1)," ",j$(1,m3-1)," ",j$(1,m1-1),'lf',@(h2-10),"Total: ",
                l=l+1
                sfe25a.qty_issued=t1
                if sfe25a.qty_issued<>0 then let sfe25a.issue_cost=t2/sfe25a.qty_issued else let sfe25a.issue_cost=0
                gosub label3

            endif

        gl_dist: rem --- G/L Distribution

            precision 2
            account$=z0$
            gldate$=sfe15a.issued_date$,amount=(-sfe25a.qty_issued)*sfe25a.issue_cost,units=0
            memo$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
            ref1$="WO "+sfe01a.wo_no$
            ref2$="Step "+sfe25a.step_no$
            ref3$="Whse "+sfe01a.warehouse_id$
            gosub glrecap
            account$=sfm10a.gl_wip_acct$
            amount=-amount,memo$=cvs(sfe01a.description_01,2)+" "+cvs(sfe01a.description_02,2)
            gosub glrecap

            t0=t0+sfe25a.qty_issued*sfe25a.issue_cost
            precision ivs01_precision

        sfe25a_loop:
        
        wend

    rem --- Work Order Totals

        if l+2>l9 then gosub wo_header
        print (printer_dev)@(h2+m2*4+m3),j$(1,m1),'lf',@(h2),"Work Order Totals: ",@(h2+m2*4+m3),t0:m1$
        l=l+2
        s[0]=s[0]+t0
        t0$=firm_id$+a1$(1,2)
        sfw01a.firm_id$=firm_id$
        sfw01a.wo_type$=sfe15a.wo_type$
        find record (sfw01a_dev,key=t0$,dom=*next) sfw01a$
        sfw01a.act_mat_tot=sfw01a.act_mat_tot+t0
        write record (sfw01a_dev,key=sfw01a.firm_id$+sfw01a.wo_type$) sfw01a$

    sfe15a_loop: rem --- loop back to read sfe25a

    wend

done: rem --- End

    if l+2>l9 then gosub report_heading
    print (printer_dev)@(h2+m2*4+m3),j$(1,m1),'lf',@(h2),"Report Totals: ",@(h2+m2*4+m3),s[0]:m1$

rem --- Totals By Type

    gosub report_heading
    print (printer_dev)"Totals By Work Order Type: ",'lf'
    l=l+2
    dim s[1]
    read (sfw01a_dev,key=firm_id$,dom=*next)

    while more

    next_sfw01a:

        read record (sfw01a_dev,end=*break) sfw01a$
        if pos(firm_id$=fw01a.firm_id$+sfw01a.wo_type$)=1

            find record (sfm10a_dev,key=firm_id$+"A"+sfw01a.wo_type$,dom=*next) sfm10a$
            if l+1>l9 then gosub report_heading
            print (printer_dev)sfw01a.wo_type$,"  ",sfm10a.code_desc$,"  ",
            if gl$="Y" then print (printer_dev)fnmask$(sfm10a.gl_wip_acct$,g5$),
            print (printer_dev)@(35+g0),sfw01a.act_mat_tot:m1$
            l=l+1
            s[0]=s[0]+sfw01a.act_mat_tot

        endif
        
    sfw01a_loop:

    wend

    if l+2>l9 then gosub report_heading
    print (printer_dev)@(35+g0),j1$(1,m1),'lf',@(5),"Totals: ",@(35+g0),s[0]:m1$
    l=l+2
    if t9<>0
        print @(0,3),'cl',@(10,3),t9," Lines Are Missing Serial/Lot #'s, <Enter> To Correct: ",
        v0$="S"
        v1$="",v2$="",v3$="",v4$="",v0=1,v1=69+len(str(t9)),v2=3
        goto std_exit
    endif

rem --- Run next overlay

    update$="sfu_aa.bbx"
    width=h0,page=h
    if gl$="Y" then run pgmdir$+"glr_recap.aon"
    run update$

report_heading: rem --- Report Heading

    l=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit
    return

wo_header: rem --- WO Header

    if l+8>l9 then gosub report_heading
    print (printer_dev)'lf',"WO Number: ",sfe15a.wo_no$,@(23),"Type: ",sfe15a.wo_type$,@(34),"Category: ",@(45),
:   sfe15a.wo_category$,@(60),"Warehouse: ",sfe15a.warehouse_id$,@(83),"Issue Date: ",fndate$(sfe15a.issued_date$),'lf'
    if sfe15a.wo_category$="I" then print (printer_dev)@(1),"Bill No.: ",sfe15a.item_id$,"       ",
    print (printer_dev)"Description: ",sfe01a.description_01$,@(83),"Ordered: ",fndate$(opened_date$),'lf'
    if op$="Y"
        if pos(" "<>sfe01a.customer_id$)>0 then print (printer_dev)"Customer: ",fnmask$(sfe01a.customer_id$,c$),"  ",
:       arm01a.cust_name$,@(60),"Sales Order: ",sfe01a.order_no$,"-",sfe01a.line_number$,'lf'; let l=l+2
    endif

    print (printer_dev)@(h2+m2*2-6),"Prior",@(h2+m2*4-5),"This",@(h2+m2*4+m3-5),"Unit"
    print (printer_dev)"Step Item",@(p[0]+5),"Description",@(p[0]+36),"UM Required",@(h2+m2-6),"Order",@(h2+m2*2-6),
:   "Issue",@(h2+m2*3-4),"Bal",@(h2+m2*4-6),"Issue",@(h2+m2*4+m3-5),"Cost",@(h2+m2*4+m3+m1-6),"Total",'lf'
    l=l+8
    return

details: rem --- Details ...

    if l+2>l9 then gosub wo_header
    desc$=fnitem$(ivm01a.item_id$,desc[1],desc[2],desc[3])
    print (printer_dev)sfe25a.material_seq$," ",sfe25a.item_id$,@(p[0]+5),desc$(1,min(len(desc$),31)),@(p[0]+36),
:   sfe25a.unit_measure$," ",fndate$(sfe25a.require_date$),
    if p9$<>"N"
        if ivm01a.lotser_no$+ivm01a.inventoried$="YY" then print (printer_dev)""
    else

    label3:
        print (printer_dev)@(h2),sfe25a.qty_ordered:m2$,sfe25a.tot_qty_iss:m2$,sfe25a.qty_ordered-sfe25a.tot_qty_iss:m2$,
:   sfe25a.qty_issued:m2$,sfe25a.issue_cost:m3$,sfe25a.qty_issued*sfe25a.issue_cost:m1$
    endif

    l=l+1
    return

serial_detail: rem --- Serialized Detail

    if l+1>l9 then gosub details
    print (printer_dev)@(0),error$,@(p[0]+8),p8$,sfe14a.lotser_no$,@(h2+m2*3),sfe14a.qty_issued:m2$,sfe14a.issue_cost:m3$,
:   sfe14a.qty_issued*sfe14a.issue_cost:m1$
    t1=t1+sfe14a.qty_issued
    t2=t2+sfe14a.qty_issued*sfe14a.issue_cost
    l=l+1
    return

lifo_fifo: rem --- LIFO/FIFO

    q7=sfe25a.issue_cost
    icost=0,lf_date$=sfe15a.issued_date$
    lf_action$=ivs01a.lifofifo$+"I"
    dim lf_item$[10]
    lf_item$[0]=firm_id$
    lf_item$[1]=sfe25a.warehouse_id$,lf_item$[2]=sfe25a.item_id$

rem --- Inquiry On Tier Cost For Returned Items

    if sfe25a.qty_issued<0
        lf_action$(2,1)="R"
        call pgmdir$+"ivc_lf.bbx",lf_action$,"I",lf_date$,lf_channels[all],lf_item$[all],ivs01_precision,abs(sfe25a.qty_issued),q7,ret_cost,status
        q7=ret_cost
    endif

rem --- Report On Tier Cost For Sold Items

    call pgmdir$+"ivc_lf.bbx",lf_action$,"R",lf_date$,lf_channels[all],lf_item$[all],ivs01_precision,abs(sfe25a.qty_issued),q7,ret_cost,status
    if ret_cost<>0 then let icost=ret_cost
    ivw05a.firm_id$=j1$(1,2)
    ivw05a.ar_type$=j1$(3,2)
    ivw05a.customer_id$=j1$(5,6)
    ivw05a.order_no$=j1$(11,7)
    ivw05a.item_id$=sfe25a.item_id$
    ivw05a.line_no$=sfe25a.material_seq$
    write record (ivw05a_dev,key=ivw05a.firm_id$+ivw05a.ar_type$+ivw05a.customer_id$+ivw05a.order_no$+ivw05a.item_id$+ivw05a.line_no$) ivw05a$ 
    return

dist_code: rem --- Item Distribution Code

    find record (ivm02a_dev,key=firm_id$+sfe25a.warehouse_id$+sfe25a.item_id$,dom=label4) ivm02a$
    find record (arm10d_dev,key=firm_id$+"D"+ivm02a.dist_code$,dom=label5) arm10d$
label4:

    z0$=arm10d.gl_inv_acct$
label5:
    return

glrecap: rem --- Standard G/L Recap Routine

    if gl$<>"Y" then goto label6
    call pgmdir$+"glc_glpost.aon",glm0a_dev,glw11a_dev,glt14a_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
label6:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
