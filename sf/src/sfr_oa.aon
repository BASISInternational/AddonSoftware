rem --- Closed WO Variance Report by Period - Parameter Entry
rem --- Program sfr_oa v8.0.0 04Jan2008 (sfr_oa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:37:21)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=24,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[3]="ARS_PARAMS",ids$[3]="ARS_PARAMS"
    files$[4]="GLS_PARAMS",ids$[4]="GLS_PARAMS"
    files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
    files$[6]="ivm-03",ids$[6]="IVX_ITEMPROD"
    files$[7]="IVC_WHSECODE",ids$[7]="IVC_WHSECODE"
    files$[8]="IVS_PARAMS",ids$[8]="IVS_PARAMS"
    files$[9]="sfe-01",ids$[9]="SFE_WOMASTR"
    files$[10]="sfe-02",ids$[10]="SFE_WOOPRTN"
    files$[11]="sfe-03a",ids$[11]="SFX_TYPEWO"
    files$[12]="sfe-22",ids$[12]="SFE_WOMATL"
    files$[13]="sfe-32",ids$[13]="SFE_WOSUBCNT"
    files$[14]="sfm-10",ids$[14]="SFC_WOTYPECD"
    files$[15]="sfs-01a",ids$[15]="SFS_PARAMS"
    files$[16]="sft-01",ids$[16]="SFT_OPNOPRTR"
    files$[17]="sft-03",ids$[17]="SFT_CLSOPRTR"
    files$[18]="sft-21",ids$[18]="SFT_OPNMATTR"
    files$[19]="sft-23",ids$[19]="SFT_CLSMATTR"
    files$[20]="sft-31",ids$[20]="SFT_OPNSUBTR"
    files$[21]="sft-33",ids$[21]="SFT_CLSSUBTR"
    files$[22]="sfw-02",ids$[22]="SFW_VRNCXTYP"
    files$[23]="sfe-03b",ids$[11]="SFX_CUSTWO"
    files$[24]="sfe-03c",ids$[11]="SFX_ITEMWO"
    
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm01a_dev=channels[1]
    ars01a_dev=channels[3]
    gls01a_dev=channels[4]
    ivm01a_dev=channels[5]
    ivm03a_dev=channels[6]
    ivm10a_dev=channels[7]
    ivs01a_dev=channels[8]
    sfe01a_dev=channels[9]
    sfe02a_dev=channels[10]
    sfe03a_dev=channels[11]
    sfe22a_dev=channels[12]
    sfe32a_dev=channels[13]
    sfm10a_dev=channels[14]
    sfs01a_dev=channels[15]
    sft01a_dev=channels[16]
    sft03a_dev=channels[17]
    sft21a_dev=channels[18]
    sft23a_dev=channels[19]
    sft31a_dev=channels[20]
    sft33a_dev=channels[21]
    sfw02a_dev=channels[22]
    sfe03b_dev=channels[23]
    sfe03c_dev=channels[24]

rem --- Dimension string templates

    dim arm01a$:templates$[1],ars01a$:templates$[3],
:       gls01a$:templates$[4],ivm01a$:templates$[5],ivm03a$:templates$[6],
:       ivm10a$:templates$[7],ivs01a$:templates$[8],sfe01a$:templates$[9],
:       sfe02a$:templates$[10],sfe03a$:templates$[11],sfe22a$:templates$[12],
:       sfe32a$:templates$[13],sfm10a$:templates$[14],sfs01a$:templates$[15],
:       sft01a$:templates$[16],sft03a$:templates$[17],sft21a$:templates$[18],
:       sft23a$:templates$[19],sft31a$:templates$[20],sft33a$:templates$[21],
:       sfw02a$:templates$[22],sfe03b$:templates$[23],sfe03c$:templates$[24]

rem --- Assign form input values to local variables

    sequence$=Option!.getOptionData("Selected Report Sequence")
    whse$=Option!.getOptionData("Warehouse Code")
    wofrom$=Option!.getOptionData("Beginning Work Order")
    wothru$=Option!.getOptionData("Ending Work Order")
    billfrom$=Option!.getOptionData("Beginning Bill No")
    billthru$=Option!.getOptionData("Ending Bill No")
    custfrom$=Option!.getOptionData("Beginning Customer")
    custthru$=Option!.getOptionData("Ending Customer")
    wotfrom$=Option!.getOptionData("Beginning Work Order Type")
    wotthru$=Option!.getOptionData("Ending Work Order Type")
    period$=Option!.getOptionData("Selected Print Period")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

    find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    if sfs01a.ar_interface$<>"N"
        find record (sys01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        c0=num(ars01a.cust_size$)
        c1=len(ars01a.cust_output$)
    endif

    g0=num(gls01a.acct_length$)
    g1=num(gls01a.max_acct_len$)
    i9=num(ivs01a.item_id_len$)
    i1=num(ivs01a.precesion$)
    dim p[0]
    p[0]=num(sfs01a.empl_no_len$)
    current_pd=num(sfs01a.current_per$)
    current_yr=fnyy_year(sfs01a.current_year$)
    sfs01a.current_per$=""
    sfs01a.current_year$=""

rem --- Init Data

    h0=132
    headings=4,h=0,when$=sysinfo.system_date$,clock$=""
    dim headings$[headings]
    headings$[0]=n1$
    headings$[1]=n3$
    l9=59
    l=l9+1
    dim j$(80,"-"),j1$(40," "),j0$(20,"0")
    dim a1$(138),desc[3]
    m0=len(m0$)
    m1=len(m1$),m2=len(m2$),g5=len(g5$)
    dim j2$(m1,"-")
    dim g[4]
    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=num(gls01a.current_year$)
    g[3]=num(gls01a.acct_length$)
    g[4]=num(gls01a.max_acct_len$)
    g[2]=fnyy_year(gls01a.current_year$)
    desc[1]=num(ivs01a.desc_len_01$)
    desc[2]=num(ivs01a.desc_len_02$)
    desc[3]=num(ivs01a.desc_len_03$)

rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFX_TYPEWO","PRIMARY",sfe03a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFX_CUSTWO","PRIMARY",sfe03b_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFX_ITEMWO","PRIMARY",sfe03c_key_tpl$,rd_table_chans$[all],status$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32a_key_tpl$,rd_table_chans$[all],status$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31a_key_tpl$,rd_table_chans$[all],status$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSOPRTR","PRIMARY",sft03a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft23a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft33a_key_tpl$,rd_table_chans$[all],status$

rem --- Options

    action=pos(sequence$="WBCT")-1
    switch action
        case 0
            h3$="Work Order Sequence"
            rec$="  ",chan_dev=sfe01a_dev,offset=0
            beging$=wofrom$
            ending$=wothru$
            dim key_tpl$:sfe01a_key_tpl$
            break
        case 1
            h3$="Bill Number Sequence"
            rec$="C",chan_dev=sfe03c_dev,offset=i9+2
            beging$=billfrom$
            ending$=billthru$
            dim key_tpl$:sfe03c_key_tpl$
            break
        case 2
            h3$="Customer Sequence"
            rec$="B",chan_dev=sfe03b_dev,offset=6
            beging$=custfrom$
            ending$=custthru$
            dim key_tpl$:sfe03b_key_tpl$
            break
        case 3
            h3$="Work Order Type Sequence"
            rec$="A",chan_dev=sfe03a_dev,offset=2
            beging$=wotfrom$
            ending$=wotthru$
            dim key_tpl$:sfe03a_key_tpl$
            break
        case default
            break
    swend

rem --- Get the record_id_* field of sfe-03

    if offset<>0
        dim chan_dev_tmpl$:tmpl(chan_dev)
        let fields$=fattr(chan_dev_tmpl$,"")
        let f2$=fields$(pos($0A$=fields$)+1)
        f2$=f2$(1,pos($0A$=f2$)-1)
    endif

    h9$=h3$(1,pos("Seq"=h3$)-2)

rem --- Overlay

    run pgmdir$+"sfr_ob.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
