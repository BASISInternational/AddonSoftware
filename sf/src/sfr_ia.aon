rem --- Work Order Detail Report
rem --- Program sfr_ia v8.0.0 04Jan2008 (sfr_ia)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:35:14)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="ars_params",ids$[3]="ARS_PARAMS"
    files$[4]="bms-01a",ids$[4]="BMS_PARAMS"
    files$[5]="gls_params",ids$[5]="GLS_PARAMS"
    files$[6]="ivm-01",ids$[6]="IVM_ITEMMAST"
    files$[7]="ivc_whsecode",ids$[7]="IVC_WHSECODE"
    files$[8]="ivs_params",ids$[8]="IVS_PARAMS"
    files$[9]="prs-01a",ids$[9]="PRS_PARAMS"
    files$[10]="sfe-01",ids$[10]="SFE_WOMASTR"
    files$[11]="sfe-02",ids$[11]="SFE_WOOPRTN"
    files$[12]="sfe-03",ids$[12]="SFX_TYPEWO"
    files$[13]="sfm-10",ids$[13]="SFC_WOTYPECD"
    files$[14]="sfs-01a",ids$[14]="SFS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    arm01_dev=channels[2]
    ars01a_dev=channels[3]
    bms01a_dev=channels[4]
    gls01a_dev=channels[5]
    ivm01_dev=channels[6]
    ivm10_dev=channels[7]
    ivs01a_dev=channels[8]
    prs01a_dev=channels[9]
    sfe01_dev=channels[10]
    sfe02_dev=channels[11]
    sfe03_dev=channels[12]
    sfm10_dev=channels[13]
    sfs01a_dev=channels[14]

rem --- Dimension string templates

    dim aps01a$:templates$[1],arm01a$:templates$[2],ars01a$:templates$[3],
:       bms01a$:templates$[4],gls01a$:templates$[5],ivm01a$:templates$[6],
:       ivm10a$:templates$[7],ivs01a$:templates$[8],prs01a$:templates$[9],
:       sfe01a$:templates$[10],sfe02a$:templates$[11],sfe03a$:templates$[12],
:       sfm10a$:templates$[13],sfs01a$:templates$[14]

rem --- Assign form input values to local variables

    sel_rep_seq$=Option!.getOptionData("Selected Report Sequence")
    wo_from$=Option!.getOptionData("Beginning Work Order")
    wo_thru$=Option!.getOptionData("Ending Work Order")
    category$=Option!.getOptionData("Selected Work Order Category")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    bms01a_key$=firm_id$+"BM00"
    find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$


rem --- Parameters

    bm$=""
    op$="",po$="",pr$=""
    n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$
    find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
    bm$=sfs01a.bm_interface$
    op$=sfs01a.ar_interface$,po$=sfs01a.po_interface$,pr$=sfs01a.pr_interface$
    sfs01a.amount_mask$=sfs01a.empl_input$
    p6=num(sfs01a.empl_no_len$)
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    if bm$="Y" find record (bms01a_dev,key=firm_id$+"BM00",dom=*next) bms01a$
    if op$="Y"
        find record (ars01a_dev,key=firm_id$+"AR00",dom=label1) ars01a$
        c0=num(ars01a.cust_size$)
        p8=c0,p8$=ars01a.rate_mask$
    endif

label1:

    if po$="Y"
        find record (aps01a_dev,key=firm_id$+"AP00",dom=label2) aps01a$
        p7=num(aps01a.vendor_size$)
    endif


label2:

    if pr$="Y"
        find record (prs01a_dev,key=firm_id$+"PR00",dom=label3) prs01a$
        p6=num(aps01a.empl_no_len$)
    endif

label3:

    if pr$<>"Y" and sfs01a.overhd_type$="P" then let m5=num(sfs01a.def_ovd_rate$)
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    dim p[1],desc[3]
    p[0]=num(sfs01a.item_no_len$)
    p[1]=num(ivs01a.precision$),ivs01_precision=p[1]
    m1=len(m1$)
    m2=len(m2$),m3=len(m3$)
    desc[1]=num(ivs01a.desc_len_01$)
    desc[2]=num(ivs01a.desc_len_02$)
    desc[3]=num(ivs01a.desc_len_03$)

rem --- Init Data

    h0=60
    h=0,h3$=""
    l9=59
    l=l9+1
    dim a0$(55+p[0]),a1$(138),a[11]
    m1=len(m1$)
    m2=len(m2$)
    p0=num(sfs01a.current_per$)
    p1=fnyy_year(sfs01a.current_per$),p0=p0-1; if p0=0 p0=num(gls01a.total_pers$),p1=p1-1; rem "Find LAST PERIOD end date
    call pgmdir$+"adc_perioddates.aon",gls01a_dev,p0,p1,v0$,g9$,status
    sfs01a.current_per$=""
    sfs01a.current_year$=""
    if op$="Y"
        call pgmdir$+"adc_fileopen.aon",1,9,9,files$[all],options$[all],channels[all],batch,status
        if status then goto std_exit
        arm01_dev=channels[9]
    endif

done: rem --- Overlay

    run pgmdir$+"sfr_ib.bbx"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
