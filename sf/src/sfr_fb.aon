rem --- Labor Efficiency Analysis Report - Print
rem --- Program sfr_fb v8.0.0 04Jan2008 (sfr_fb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 10:56:32)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="bmm-08",ids$[1]="BMC_OPCODES"
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivs_params",ids$[3]="IVS_PARAMS"
    files$[4]="sfe-01",ids$[4]="SFE_WOMASTR"
    files$[5]="sfm-02",ids$[5]="SFC_OPRTNCOD"
    files$[6]="sfm-10",ids$[6]="SFC_WOTYPECD"
    files$[7]="sfs-01a",ids$[7]="SFS_PARAMS"
    files$[8]="sfw-05",ids$[8]="SFW_LABOREFF"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    bmm08_dev=channels[1]
    ivm01_dev=channels[2]
    ivs01a_dev=channels[3]
    sfe01_dev=channels[4]
    sfm02_dev=channels[5]
    sfm10_dev=channels[6]
    sfs01a_dev=channels[7]
    sfw05_dev=channels[8]

rem --- Dimension string templates

    dim bmm08a$:templates$[1],ivm01a$:templates$[2],ivs01a$:templates$[3],
:       sfe01a$:templates$[4],sfm02a$:templates$[5],sfm10a$:templates$[6],
:       sfs01a$:templates$[7],sfw05a$:templates$[8]


rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Init Data

    dim dashes$(m9,"-"),h9$(m1*2+m2,"-"),h7$(m1*2+m2),r[7],s[7],t[7],u[7],a[5]
    h9$(1,1)="+"
    h9$(len(h9$),1)="+",h8$=h9$
    h8$(int(len(h8$)/2)-6,12)=" Standards "
    h9$(int(len(h9$)/2)-4,8)=" Actual "
    h6$=h7$
    h7$(3)="Labor",h7$(m2+m1-7)="Direct",h7$(m2+m1*2-9)="Overhead"
    h6$(3)="Hours"
    h6$(m2+m1-6)="Total",h6$(m2+m1*2-6)="Total"
    if datefrom$="" then let x9$="From The First Date" else let x9$="From "+fndate$(datefrom$)
    x9$=x9$+" Through "; if datethru$="" then let x9$=x9$+"Last Date" else let x9$=x9$+fndate$(datethru$)
    if wostatus$="O" then let x8$="Open Work Orders Only" else if wostatus$="C" then let x8$="Closed Work Orders Only" else let x8$="All Work Orders Included"
    headings$[2](1)=x8$
    headings$[2](int(66-len(h3$)/2))=h3$,headings$[2](132-len(x9$))=x9$
    if status<>0 then goto std_exit
    more=1

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfw05_dev,1,meter_num,status

rem --- Init Read

    read (sfw05_dev,key=firm_id$,dom=*next)

 rem --- Main Read

    while more

        k$=key(sfw05_dev,end=*break)
        if pos(firm_id$=k$)<>1 then break
        if k$(3,3)<>t1$ then gosub op_code_subtot
        if subbywo$="Y" then if k$(6,2)<>t2$ then gosub wo_type_code
        read record (sfw05_dev,key=k$) sfw05a$

    rem --- Breaks

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        find record (sfe01_dev,key=firm_id$+"  "+sfw05a.wo_no$) sfe01a$
        if sfe01a.wo_category$="I"
            ivm01a.item_desc$(1)="Not On File"
            find record (ivm01_dev,key=firm_id$+sfe01a.item_id$,dom=*break) ivm01a$
            ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        endif 

    label1: rem --- PRINT

        if l+2>l9 then gosub sub_head
        if sfw01a.actual_hrs<>0 then let variance=sfw01a.std_hrs*100/sfw01a.actual_hrs else let variance=0
        print (printer_dev)sfw05a.wo_number$,"  ",sfe01a.wo_type$,@(99-m9),fndate$(sfw05a.reserved_str$(1)),"  ",fndate$(sfw05a.reserved_str$(4)),@(117-m9),sfw05a.std_hrs:m2$,sfw05a.std_dir_tot:m1$,sfw05a.std_ovhd_tot:m1$," ",sfw05a.actual_hrs:m2$,sfw05a.actual_dir_tot:m1$,sfw05a.actual_ovhd_tot:m1$,sfw05a.std_hrs-sfw05a.actual_hrs:m2$,
        if sfw01a.actual_hrs<>0 then print (printer_dev)variance:"#####.00%", else print (printer_dev)"********",
        if sfe01a.wo_status$="C" then print (printer_dev)"*Cmp*" else print (printer_dev)""
        if sfe01a.wo_category$<>"I" then print (printer_dev)@(2),sfe01a.description$
        if sfe01a.wo_category$="I" then print (printer_dev)ivm01a.item_desc$
        l=l+2
        l0=l0+1,l1=l1+1,l2=l2+1
        for x=0 to 5
            r[x]=r[x]+a[x]
            s[x]=s[x]+a[x],t[x]=t[x]+a[x],u[x]=u[x]+a[x]
        next x
           
    wend 

done: rem --- End

    t9$="E"
    if h=0 then gosub report_heading
    if l+2>l9 then gosub report_heading
    gosub op_code_subtot
    if u[3]<>0 then let u[6]=u[0]*100/u[3] else let u[6]=0
    print (printer_dev)@(117-m9),dashes$
    print (printer_dev)@(0),"Report Total: ",@(117-m9),u[0]:m2$,u[1]:m1$,u[2]:m1$," ",u[3]:m2$,u[4]:m1$,u[5]:m1$,u[0]-u[3]:m2$,u[6]:"#####.00%"

rem --- All Done!!

    run pgmdir$+"sys_ac.bbx"

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)""
    print (printer_dev)@(117-m9),h8$," ",h9$,@(112),"Labor ",@(118),"Efficiency"
    print (printer_dev)@(101-m9),"Begin",@(111-m9),"End",@(117-m9),h7$," ",h7$,@(112),"Hours",@(118),"Variance"
    print (printer_dev)"WO #",@(7),"Type",@(101-m9),"Date",@(111-m9),"Date",@(117-m9),h6$," ",h6$,@(112),"Vnce",@(118),"Percent"
    print (printer_dev)""
    l=l+5
    return
 

sub_head: rem --- Sub Heading


    if l+3>l9 then gosub report_heading
    print (printer_dev)""
    print (printer_dev)"Operation: ",t1$,"  ",opdesc$
    print (printer_dev)""
    l=l+3
    return

label2: rem --- Sub/Sub Heading

    if l+1>l9 then gosub sub_head
    print (printer_dev)"WO Type: ",t2$,"  ",typedesc$
    l=l+1
    return

rem --- W/O Op Code Subtotals Here

    if t0$<>"" 
        if t9$="" then let t9$="T"
        gosub op_code_subtot
        if t9$="T" then let t9$="",t1$="",t2$=""
        if l+2>l9 then gosub sub_head
        if t[3]<>0 then let t[6]=t[0]*100/t[3] else let t[6]=0
        print (printer_dev)@(117-m9),dashes$
        print (printer_dev)@(10),"Department: ",t0$," Totals: ",@(117-m9),t[0]:m2$,t[1]:m1$,t[2]:m1$," ",t[3]:m2$,t[4]:m1$,t[5]:m1$,t[0]-t[3]:m2$,t[6]:"#####.00%"
        l=l+2
    endif

    if t9$<>"" then return
    dim t[7]
    t0$=k$(3,1)
    return

op_code_subtot: rem --- Op Codes Subtotals Here

    if t1$<>"" 
            
        if subbywo$="Y" 
            if t9$="" then let t9$="S"
            gosub wo_type_code
        endif

        if t9$="S" then let t9$="",t2$=""
        if l1>1 
            if l+2>l9 then gosub report_heading
            if s[3]<>0 then let s[6]=s[0]*100/s[3] else let s[6]=0
            print (printer_dev)@(117-m9),dashes$
            print (printer_dev)@(10),"Op Code: ",t1$," Totals: ",@(117-m9),s[0]:m2$,s[1]:m1$,s[2]:m1$," ",s[3]:m2$,s[4]:m1$,s[5]:m1$,s[0]-s[3]:m2$,s[6]:"#####.00%"
            l=l+2
        endif 
        l1=0
        l2=0

    endif 

    if t9$<>"" then return
    dim s[7]
    t1$=k$(3,3)
    if bminstalled$="Y" then find record (bmm08_dev,key=firm_id$+t1$,dom=label3) bmm08a$
    if bminstalled$<>"Y" then find record (sfm02_dev,key=firm_id$+t1$,dom=*next) sfm02a$

label3:

    opdesc$=bmm08a.code_desc(6,pos("   "=bmm08a.code_desc$+"   ")-1)
    gosub sub_head
    return


wo_type_code:  rem --- W/O Type Codes Here

    if t2$<>"" 

        if l2>1 

            if l+3>l9 then gosub sub_head
            if r[3]<>0 then let r[6]=r[0]*100/r[3] else let r[6]=0
            print (printer_dev)@(117-m9),dashes$
            print (printer_dev)@(10),"WO Type: ",t2$," Totals: ",@(117-m9),r[0]:m2$,r[1]:m1$,r[2]:m1$," ",r[3]:m2$,r[4]:m1$,r[5]:m1$,r[0]-r[3]:m2$,r[6]:"#####.00%"
            print (printer_dev)""
            l=l+3

        endif 
        l2=0

    endif 

    if t9$<>"" then return
    if l2<=1
        dim r[7]
        t2$=k$(6,2)
        find record (sfm10_dev,key=firm_id$+"A"+t2$,dom=*next) sfm10a$
        typedesc$=sfm10a.code_desc(6,pos("   "=sfm10a.code_desc$+"   ")-1)
        gosub label2
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

   call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
