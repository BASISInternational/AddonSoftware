rem --- Work Order Material Issues Update
rem --- Program sfu_womatissu v8.0.0 22Mar2012 (wou_aa)
rem --- Created by Codeport Utility (03/22/2012 03:27:26)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0199)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0177)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0182)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0183)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0184)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0191)
rem --- v7.x sys-01 reference [sys01_dev] (Line 0217)
rem --- v7.x administrator reference ["syc_ra.bbx"] (Line 0235)
rem --- BBx reference ["syc_ra.bbx"] (Line 0235)
rem --- BBx reference ["ivc_lf.bbx"] (Line 0305)
rem --- BBx reference ["ivc_ua.bbx"] (Line 0500)

rem --- The following IOLIST's were removed from this program:

rem --- arm10d: iolist ar0$,ar1$
rem --- ars01a: iolist *,*,*,r0$
rem --- gls01a: iolist x$,g1$,g2$,g3$,g4$,g5$,g6$,g7$
rem --- ivm01a: iolist b0$,b1$(1),b2$,b3$,b4$,b5$,b6$,b[all]
rem --- ivm02a: iolist c0$,c1$,c2$,c[all]
rem --- ivm07a: iolist xf0$,xf1$,xf[all]
rem --- ivs01a: iolist p0$,p1$,p2$,p3$,p4$,m0$,m1$,m2$,m3$
rem --- ivt01g: iolist x0$,x1$,x[all]
rem --- ivt04g: iolist l0$(1),l1$(1),l2$(1),l[all]
rem --- woe01a: iolist d0$,d1$,d[all]
rem --- woe13a: iolist a0$,a1$
rem --- woe14a: iolist h0$,h1$,h2$,h[all]
rem --- woe15a: iolist a0$,a1$
rem --- woe23a: iolist r0$,r1$,r0,r1,r2,r3,r4
rem --- woe25a: iolist w0$,w1$,w[all]
rem --- wom07a: iolist m0$
rem --- wom10a: iolist *,z1$(1)
rem --- wot11a: iolist x0$,x1$,x2$,x[all]
rem --- wot21a: iolist y0$,y1$,y[all]

rem --- The following channel references have been identified:

rem --- glm01a: Channel reference (Line 0272)

rem --------------------------------------------------------------------------------
rem --- glt04a: Channel reference (Line 0271)
rem --- glt05a: Channel reference (Line 0270)
rem --- ivm04a: Channel reference (Line 0237)
rem --- ivm12a: Channel reference (Line 0237)
rem --- ivm17a: Channel reference (Line 0236)
rem --- ivt02a: Channel reference (Line 0235)
rem --- ivt03a: Channel reference (Line 0234)
rem --- ivw04a: Channel reference (Line 0235)
rem --- sys01a: Channel reference (Line 0227)
rem --- wos01a: (Generated by CodePort)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=29,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],open_tpls$[files],channels[files]
    files$[1]="arc_distcode",ids$[1]="ARC_DISTCODE"
    files$[2]="ars_params",ids$[2]="ARS_PARAMS"
    files$[3]="glm-01",ids$[3]="GLM_ACCT"
    files$[4]="gls_params",ids$[4]="GLS_PARAMS"
    files$[5]="glt-04",ids$[5]="GLE_DAILYDETAIL"
    files$[6]="glt-05",ids$[6]="GLT_BANKCHECKS"
    files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
    files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
    files$[9]="ivm-04",ids$[9]="IVM_ITEMTIER"
    files$[10]="ivm-07",ids$[10]="IVM_LSMASTER"
    files$[11]="ivm-12",ids$[11]="IVM_ITEMACT"
    files$[12]="ivm-17",ids$[12]="IVM_LSACT"
    files$[13]="ivs_params",ids$[13]="IVS_PARAMS"
    files$[14]="ivt-01",ids$[14]=""
    files$[15]="ivt-02",ids$[15]="IVX_LSCUST"
    files$[16]="ivt-03",ids$[16]="IVX_LSVEND"
    files$[17]="ivt-04",ids$[17]=""
    files$[18]="ivw-04",ids$[18]="IVW_LFDET"
    files$[19]="woe-01",ids$[19]=""
    files$[20]="woe-13",ids$[20]=""
    files$[21]="woe-14",ids$[21]=""
    files$[22]="woe-15",ids$[22]=""
    files$[23]="woe-23",ids$[23]=""
    files$[24]="woe-25",ids$[24]=""
    files$[25]="wom-07",ids$[25]=""
    files$[26]="wom-10",ids$[26]=""
    files$[27]="wos-01a",ids$[27]=""
    files$[28]="wot-11",ids$[28]=""
    files$[29]="wot-21",ids$[29]=""
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],open_tpls$[all],channels[all],batch,status
    if status goto std_exit
    arm10_dev=channels[1]
    ars01_dev=channels[2]
    glm01_dev=channels[3]
    gls01_dev=channels[4]
    glt04_dev=channels[5]
    glt05_dev=channels[6]
    ivm01_dev=channels[7]
    ivm02_dev=channels[8]
    ivm04_dev=channels[9]
    ivm07_dev=channels[10]
    ivm12_dev=channels[11]
    ivm17_dev=channels[12]
    ivs01_dev=channels[13]
    ivt01_dev=channels[14]
    ivt02_dev=channels[15]
    ivt03_dev=channels[16]
    ivt04_dev=channels[17]
    ivw04_dev=channels[18]
    sfe01_dev=channels[19]
    sfe13_dev=channels[20]
    sfe14_dev=channels[21]
    sfe15_dev=channels[22]
    sfe23_dev=channels[23]
    sfe25_dev=channels[24]
    sfm07_dev=channels[25]
    sfm10_dev=channels[26]
    sfs01_dev=channels[27]
    wot11_dev=channels[28]
    sft21_dev=channels[29]

rem --- Dimension string templates

    dim arm10a$:open_tpls$[1],ars01a$:open_tpls$[2],glm01a$:open_tpls$[3],
:       gls01a$:open_tpls$[4],glt04a$:open_tpls$[5],glt05a$:open_tpls$[6],
:       ivm01a$:open_tpls$[7],ivm02a$:open_tpls$[8],ivm04a$:open_tpls$[9],
:       ivm07a$:open_tpls$[10],ivm12a$:open_tpls$[11],ivm17a$:open_tpls$[12],
:       ivs01a$:open_tpls$[13],ivt01a$:open_tpls$[14],ivt02a$:open_tpls$[15],
:       ivt03a$:open_tpls$[16],ivt04a$:open_tpls$[17],ivw04a$:open_tpls$[18],
:       sfe01a$:open_tpls$[19],woe13a$:open_tpls$[20],sfe14a$:open_tpls$[21],
:       sfe15a$:open_tpls$[22],woe23a$:open_tpls$[23],sfe25a$:open_tpls$[24],
:       sfm07a$:open_tpls$[25],sfm10a$:open_tpls$[26],sfs01a$:open_tpls$[27],
:       wot11a$:open_tpls$[28],sft21a$:open_tpls$[29]

rem --- Assign form input values to local variables

    value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    wos01a_key$=firm_id$+"WO00"
    find record (sfs01_dev,key=wos01a_key$,err=std_missing_params) sfs01a$

rem --- Open/Lock Files

rem --- Parameters

    dim p[9],g[4],info$[20],lf_files[10],item$[10]
    find record (sys01_dev,key="T"+fid(0),dom=l9800) sys01t$
    firm_id$=firm_id$
    n1$=sysinfo.firm_name$
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+"IV00",dom=l9800) ivs01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=l9800) gls01a$
    find record (sys01_dev,key=firm_id$+"SF00",dom=l9800) sfs01a$
    g[4]=num(g2$(9,2))
    r9$="N"
    r8$=p3$(17,1)
    call pgmdir$+"adc_application.aon","AR",info$[all]
    p9$(2,1)=info$[20]
    if p9$(2,1)="N" goto l470
    find record (sys01_dev,key=firm_id$+"AR00",dom=l9800) ars01a$
    r9$=r0$(11,1)
l470:
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(3,2))
    p[2]=num(p2$(5,1))
    p[3]=num(p2$(7,2))
    p[5]=num(p4$(1,2))
    p[6]=fnyy_year(p4$(3,2))
    p[7]=num(p2$(9,2))
    p[8]=num(p2$(11,2))
    p[9]=num(p2$(13,2))

rem --- Initializations

    dim b1$(p[7]+p[8]+p[9]),m0$(18)
    u0$=firm_id$
    dim params[3],params$[4],items$[3],refs$[11],refs[5],ivfiles[44]
    params$[0]=sysinfo.system_date$
    params$[1]=sysinfo.user_id$
    params$[2]=p2$
    params$[3]=p3$
    params$[4]=p4$
    params[0]=num(p2$(1,2))
    params[1]=ivs01_precision
    params[2]=num(p2$(7,2))
    ivfiles[0]=sys01_dev
    ivfiles[1]=ivm01_dev
    ivfiles[2]=ivm02_dev
    ivfiles[4]=ivm04_dev
    ivfiles[7]=ivm07_dev
    ivfiles[12]=ivm12_dev
    ivfiles[17]=ivm17_dev
    ivfiles[41]=ivt01_dev
    ivfiles[42]=ivt02_dev
    ivfiles[43]=ivt03_dev
    ivfiles[44]=ivt04_dev

rem --- Additional File Opens

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit

l800: rem --- Options

    v4$="Are You Ready To Update The "+n3$
    call pgmdir$+"adc_yesno.aon",0,v4$,0,v$,v3
    if v$="NO" goto l9900
    if v$<>"YES" goto l800
    if lf$="Y" call pgmdir$+"adc_clearfile.aon",ivw04_dev
    lock (wotrans_dev)
    exit_ctrl=1

    call pgmdir$+"adc_progress.aon","N","","","Updating","",11,0,1,0,ignore_status

rem --- Initial Read

    read (wotrans_dev,key=firm_id$+"  "+"D",dom=*next)

l1100: rem --- Main Read

    k0$=key(wotrans_dev,end=l4000)
    read (wotrans_dev)
    if k0$(1,5)<>firm_id$+"  "+"D" goto l4000
    read record (sfe15_dev,key=k0$(1,4)+k0$(6)+"000",dom=l1100) sfe15a$
    read (sfe25_dev,key=k0$(1,4)+k0$(6),dom=*next)
    w9=1
l1220:
    dim d[11],z1$(g[4],"0"),d0$(30)
    find record (sfe01_dev,key=a0$(1,11),dom=l3900) sfe01a$
    find record (sfm10_dev,key=firm_id$+"A"+d0$(12,2),dom=*next) sfm10a$
    z1$=z1$(1,g[4])

l1300: rem --- Process Issue Details

    k1$=key(sfe25_dev,end=l3000)
    if k1$(1,11)<>a0$(1,11) goto l3000
    dim w[4],b[10],c[16]
    read record (sfe25_dev,key=k1$) sfe25a$
    if w[3]=0 goto l1300
    call pgmdir$+"adc_progress.aon","S","","","",w0$(5,7)+"-"+w0$(12,3),0,0,1,0,ignore_status

rem --- Verify Inventory Item Number

    dim z0$(g[4],"0"),b1$(p[7]+p[8]+p[9])
    find record (ivm01_dev,key=firm_id$+w1$(21,20),dom=l2900) ivm01a$
    find record (ivm02_dev,key=firm_id$+w1$(19,22),dom=l2900) ivm02a$
    v1=c[11]
    if r9$="N" z0$=b6$(1,g[4]); goto l1500
    read record (arm10_dev,key=firm_id$+"D"+c1$(13,2),dom=l1500) arm10d$
    z0$=ar1$(61,g[4])

l1500: rem --- Process LIFO/FIFO ?

    lifo$="N"
    if p3$(3,1)="N" or (pos(p3$(17,1)="LS")>0 and b2$(19,2)="YY") goto l1600
    lifo$="Y"
    lf_files[0]=ivm04_dev
    lf_files[1]=ivw04_dev
    lf_files[2]=ivm02_dev
    action$=p3$(3,1)+"I"
    quantity=abs(w[3])
    cost=w[4]
    type$="R"
    places=ivs01_precision
    lf_date$=a1$(7,3)
    if w[3]<0 action$(2,1)="R"
    item$[0]=firm_id$
    item$[1]=w1$(19,2)
    item$[2]=w1$(21,20)
    call pgmdir$+"ivc_lf.bbx",action$,type$,lf_date$,lf_files[all],item$[all],places,quantity,cost,ret_cost,status
    v1=ret_cost

l1600: rem --- Update ivm-02 Warehouse Record

    if pos(p3$(17,1)="LS")>0 and pos(b2$(19,2)="YY")=1 goto l1700
    gosub get_item_info
    refs[0]=-(w[3])
    refs[1]=v1
    gosub inventory_update

l1700: rem --- G/L Distribution

    precision 2
    if pos(r8$="LS")=0 goto l1760
    if pos(b2$(19,2)="YY")=0 goto l1760
    dim h[1]
    amount=0
    units=0
    read (sfe14_dev,key=w0$,dom=*next)
l1735:
    k1$=key(sfe14_dev,end=l1765)
    if pos(w0$=k1$)<>1 goto l1765
    read record (sfe14_dev,key=k1$) sfe14a$
    amount=amount+(-h[0]*h[1])
    units=units+(-h[0])
    goto l1735
l1760:
    amount=(-w[3])*w[4]
    units=-w[3]
l1765:
    account$=z0$
    v0$=account$
    when$=a1$(7,3)
    memo$=fnitem$(b1$,p[7],p[8],p[9])
    ref1$="WO "+d0$(5,7)
    ref2$="Step "+w1$(7,3)
    ref3$="Whse "+d0$(54,2)
    if lifo$="Y" amount=(-w[3])*v1
    gosub glpost
    account$=z1$
    amount=-amount
    units=-units
    gosub glpost
    precision ivs01_precision

rem --- Open Work Order Transactions

    dim y0$(18),y1$(43),y[11]
    y0$(1)=w0$(1,11)+a1$(7,3)+"M"+$ff$
    y1$(1)=w0$(12,3)+w1$(1,2)
    y1$(22,22)=w1$(19,22)
    y[0]=w[3]
    y[1]=w[4]
    precision 2
    y[2]=w[3]*w[4]
    w9=0
    if lifo$="Y" y[2]=w[3]*v1
    precision ivs01_precision
    read (sft21_dev,key=y0$,dom=*next)
    l$=keyp(sft21_dev,end=l2010)
    if pos(y0$(1,15)=l$)=1 w9=num(l$(16,3),err=*next)+1
l2010:
    y0$(16,3)=str(w9:"000")
    write record (sft21_dev,key=y0$) sft21a$

rem --- Update WO Transaction Cross Reference

    m0$(1,11)=w0$(1,11)
    m0$(12,3)=a1$(7,3)
    m0$(15,1)="M"
    m0$(16,3)=y0$(16,3)
    write record (sfm07_dev,key=m0$) sfm07a$

rem --- Lotted/Serialized Update

    if pos(r8$="LS")=0 goto l2800
    if b2$(19,1)<>"Y" or b2$(20,1)<>"Y" goto l2800
    dim h[1],xf[11]
    read (sfe14_dev,key=w0$,dom=*next)
l2200:
    k1$=key(sfe14_dev,end=l2800)
    if pos(w0$=k1$)<>1 goto l2800
    read record (sfe14_dev,key=k1$) sfe14a$
    if h[0]=0 goto l2790
    gosub update_lotser_record

rem --- WOT-11 Here

    dim x[2],x0$(21)
    x0$(1)=y0$+$ff$
    x1$=" "
    x2$=h1$
    w9=0
    read (wot11_dev,key=x0$,dom=*next)
    l$=keyp(wot11_dev,end=l2450)
    if pos(y0$=l$)=1 w9=num(l$(19,3),err=*next)+1
l2450:
    x0$(19,3)=str(w9:"000")
    x[0]=h[0]
    x[1]=h[1]
    x[2]=x[0]*x[1]
    write record (wot11_dev,key=x0$) wot11a$

rem --- Done With Lot/Serial
l2790: remove (sfe14_dev,key=h0$)

    goto l2200

l2800: rem --- Check On More...

    w[1]=w[1]+w[3]
    w[3]=0
l2840:
    if w[1]>=w[0] goto l2880
    write record (sfe25_dev,key=w0$) sfe25a$
    r0$=w0$(1,11)+w1$(7,3)
    r1$=w1$(1,20+p[0])
    read record (sfe23_dev,key=r0$,dom=*next) woe23a$
    r0=w[0]
    r1=w[1]
    r2=w[2]
    r3=w[3]
    r4=w[4]
    write record (sfe23_dev,key=r0$) woe23a$
    goto l2890
l2880: remove (sfe25_dev,key=w0$,dom=*next)

remove (sfe23_dev,key=w0$(1,11)+w1$(7,3),dom=*next)

l2890:
    goto l1220

l2900: rem --- No Valid Item Code++

    w[3]=0
    goto l2840

l3000: rem --- Update Header

    extract record (sfe01_dev,key=a0$(1,11)) sfe01a$
    if pos(" "<>d0$(25,3))=0 d0$(25,3)=a1$(7,3)
    if d0$(28,3)<a1$(7,3) d0$(28,3)=a1$(7,3)
    write record (sfe01_dev,key=d0$(1,11)) sfe01a$

rem --- Any More Left?

    read (sfe25_dev,key=a0$(1,11),dom=*next)
    k4$=key(sfe25_dev,end=l3200)
    if k4$(1,11)<>a0$(1,11) goto l3200
    goto l3300
l3200: remove (sfe15_dev,key=a0$(1,11)+"000",dom=*next)

remove (sfe13_dev,key=a0$(1,11)+"000",dom=*next)

    goto l3900
l3300:
    a1$(7,3)=""
    write record (sfe15_dev,key=a0$) sfe15a$
    write record (sfe13_dev,key=a0$) woe13a$

l3900: rem --- Remove Record

remove (wotrans_dev,key=k0$,dom=l3990)

    goto l1100

rem --- End

    if gl$="Y" call pgmdir$+"glc_ctlupdate.aon",status
    call pgmdir$+"adc_batchdelete.aon",status
    goto l9900                                                  

rem --- Update Item/Warehouse Information 

    gosub get_item_info
    let refs[0]=-(w[3]),refs[1]=w[4]
    gosub inventory_update
    return                                                  

update_lotser_record: rem --- Update Lot/Serial Information 

    gosub get_item_info
    let items$[3]=h1$(1),refs[0]=-(h[0]),refs[1]=h[1]
    gosub inventory_update
    return                                                  
rem --- Inventory/Action Item Information
get_item_info:                                                  
    let items$[0]=w0$(1,2),items$[1]=w1$(19,2),items$[2]=w1$(21,20)
    let refs$[0]=a1$(7,3),refs$[3]=d0$(5,7),refs$[5]=w0$(12,3),action$="WI"
    let refs$[1]=d0$(34,6),refs$[2]=d0$(40,7),refs$[4]=d0$(12,2)
    let refs$[9]=d0$(56,20)
    return                                                  
rem --- Perform Inventory Update 
inventory_update:
    call pgmdir$+"ivc_ua.bbx",action$,ivfiles[all],params[all],params$[all],items$[all],refs$[all],refs[all],status
    return                                                  
rem --- Standard G/L Posting Routine
glpost:                                                  
    if gl$<>"Y" goto l6990
    call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,glt05_dev,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,status
l6990: return                                                  

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
