rem --- Work Order Pick Slip - Printing
rem --- Program sfr_bb v8.0.0 04Jan2008 (sfr_bb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 02:45:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    precision ivs01_precision

rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open the printer

    textfont!  = new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,10)
    boldfont!  = new java.awt.Font("Times New Roman",java.awt.Font.BOLD,10)
    largefont! = new java.awt.Font("Arial",java.awt.Font.BOLD,26)

    requestAttributes!=new javax.print.attribute.HashPrintRequestAttributeSet()
    requestAttributes!.add(javax.print.attribute.standard.MediaSizeName.NA_LETTER)
    requestAttributes!.add(javax.print.attribute.standard.OrientationRequested.PORTRAIT)

    units=javax.print.attribute.standard.MediaPrintableArea.INCH
    x!=new java.lang.Float(0.0).floatValue()
    y!=new java.lang.Float(0.0).floatValue()
    w!=new java.lang.Float(8.5).floatValue()
    h!=new java.lang.Float(10.5).floatValue()
    a!=new javax.print.attribute.standard.MediaPrintableArea(x!,y!,w!,h!,units)

    requestAttributes!.add(a!)

    left_justify=0
    right_justify=1
    center_justify=2

    myAPI!=BBjAPI()
    myBBjPrinter!=myAPI!.getBBjPrinter(1,err=*next)
    if myBBjPrinter!=null()
        msg_id$="AD_NOPRINTER"
        gosub disp_message
        goto std_exit
    endif

    myBBjPDFPrinter!=BBjAPI()

    myBBjPrinter!.setAttributes(requestAttributes!)
    docPrint!=myBBjPrinter!.getForm(0)

rem --- Init Data

    m9=80-m2*3
rem jpb    if splitline or m2+23+p[0]<m9-m2 then let m9=m9-m2,m9$="Y"
    stepnum=1
    more=1
    flag=0
    backtomain=0

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe04c_dev,1,meter_num,ignore_status

rem --- Init Read

    read (sfe04c_dev,key=firm_id$,dom=*next)

rem --- Main Read

    while more

        old_op_step$=""
        stepnum=1
		flag=0

        while more

            read record (sfe04c_dev,end=*break) sfe04c$
            if pos(firm_id$=sfe04c$)<>1
                flag=1
                break
            endif

        rem --- Get Work Order

            read record (sfe13a_dev,key=sfe04c.firm_id$+sfe04c.wo_location$+sfe04c.wo_no$,dom=*continue) sfe13a$
            read record (sfe01a_dev,key=sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$,dom=*continue) sfe01a$
            find (sfe04d_dev,key=sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$,dom=*break)
			flag=1
        wend

        if flag=0 then break

rem --- Find Customer

		dim arm01a$:fattr(arm01a$)
		arm01a.customer_name$="*** Not On File ***"
		if pos(" "<> sfe01a.customer_id$)<>0
			find record (arm01a_dev,key=firm_id$+sfe01a.customer_id$,dom=*next) arm01a$
		endif

rem --- Find Warehouse

		ivm10c.short_name$="*** Not On File ***"
		find record (ivm10c_dev,key=firm_id$+"C"+sfe13a.warehouse_id$,dom=*next) ivm10c$

rem --- Type

		sfm10a.code_desc$="**** Not On File ****"
		find record (sfm10a_dev,key=firm_id$+"A"+sfe13a.firm_id$,dom=*next) sfm10a$

rem --- Category

        if sfe13a.wo_category$="I" then let z2$="Inventory"
        if sfe13a.wo_category$="N" then let z2$="Non-Stock"
        if sfe13a.wo_category$="R" then let z2$="Recurring"
        h=0

rem --- call bac_documents.bbj to get back a barista document ID

		new_doc_id$=""
		pdf_doc$=""
		call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,"","","I","PDF",docdir$,
:			"pdf",option!.getAlias(),"S",sfe01a.wo_no$,rd_table_chans$[all],"DOC_ID"

    rem --- Details Here

        read (sfw13a_dev,key=sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$,dom=*next)
        head_comm$=""
        gosub get_wo_hdr_cmnts

        dim sfw13a_key$:sfw13a_key_tpl$
        while more
            sfw13a_key$=key(sfw13a_dev,end=*break)
            if sfw13a_key.firm_id$+sfw13a_key.wo_location$+sfw13a_key.wo_no$<>sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$ then break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            op_step$=sfw13a_key.oper_seq_ref$
            k$=sfw13a_key.firm_id$+sfw13a_key.wo_location$+sfw13a_key.wo_no$+sfw13a_key.material_seq$
            read (sfw13a_dev)

            read record (sfe23a_dev,key=sfw13a_key.firm_id$+sfw13a_key.wo_location$+sfw13a_key.wo_no$+sfw13a_key.material_seq$,knum="AO_DISP_SEQ",dom=*continue) sfe23a$
            ivm01a.item_desc$="*** Not On File ***"
            find record (ivm01a_dev,key=firm_id$+sfe23a.item_id$,dom=*next) ivm01a1$
            dx$=ivm01a1.item_desc$
            find record (ivm02a_dev,key=firm_id$+sfe23a.warehouse_id$+sfe23a.item_id$,dom=*next) ivm02a$
            ivm02a.qty_on_hand=ivm02a.qty_on_hand-(sfe23a.qty_ordered-sfe23a.tot_qty_iss)
            gosub details
            stepnum=stepnum+1
        wend
    wend

rem --- All done

    if recs=0
        docPrint!.cancel()
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    docPrint!.preview()
    goto std_exit
rem    close (printer_dev,err=err_Line)
rem    for i=10 to 12; print @(0,i),'cl'; next i

err_Line:

    v4$="Did The Print Lists Pick Correctly "
    call pgmdir$+"adc_yesno.aon",1,v4$,1,v$,v3
    if v$="N" then goto std_exit
    if v$<>"Y" then goto err_Line
    print @(27,7),"Now Clearing Print File...",'cl',
    read (sfe04c_dev,key=firm_id$,dom=*next)

    while more

		read record (sfe04c_dev,end=*break) sfe04c$
        if pos(firm_id$=sfe04c$)=0 break
        read record (sfe13a_dev,key=sfe04c.firm_id$+sfe04c.wo_location$+sfe04c.wo_no$,dom=*continue) sfe13a$
        write record (sfe15a_dev,key=sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$) sfe15a$

    rem --- Remove Committed and Create Issue

        x0=0
        read (sfw13a_dev,key=sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$,dom=*next)

        while more

            sfw13a_key$=key(sfw13a_dev,end=*break)
            if sfw13a_key.firm_id$+sfw13a_key.wo_location$+sfw13a_key.wo_no$<>sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$ then break
            sfw13a_key$=sfw13a_key.firm_id$+sfw13a_key.wo_location$+sfw13a_key.wo_no$+sfw13a_key.material_seq$
            read (sfw13a_dev)
            read record (sfe23a_dev,key=k1$,dom=*continue) sfe23a$

        rem --- Renumber Issue Sequence to Match Pick List

            x0=x0+1
            sfe25a.firm_id$=sfe23a.firm_id$
            sfe25a.wo_location$=sfe23a.wo_location$
            sfe25a.wo_no$=sfe23a.wo_no$
            sfe25a.material_seq$=str(x0:"000")
            sfe23a.step_no$=sfe23a.material_seq$
            write record (sfe25a_dev,key=sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$+sfe25a.material_seq$) sfe25a$

        wend

        remove (sfe04c_dev,key=k$)

    wend

	goto std_exit
	
report_heading: rem --- Report Heading

rem --- create pdf file

    while pdf_doc$ = ""
        prtr_dev = unt
        pdf_doc$ = docdir$ + new_doc_id$ + ".pdf"
        start_block = 1

        if start_block
            open (prtr_dev,err=*endif)pdf_doc$
            close (prtr_dev)
            erase pdf_doc$
        endif

        docPDF! = myBBjPDFPrinter!.getBBjPDFForm(pdf_doc$, requestAttributes!)
    wend

    first_page=0
    lines=0
    page=page+1
	recs=recs+1

    pagePDF!=docPDF!.createPage()
    pagePrint!=docPrint!.createPage(err=std_error)
    page!=pagePrint!

    find record (ivm01a_dev,key=firm_id$+sfe13a.item_id$,dom=*next) ivm01a2$
    if sfe13a.wo_category$="I" then let desc1$=ivm01a2.item_desc$(1,min(desc[1],41)),ivm01a2.item_desc$=description$(desc[1]+1,min(desc[2],42))
    if sfe13a.wo_category$<>"I" then let desc1$=sfe01a.description_01$,desc2$=sfe01a.description_02$
    old_op_step$=op_step$

	while 1
		tmp=fntext2(0,10,568,10,"PICK LIST",largefont!,center_justify,page!)

		tmp=fntext2(0,40,65,40,"Work Order:",textfont!,right_justify,page!)
		tmp=fntext2(70,40,50,40,sfe13a.wo_no$,textfont!,left_justify,page!)
		tmp=fntext(150,40,"Type: "+sfe13a.wo_type$+" "+sfm10a.code_desc$,textfont!,page!)
		tmp=fntext(400,40,"Category: "+sfe13a.wo_category$+" "+z2$,textfont!,page!);rem get category desc$ jpb
		tmp=fntext2(0,52,65,52,"Op Step:",textfont!,right_justify,page!)
		tmp=fntext2(70,52,50,52,op_step$,textfont!,right_justify,page!)
		
		if sfe13a.wo_category$="I" then
			tmp=fntext2(0,64,65,64,"Bill Number:",textfont!,right_justify,page!)
			tmp=fntext2(70,64,65,64,sfe13a.item_id$,textfont!,left_justify,page!)
		endif

		tmp=fntext2(0,76,65,76,"Description:",textfont!,right_justify,page!)
		tmp=fntext2(70,76,65,76,desc1$,textfont!,left_justify,page!)
		tmp=fntext(400,76,"Open Date: "+fndate$(sfe01a.opened_date$),textfont!,page!)

		tmp=fntext(20,88,desc2$,textfont!,page!)
		tmp=fntext(400,88,"Start Date: "+fndate$(sfe01a.eststt_date$),textfont!,page!)
		tmp=fntext2(0,100,65,100,"Drawing #:",textfont!,right_justify,page!)
		tmp=fntext2(70,100,65,100,sfe01a.drawing_no$,textfont!,left_justify,page!)
		tmp=fntext(200,100,"Rev: "+sfe01a.drawing_no$,textfont!,page!)
		tmp=fntext(400,100,"Completion Date: "+fndate$(sfe01a.estcmp_date$),textfont!,page!)

		if pos(" "<>sfe01a.customer_id$)>0 then
			tmp=fntext(20,112,"Customer: "+fnmask$(sfe01a.customer_id$,custmask$)+" "+c1$,textfont!,page!)
			tmp=fntext(200,112,"Order: "+sfe01a.order_no$+"-"+sfe01a.line_no$,textfont!,page!)
		endif
		tmp=fntext2(0,124,65,124,"Warehouse:",textfont!,right_justify,page!)
		tmp=fntext2(70,124,50,124,sfe13a.warehouse_id$+" "+ivm10c.short_name$,textfont!,left_justify,page!)
		tmp=fntext(400,124,"Production Qty: "+str(sfe01a.sch_prod_qty-sfe01a.qty_cls_todt:m2$),textfont!,page!)
		tmp=fnline(0,140,560,140,page!)
		tmp=fntext2(0,148,20,148,"Step",textfont!,left_justify,page!)
		tmp=fntext2(25,148,40,148,"Location",textfont!,left_justify,page!)
		tmp=fntext2(60,148,35,148,"Req'd",textfont!,right_justify,page!)
		tmp=fntext2(100,148,50,148,"Picked",textfont!,right_justify,page!)
		tmp=fntext2(200,148,70,148,"Item",textfont!,left_justify,page!)
		tmp=fntext2(320,148,55,148,"On Hand",textfont!,right_justify,page!)
		tmp=fntext2(380,148,55,148,"Com'd",textfont!,right_justify,page!)
		tmp=fntext2(440,148,55,148,"Avail",textfont!,right_justify,page!)
		tmp=fntext2(500,148,55,148,"On Ord",textfont!,right_justify,page!)

		line_no=148
				
        if page!=pagePDF! then break
        page!=pagePDF!

    wend
    return

details: rem --- Details

    x1=0
    if ivs01a.lotser_flag$="S" and (ivm01a1.lotser_item$+ivm01a1.inventoried$)="YY" then let x1=sfe23a.qty_ordered-sfe23a.tot_qty_iss,x9$="Serial #:"
    if ivs01a.lotser_flag$="L" and (ivm01a1.lotser_item$+ivm01a1.inventoried$)="YY" then let x1=5,x9$="Lot #:"
    if line_no>l9 or op_step$<>old_op_step$ then gosub report_heading
	line_no=line_no+12

	tmp=fntext2(0,line_no,20,line_no,str(stepnum:"000"),textfont!,left_justify,page!)
	tmp=fntext2(25,line_no,40,line_no,ivm02a.location$,textfont!,left_justify,page!)
	tmp=fntext2(60,line_no,35,line_no,str(sfe23a.qty_ordered-sfe23a.tot_qty_iss:m2$),textfont!,right_justify,page!)
	tmp=fnline(100,line_no,50,line_no,page!)
	tmp2=fntext2(200,line_no,50,line_no,sfe23a.item_id$,textfont!,left_justify,page!)
	tmp2=fntext2(320,line_no,55,line_no,str(ivm02a.qty_on_hand:m2$),textfont!,right_justify,page!)
rem    print (printer_dev)@(0),j1$(1,7),@(22+m2),sfe23a.item_id$,
rem    if splitline then print (printer_dev)""
rem    print (printer_dev)@(m9),ivm02a.qty_on_hand:m2$,ivm02a.qty_commit:m2$,ivm02a.qty_on_hand-ivm02a.qty_commit:m2$,
rem    if m9$="Y" then print (printer_dev)ivm02a.qty_on_order:m2$,
rem    print (printer_dev)""
    read record (sfe22b_dev,key=(sfe23a.firm_id$+sfe23a.wo_location$+sfe23a.wo_no$)+sfe23a.material_seq$,dom=*next) sfe22b$
    dim desc$(60)
    desc$(1)=fnitem$(dx$,desc[1],desc[2],desc[3])
rem    print (printer_dev)@(5),"WO Seq: ",sfe23a.material_seq$,@(25+m2),desc$(1,min(desc[1]+desc[2]+desc[3]+2,79-(25+m2)))
    l=l+2+splitline
    gosub material
    if pos(ivs01a.lotser_flag$="LS")=0 then
        return
    endif
    if (ivm01a1.lotser_item$+ivm01a1.inventoried$)<>"YY" then
        return
    endif
    for x=1 to x1
        if l>l9 then gosub report_heading
rem        print (printer_dev)@(14),x9$,"_____________________________"
        l=l+1
    next x

	if page!<>pagePDF!
		page!=pagePDF!
	endif
	
    return

material: rem --- Get comments for this material
return;rem jpb
    dim sfe22b_key$:sfe22b_key_tpl$
    while more
        sfe22b_key$=key(sfe22b_dev,end=*break)
        if pos(sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$+"B"=sfe22b_key$)<>1 then break
        read record (sfe22b_dev) sfe22b$
        if sfe22b.line_type$<>"M" then break 
        if l+1>l9 then gosub report_heading
        print (printer_dev)@(14),sfe22bext_comments$
        l=l+1
    wend
    return

get_wo_hdr_cmnts: rem --- Get header comments for this Work Order
return;rem jpb
    read (sfe22b_dev,key=sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$+"B",dom=*next)
    while more
        sfe22b_key$=key(sfe22b_dev,end=*break)
        if pos(sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$+"B"=sfe22b_key$)<>1 then break
        read record (sfe22b_dev) sfe22b$
        if sfe22b.line_type$<>"M" then break
        head_comm$=head_comm$+sfe22b.ext_comments$
    wend
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fntext: Form Text command

    def fntext(tmp_x,tmp_y,tmp_text$,tmp_font!,page!)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setHorizontalFill(1)
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fntext2: Form Text command

    def fntext2(tmp_x,tmp_y,tmp_x2,tmp_y2,tmp_text$,tmp_font!,tmp_just,page!)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        if tmp_just then tmp!.setSize(tmp_x2,tmp_y2)
        if tmp_just=1 then tmp!.setHorizontalAlignment(tmp!.RIGHT_JUSTIFIED)
        if tmp_just=2 then tmp!.setHorizontalAlignment(tmp!.CENTER_JUSTIFIED)
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnbox: Form Box command

    def fnbox(tmp_x,tmp_y,tmp_w,tmp_h,page!)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnline: Form Line command

    def fnline(tmp_x,tmp_y,tmp_w,tmp_h,page!)
        tmp!=page!.newLine()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnframe: Form Frame command

    def fnframe(tmp_x,tmp_y,tmp_x2,tmp_y2,page!)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmpdim!=new java.awt.Dimension(tmp_x2,tmp_y2)
        tmp!.setSize(tmpdim!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnlogo: Put logo on page

    def fnlogo(page!)
        logo!=page!.newImage()
        logo!.setURL(logofile$,err=*next)
        logo!.setPosition(new java.awt.Point(0,0))
        logo!.setWidth(185)
        logo!.setHeight(68)
        page!.add(logo!)
        return(1)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    release

rem #endinclude std_end.src

    end
