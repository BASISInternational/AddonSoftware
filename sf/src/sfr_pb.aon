rem --- Shop Floor Dispatch Report
rem --- Program sfr_pb v8.0.0 25Jan2008 (sfr_pb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/25/2008 05:27:28)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    headings=5
    dim headings$[headings]
    headings$[0]=n1$
    headings$[1]=n4$,headings$[2]=h0$
    headings$[3]=h1$
    headings$[4]=h2$
    h0=132
    when$=sysinfo.system_date$,clock$=""
    more=1
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSCHDL","PRIMARY",sfm05a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFX_OPRTNWO","PRIMARY",sfe03d_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01a_key_pritpl$,rd_table_chans$[all],status$

rem --- Open Printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Calculate Actual Transactions

    gosub calc_time
    call pgmdir$+"adc_progress.aon","N","","","","",0,sfm05a_dev,1,0,ignore_status

rem --- Position wom-05 detail file

    dim sched[days]
    totset=0
    totrun=0,wtotset=0,wtotrun=0
    prefix$=firm_id$+op_code$
    read (sfm05a_dev,key=prefix$,dom=*next)

rem --- Read next wom-05 detail record

    dim sfm05a_key$:sfm05a_key_pritpl$

    while more

        sfm05a_key$=key(sfm05a_dev,end=done)
        if pos(prefix$=sfm05a_key$)<>1 then goto done
        read record (sfm05a_dev) sfm05a$
        thisseq$=sfm05a_key.op_seq$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

    rem --- Work order still open?

        move=0
        find record (sfe01a_dev,key=sfm05a_key.firm_id$+"  "+sfm05a_key.wo_no$,dom=*continue) sfe01a$
        if pos(sfe01a.wo_status$=status$)=0 then continue
        dim desc$(20)
        desc$(1)=sfe01a.description_01$
        if sfe01a.wo_category$="I" then let desc$(1)=sfe01a.item_id$+" "+desc$
        move=move+sfm05a.move_time
        if ar$="Y" then find record (arm01a_dev,key=firm_id$+sfe01a.customer_id$,dom=*next) arm01a$

    rem --- Shall we print it?

        gosub init_wo
        gosub calc_rem_units
        if begdate$<>"" then if begdate$>sfm05a_key.sched_date$ then continue
        if lastdate$<>"" then if lastdate$<sfm05a_key.sched_date$ then continue
        if sfe01a.priority$>pr_code$ then continue
        if runt=0 and set=0 and move=0 then continue
        if t1$<>sfm05a_key.sched_date$ then gosub week_end_subtot
        if t0$<>sfm05a_key.op_code$ then gosub totals
        gosub det_disp
        totset=totset+set
        totrun=totrun+runt,wtotset=wtotset+set,wtotrun=wtotrun+runt

rem --- Loop back for next record
        
    wend

calc_time: rem --- Calculate Actual Run & Setup Time From Transactions

    wostr$=""
    read (sfe03d_dev,key=firm_id$+"D  "+op_code$,dom=*next)
    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe03d_dev,1,0,ignore_status

    dim sfe03d_key$:sfe03d_key_pritpl$

    flag=0
    while more

        sfe03d_key$=key(sfe03d_dev,end=*break)
        if sfe03d_key.record_id_d$<>"D" then break
        if sfe03d_key.op_code$<>op_code$ then break
        read (sfe03d_dev)
        read (sft01a_dev,key=firm_id$+sfe03d_key.wo_location$+sfe03d_key.wo_no$,dom=*next)

        dim sft01a_key$:sft01a_key_pritpl$

        while more

            flag=0
            sft01a_key$=key(sft01a_dev,end=label2)
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,ignore_status

            if sft01a_key.wo_no$=sfe03d_key.wo_no$
                read record (sft01a_dev) sft01a$
                if sft01a.record_id_o$<>"O" continue
                if sft01a.op_code$<>op_code$ then continue
                units=units+sft01a.units
                set=set+sft01a.setup_time
                flag=1
            else

            label2: rem --- Done With This Work Order

                if units=0 and set=0 then break
                if pos(sfe03d.wo_no$=wostr$,7+2*umask)=0 then let wostr$=wostr$+sfe03d.wo_no$+str(units:umask$)+str(set:umask$)
                units=0
                set=0
            endif

            if flag then continue else break
        wend
    wend

    return

done: rem --- End Of File

    t9$="E"
    if len(sfm05a_key$)=0 gosub report_heading else gosub totals
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)@(2),"Date",@(8),"Pri",@(12),"WO",@(15),"WO",@(18),"W.O.",@(26),"Description",@(47),"At",@(51),"Frm",@(57),"Sched",@(64),"Customer",@(124-m3*2-6),"Setup",@(124-m3-4),"Run",@(119),"Move",@(124),"Critical"
    print (printer_dev)@(2),"Req'd",@(8),"Cod",@(12),"St",@(15),"Tp",@(18),"Number",@(47),"Opn Opn",@(55),"Complete",@(124-m3*2-5),"Time",@(124-m3-5),"Time",@(119),"Time",@(125),"Ratio"
    print (printer_dev)""
    l=l+3
    return

det_disp: rem --- Detail display

    if l+1>l9 then gosub report_heading
    if l0=0 then gosub sub_head
    gosub calc_ratio
    print (printer_dev)@(0),fndate$(sfm05a_key.sched_date$),@(9),sfe01a.priority$,@(12),sfe01a.wo_status$,@(15),sfe01a.wo_type$,@(18),sfe01a.wo_no$,@(26),desc$,@(47),at$,@(51),from$,@(55),fndate$(sfe01a.estcmp_date$),@(64),c1$(1,30),@(124-m3*3),set:m3$,runt:m3$,move:m3$,@(125),critr:m2$,
    if not_found$="Y" then print (printer_dev)"*" else print (printer_dev)""
    l=l+1
    l0=l0+1,l1=l1+1
    return

sub_head: rem --- Sub Heading

    if l+2>l9 then gosub report_heading
    if bm$="Y"
        find record (bmm08_dev,key=firm_id$+sfm05a_key.op_code$,dom=*next) bmm08a$
        print (printer_dev)@(0),"Operation Code: ",sfm05a_key.op_code$," ",bmm08a.code_desc$
    endif
    if bm$<>"Y"
        find record (sfm02a_dev,key=firm_id$+sfm05a_key.op_code$,dom=*next) sfm02a$
        print (printer_dev)@(0),"Operation Code: ",sfm05a_key.op_code$," ",sfm02a.code_desc$
    endif
    print (printer_dev)""
    l=l+2
    return

week_end_subtot: rem --- Week Ending Subtotals

    if !(t1$="" or l1=0)
        dummy$=""
        sdate$=""
        call pgmdir$+"adc_dayweek.aon",t1$,dummy$,dow
        if dow=0
            call pgmdir$+"adc_daydates.aon",t1$,sdate$,7-dow
            if t9$<>"E" then if !(sfm05a_key.sched_date$<=sdate$ and t0$=sfm05a_key.op_code$)
                if l+3>l9 then gosub report_heading
                print (printer_dev)@(124-m3*3),dashes$(1,m3*2)
                print (printer_dev)@(40),"Totals For Week Ending: ",fndate$(sdate$),@(124-m3*3),wtotset:m3$,wtotrun:m3$
                print (printer_dev)""
                l=l+3
                wtotset=0
                wtotrun=0
            endif
        endif
    endif
    t1$=sfm05a_key.sched_date$
    l1=0
    return

totals: rem --- Totals

    gosub week_end_subtot
    if !(t0$="" or l0=0)
        if l+3>l9 then gosub report_heading
        print (printer_dev)@(124-m3*3),dashes$(1,m3*2)
        print (printer_dev)@(124-m3*3),@(40),"Total For Op Code ",t0$,@(124-m3*3),totset:m3$,totrun:m3$
        print (printer_dev)""
        if t9$<>"E" then gosub report_heading
    endif
    totset=0
    totrun=0,l0=0
    t0$=sfm05a_key.op_code$
    return

init_wo: rem --- Initialize WO

    dim runtim[opnmax],setup[opnmax],actrun[opnmax],actset[opnmax],ops$[opnmax,1]
    opind$=""
    x0=0,now=0,at$="",from$="",set=0,runt=0,not_found$=""
    read (sfe02a_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)

    while more
        woekey$=key(sfe02a_dev,end=*break)
        if pos(sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$=woekey$)<>1 then break
        read record (sfe02a_dev) sfe02a$
        if sfe02a.line_type$="S"
            opind$=opind$+sfe02a.op_seq$
            ops$[x0,0]=sfe02a.op_code$,ops$[x0,1]=sfe02a.require_date$,runtim[x0]=sfm05a.runtime_hrs,setup[x0]=sfm05a.setup_time
            x0=x0+1
        endif
    wend

rem --- Calculate Actual

    read (sft01a_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
    while more
        wotkey$=key(sft01a_dev,end=*break)
        if pos(sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$=wotkey$)<>1 then break
        read record (sft01a_dev) sft01a$
        seq$=sft01a.op_seq$
        cod$=sft01a.op_code$
        while more
            indx=pos(seq$=opind$,3)
            if indx<>0 then break
            opind$=opind$+seq$
            ops$[x0,0]=cod$,x0=x0+1
        wend
        indx=int(indx/3)
        actset[indx]=actset[indx]+sft01a.setup_time,actrun[indx]=actrun[indx]+sft01a.units
        if now<indx then let now=indx
    wend

rem ---- This operation?

    if actset[now]+actrun[now]>setup[now]+runtim[now] then let now=now+1
    at$=ops$[now,0]
    thisindx=pos(thisseq$=opind$,3)
    if thisindx=0
        thisindx=int(thisindx/3)
        xfrom=thisindx-1; if xfrom<0 then let xfrom=0
        from$=ops$[xfrom,0]
        runt=runtim[thisindx]
        set=setup[thisindx]
    endif
    return

calc_ratio: rem --- Calculate Critical Ratio

    reqsav$=""
    remsav=0
    x=now*3+1
    ind=int(x/3)
    reqd$=sfm05a_key.sched_date$
    if reqsav$=reqd$
        remain=remsav
    else
        reqsav$=reqd$
        call pgmdir$+"sfc_ba.bbx",schedate$,reqd$,remain,sfm05a_key.op_code$,flag$
        if flag$="Y"
            remain=0
            call pgmdir$+"adc_daydates.aon",schedate$,reqd$,remain
            remain=remain*8
            not_found$="Y"
        endif
        remsav=remain
    endif
    if runt+set<>0
        critr=remain/(runt+set)
        if critr>999.9 then let critr=999.9
        if critr<-999.9 then let critr=-999.9
    endif

    return

calc_rem_units: rem --- Calculate Remaining Units

    unitrun=0
    unitset=0
    wopos=pos(sfe01a.wo_no$=wostr$,7+2*umask)
    if wopos<>0
        unitrun=num(wostr$(wopos+7,umask))
        unitset=num(wostr$(wopos+7+umask,umask))
        runt=runt-unitrun
        set=set-unitset
        if runt>=0
            wostr$(wopos+7,umask)=str(0:umask$)
        else
            unitrun=-runt
            wostr$(wopos+7,umask)=str(unitrun:umask$)
            runt=0
        endif
        if set>=0
            let wostr$(wopos+7+umask,umask)=str(0:umask$)
        else
            let unitset=-unitset,wostr$(wopos+7+umask,umask)=str(unitset:umask$)
            let set=0
        endif
    endif

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
