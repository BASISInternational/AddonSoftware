rem --- Work Order Material Issues Update
rem --- Program sfu_aa_new v8.0.0 06Feb2008 (sfu_aa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/06/2008 03:23:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Parameters

    dim p[9],g[4],lf_files[10],item$[10]
    n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    find record (sfs01a_dev,key=firm_id$+"SF00",dom=std_missing_params) sfs01a$
    g[4]=num(gls01a.max_acct_len$)
    r9$="N",r8$=ivs01a.lotser_flag$
    if sfs01a.ar_interface$="Y" then 
        call pgmdir$+"adc_application.aon","AR",info$[all]
        if info$[20]<>"N" then 
            find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
            r9$=ars01a.dist_by_item$
        endif
    endif
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.vendor_prd_len$),p[2]=num(ivs01a.precision$)
    p[3]=num(ivs01a.ls_no_len$)
    p[5]=num(ivs01a.current_per$),p[6]=fnyy_year(ivs01a.current_year$)
    p[7]=num(ivs01a.desc_len_01)
    p[8]=num(ivs01a.desc_len_02),p[9]=num(ivs01a.desc_len_03)

rem --- Init Data

    more=1


    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOLSIISU","PRIMARY",sfe14a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOTRANS","PRIMARY",sfe04a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATISD","PRIMARY",sfe25a_key_tpl$,rd_table_chans$[all],status$
       
rem --- Additional File Opens
rem --- Background

    print @(0,3),'ce',

rem --- Options
    while more
        v4$="Are You Ready To Update The "+n3$
        call pgmdir$+"adc_yesno.aon",0,v4$,0,v$,v3
        if v$="NO" then goto std_exit
        if v$="YES" then break
    wend
    if lf$="Y" then call pgmdir$+"adc_clearfile.aon",ivw04_dev
    lock (sfe04_dev)
    exit_ctrl=1

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Updating","",11,sfe04_dev,1,0,ignore_status

rem --- Initial Read

    read (sfe04_dev,key=firm_id$+"  "+"D",dom=*next)

rem --- Main Read
    dim sfe04a_key$:sfe04a_key_tpl$
    while more
        sfe04a_key$=key(sfe04_dev,end=*break)
        read (sfe04_dev)
        if sfeo4a_key.firm_id$<>firm_id$ and
:          sfeo4a_key.wo_location$<>"  " and
:          sfeo4a_key.record_id_a$<>"D" then 
           break
        endif
        read record (sfe15_dev,key=sfeo4a_key.firm_id$+sfeo4a_key.wo_location$+sfeo4a_key.wo_no$+"000",dom=*continue) sfe15a$
        read (sfe25_dev,key=sfeo4a_key.firm_id$+sfeo4a_key.wo_location$+sfeo4a_key.wo_no$,dom=*next)
        w9=1
        flag=0
        while more
            dim d[11]
            find record (sfe01_dev,key=(sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$),dom=remove_record) sfe01a$
            find record (sfm10_dev,key=firm_id$+"A"+sfe01a.wo_type$,dom=*next) sfm10a$
            rem  --- Replacing IOLIST variable z1$ in statement z1$=z1$(1,G[4]) with corresponding field names begins
            dim arrfield$[10]
            sfm10_field$=fattr(sfm10a$,"")
            sfm10_field$=sfm10_field$(pos("gl_wip_acct"=cvs(sfm10_field$,8)))
            j=0
            while sfm10_field$<>"" 
                xfield$=sfm10_field$(1,pos($0A$=sfm10_field$)-1)
                arrfield$[j]=xfield$
                j=j+1
                sfm10_field$=sfm10_field$(pos($0A$=sfm10_field$)+1)
                if j*10 >= g[4] then break
            wend
            rem  --- Replacing IOLIST variable z1$ in statement z1$=z1$(1,G[4]) with corresponding field names end

            
rem --- Process Issue Details
            dim sfe25a_key$:sfe25a_key_tpl$
            while more
                flag=2
                sfe25a_key$=key(sfe25_dev,end=*break)
                if sfe25a_key.firm_id$<>sfe15a.firm_id$ and 
:                  sfe25a_key.wo_location$<>sfe15a.wo_location$ and 
:                  sfe25a_key.wo_no$<>sfe15a.wo_no$ then 
                   flag=1
                   break
                endif
                read record (sfe25_dev,key=sfe25a_key$) sfe25a$
                if sfe25a.qty_issued<>0 then flag=0; break
            wend
            if flag=2 then break
            if flag=0 then 
                call pgmdir$+"adc_progress.aon","S","","","",sfe25a.wo_no$+"-"+sfe25a.material_seq$,0,0,1,0,ignore_status

rem --- Verify Inventory Item Number

                dim z0$(g[4],"0"),b1$(p[7]+p[8]+p[9])
                find record (ivm01_dev,key=firm_id$+sfe25a.item_id$,dom=no_valid_itm_code) ivm01a$
                find record (ivm02_dev,key=firm_id$+sfe25a.warehouse_id$+sfe25a.item_id$,dom=no_valid_itm_code) ivm02a$
                v1=ivm02a.unit_cost
                dim reserved_str$(g[4])
                reserved_str$(1)=ivm01a.reserved_str$
                if r9$="N" then 
                    z0$=reserved_str$
                else
                    read record (arm10_dev,key=firm_id$+"D"+ivm02a.dist_code$,dom=process_lifo_fifo) arm10d$
                    z0$=arm10d.gl_inv_acct$
                endif
rem --- Process LIFO/FIFO ?
process_lifo_fifo:
                lifo$="N"
                if ivs01a.lifofifo$<>"N" and (pos(ivs01a.lotser_flag$="LS")<=0 or (ivm01a.lotser_item$<>"Y" and ivm01a.inventoried$<>"Y")) then 
                    lifo$="Y"
                    lf_files[0]=ivm04_dev
                    lf_files[1]=ivw04_dev,lf_files[2]=ivm02_dev
                    action$=ivs01a.lifofifo$+"I"
                    quantity=abs(sfe25a.qty_issued),cost=sfe25a.issue_cost
                    type$="R"
                    places=ivs01_precision,lf_date$=sfe15a.issued_date$
                    if sfe25a.qty_issued<0 then let action$(2,1)="R"
                    item$[0]=firm_id$
                    item$[1]=sfe25a.warehouse_id$,item$[2]=sfe25a.item_id$
                    call pgmdir$+"ivc_lf.bbx",action$,type$,lf_date$,lf_files[all],item$[all],places,quantity,cost,ret_cost,status
                    v1=ret_cost
                endif
rem --- Update ivm-02 Warehouse Record

                if pos(ivs01a.lotser_flag$="LS")<=0 or pos(ivm01a.lotser_item$="Y")<>1 and pos(ivm01a.inventoried$="Y")<>1 then 
                    gosub get_item_info
                    refs[0]=-(sfe25a.qty_issued)
                    refs[1]=v1
                    gosub inventory_update
                endif
rem --- G/L Distribution
                flag1=0
                precision 2
                if pos(r8$="LS")<>0 and pos(ivm01a.lotser_item$="Y")<>0 and pos(ivm01a.inventoried$="Y")<>0 then 
                    amount=0
                    units=0
                    read (sfe14_dev,key=(sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$+sfe25a.material_seq$),dom=*next)
                    dim sfe14a_key$:sfe14a_key_tpl$
                    while more
                        sfe14a_key$=key(sfe14_dev,end=gldistrb_1)
                        if pos(sfe25a.firm_id$=sfe14a_key.firm_id$)<>1 and
:                          pos(sfe25a.wo_location$=sfe14a_key.wo_location$)<>1 and 
:                          pos(sfe25a.wo_no$=sfe14a_key.wo_no$)<>1 and 
:                          pos(sfe25a.material_seq$=sfe14a_key.material_seq$)<>1 then 
                            flag1=1
                            break
                        endif
                        read record (sfe14_dev,key=sfe14a_key$) sfe14a$
                        amount=amount+(-sfe14a.qty_issued*sfe14a.issue_cost)
                        units=units+(-sfe14a.qty_issued)
                    wend
                endif
                if flag1=0 then
                    amount=(-sfe25a.qty_issued)*sfe25a.issue_cost
                    units=-sfe25a.qty_issued
                endif
gldistrb_1:
                dim desc$(p[7]+p[8]+p[9])
                desc$(1)=ivm01a.item_desc$
                account$=z0$
                v0$=account$,when$=sfe15a.issued_date$
                memo$=fnitem$(desc$,p[7],p[8],p[9])
                ref1$="WO "+sfe01a.wo_no$
                ref2$="Step "+sfe25a.step_no$
                ref3$="Whse "+sfe01a.warehouse_id$
                if lifo$="Y" then let amount=(-sfe25a.qty_issued)*v1
                gosub glpost
                rem  --- Replacing IOLIST variable z1$ in statement account$=z1$ with corresponding field names begins
                i=0
                while i<j
                    account$=account$+FIELD(sfm10a$,arrfield$[i])
                    i=i+1
                wend
                rem  --- Replacing IOLIST variable z1$ in statement account$=z1$ with corresponding field names end
                amount=-amount,units=-units
                gosub glpost
                precision ivs01_precision

rem --- Open Work Order Transactions

                sft21a.firm_id$=sfe25a.firm_id$
                sft21a.wo_location$=sfe25a.wo_location$
                sft21a.wo_no$=sfe25a.wo_no$
                sft21a.trans_date$=sfe25a.issued_date$
                sft21a.record_id_m$="M"
                sft21a.trans_seq$=$ff$

                sft21a.material_seq$=sfe25a.material_seq$
                sft21a.unit_measure$=sfe25a.unit_measure$

                sft21a.wareouse_id$=sfe25a.warehouse_id$
                sft21a.item_id$=sfe25a.item_id$
                sft21a.units=sfe25a.qty_issued
                sft21a.unit_cost=sfe25a.issue_cost
                precision 2
                sft21a.ext_cost=sfe25a.qty_issued*sfe25a.issue_cost
                w9=0
                if lifo$="Y" then let sft21a.ext_cost=sfe25a.qty_issued*v1
                precision ivs01_precision
                read (sft21_dev,key=(sft21a.firm_id$+sft21a.wo_location$+sft21a.wo_no$+sft21a.trans_date$+sft21a.record_id_m$+sft21a.trans_seq$),dom=*next)
                l$=keyp(sft21_dev,end=open_worder_1)
                if pos(sft21a.firm_id$+sft21a.wo_location$+sft21a.wo_no$+sft21a.trans_date$+sft21a.record_id_m$=l$)=1 then 
                    let w9=num(l$(16,3),err=*next)+1
                endif
open_worder_1:    
                sft21a.trans_seq$=str(w9:"000")
                write record (sft21_dev,key=sft21a.firm_id$+sft21a.wo_location$+sft21a.wo_no$+sft21a.trans_date$+sft21a.record_id_m$+sft21a.trans_seq$) sft21a$

rem --- Update WO Transaction Cross Reference

                sfm07a.firm_id$=sfe25a.firm_id$
                sfm07a.wo_location$=sfe25a.wo_location$
                sfm07a.wo_no$=sfe25a.wo_no$
                sfm07a.trans_date$=sfe15a.issued_date$
                sfm07a.record_id$="M"
                sfm07a.trans_seq$=sft21a.trans_seq$
                write record (sfm07_dev,key=(sfm07a.firm_id$+sfm07a.wo_location$+sfm07a.wo_no$+sfm07a.trans_date$+sfm07a.record_id$+sfm07a.trans_seq$)) sfm07a$

rem --- Lotted/Serialized Update

                if pos(r8$="LS")<>0  and ivm01a.lotser_item$="Y" and ivm01a.inventoried$="Y" then 
                    read (sfe14_dev,key=(sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$+sfe25a.material_seq$),dom=*next)
                    dim sfe14a_key$:sfe14a_key_tpl$
                    while more
                        sfe14a_key$=key(sfe14_dev,end=*break)
                        if pos(sfe25a.firm_id$=sfe14a_key.firm_id$)<>1 and
:                          pos(sfe25a.wo_location$=sfe14a_key.wo_location$)<>1 and
:                          pos(sfe25a.wo_no$=sfe14a_key.wo_no$)<>1 and
:                          pos(sfe25a.material_seq$=sfe14a_key.material_seq$)<>1 then 
                           break
                        endif

                        read record (sfe14_dev,key=sfe14a_key$) sfe14a$
                        if sfe14a.qty_issued<>0 then 
                            gosub update_lotser_record
rem --- wot-11 Here
                            sft11a.firm_id$=sft21a.firm_id$
                            sft11a.wo_location$=sft21a.wo_location$
                            sft11a.wo_no$=sft21a.wo_no$
                            sft11a.trans_date$=sft21a.trans_date$
                            sft11a.record_id_m$=sft21a.record_id_m$
                            sft11a.trans_seq$=sft21a.trans_seq$
                            sft11a.sequence_no$=$ff$


                            sft11a.reserved_str$=" "
                            sft11a.lotser_no$=sfe14a.lotser_no$
                            w9=0
                            read (sft11_dev,key=(sft11a.firm_id$+sft11a.wo_location$+sft11a.wo_no$+sft11a.trans_date$+sft11a.record_id_m$+sft11a.trans_seq$+sft11a.sequence_no$),dom=*next)
                            l$=keyp(sft11_dev,end=wot_11_1)
                            if pos(sft21a.firm_id$+sft21a.wo_location$+sft21a.wo_no$+sft21a.trans_date$+sft21a.record_id_m$+sft21a.trans_seq$=l$)=1 then 
                                let w9=num(l$(19,3),err=*next)+1
                            endif
wot_11_1:
                            sft11a.sequence_no$=str(w9:"000")
                            sft11a.cls_inp_qty=sfe14a.qty_issued
                            sft11a.closed_cost=sfe14a.issue_cost
                            sft11a.ext_cost=sft11a.cls_inp_qty*sft11a.closed_cos
                            write record (sft11_dev,key=(sft11a.firm_id$+sft11a.wo_location$+sft11a.wo_no$+sft11a.trans_date$+sft11a.record_id_m$+sft11a.trans_seq$+sft11a.sequence_no$)) sft11a$
                        endif
rem --- Done With Lot/Serial
                        remove (sfe14_dev,key=(sfe14a.firm_id$+sfe14a.wo_location$+sfe14a.wo_no$+sfe14a.material_seq$+sfe14a.sequence_no$))
                    wend
                endif
rem --- Check On More...

                issued=sfe25a.qty_issued
                sfe25a.tot_qty_iss=sfe25a.tot_qty_iss+sfe25a.qty_issued,sfe25a.qty_issued=0
            endif
                while more
                    if flag=0 then
                        if sfe25a.tot_qty_iss<sfe25a.qty_ordered then 
                            write record (sfe25_dev,key=(sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$+sfe25a.material_seq$)) sfe25a$
                            r0$=(sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$)+sfe25a.step_no$
                            r1$=(sfe25a.unit_measure$+sfe25a.reserved_str$+sfe25a.require_date$+sfe25a.step_no$+sfe25a.reserved_str_02$+sfe25a.warehouse_id$+sfe25a.item_id$)
                            read record (sfe23_dev,key=r0$,dom=*next) sfe23a$
                            sfe23a.qty_ordered=sfe25a.qty_ordered
                            sfe23a.tot_qty_iss=sfe23a.tot_qty_iss+issued
                            sfe23a.unit_cost=sfe25a.unit_cost
                            sfe23a.qty_issued=sfe25a.qty_issued
                            sfe23a.issue_cost=sfe25a.issue_cost
                            write record (sfe23_dev,key=r0$) sfe23a$
                        else
                            remove (sfe25_dev,key=(sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$+sfe25a.material_seq$),dom=*next)
                            remove (sfe23_dev,key=sfe25a.firm_id$+sfe25a.wo_location$+sfe25a.wo_no$+sfe25a.step_no$,dom=*next)
                        endif
                        break
                     endif
rem --- No Valid Item Code!!
no_valid_itm_code:
                    if flag=0 then
                        sfe25a.qty_issued=0
                    else
                        break
                    endif
                wend
                if flag=1 break
        wend


rem --- Update Header
update_header:
        extract record (sfe01_dev,key=(sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$)) sfe01a$
        if pos(" "<>sfe01a.act_st_date$)=0 then let sfe01a.act_st_date$=sfe15a.issued_date$
        if sfe01a.lstact_date$<sfe15a.issued_date$ then let sfe01a.lstact_date$=sfe15a.issued_date$
        write record (sfe01_dev,key=(sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$)) sfe01a$
rem --- Any More Left?
        read (sfe25_dev,key=(sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$),dom=*next)
        dim sfe25a_key$:sfe25a_key_tpl$
        sfe25a_key$=key(sfe25_dev,end=any_more_1)
        if sfe25a_key.firm_id$<>sfe15a.firm_id$ and 
:          sfe25a_key.wo_location$<>sfe15a.wo_location$ and 
:          sfe25a_key.wo_no$<>sfe15a.wo_no$ then 
any_more_1:
            remove (sfe15_dev,key=(sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$)+"000",dom=*next)
            remove (sfe13_dev,key=(sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$)+"000",dom=*next)
        else
            sfe15a.issued_date$=""
            write record (sfe15_dev,key=(sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$)) sfe15a$
            write record (sfe13_dev,key=(sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$)) sfe13a$
        endif
remove_record: rem --- Remove Record
       remove (sfe04_dev,key=sfe04a_key$,dom=remove_record)
    wend

done: rem --- End

    if gl$="Y" then call pgmdir$+"glc_ctlupdate.aon",status
    call pgmdir$+"adc_batchdelete.aon",status
    goto std_exit

rem --- Update Item/Warehouse Information

    gosub get_item_info
    refs[0]=-(sfe25a.qty_issued)
    refs[1]=sfe25a.issue_cost
    gosub inventory_update
    return

update_lotser_record: rem --- Update Lot/Serial Information

    gosub get_item_info
    items$[3]=sfe14.lotser_no$
    refs[0]=-sfe14a.qty_issued
    refs[1]=sfe14a.issue_cost
    gosub inventory_update
    return

get_item_info: rem --- Inventory/Action Item Information

    items$[0]=sfe25a.firm_id$
    items$[1]=sfe25a.warehouse_id$
    items$[2]=sfe25a.item_id$
    refs$[0]=sfe15a.issued_date$
    refs$[3]=sfe01a.wo_no$,refs$[5]=sfe25a.material_seq$,action$="WI"
    refs$[1]=sfe01a.customer_id$
    refs$[2]=sfe01a.order_no$
    refs$[4]=sfe01a.wo_type$
    refs$[9]=sfe01a.item_id$
    return

inventory_update: rem --- Perform Inventory Update

    call pgmdir$+"ivc_ua.bbx",action$,ivfiles[all],params[all],params$[all],items$[all],refs$[all],refs[all],status
    return

glpost: rem --- Standard G/L Posting Routine

    if gl$="Y" then 
        call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,glt14_dev,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,status
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
