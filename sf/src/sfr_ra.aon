rem --- Closed Recurring Work Order Summary Register
rem --- Program sfr_ra v8.0.0 04Jan2008 (sfr_ra)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 03:04:13)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files


    files=18,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="gls_params",ids$[2]="GLS_PARAMS"
    files$[3]="glt-14",ids$[3]="GLX_DAILYXRF"
    files$[4]="glw-11",ids$[4]="GLW_DAILYDETAIL"
    files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
    files$[6]="ivm-02",ids$[6]="IVM_ITEMWHSE"
    files$[7]="ivs_params",ids$[7]="IVS_PARAMS"
    files$[8]="sfe-01",ids$[8]="SFE_WOMASTR"
    files$[9]="sfe-02",ids$[9]="SFE_WOOPRTN"
    files$[10]="sfe-22",ids$[10]="SFE_WOMATL"
    files$[11]="sfe-32",ids$[11]="SFE_WOSUBCNT"
    files$[12]="sfm-10",ids$[12]="SFC_WOTYPECD"
    files$[13]="sfs-01a",ids$[13]="SFS_PARAMS"
    files$[14]="sft-01",ids$[14]="SFT_OPNOPRTR"
    files$[15]="sft-21",ids$[15]="SFT_OPNMATTR"
    files$[16]="sft-31",ids$[16]="SFT_OPNSUBTR"
    files$[17]="sfw-07",ids$[17]="SFW_CLSWOXTY"
    files$[18]="sfe-04",ids$[18]="SFE_WOTRANS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    gls01a_dev=channels[2]
    glt14_dev=channels[3]
    glw11_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivs01a_dev=channels[7]
    sfe01_dev=channels[8]
    sfe02_dev=channels[9]
    sfe22_dev=channels[10]
    sfe32_dev=channels[11]
    sfm10_dev=channels[12]
    sfs01a_dev=channels[13]
    sft01_dev=channels[14]
    sft21_dev=channels[15]
    sft31_dev=channels[16]
    sfw07_dev=channels[17]
    sfe04_dev=channels[18]

rem --- Dimension string templates

    dim glm01a$:templates$[1],gls01a$:templates$[2],glt14a$:templates$[3],
:       glw11a$:templates$[4],ivm01a$:templates$[5],ivm02a$:templates$[6],
:       ivs01a$:templates$[7],sfe01a$:templates$[8],sfe02a$:templates$[9],
:       sfe22a$:templates$[10],sfe32a$:templates$[11],
:       sfm10a$:templates$[12],sfs01a$:templates$[13],
:       sft01a$:templates$[14],sft21a$:templates$[15],sft31a$:templates$[16],
:       sfw07a$:templates$[17],sfe0a$:templates$[18]


rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

    dim p[2],g[4],desc[3]
    n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$,source$=pgm(-2)
    find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    g[0]=num(gls01a.total_pers$,err=*continue)
    g[1]=num(gls01a.current_per$,err=*continue)
    g[2]=num(gls01a.current_year$,err=*continue)
    g[3]=num(gls01a.acct_length$,err=*continue)
    g[4]=num(gls01a.max_acct_len$,err=*continue)

    g[2]=fnyy_year(gls01a.current_year$)
    p[0]=num(sfs01a.emp_no_len$)
    p[1]=num(sfs01a.current_per$),p[2]=fnyy_year(sfs01a.current_year$)
    ivs01_precision=num(ivs01a.reserved_str$)
    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status then goto std_exit

    for i=1 to 3
        let desc[i]=num(FIELD(ivs01a$,"desc_len_"+str(i:"00")))
    next i

rem --- Init Data

    dim headings$[3],u[7]
    headings$[0]=n1$
    headings$[1]=n3$
    h0=132
    headings=3,h=0,when$=sysinfo.system_date$,clock$="",l9=59,l=l9+1
    m0=len(m0$)
    m1=len(m1$),m2=len(m2$),m3=len(m3$),g5=len(gls01a.acct_output$)+2
    more=1   

    if g5<10 then let g5=10
    if h0-fnw(m1,m2,m3)<=16 then 
        while more
            xm1=m1-1
            xm2=m2-1,xm3=m3-1
            call pgmdir$+"adc_sizemask.aon",m1$,m1,8,xm1
            if h0-fnw(m1,m2,m3)>16 then break
            call pgmdir$+"adc_sizemask.aon",m2$,m2,7,xm2
            if h0-fnw(m1,m2,m3)>16 then break
            call pgmdir$+"adc_sizemask.aon",m3$,m3,6,xm3
            if h0-fnw(m1,m2,m3)>16 then break
        wend
    endif  

  call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02_key_tpl$,rd_table_chans$[all],status$
  call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22_key_tpl$,rd_table_chans$[all],status$
  call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32_key_tpl$,rd_table_chans$[all],status$

  call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sfe02_key_tpl$,rd_table_chans$[all],status$
  call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_OPNMATTR","PRIMARY",sft21_key_tpl$,rd_table_chans$[all],status$
  call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_OPNSUBTR","PRIMARY",sft31_key_tpl$,rd_table_chans$[all],status$
  
  call stbl("+DIR_SYP")+"bac_key_template.bbj","SFW_CLSWOXTY","PRIMARY",sfw07_key_tpl$,rd_table_chans$[all],status$

rem --- Additional headings

    dim m9$(m1*4,"-"),m8$(g5*3,"-"),j9$(m1*8,"-")
    m9$(1,1)="+"
    m9$(len(m9$))="+",m8$(1,1)="+",m8$(len(m8$))="+"
    m9$(int(len(m9$)/2)-5,10)=" Variance "
    m9=fnw(m1,m2,m3)
    m8$(int(len(m8$)/2)-5,10)=" Variance "

rem --- Additional File Opens

    if gl$="Y" then 
        files$[14]=glw11$
        files$[15]="glm-01"
        options$[14]="CL"
    endif
    call pgmdir$+"adc_fileopen.aon",1,14,15,files$[all],options$[all],channels[all],batch,status
    if status then goto std_exit
    glw11_dev=channels[14]
    glm01_dev=channels[15]

rem --- Options

    title=0
    prompt$="Do You Want To Print The "+n3$,prompt=2
    call pgmdir$+"adc_yesno.aon",title,prompt$,prompt,v$,v3
    if v$<>"Y" then goto std_exit

rem --- Final Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",7,sfe04_dev,1,meter_num,ignore_status



rem --- Init Read

    precision ivs01_precision
    read (sfe04_dev,key=firm_id$+"  B",dom=*next)

rem --- Main Read
    while more
        sfe04_key$=key(sfe04_dev,end=*break)
        if sfe04_key.firm_id$<>firm_id$ then  break
        if sfe04_key.record_id_d$<>"B" then  break
        read (sfe04_dev,key=sfe04_key$)

rem --- Breaks


        read record (sfe01_dev,key=(sfe04_key.firm_id$+sfe04_key.wo_location$+sfe04_key.wo_no$),dom=*continue) sfe01a$
        if sfe01a.wo_category$(14,1)<>"R" then continue
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

        dim b[4],c[4],t[7]

rem --- Additional Reads

        sfreq_dev=sfe02_dev
        record_id$=sfe02.record_id_a$
        total_units=sfe02.total_time
        total_cost=sfe02.tot_std_cost
        rate=sfe02.direct_rate

        dim sfreqa$:tmpl(sfreq_dev)
        dim sfreqa_key$:sfe02_key_tpl$


        read (sfreq_dev,key=(sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$),dom=*next)
        sfw07a.firm_id$=firm_id$
        sfw07a.wo_type$=sfe01a.wo_type$

        dim y0$(40),y1$(100,"0")
        find record (sfw07_dev,key=(sfw07a.firm_id$+sfw07a.wo_type$),dom=*next) sfw07a$
        find record (sfm10_dev,key=firm_id$+"A"+sfw07a.wo_type$,dom=calculate_standards) sfm10a$
        y0$=sfm10a.stdact_flag$
        y1$=x1$

calculate_standards: rem --- Calculate Standards
        while more
            read (sfreq_dev,key=(sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$),dom=*next)
            while more
                sfreqa_key$=key(sfreq_dev,end=*break)
                if sfreqa_key.firm_id$=sfe01a.firm_id$ and
:                  sfreqa_key.wo_location$=sfe01a.wo_location$ and   
:                  sfreqa_key.wo_no$=sfe01a.wo_no$ 
                    read record (sfreq_dev,key=sfreqa_key$) sfreqa$
                    x=pos(record_id$="BC")+1
                    if x>1 then 
                        let b[x]=b[x]+total_cost
                    else    
                        b[1]=b[1]+total_units*rate
                        b[4]=b[4]+total_cost-total_units*rate; rem "Split Direct & OH
                    endif    
                    b[0]=b[0]+total_cost
                else
                    break
                endif    
            wend
            if sfreq_dev=sfe02_dev then 
                let sfreq_dev=sfe22_dev 
                dim sfreqa$:tmpl(sfreq_dev)
                dim sfreqa_key$:sfe22_key_tpl$
                record_id$=sfe22.record_id_b$
                total_units=sfe22.total_units
                total_cost=sfe22.total_cost
                rate=sfe22.alt_factor
                continue
            endif    
            if sfreq_dev=sfe22_dev then 
                let sfreq_dev=sfe32_dev
                dim sfreqa$:tmpl(sfreq_dev)
                dim sfreqa_key$:sfe32_key_tpl$
                record_id$=sfe32.record_id_c$
                total_units=sfe32.total_units
                total_cost=sfe32.total_cost
                rate=sfe32.reserved_num_01
                continue
            endif  
            break  
         wend   
rem --- Calculate Actuals
        wotran_dev=sft01_dev
        dim sftran$:tmpl(wotran_dev)
        dim sftran_key$:sft01_key_tpl$

        rate=sft01.direct_rate
        record_id$=sft01.record_id_o$
        while more
            read (wotran_dev,key=(sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$),dom=*next)
            while more
                sftran_key$=key(wotran_dev,end=*break)
                if sftran_key.firm_id$<>sfe01a.firm_id$ and 
:                  sftran_key.wo_location$<>sfe01a.wo_location$ and 
:                  sftran_key.wo_no$<>sfe01a.wo_no$ then break
                
                read record (wotran_dev,key=sftran_key$) sftran$
                x=pos(record_id$="MS")+1
                if x>1 then 
                    let c[x]=c[x]+sftran.ext_cost
                else
                    c[1]=c[1]+sftran.units*rate
                    c[4]=c[4]+sftran.ext_cost-sftran.units*rate; rem "Split Direct & OH
                endif    
                c[0]=c[0]+sftran.ext_cost
            wend
            if wotran_dev=sft01_dev then 
                let wotran_dev=sft21_dev 
                dim sftran$:tmpl(wotran_dev)
                dim sftran_key$:sft21_key_tpl$
                record_id$=sft21.record_id_m$
                rate=sft21.reserved_num_01
                continue
            endif    
            if wotran_dev=sft21_dev then 
                let wotran_dev=sft31_dev
                dim sftran$:tmpl(wotran_dev)
                dim sftran_key$:sft31_key_tpl$
                record_id$=sft31.record_id_s$
                rate=sft31.reserved_num_01
                continue
            endif
            break
        wend
rem --- Calculate Close Value, Variances, etc.

        precision 2
        t[0]=c[0]*1
        t[1]=sfe01a.cls_cst_todt*1,t[2]=t[0]-t[1],t[3]=sfe01a.cls_inp_qty*sfe01a.closed_cost
        if sfe01a.complete_flg$="Y" then 
            let t0=0 
        else 
            let t0=sfe01a.sch_prod_qty-(sfe01a.reserved_num+sfe01a.cls_inp_qty)
        endif
        if sfe01a.complete_flg$<>"N" then 
            if y0$="A" then 
                let t[3]=t[2] 
            else    
                if sfe01a.sch_prod_qty=sfe01a.reserved_num+sfe01a.cls_inp_qty or b[0]=0 or sfe01a.recalc_flag$="N" then 
                    let y0=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt
                else    
                    precision ivs01_precision

rem --- Pro-Rate Standards If Needed

                    if sfe01a.sch_prod_qty<>0 then let y0=b[0]*(sfe01a.reserved_num+sfe01a.cls_inp_qty)/sfe01a.sch_prod_qty else let y0=0
                    if y0<>b[0] then 
                        if b[0]=0 then 
                            let b[1]=0,b[2]=0,b[3]=0
                        else    
                            b[1]=b[1]*y0/b[0]
                            b[2]=b[2]*y0/b[0]
                            b[3]=b[3]*y0/b[0]
                        endif
                        b[4]=y0-(b[1]+b[2]+b[3])
                    endif    
                 endif
rem --- Now Calculate Variances

                precision 2
                t[4]=b[1]*1-c[1]*1
                t[5]=b[2]*1-c[2]*1,t[6]=b[3]*1-c[3]*1
                t[0]=t[0]*1
                t[1]=t[1]*1,t[2]=(t[0]-t[1])*1,t[3]=sfe01a.cls_inp_qty*sfe01a.closed_cost
                t[7]=y0*1-t[0]-(t[4]+t[5]+t[6]); rem "All left overs in OH Vnce
            endif    
        endif     

        dim x1$(30)
        x1$=sfe01a.description$
        precision ivs01_precision

rem --- Print

        if l>l9 then gosub main_heading
        print (printer_dev)sfe01a.wo_no$,@(9),sfe01a.wo_type$,@(14),sfe01a.wo_category$,@(17),fndate$(sfe01a.cls_inp_date$),"  ",x1$
        print (printer_dev)@(132-m9),sfe01a.sch_prod_qty:m2$,@(132-m9+m2),sfe01a.reserved_num:m2$,@(132-m9+m2*2),sfe01a.cls_inp_qty:m2$,@(132-m9+m2*3),t0:m2$," ",sfe01a.complete_flg$,"  ",sfe01a.closed_cost:m3$,
        offset=0
        for x=0 to 6
            print (printer_dev)@(132-m1*(8-x-offset)),t[x]:m1$,
            if x=4 then 
                let offset=1
                print (printer_dev)@(132-m1*(8-x-offset)),t[7]:m1$,
                let u[7]=u[7]+t[7]
            endif
            u[x]=u[x]+t[x]
        next x
        print (printer_dev)""
        l=l+2

rem --- Sort By Type

        sfw07a.firm_id$=firm_id$
        sfw07a.wo_type$=sfe01a.wo_type$

        find record (sfw07_dev,key=(sfw07a.firm_id$+sfw07a.wo_type$),dom=*next) sfw07a$
        dim sfwo$:tmpl(sfw07_dev)
        sfwo_field$=fattr(sfwo$,"")
        xfer$=sfwo_field$(pos("tot_act_cost"=cvs(sfwo_field$,8)))
        for x=0 to 7
           xfield$=xfer$(1,pos($0A$=xfer$)-1)
           field sfw07a$,xfield$=num(field(sfw07a$,xfield$))+ t[x]	
           xfer$=xfer$(pos($0A$=xfer$)+1)
        next x

        write record (sfw07_dev,key=(sfw07a.firm_id$+sfw07a.wo_type$)) sfw07a$

rem --- Sort By G/L

        if sfe01a.complete_flg$<>"Y" then let t[2]=t[3]
        for x=2 to 7
            if t[x]<>0 then 
                if x<4 then 
                    let y=(x-2)*10+1 
                else 
                    if x=4 then 
                        let y=51 
                    else 
                        if x=7 then 
                            let y=61 
                        else 
                            let y=x*10+21
                        fi
                    fi
                fi    
                if x<>3 then let t[x]=-t[x]
                account$=y1$(y,10)
                gldate$=sfe01a.cls_inp_date$,amount=t[x],units=0
                memo$=sfe01a.description$
                ref1$="WO "+sfe01a.wo_no$,ref2$="Whse "+sfe01a.warehouse_id$
                ref3$="Type "+sfe01a.wo_type$
                gosub glrecap
            else
                break
            endif    
        next x
    wend

done: rem --- End

    if h=0 then gosub main_heading
    if l+2>l9 then gosub main_heading
    print (printer_dev)@(132-m1*8),j9$,'lf',@(132-m9),"Report Totals: ",@(132-m1*8),
    offset=0
    for x=0 to 6
        print (printer_dev)@(132-m1*(8-x-offset)),u[x]:m1$,
        if x=4 then 
            let offset=1
            print (printer_dev)@(132-m1*(8-x-offset)),u[7]:m1$,
        endif    
    next x
    print (printer_dev)""
    l=l+2

rem --- Now Print By Type

    dim u[7]
    read (sfw07_dev,key=firm_id$,dom=*next)
    if l+4>l9 then gosub report_heading
    print (printer_dev)'lf','lf',@(10),"Summary By Work Order Type"
    l=l+4
    dim sfw07_key$:sfw07_key_tpl$
    while more
        sfw07_key$=key(sfw07_dev,end=*break)
        if pos(firm_id$=sfw07_key.firm_id$)<>1 then break
        read record (sfw07_dev,key=sfw07_key$) sfw07a$
        dim x1$(50,"0")
        let sfm10a.code_desc$="*** Not On File ***"
        find record (sfm10_dev,key=firm_id$+"A"+sfw07a.wo_type$,dom=*next) sfm10a$
        if l+2>l9 then gosub report_heading
        print (printer_dev)@(95-m1*5),sfw07a.wo_type$," ",sfm10a.code_desc$,
        offset=0
        dim sfwo$:tmpl(sfw07_dev)
        sfwo_field$=fattr(sfwo$,"")
        xfer$=sfwo_field$(pos("tot_wip_amt"=cvs(sfwo_field$,8)))
        for x=2 to 6
            xfield$=xfer$(1,pos($0A$=xfer$)-1)
            print (printer_dev)@(132-m1*(8-x-offset)),field(sfw07a$,xfield$):m1$,
            u[x]=u[x]+num(field(sfw07a$,xfield$))
            if x=4 then 
                let offset=1
                print (printer_dev)@(132-m1*(8-x-offset)),sfw07a.tot_ovhd_var:m1$,
                let u[7]=u[7]+sfw07a.tot_ovhd_var
            endif    
        next x
        print (printer_dev)""
        l=l+2
    wend

rem --- Report Totals Again

    if l+2>l9 then gosub report_heading
    print (printer_dev)@(132-m1*6),j9$(1,m1*6),'lf',@(98-m1*6),"Report Totals: ",
    offset=0
    for x=2 to 6
        print (printer_dev)@(132-m1*(8-x-offset)),u[x]:m1$,
        if x=4 then 
            let offset=1
            print (printer_dev)@(132-m1*(8-x-offset)),u[7]:m1$,
        endif    
    next x
    print (printer_dev)""

rem --- Run next overlay

    update$="sfu_ra.bbx"
    width=h0,page=h
    if gl$="Y" then run pgmdir$+"glr_recap.aon"
    run update$

report_heading: rem --- Report Heading

    l=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings-1,h,h0,when$,clock$,status
    if status then exitto std_exit
    return

main_heading: rem --- Heading

    if l+2>l9 then gosub report_heading
    print (printer_dev)"WO #",@(8),"Typ Cat",@(17),"Close Date",@(126-m1*7),"Total",@(124-m1*5),"Current"
    print (printer_dev)@(127-m9+m2),"Prod",@(126-m9+m2*2),"Prior",@(127-m9+m2*3),"This",@(126-m9+m2*4),"Still",@(127-m1*8),"Unit",@(125-m1*7),"Actual",@(126-m1*6),"Prior",@(124-m1*5),"Work In",@(125-m1*4),"Closed",@(132-m1*4),m9$
    print (printer_dev)@(128-m9+m2),"Qty",@(126-m9+m2*2),"Close",@(126-m9+m2*3),"Close",@(127-m9+m2*4),"Open",@(132-m9+m2*4),"Cmp?",@(127-m1*8),"Cost",@(127-m1*7),"Cost",@(125-m1*6),"Closed",@(124-m1*5),"Process",@(126-m1*4),"Value",@(125-m1*3),"Direct",@(125-m1*2),"Ovrhd",@(125-m1),"Mat'ls",@(127),"Subs",'lf'
    return
rem --- Standard G/L Recap Routine
glrecap:
    if gl$<>"Y" then return
    call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
