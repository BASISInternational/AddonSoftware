rem --- Closed WO Detail Report
rem --- Program sfr_eb v8.0.0 07Jan2008 (sfr_eb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/07/2008 04:12:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)
    precision ivs01_precision

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="arc_distcode",ids$[2]="ARC_DISTCODE"
    files$[3]="glm-01",ids$[3]="GLM_ACCT"
    files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
    files$[5]="ivm-02",ids$[5]="IVM_ITEMWHSE"
    files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
    files$[7]="sfe-01",ids$[7]="SFE_WOMASTR"
    files$[8]="sfe-04",ids$[8]="SFE_WOTRANS"
    files$[9]="sfm-10",ids$[9]="SFC_WOTYPECD"
    files$[10]="sfs-01a",ids$[10]="SFS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm01_dev=channels[1]
    arm10_dev=channels[2]
    glm01_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ivs01a_dev=channels[6]
    sfe01_dev=channels[7]
    sfe04_dev=channels[8]
    sfm10_dev=channels[9]
    sfs01a_dev=channels[10]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm10a$:templates$[2],glm01a$:templates$[3],
:       ivm01a$:templates$[4],ivm02a$:templates$[5],ivs01a$:templates$[6],
:       sfe01a$:templates$[7],sfe04a$:templates$[8],sfm10a$:templates$[9],
:       sfs01a$:templates$[10]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

    on o9 goto init_data,print_cl_part

init_data: rem --- Init Data
    
    dim y9$(21*6)
    y9$(1)="Work in Process"
    y9$(22)="Close to Account",y9$(43)="Direct Variance",y9$(64)="Overhead Variance",y9$(85)="Material Variance",y9$(106)="Subcontract Variance"

rem --- Additional File Opens

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe04_dev,1,meter_num,status

rem --- Init Read

    more=1
    k$=firm_id$+"  "+"B"+p4$
    read (sfe04_dev,key=firm_id$+"  "+"B"+p4$,dom=main_read)
    goto brks

    while more

    main_read: rem --- Main Read

        k$=key(sfe04_dev,end=done)
        if k$(1,5)<>firm_id$+"  "+"B" then break
        read (sfe04_dev)

    brks: rem --- Breaks

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

    rem --- Additional Reads

        read record (sfe01_dev,key=k$(1,4)+k$(6,7),dom=*continue) sfe01a$
        if sfs01a.ar_interface$="Y"
            let arm01a.cust_name$="*** Not On File ***"
            read record (arm01_dev,key=firm_id$+sfe01a.customer_id$,dom=*next) arm01a$
        endif

    rem --- Set Flags...

        z0$="Y"
        z1$="Y",z2$="Y",z3$="",z4$="",z5$="MOS",z6$="Y"
        o9$="sfr_eb.bbx"
        o9=1
        run pgmdir$+"sfr_xa.bbx"; rem returns to 2000

    print_cl_part: rem --- Print The Closed Part

        dim b[9],c[5]
        b[0]=sfe01a.sch_prod_qty
        b[1]=sfe01a.qty_cls_todt
        b[2]=sfe01a.cls_inp_qty
        b[5]=u[0]
        b[6]=u[1]
        b[7]=sfe01a.cls_cst_todt
        b[8]=b[6]-b[7]
        b[9]=sfe01a.cls_inp_qty*sfe01a.closed_cost

        if sfe01a.complete$<>"Y" then let b[3]=b[0]-(b[1]+b[2])
        if sfe01a.wo_category$="I" then
            find record (ivm01_dev,key=firm_id$+sfe01a.item_id$,dom=label1) ivm01a2$
            if r9$<>"Y" then
                let y2$=ivm01a2.gl_inv_acct$
            else
                find record (ivm02_dev,key=firm_id$+sfe01a.warehouse_id$+sfe01a.item_id$,dom=label1) ivm02a$
                b9$=ivm02a.dist_code$
                find record (arm10_dev,key=firm_id$+"D"+b9$,dom=label1) arm10d$
                y2$=arm10d.gl_inv_acct$; rem "Set the closed to account...
            endif
        endif

    label1:

        sfm10a.code_desc$="*** Not On File ***"
        find record (sfm10_dev,key=firm_id$+"A"+sfe01a.wo_type$,dom=*next) sfm10a$
        if sfe01a.wo_category$="I" then let sfm10a.gl_close_to$=y2$
        if l+11+sgn(b[3]-1)*2+pos(sfm10a.std_act_flag$="A")*3>0 then gosub report_heading
        print (printer_dev)'lf',"**** Closed Detail ****",
:                       @(29),"Closed Date: ",fndate$(sfe01a.cls_inp_date$),
:                       @(55),"WO Type: ",sfm10a.code_desc$,
        if sfe01a.lstact_date$>sfe01a.cls_inp_date$ then
            print (printer_dev)@(89),"***Warning Last Activity Was ",fndate$(sfe01a.lstact_date$),"***",
        endif
        print (printer_dev)'lf','lf',@(0),"Current",@(12),"Prior",@(22),"This",
:                                @(30),"Balance",@(44),"Comp",@(50),"Inventory",
:                                @(63),"WO Cost",@(72),"Close @",@(84),"WO Cost",
:                                @(98),"Prior",@(110),"Current",@(122),"Current"
        print (printer_dev)@(0),"Prod Qty",@(11),"Closed",@(22),"Close",
:                      @(30),"Still Open",@(44),"lete?",@(50),"Unit Cost",
:                      @(64),"@ Std",@(72),"Std/Actual",@(85),"@ Act",
:                      @(97),"Closed",@(109),"WIP Value",@(120),"Close Value",'lf'
        print (printer_dev)@(10-m2),b[0]:m2$,@(18-m2),b[1]:m2$,@(29-m2),b[2]:m2$,
:                      @(38-m2),b[3]:m2$,@(45),sfe01a.complete_flg$,@(60-m1),b[4]:m1$,
:                      @(73-m1),b[5]:m1$,@(75),stdact_flag$,@(91-m1),b[6]:m1$,
:                      @(105-m1),b[7]:m1$,@(119-m1),b[8]:m1$,@(132-m1),b[9]:m1$

        if b[2]<>0 and b[2]<>1 then
            b0=ivm01a2.order_point
            if b[0]<>0 then let b1=b[5]/b[0] else let b1=0
            if b[0]<>0 then let b2=b[6]/b[0] else let b2=0
            if b[1]<>0 then let b3=b[7]/b[1] else let b3=0
            if b[2]+b[3]<>0 then let b4=b[8]/(b[2]+b[3]) else let b4=0
            if b[2]<>0 then let b5=b[9]/b[2] else let b5=0
            print (printer_dev)@(36),"Per Unit:",@(60-m3),b0:m3$,@(73-m3),b1:m3$,
:                          @(75),stdact_flag$,@(91-m3),b2:m3$,@(105-m3),b3:m3$,
:                          @(119-m3),b4:m3$,@(132-m3),b5:m3$,
        endif

    rem --- Calculate Postings

        c[0]=-b[8]
        c[1]=sfe01a.cls_inp_qty*sfe01a.closed_cost

        if sfe01a.complete_flg$<>"Y"

            let c[0]=-c[1]

        else

            if sfm10a.std_act_flag="A" then

                let c[1]=b[8]

            else

            rem --- Calculate Variance Postings

                if sfe01a.wo_category$<>"I" and (sfe01a.sch_prod_qty=sfe01a.qty_cls_todt+sfe01a.cls_inp_qty or u[0]=0 or sfe01a.recalc_flag$="N")

                    let prorte=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt

                else

                rem --- Prorate Standards If Needed

                    if sfe01a.wo_category$<>"I"

                        if sfe01a.sch_prod_qty<>0 then
                            let prorte=u[0]*(sfe01a.qty_cls_todt+sfe01a.cls_inp_qty)/sfe01a.sch_prod_qty
                        else
                            let prorte=0
                        endif

                    else

                        let prorte=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt

                    endif

                    if prorte<>u[0] then

                        if u[0]=0 then
                            let u[3]=0,u[4]=0,u[6]=0
                        else
                            u[3]=u[3]*prorte/u[0]
                            u[4]=u[4]*prorte/u[0]
                            u[6]=u[6]*prorte/u[0]
                        endif

                        u[9]=prorte-(u[3]+u[4]+u[6])

                    endif

                endif

                rem --- Now Calculate Variances

                precision 2
                c[2]=(u[2]-u[3])*1
                c[4]=(u[5]-u[4])*1,c[5]=(u[7]-u[6])*1
                c[3]=(b[6]-prorte-(c[2]+c[4]+c[5]))*1
                c[0]=c[0]*1
                c[1]=c[1]*1

            endif

        endif

    rem --- Print G/L Postings

        precision ivs01_precision
        if gl$="Y"

            print (printer_dev)'lf',"Account Summary: ",@(44+m1),"Debit",@(46+m1*2),"Credit",
            if sfe01a.cls_inp_qty<>0 and sfe01a.cls_inp_qty<>1
                print (printer_dev)@(60+m1*2),"Per Unit Totals",'lf'
            else
                print (printer_dev)'lf'
            endif

            t0=0
            t1=0,t2=0,t3=0

            for x=0 to 5

                if c[x]=0 then continue
                dim g1$(35); let g1$(1)="*** Not On File ***"
                if x<2 then
                    let g9$=sfm10a.gl_close_to$
                else
                    let g9$=sfm10a.gl_pur_acct$
                endif

                find (glm01_dev,key=firm_id$+g9$,dom=*next)*,g1$(1)

                print (printer_dev)fnmask$(g9$(1,g3),g3$),"  ",g1$,
                if c[x]>0 then
                    print (printer_dev)@(50),c[x]:m1$,; let t0=t0+c[x]
                else
                    print (printer_dev)@(53+m1),abs(c[x]):m1$,; let t1=t1+abs(c[x])
                endif
                if sfe01a.cls_inp_qty<>0 and sfe01a.cls_inp_qty<>1 then
                    if c[x]/sfe01a.cls_inp_qty>0 then
                        print (printer_dev)@(56+m1*2),c[x]/sfe01a.cls_inp_qty:m3$,
                        let t2=t2+c[x]/sfe01a.cls_inp_qty
                    else
                        print (printer_dev)@(59+m1*2+m3),abs(c[x]/sfe01a.cls_inp_qty):m3$,
                        let t3=t3+abs(c[x]/sfe01a.cls_inp_qty)
                    endif
                endif
                print (printer_dev)@(110),y9$(x*21+1,21)

            next x

            print (printer_dev)@(50),j$(1,m1),@(53+m1),j$(1,m1),
            if sfe01a.cls_inp_qty<>0 and sfe01a.cls_inp_qty<>1 then
                print (printer_dev)@(56+m1*2),j$(1,m3),@(59+m1*2+m3),j$(1,m3),
            endif
            print (printer_dev)'lf',@(40),"Total: ",@(50),t0:m1$,@(53+m1),t1:m1$,
            if sfe01a.cls_inp_qty<>0 and sfe01a.cls_inp_qty<>1 then
                print (printer_dev)@(56+m1*2),t2:m3$,@(59+m1*2+m3),t3:m3$,
            endif
            print (printer_dev)""

        endif

    wend

done: rem --- End

    goto std_exit

report_heading: rem --- Report Heading

    l=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit
    if sfe01a.wo_category$="I" then
        find record (ivm01_dev,key=firm_id$+sfe01a.item_id$,dom=*next) ivm01a$
    endif

    print (printer_dev)"WO #: ",sfe01a.wo_no$,@(56),"Type: ",sfe01a.wo_type$,
:           @(68),"Status: ",sfe01a.wo_status$,@(86),"Date Opened: ",fndate$(sfe01a.opened_date$)," Last Close: ",fndate$(sfe01a.estcmp_date$),
    if sfe01a.wo_category$="I" then
        print (printer_dev)@(17),"Bill: ",@(24),sfe01a.item_id$
    else
        print (printer_dev)""
    endif
    if sfe01a.wo_category$<>"I" then
        print (printer_dev)@(10),"Description:",@(24),sfe01a.description$,'lf',
:       @(24),sfe01a.description$,@(56),"Category: ",sfe01a.wo_category$,
    endif
    if sfe01a.wo_category$="I" then
        print (printer_dev)@(10),"Description:",@(24),ivm01a.item_desc$(1,desc[1]),'lf',
:       @(24),ivm01a.item_w(desc[1]+1,min(desc[2],30)),@(56),"Category: ",sfe01a.wo_category$,
    endif
    if p3$(2,1)="Y" and pos(" "<>sfe01a.customer_id$)>0 then
        print (printer_dev)@(80),"Customer: ",fnmask$(sfe01a.customer_id$(1,p8),p8$),"  ",arm01a.customer_name$
    else
        print (printer_dev)""
    endif
    print (printer_dev)@(0),"Drawing #: ",@(24),sfe01a.drawing_no$,@(37),"Rev: ",sfe01a.drawing_rev$
    if p3$(2,1)="Y" and num(sfe01a.order_no$+sfe01a.line_no$)>0 then
        print (printer_dev)@(80),"Sales Order: ",sfe01a.order_no$,"  Line: ",sfe01a.line_no$
    else
        print (printer_dev)""
    endif
    if pos(sfe01a.wo_category$="IN")>0 then
        print (printer_dev)@(17),"UM: ",sfe10a.unit_measure$,
    endif
    print (printer_dev)"Warehouse: ",sfe01a.warehouse_id$,@(56),"Prod Qty: ",a[0]:m2$,"  Completed: ",sfe01a.qty_cls_todt:m2$,
:           @(105),"Last Activity: ",fndate$(sfe01a.lstact_date$)
    if sfe01a.cls_inp_qty>0 then
        print (printer_dev)'lf',@(1),"****This Close Date: ",fndate$(sfe01a.cls_inp_date$),"     Complete? ",sfe01a.complete_flg$,
:       @(56),"This Close Amount: ",sfe01a.cls_inp_qty:m2$,"  Unit Cost: ",sfe01a.closed_cost:m1$,"****"; let l=l+2
     endif
    print (printer_dev)j2$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
