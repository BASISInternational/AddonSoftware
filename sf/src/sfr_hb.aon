rem --- Work Order Variance Report - Transaction Processing
rem --- Program sfr_hb v8.0.0 04Jan2008 (sfr_hb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 10:57:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Check & Adjust Masks

    call pgmdir$+"adc_sizemask.aon",sfs01a.amount_mask$,m1,7,9
    call pgmdir$+"adc_sizemask.aon",sfs01a.unit_mask$,m2,5,7
    m9=m1*11+m2*2+8

rem --- Init Data

    dim j$(m9,"-"),h9$(m1*5+m2,"-"),h7$(m1*5+m2),t[10],u[10],a[10],o[13]
    o[0]=131-(m1*11+m2*2+8)
    o[1]=o[0]+m2,o[2]=o[1]+m1,o[3]=o[2]+m1,o[4]=o[3]+m1,o[5]=o[4]+m1,o[6]=o[5]+m1,o[7]=o[6]+m2,o[8]=o[7]+m1,o[9]=o[8]+m1,
:   o[10]=o[9]+m1,o[11]=o[10]+m1,o[12]=o[11]+m1,o[13]=o[12]+m1
    h9$(1,1)="+"
    h9$(len(h9$),1)="+",h8$=h9$
    h8$(int(len(h8$)/2)-6,12)=" Standards "
    h9$(int(len(h9$)/2)-4,8)=" Actual "
    h6$=h7$
    h7$(3)="Operations",h7$(m2+m1*3-7)="Mat'ls",h7$(m2+m1*4-6)="Sub's",h7$(len(h7$)-5)="W.O."
    h6$(3)="Hours"
    h6$(m2+m1-7)="Direct",h6$(m2+m1*2-7)="Ovrhd",h6$(m2+m1*3-6)="Total",h6$(m2+m1*4-6)="Total",h6$(len(h6$)-6)="Total"
    headings$[2]=h3$
    headings$[3]=h4$
    headings$[4]=h$
    more=1
    flag=0

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,chan_dev,1,meter_num,status
    print @(column+8,11),'sb',"Actuals:",'sf',

rem --- Init Read

    key_tpl$=firm_id$+rec$+beging$
    read (chan_dev,key=key_tpl$,dom=main)
    flag=1

main: rem --- Main Read

    while more

    rem --- check flag and execute code inside if..endif

        if (!flag)

            key_tpl$=key(chan_dev,end=done)
            if pos(firm_id$=key_tpl$)<>1 then break

            if offset=0
                if key_tpl.wo_location$<>rec$ break
            else
                record_id_field$=field(key_tpl$,f2$,err=*break); rem value of record_id_* field
                if record_id_field$<>rec$ then break
            endif

            if ending$<>""
                if offset=0 
                    if key_tpl.firm_id$+key_tpl.wo_location$+key_tpl.wo_no$>firm_id$+rec$+ending$ break
                else   
                    if key_tpl.firm_id$+record_id_field$+key_tpl.wo_no$>firm_id$+rec$+ending$ break
                endif
            endif

            if sequence$<>"W" 

            rem --- Breaks

                ifsequence$="B"
                    if key_tpl.warehouse_id$+key_tpl.item_id$<>t0$ then gosub first_sub_tot
                endif
                if sequence$="T"
                    if key_tpl.wo_type$<>t0$ then gosub first_sub_tot
                endif
                if sequence$="C"
                    if key_tpl.customer_id$<>t0$ then gosub first_sub_tot
                endif

            key_tpl$=key_tpl.firm_id$+key_tpl.wo_location$+key_tpl.wo_no$
            read (chan_dev)

            endif

        endif

    rem --- reset flag so that next time while..wend loop executes from beginning

    reset_flg:

        flag=0
        read record (sfe01a_dev,key=key_tpl$,dom=*continue) sfe01a$
        if pos(sfe01a.wo_status$="PQ")>0 then continue
        if sfe01a.wo_category$="I"
            find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=label2) ivm01a$
            sfe01a.description_01$=ivm01a.item_desc$(1,min(desc[1],30))
        endif 

    label2:

        if wotype$="C" and sfe01a.wo_status$<>"C" then continue
        if wotype$="O" and sfe01a.wo_status$="C" and closedate$="" then continue
        if wotype$="O" and sfe01a.wo_status$="C" and sfe01a.closed_date$<=closedate$ then continue
        if wotype$="C" and sfe01a.closed_date$>closedate$ then continue
        if sfe01a.wo_status$="C" then let sfe01a.reserved_no=0
        if closedate$<>"" then if sfe01a.closed_date$>closedate$ then let sfe01a.reserved_no=0

    rem --- Calculate Standards

        sfreq_dev=sfe02a_dev
        dim sfreq_key$:sfe02a_key_tpl$
     
        while more

        rem --- Get the record_id_* field of sfreq

            if offset<>0
                dim sfreq_dev_tmpl$:tmpl(sfreq_dev)
                let fields$=fattr(sfreq_dev_tmpl$,"")
                let f4$=fields$(pos($0A$=fields$)+1)
                f4$=f4$(1,pos($0A$=f4$)-1)
            endif

            read (sfreq_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

            while more

                sfreq_key$=key(sfreq_dev,end=*break)
                if sfreq_key.firm_id$+sfreq_key.wo_location$+sfreq_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+
:               sfe01a.wo_no$ then break

                read record (sfreq_dev) sfreqa$

                action=pos(sfreqa.record_id_a$="ABC")
                switch action

                    case 1
                        sfe01a.sch_prod_qty=sfe01a.sch_prod_qty+sftran.ext_cost
                        sfe01a.reserved_no=sfe01a.reserved_no+sftran.ext_cost*sftran.setup_time
                        sfe01a.dealer_no=sfe01a.dealer_no+sftran.direct_rate-sftran.ext_cost*sftran.setup_time
                        break

                    case 2
                        sfe01a.qty_cls_todt=sfe01a.qty_cls_todt+sftran.direct_rate
                        break

                    case 3
                        sfe01a.cls_cst_todt= sfe01a.cls_cst_todt+sftran.direct_rate
                        break

                    case default
                        break

                swend

            wend

            if sfreq_dev=sfe02a_dev
                sfreq_dev=sfe22a_dev 
                dim sfreq_key$:sfe22a_key_tpl$
            else
                if sfreq_dev=sfe22a_dev 
                    sfreq_dev=sfe32a_dev
                    dim sfreq_key$:sfe32a_key_tpl$
                endif
            else
                break
            endif

        wend

    rem --- Calculate Actuals

        if !(sfe01a.wo_status$="C" and sfe01a.closed_date$<=g9$)
            tran01_dev=sft01a_dev
            tran02_dev=sft21a_dev
            tran03_dev=sft31a_dev
            dim tran01a_key$:sft01a_key_tpl$
            dim tran02a_key$:sft21a_key_tpl$
            dim tran03a_key$:sft31a_key_tpl$
        else
            tran01_dev=sft03a_dev
            tran02_dev=sft23a_dev
            tran03_dev=sft33a_dev
            dim tran01a_key$:sft03a_key_tpl$
            dim tran02a_key$:sft23a_key_tpl$
            dim tran03a_key$:sft33a_key_tpl$
        endif

        sftran_dev=tran01_dev
        dim sftran_key$:tran01a_key$

        while more

            if offset<>0
                dim sftran_dev_tmpl$:tmpl(sftran_dev)
                let fields$=fattr(sftran_dev_tmpl$,"")
                let f5$=fields$(pos($0A$=fields$)+1)
                f5$=f5$(1,pos($0A$=f5$)-1)
            endif

            read (sftran_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
            print @(column+17,11),key_tpl.wo_no$,

            while more

                sftran_key$=key(sftran_dev,end=*break)
                if sftran_key.firm_id$+sftran_key.wo_location$+sftran_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+
:               sfe01a.wo_no$ then break
                if period$<>"" then if sftran_key.trans_date$>period$ then break
                read record (sftran_dev) sftran$

                record_id_field$=field(sftran_key$,f5$,err=*break); rem value of record_id_* field
                switch pos(record_id_field$="OMS")
                    case 1
                        sfe01a.cls_inp_qty=sfe01a.cls_inp_qty+sftran.units
                        x=(sftran.units+sftran.setup_time)*sftran.direct_rate,sfe01a.closed_cost=sfe01a.closed_cost+x,
:                       a[10]=a[10]+sftran.ext_cost-x
                        break
                    case 2
                        sfe01a.est_yield=sfe01a.est_yield+sftran.ext_cost
                        break
                    case 3
                        sfe01a.reserved_num_02=sfe01a.reserved_num_02+sftran.ext_cost
                        break
                    case default
                swend
                continue

            wend

            if sftran_dev=tran01_dev
                sftran_dev=tran02_dev
                dim sftran_key$:tran02a_key$
            else
                if sftran_dev=tran02_dev
                    sftran_dev=tran03_dev
                    dim sftran_key$:tran03a_key$
                endif
            else
                break
            endif

        wend

    rem --- Calc Totals, Variance, Etc.

        a0=sfe01a.reserved_no+sfe01a.qty_cls_todt+ sfe01a.cls_cst_todt+sfe01a.dealer_no
        a1=sfe01a.closed_cost+sfe01a.est_yield+sfe01a.reserved_no+sfe01a.dealer_no,a2=a0-a1
        if a0<>0 then let a3=(a0-a1)*100/a0 else let a3=0
        if sfe01a.wo_catgory$="I" then let x$=sfe01a.item_number$,x$=x$(1,pos("   "=x$+"   ")-1),
:       sfe01a.description$=x$+" "+sfe01a.description$

    rem --- Print

        if r1$="Y" then if a3<r0 then continue
        if r1$="N" then if abs(a3)<r0 then continue

        if l+3>l9 then gosub sub_head
        print (printer_dev)sfe01a.wo_no$,"  ",sfe01a.wo_type$,"  ",sfe01a.description$; let l=l+1
        if abs(a3)>999.9 then let a3$=" ****** " else let a3$=str(a3:"####.00-")
        print (printer_dev)@(131-m9),sfe01a.sch_prod_qty:m2$,sfe01a.reserved_no:m1$,sfe01a.dealer_no:m1$,
:       sfe01a.qty_cls_todt:m1$,sfe01a.cls_cst_todt:m1$,a0:m1$,sfe01a.cls_inp_qty:m2$,sfe01a.closed_cost:m1$,
:       sfe01a.dealer_no:m1$,sfe01a.est_yield:m1$,sfe01a.reserved_no:m1$,a1:m1$,a2:m1$,a3$
        if sfe01a.reserved_no<>0 then print (printer_dev)@(131-m1*2-18),"Closed: ",@(131-m1*2-8),
:       -sfe01a.reserved_no:m1$,'lf',@(131-m1*2-20),"Net Open: ",@(131-m1*2-8),a1-sfe01a.reserved_no:m1$;
:       let l=l+2 else print (printer_dev)""
        l=l+2
        l0=l0+1
        sfw02a.firm_id$=sfe01a.firm_id$
        sfw02a.wo_location$=sfe01a.wo_location$
        sfw02a.wo_type$=sfe01a.wo_type$
        sfw02a.wo_category$=sfe01a.wo_category$
        find record (sfw02a_dev,key=sfw02a_key.firm_id$+sfw02a_key.wo_location$+sfw02a_key.wo_type$,dom=*next) sfw02a$
        for x=0 to 10
            t[x]=t[x]+a[x]
            u[x]=u[x]+a[x],b[x]=b[x]+a[x]
        next x
        write record (sfw02a_dev,key=sfw02a_key.firm_id$+sfw02a_key.wo_location$+sfw02a_key.wo_type$) sfw02a$

   wend

done: rem --- End

    t9$="U"
    if sequence$<>"W" then gosub first_sub_tot
    if h=0 then gosub report_heading
    if l+1>l9 then gosub report_heading
    u0=u[1]+u[2]+u[3]+u[9]
    u1=u[5]+u[6]+u[7]+u[10],u2=u0-u1
    if u0<>0 then let u3=(u0-u1)*100/u0 else let u3=0
    if u[8]<>0 
        if u0 then let u6=(u0-(u1-u[8]))*100/u0 else let u6=0
    endif

    print (printer_dev)@(131-m9),j$(1,m9-1),'lf',
    print (printer_dev)@(0),"Report Total: ",'lf',@(o[0]),u[0]:m2$,@(o[1]),u[1]:m1$,@(o[2]),u[9]:m1$,@(o[3]),u[2]:m1$,
:   @(o[4]),u[3]:m1$,@(o[5]),u0:m1$,@(o[6]),u[4]:m2$,@(o[7]),u[5]:m1$,@(o[8]),u[10]:m1$,@(o[9]),u[6]:m1$,@(o[10]),
:   u[7]:m1$,@(o[11]),u1:m1$,@(o[12]),u2:m1$,@(o[13]),u3:"####.00-"
    if u[8]<>0 then print (printer_dev)@(131-m1*2-18),"Closed: ",@(o[11]),-u[8]:m1$,'lf',@(131-m1*2-20),"Net Open: ",
:   @(o[11]),u1-u[8]:m1$; let l=l+2

rem --- Subtotals By Type

    dim c[2,10],t[10],u[10]
    gosub report_heading
    print (printer_dev)@(0),"Totals By Type: ",'lf'; let l=2
    call pgmdir$+"adc_progress.aon","N","","","","Totals By Type:",0,sfw02a_dev,1,meter_num,status
    read (sfw02a_dev,key=firm_id$,dom=*next)
   
    while more

        k5$=key(sfw02a_dev,end=*break)
        if pos(firm_id$=k5$)<>1 then break
        read record (sfw02a_dev) sfw02a$
        dim x0$(30),x1$(g1*2,"0")
        let sfm10a.code_desc$="*** Not On File ***"
        find record (sfm10a_dev,key=firm_id$+"A"+sfw02a.wo_category$,dom=*next) sfm10a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if l+2>l9 then gosub report_heading
        print (printer_dev)sfw02a.wo_category$,"  ",sfm10a.code_desc$,"  ",fnmask$(x1$(1,g0),g5$),"  ",
:       fnmask$(x1$(1+g1,g0),g5$)
        b0=sfw02a.std_ops_tot+sfw02a.std_mat_tot+sfw02a.std_sub_tot+b[9]
        b1=sfw02a.act_ops_tot+sfw02a.act_mat_tot+sfw02a.act_sub_tot+b[10],b2=b0-b1
        if b0<>0 then let b3=(b0-b1)*100/b0 else let b3=0
        print (printer_dev)@(o[0]),sfw02a.std_hrs:m2$,@(o[1]),sfw02a.std_ops_tot:m1$,@(o[2]),b[9]:m1$,@(o[3]),
:       sfw02a.std_mat_tot:m1$,@(o[4]),sfw02a.std_sub_tot:m1$,@(o[5]),b0:m1$,@(o[6]),sfw02a.actual_hrs:m2$,
:       @(o[7]),sfw02a.act_ops_tot:m1$,@(o[8]),b[10]:m1$,@(o[9]),sfw02a.act_mat_tot:m1$,@(o[10]),act_sub_tot:m1$,
:       @(o[11]),b1:m1$,@(o[12]),b2:m1$,@(o[13]),b3:"####.00-"
        if b[8]<>0 then print (printer_dev)@(131-m1*2-18),"Closed: ",@(o[11]),-b[8]:m1$,'lf',@(131-m1*2-20),"Net Open: ",
:       @(o[11]),b1-b[8]:m1$; let l=l+2
        l=l+2
        y=pos(sfm10a.wo_category$="INR")-1
        if y<0 then let y=1
        for x=0 to 10
            c[y,x]=c[y,x]+b[x]
            t[x]=t[x]+b[x]
        next x
               
   wend 

 rem --- Report Totals

    t0=t[1]+t[2]+t[3]+t[9]
    t1=t[5]+t[6]+t[7]+t[10],t2=t0-t1
    if t0<>0 then let t3=(t0-t1)*100/t0 else let t3=0
    print (printer_dev)@(131-m9),j$(1,m9-1),'lf',
    print (printer_dev)@(0),"Report Totals:",'lf',@(o[0]),t[0]:m2$,@(o[1]),t[1]:m1$,@(o[2]),t[9]:m1$,@(o[3]),t[2]:m1$,
:   @(o[4]),t[3]:m1$,@(o[5]),t0:m1$,@(o[6]),t[4]:m2$,@(o[7]),t[5]:m1$,@(o[8]),t[10]:m1$,@(o[9]),t[6]:m1$,@(o[10]),
:   t[7]:m1$,@(o[11]),t1:m1$,@(o[12]),t2:m1$,@(o[13]),t3:"####.00-"
    if t[8]<>0 then print (printer_dev)@(131-m1*2-18),"Closed: ",@(o[11]),-t[8]:m1$,'lf',@(131-m1*2-20),"Net Open: ",
:   @(o[11]),t1-t[8]:m1$; let l=l+2
    l=l+3

rem --- Now Subtotal By Category

    if l+13>l9 then gosub report_heading
    print (printer_dev)'lf','lf','lf',"Totals By Category: ",'lf'
    for y=0 to 2
        if y=0 then print (printer_dev)"Inventory: " else if y=1 then print (printer_dev)"Specials:"
        else 
            if y=2 then print (printer_dev)"Recurring:"
        endif
        c0=c[y,1]+c[y,2]+c[y,3]+c[y,9]
        c1=c[y,5]+c[y,6]+c[y,7]+c[y,10],c2=c0-c1
        if c0<>0 then let c3=(c0-c1)*100/c0 else let c3=0
        print (printer_dev)@(o[0]),c[y,0]:m2$,@(o[1]),c[y,1]:m1$,@(o[2]),c[y,9]:m1$,@(o[3]),c[y,2]:m1$,@(o[4]),c[y,3]:m1$,
:       @(o[5]),c0:m1$,@(o[6]),c[y,4]:m2$,@(o[7]),c[y,5]:m1$,@(o[8]),c[y,10]:m1$,@(o[9]),c[y,6]:m1$,@(o[10]),c[y,7]:m1$,
:       @(o[11]),c1:m1$,@(o[12]),c2:m1$,@(o[13]),c3:"####.00-"
        if c[y,8]<>0 then print (printer_dev)@(131-m1*2-18),"Closed: ",@(o[11]),-c[y,8]:m1$,'lf',@(131-m1*2-20),"Net Open: ",
:       @(o[11]),c1-c[y,8]:m1$; let l=l+2
        for x=0 to 10
            u[x]=u[x]+c[y,x]
        next x
    next y

rem --- Report Totals

    u0=u[1]+u[2]+u[3]+u[9]
    u1=u[5]+u[6]+u[7]+u[10],u2=u0-u1
    if u0<>0 then let u3=(u0-u1)*100/u0 else let u3=0
    print (printer_dev)@(131-m9),j$(1,m9-1),'lf',
    print (printer_dev)@(0),"Report Total: ",'lf',@(o[0]),u[0]:m2$,@(o[1]),u[1]:m1$,@(o[2]),u[9]:m1$,@(o[3]),u[2]:m1$,
:   @(o[4]),u[3]:m1$,@(o[5]),u0:m1$,@(o[6]),u[4]:m2$,@(o[7]),u[5]:m1$,@(o[8]),u[10]:m1$,@(o[9]),u[6]:m1$,@(o[10]),
:   u[7]:m1$,@(o[11]),u1:m1$,@(o[12]),u2:m1$,@(o[13]),u3:"####.00-"
    if u[8]<>0 then print (printer_dev)@(131-m1*2-18),"Closed: ",@(o[11]),-u[8]:m1$,'lf',@(131-m1*2-20),"Net Open: ",
:   @(o[11]),u1-u[8]:m1$; let l=l+2
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)@(131-m9),h8$,h9$
    print (printer_dev)@(131-m9),h7$,h7$
    print (printer_dev)"WO #",@(7),"Type",@(131-m9),h6$,h6$,@(116),"Variance",@(130),"%"
    print (printer_dev)""
    l=l+4
    return

sub_head:  rem --- Sub Heading

    if l+3>l9 then gosub report_heading
   
    switch pos(sequence$="TC")

        case 1
            print (printer_dev)'lf',fnh$(t0$+"   "),h5$,'lf'
            l=l+3
            break

        case 2
            print (printer_dev)fnmask$(t0$(1,c0),c1$)," ",h5$
            l=l+1
            break

        case default
            break

    swend
    return

first_sub_tot:   rem --- First Sub Total

    if t0$<>"" 
        if l0>1 

            if l+2>l9 then gosub sub_head
            t0=t[1]+t[2]+t[3]+t[9]
            t1=t[5]+t[6]+t[7]+t[10],t2=t0-t1
            if t0<>0 then let t3=(t0-t1)*100/t0 else let t3=0
            print (printer_dev)@(131-m9),j$(1,m9-1),'lf',
            if sequence$="T" then print (printer_dev)@(0),"Type ",t0$," Totals: ",
            if sequence$="C" then print (printer_dev)@(0),"Customer ",fnmask$(t0$(1,c0),c1$)," Totals:",
            if sequence$="B" then print (printer_dev)@(0),"Item Code ",t0$(3),"  Totals:",
            print (printer_dev)'lf',@(o[0]),t[0]:m2$,@(o[1]),t[1]:m1$,@(o[2]),t[9]:m1$,@(o[3]),t[2]:m1$,@(o[4]),t[3]:m1$,
:           @(o[5]),t0:m1$,@(o[6]),t[4]:m2$,@(o[7]),t[5]:m1$,@(o[8]),t[10]:m1$,@(o[9]),t[6]:m1$,@(o[10]),t[7]:m1$,
:           @(o[11]),t1:m1$,@(o[12]),t2:m1$,@(o[13]),t3:"####.00-",'lf'
            l=l+3
       endif
    endif 
    if t9$<>"" then return

label3:

    dim t[10]
    t0$=k$(4,x8)
    l0=0
   
    switch pos(sequence$="TC") 

        case 1 

            t0$=key_tpl.wo_type$
            let arm01a.cust_name$="*** Not On File ***"
            find record (arm01a_dev,key=firm_id$+t0$,dom=label4) arm01a$
            gosub sub_head
            break

        case 2; rem --- Customer

            t0$=key_tpl.customer_id$
            let arm01a.cust_name$="*** Not On File ***"
            find record (sfm10a_dev,key=firm_id$+"A"+t0$,dom=label3) sfm10a$
            h5$=sfm10a$.code_desc$
            gosub sub_head

        case default
            t0$=key_tpl.warehouse_id$+key_tpl.item_id$
            break

    swend 

label4:    
    return

    if t9$<>"" then return
    if l0>1 
        print (printer_dev)""
        l=l+1
    endif

    gosub sub_head
    if l+1>l9 then gosub sub_head
    print (printer_dev)@(32),h5$,
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
