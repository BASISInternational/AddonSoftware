rem --- Batch Reschedule Work Orders - II
rem --- Program sfr_ub v8.0.0 08Jan2008 (sfr_ub)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/08/2008 10:46:52)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)
    precision 9

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="sfe-01",ids$[2]="SFE_WOMASTR"
    files$[3]="sfs-01a",ids$[3]="SFS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01a_dev=channels[1]
    sfe01_dev=channels[2]
    sfs01a_dev=channels[3]

rem --- Dimension string templates

    dim ivs01a$:templates$[1],sfe01a$:templates$[2],sfs01a$:templates$[3]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Open/Lock Files
rem --- Init Data

    more=1
    status$="00"
    headings$[2]=h4$
    headings$[3]=h3$
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe01_dev,1,meter_num,status
rem --- Init Read

    k$=firm_id$+"  "+r0$
    read record (sfe01_dev,key=k$,dom=*next) sfe01a$; goto label_one


rem --- Main Loop Starts
    while more
        sfe01a_key$=key(sfe01_dev,end=*break)
        if pos(firm_id$=sfe01a_key$)<>1 then break
        if r1$<>"" then 
            if sfe01a.wo_no$>r1$ then break
        endif
        read record (sfe01_dev,key=sfe01a_key$) sfe01a$

label_one: 

        if sfe01a.wo_status$="C" then continue
        if sfe01a.priority$>r2$ then continue
        if pos(sfe01a.wo_status$=r3$)=0 then continue

rem --- Reschedule
        done_flag=0
        while more
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            if pos(sfe01a.sched_flag$="BF")<>0 then
                    if sfe01a.sched_flag$="F" then
                        let sdate$=sfe01a.eststt_date$ 
                    else
                        let sdate$=sfe01a.estcmp_date$ 
                    endif
                    edate$=""
                    status$="00"
                    call pgmdir$+"sfc_aa.bbx",sfe01a.wo_no$,sdate$,edate$,sfe01a.sched_flag$,codfile_dev,status$
                    if l+2>l9 then gosub report_heading
                    on num(status$(2,1)) goto suc_schedule,unsch_calender,invalid_date,file_missing,invalid_method,unsch_date,undeter_error

suc_schedule: rem --- Successful Schedule 

                    if sfe01a.sched_flag$="B" then  
                        sfe01a.eststt_date$=edate$ 
                        sfe01a.estcmp_date$=sdate$ 
                    else
                        sfe01a.eststt_date$=sdate$
                        sfe01a.estcmp_date$=edate$
                    endif
                    print (printer_dev)@(1),sfe01a.wo_no$,@(13),sfe01a.priority$,@(17),sfe01a.sched_flag$,
:                                      @(22),sfe01a.wo_status$,@(25),fndate$(sfe01a.eststt_date$),
:                                      @(34),fndate$(sfe01a.estcmp_date$),@(45),sfe01a.wo_category$
                    l=l+1
                    write record (sfe01_dev,key=sfe01a_key$) sfe01a$ 
                    break

unsch_calender: rem --- Unscheduled Date in Calendar

                    print (printer_dev)@(1),sfe01a.wo_no$,@(9),"***",@(13),sfe01a.priority$,
:                                      @(17),sfe01a.sched_flag$,@(22),sfe01a.wo_status$,
:                                      @(25),"Unscheduled Date Found In Operations Calendar"
                l=l+1
                    break

invalid_date: rem --- Invalid 'From' Date

                    if sfe01a.sched_flag$="B" then
                        let mess$="Completion"
                    else
                        let mess$="Start"
                    endif
                    print (printer_dev)@(1),sfe01a.wo_no$,@(9),"***",@(13),sfe01a.priority$,
:                                      @(17),sfe01a.sched_flag$,@(22),sfe01a.wo_status$,
:                                      @(25),"Invalid Estimated "+mess$+" Date"
                    l=l+1
                    break

file_missing: rem --- File Missing

                    print (printer_dev)@(10),"A necessary Shop Floor Control file is missing. Make sure the"
                    print (printer_dev)@(10),"Calendar File and Work Orders exist, then rerun this task."
                    done_flag=1
                    break
            endif
invalid_method: rem --- Invalid Scheduling Method

                if l+1>l9 then gosub report_heading
                if sfe01a.sched_flag$="M" then
                    print (printer_dev)@(1),sfe01a.wo_no$,@(13),sfe01a.priority$,@(17),sfe01a.sched_flag$,
:                                      @(22),sfe01a.wo_status$,@(25),"Manual Method. No Rescheduling Performed"
                else
                    print (printer_dev)@(1),sfe01a.wo_no$,@(9),"***",@(13),sfe01a.priority$,
:                                      @(17),sfe01a.sched_flag$,@(22),sfe01a.wo_status$,
:                                      @(25),"Invalid Scheduling Method"
                endif

                l=l+1
                break

unsch_date: rem --- Unscheduled Date in Purchase Calendar

                print (printer_dev)@(1),sfe01a.wo_no$,@(9),"***",@(13),sfe01a.priority$,
:                                  @(17),sfe01a.sched_flag$,@(22),sfe01a.wo_status$,
:                                  @(25),"Unscheduled Date Found In Purchase Order Calendar"
                l=l+1
                break

undeter_error: rem --- Undetermined error

                print (printer_dev)@(1),sfe01a.wo_no$,@(9),"***",@(13),sfe01a.priority$,
:                                  @(17),sfe01a.sched_flag$,@(22),sfe01a.wo_status$,
:                                  @(25),"An Undetermined Error Has Occurred"
                l=l+1
        wend

        if done_flag=1 then break
rem --- Check for Subcontract date change

        if status$(1,1)="0" then continue
        print (printer_dev)@(15),"A Date Required Changed For A Subcontract For This Work Order"
        l=l+1

rem --- Main Loop Ends
    wend

done: rem --- End

    if h=0 then gosub report_heading
    if l+1>l9 then gosub report_heading
    goto std_exit

report_heading: rem --- Report Heading

    l=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)"Work Order",@(12),"Pri Mthd Sts",@(27),"Start",
:                                   @(36),"Cmplt",@(44),"Cat",'lf'
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
