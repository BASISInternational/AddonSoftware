rem ==========================================================================
rem --- glx_init_fiscal_cal.aon
rem --- A Auto-Launch task that initializes new PERIOD_END_nn dates
rem --- and START_DATE in GLS_CALENDAR.
rem --- 
rem --- AddonSoftware Version 21.10
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    setesc std_error
    seterr std_error

rem --- Get program arguments

    if argc>1
        for curr_argv=1 to argc-1
            temp_argv$=argv(curr_argv)
            if pos("-u"=temp_argv$)=1 user_id$=temp_argv$(3);rem User ID
        next curr_argv
    endif

    if user_id$=""
        use ::sys/prog/bao_security.bbj::Security
        user_id$=Security.getURLUser()
        if cvs(user_id$,2)="" then user_id$=stbl("+USER_ID",err=*next)
        if cvs(user_id$,2)="" then user_id$="ADMIN"
    endif

rem --- Initializations

    err_msg$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dir_syp$=stbl("+DIR_SYP")
    
    rem --- Make sure needed STBLs are set
    call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,table_chans$[all]
    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)

rem --- Open/Lock files

    num_files=2
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="GLS_CALENDAR",      open_opts$[1]="OTA"
    open_tables$[2]="ADS_AUTOLAUNCH",open_opts$[2]="OTA"

    gosub open_tables

    glsCalendar=num(open_chans$[1]); dim glsCalendar$:open_tpls$[1]
    ads_autolaunch=num(open_chans$[2]); dim ads_autolaunch$:open_tpls$[2]

rem --- Init progress meter

    glsCalendar_fid$=fid(glsCalendar)
    total_recs=dec(glsCalendar_fid$(3,4))
    curr_rec=0
    milestone=1
    task_val$="INIT_GLCAL"
    task_desc$="Initialize new GLSC_CALENDAR fields"

    progress! = bbjAPI().getGroupNamespace()
    progress!.setValue("+process_task",task_val$+"^C^"+task_desc$+"^CNC^"+str(total_recs)+"^")

rem --- Process all GLS_CALENDAR records for ALL firms
    read(glsCalendar,key="",dom=*next)
    while 1
        extractrecord(glsCalendar,end=*break)glsCalendar$
        
        rem --- Update progress meter
        curr_rec=curr_rec+1
        if mod(curr_rec,milestone)=0
            progress!.setValue("+process_task",task_val$+"^U^"+str(curr_rec)+"^")
        endif

        rem --- Process only blank START_DATE dates
        if cvs(glsCalendar.start_date$,2)="" then
            rem --- Get the YYYYMMDD START_DATE by combining YEAR$+CAL_START_DATE$ from the record containing the START_DATE
            glsCalendar.start_date$=glsCalendar.year$+glsCalendar.cal_start_date$
        endif

        rem --- Process only blank PERIOD_END_nn dates
        for per=1 to num(glsCalendar.total_pers$)
            period_end$=field(glsCalendar$,"PERIOD_END_"+str(per:"00"))
            if cvs(period_end$,2)="" then
                rem --- Get the YYYYMMDD period ending date for PERIOD_END_nn using adc_perioddates_v2102.aon with the period nn and 
                rem --- the YEAR from the record containing the PERIOD_END_nn
                call pgmdir$+"adc_perioddates_v2102.aon",per,num(glsCalendar.year$),begdate$,enddate$,table_chans$[all],status
                if status then continue
                
                field glsCalendar$,"PERIOD_END_"+str(per:"00")=enddate$
            endif
        next per

        writerecord(glsCalendar)glsCalendar$
    wend
	
done: rem --- Done

    rem --- Update AutoLaunch Status
    wk$=fattr(ads_autolaunch$,"PROCESS_ID")
    process_id$=pad("INIT_GLCAL",dec(wk$(10,2)))
    extractrecord(ads_autolaunch,key=process_id$)ads_autolaunch$; rem Advisory Locking
    ads_autolaunch.process_status$="C"
    ads_autolaunch.trans_date$=date(0:"%Yl%Mz%Dz")
    ads_autolaunch.trans_time$=date(0:"%Hz%mz%sz")
    ads_autolaunch$=field(ads_autolaunch$)

    rem --- Use bax_mount_sel to get rdMountVect! containing hashes of mounted system and backup directory info for use in bax_xmlrec_exp.bbj
    dev_mode$=""
    call stbl("+DIR_SYP")+"bax_mount_sel.bbj",rdMountVect!,table_chans$[all],dev_mode$

    rem --- Update admin xml file
    if rdMountVect!<>null() and rdMountVect!.size()>0
        exp_action$="C"
        exp_add_only$=""
        call stbl("+DIR_SYP")+"bax_xmlrec_exp.bbj","ADS_AUTOLAUNCH",ads_autolaunch$,exp_action$,exp_add_only$,dev_mode$,rdMountVect!,table_chans$[all]
    endif

    writerecord(ads_autolaunch)ads_autolaunch$
    
	goto std_exit

    
open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        status=-1
    endif

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release


rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Modified standard program end

    rem --- Update progress meter
    progress!.setValue("+process_task",task_val$+"^D^")

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
