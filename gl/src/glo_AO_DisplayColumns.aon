rem ==========================================================================
rem --- glo_AO_DisplayColumns.aon 
rem --- AO_DisplayColumns class (DisplayColumns superclass)
rem --- GL superclass that provides GL Display Columns previously provided in
rem --- glm_recordtypes (glm-18) file.
rem --- 
rem --- AddonSoftware Version 17.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

rem /**
rem  * This class provides GL Display Columns, previously provided in glm_recordtypes
rem  * (glm-18) file, that are used for selecting Record Codes and Budget Codes in the
rem  * GL Default Display Columns paramters task.
rem  */

    use ::bbtranslator.bbj::BBTranslator
    use java.util.HashMap

    class public AO_DisplayColumns
        field protected BBjString currentFiscalYear$
        field protected HashMap displayColumns!
        field protected BBjString firmID$
        field protected BBTranslator Translate!
        field protected BBjString useBudgets$
        field protected BBjString useUnits$

        rem /**
        rem  * Constructor.
        rem  *
        rem  * @param BBjString firmId$
        rem  */
        method public AO_DisplayColumns(BBjString firmID$)
            seterr DisplayColumns_error

            rem --- Open gls_params
            filename$ = "gls_params"
            devGlsParams = unt
            open(devGlsParams)stbl("+GLDATA")+filename$

            rem --- Get record template for gls_params
            tplsChan = unt
            open(tplsChan)stbl("+DIR_BRD")+"ddm_table_tpls.dat"
            read(tplsChan,key=cvs(pad(filename$,16," "),4),dom=*next)*,*,table_tpl$
            tplGlsParams$ = table_tpl$
            dim gls_params$:tplGlsParams$
            
            rem --- Get gls_params GL00 record for firmId$
            readrecord(devGlsParams,key=firmID$+"GL00")gls_params$
            
            rem --- Initialize field variables
            #currentFiscalYear$ = gls_params.current_year$
            #firmID$ = firmID$
            #useBudgets$ = gls_params.budget_flag$
            #useUnits$ = gls_params.units_flag$
            #initDisplayColumns()

            rem --- Get Translate! object
            rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
            #Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
            if #Translate!=null()
                #Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
                BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
            endif

            rem --- Close files
            close(tplsChan,err=*next)
            close(devGlsParams,err=*next)

            methodret
            
DisplayColumns_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * When using a budget display column we might have a planning budget (5-char BUD_MN_COLS/BUDGET_CODE)
        rem  * instead of an actual budget (1-char RECORD_ID). This method strips possible blanks before the “::”
        rem  * in the given displayColumnsKey$, and adds the “::” if it’s missing, so the results are in the correct
        rem  * form for the defined displayColumns! keys.
        rem  *
        rem  * @param BBjString displayColumnsKey$
        rem  *
        rem  * @return BBjString fixedKey$
        rem  */
        method protected BBjString fixDisplayColumnsKey(BBjString displayColumnsKey$)
            seterr fixDisplayColumnsKey_error
            
            xPos = pos("::"=displayColumnsKey$)
            if xPos=0 then
                fixedKey$=cvs(displayColumnsKey$,2)+"::A"
            else 
                code$ = cvs(displayColumnsKey$(1,xPos-1),2)
                fixedKey$ = code$+displayColumnsKey$(xPos)
            endif

            methodret fixedKey$
            
fixDisplayColumnsKey_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Returns the value of ACTBUD for the given displayColumns! key. Returns and empty string
        rem  * if displayColumns! doesn't contain the key.
        rem  *
        rem  * @param BBjString displayColumnsKey$
        rem  *
        rem  * @return BBjString actbud$
        rem  */
        method public BBjString getActBud(BBjString displayColumnsKey$)
            seterr getActBud_error
            actbud$=""
            
            key$=#fixDisplayColumnsKey(displayColumnsKey$)
            if #displayColumns!.containsKey(key$) then
                field!=cast(HashMap,#displayColumns!.get(key$))
                actbud$=field!.get("ACTBUD")
            endif

            methodret actbud$
            
getActBud_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Builds a HashMap with the same structure as the displayColumns! HashMap using
        rem  * data from glm_budgetmaster (glm-08).
        rem  *
        rem  * @return HashMap budgetMaster!
        rem  */
        method public HashMap getBudgetMaster()
            seterr getBudgetMaster_error
            budgetMaster! = new HashMap()

            rem --- Open glm_budgetmaster (glm-08)
            filename$ = "glm-08"
            glm08Dev = unt
            open(glm08Dev)stbl("+GLDATA")+filename$
            filename$ = "glm_budgetmaster"

            rem --- Get record template for glm_budgetmaster (glm-08)
            tplsChan = unt
            open(tplsChan)stbl("+DIR_BRD")+"ddm_table_tpls.dat"
            read(tplsChan,key=cvs(pad(filename$,16," "),4),dom=*next)*,*,table_tpl$
            tplGlsParams$ = table_tpl$
            dim glm08$:tplGlsParams$

            rem --- Load all the planned budgets for the current firm.
            read(glm08Dev,key=#firmID$,dom=*next)
            while 1
                glm08Key$=key(glm08Dev,end=*break)
                if pos(#firmID$=glm08Key$)<>1 then break
                readrecord(glm08Dev)glm08$

                field! = new HashMap()
                field!.put("RECORD_ID",glm08.budget_code$)
                field!.put("ACTBUD","B")
                field!.put("AMT_OR_UNITS",glm08.amt_or_units$)
                field!.put("DESCRIPTION",glm08.description$)
                field!.put("REV_TITLE",glm08.rev_title$)
                key$=glm08.revision_src$(1,1)
                switch (BBjAPI().TRUE)
                    case key$ = "0"
                    case key$ = "1"
                        year_inc=0
                        break
                    case key$ = "2"
                    case key$ = "3"
                        year_inc=-1
                        break
                    case key$ = "4"
                    case key$ = "5"
                        year_inc=1
                        break
                    case default
                        rem --- unknown
                        year_inc=0
                        break
                swend
                field!.put("YEAR_INC",year_inc)

                #displayColumns!.put(glm18.record_id$+"::"+glm18.amt_or_units$,field!)
            wend

            rem --- Close files
            close(tplsChan,err=*next)
            close(glm08Dev,err=*next)

            methodret budgetMaster!
            
getBudgetMaster_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Returns the fiscal year (YYYY) the given displayColumns! key is for. Returns an empty string
        rem  * if displayColumns! doesn't contain the key.
        rem  *
        rem  * @param BBjString displayColumnsKey$
        rem  *
        rem  * @return BBjString year$
        rem  */
        method public BBjString getYear(BBjString displayColumnsKey$)
            seterr getYear_error
            year$=""
        
            key$=#fixDisplayColumnsKey(displayColumnsKey$)
            if #displayColumns!.containsKey(key$) then
                year = num(#currentFiscalYear$) + #getYearInc(key$)
                year$ = str(year)
            endif

            methodret year$
            
getYear_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Returns the number of years the current fiscal year must be incremented/decremented 
        rem  * to get the year (YYYY) for the given displayColumns! key. Returns zero if displayColumns!
        rem  * doesn't contain the key.
        rem  *
        rem  * @param BBjString displayColumnsKey$
        rem  *
        rem  * @return BBjNumber delta
        rem  */
        method public BBjNumber getYearInc(BBjString displayColumnsKey$)
            seterr getYearInc_error
            delta=0
        
            key$=#fixDisplayColumnsKey(displayColumnsKey$)
            if #displayColumns!.containsKey(key$) then
                field!=cast(HashMap,#displayColumns!.get(key$))
                delta=field!.get("YEAR_INC")
            endif

            methodret delta
            
getYearInc_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Initializes a HashMap of HashMaps that hold information for the display columns.
        rem  * 
        rem  * The displayColumns! HashMap is keyed by glm_recordtypes (glm-18) keys (RECORD_ID+’::’+AMT_OR_UNITS),
        rem  * and holds fields! HashMaps that are keyed by glm_recordtypes (glm-18) field names (RECORD_ID, ACTBUD,
        rem  * AMT_OR_UNITS, DESCRIPTION, REV_TITLE, and a new field YEAR_INC).
        rem  */
        method protected void initDisplayColumns()
            seterr initDisplayColumns_error
            #displayColumns! = new HashMap()
            
            field! = new HashMap()
            field!.put("RECORD_ID","0"); field!.put("ACTBUD","A"); field!.put("AMT_OR_UNITS","A")
            field!.put("DESCRIPTION","Current Year Actual Amounts"); field!.put("REV_TITLE","Cur Actual Amt")
            field!.put("YEAR_INC",0)
            #displayColumns!.put("0::A",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","0"); field!.put("ACTBUD","A"); field!.put("AMT_OR_UNITS","U")
            field!.put("DESCRIPTION","Current Year Actual Units"); field!.put("REV_TITLE","Cur Actual Unit")
            field!.put("YEAR_INC",0)
            #displayColumns!.put("0::U",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","1"); field!.put("ACTBUD","B"); field!.put("AMT_OR_UNITS","A")
            field!.put("DESCRIPTION","Current Year Budget Amounts"); field!.put("REV_TITLE","Cur Budget Amt")
            field!.put("YEAR_INC",0)
            #displayColumns!.put("1::A",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","1"); field!.put("ACTBUD","B"); field!.put("AMT_OR_UNITS","U")
            field!.put("DESCRIPTION","Current Year Budget Units"); field!.put("REV_TITLE","Cur Budget Unit")
            field!.put("YEAR_INC",0)
            #displayColumns!.put("1::U",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","2"); field!.put("ACTBUD","A"); field!.put("AMT_OR_UNITS","A")
            field!.put("DESCRIPTION","Prior Year Actual Amounts"); field!.put("REV_TITLE","Pri Actual Amt")
            field!.put("YEAR_INC",-1)
            #displayColumns!.put("2::A",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","2"); field!.put("ACTBUD","A"); field!.put("AMT_OR_UNITS","U")
            field!.put("DESCRIPTION","Prior Year Actual Units"); field!.put("REV_TITLE","Pri Actual Unit")
            field!.put("YEAR_INC",-1)
            #displayColumns!.put("2::U",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","3"); field!.put("ACTBUD","B"); field!.put("AMT_OR_UNITS","A")
            field!.put("DESCRIPTION","Prior Year Budget Amounts"); field!.put("REV_TITLE","Pri Budget Amt")
            field!.put("YEAR_INC",-1)
            #displayColumns!.put("3::A",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","3"); field!.put("ACTBUD","B"); field!.put("AMT_OR_UNITS","U")
            field!.put("DESCRIPTION","Prior Year Budget Units"); field!.put("REV_TITLE","Pri Budget Unit")
            field!.put("YEAR_INC",-1)
            #displayColumns!.put("3::U",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","4"); field!.put("ACTBUD","A"); field!.put("AMT_OR_UNITS","A")
            field!.put("DESCRIPTION","Next Year Actual Amounts"); field!.put("REV_TITLE","Nxt Actual Amt")
            field!.put("YEAR_INC",1)
            #displayColumns!.put("4::A",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","4"); field!.put("ACTBUD","A"); field!.put("AMT_OR_UNITS","U")
            field!.put("DESCRIPTION","Next Year Actual Units"); field!.put("REV_TITLE","Nxt Actual Unit")
            field!.put("YEAR_INC",1)
            #displayColumns!.put("4::U",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","5"); field!.put("ACTBUD","B"); field!.put("AMT_OR_UNITS","A")
            field!.put("DESCRIPTION","Next Year Budget Amounts"); field!.put("REV_TITLE","Nxt Budget Amt")
            field!.put("YEAR_INC",1)
            #displayColumns!.put("5::A",field!)

            field! = new HashMap()
            field!.put("RECORD_ID","5"); field!.put("ACTBUD","B"); field!.put("AMT_OR_UNITS","U")
            field!.put("DESCRIPTION","Next Year Budget Units"); field!.put("REV_TITLE","Nxt Budget Unit")
            field!.put("YEAR_INC",1)
            #displayColumns!.put("5::U",field!)

            rem --- Add budget records from glm-08/glm18
            budgetMaster!=#getBudgetMaster()
            #displayColumns!.putAll(budgetMaster!)

            methodret
            
initDisplayColumns_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
	
classend
