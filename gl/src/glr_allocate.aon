rem glr - Allocation Entry Register (Report Overlay)
rem Program glr_allocate v8.0.0 11May2006 (glr_qb)
rem Created by adx_progconv.bbx v1.0.3 (05/11/2006 04:31:16)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initialize +GLCONTROL and get work file name

    source$=fnbasename$(pgm(-2),"")
    call pgmdir$+"glc_ctlcreate.aon",err=std_exit,source$,"GL",glw11$,gl$,status
    if status goto std_exit

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="glm-01"
    files$[3]="glm-02"
    files$[4]="glm-03"
    files$[5]="gle-03"
    files$[6]="gle-13"
    files$[7]=glw11$
    options$[7]="CL"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    glm01_dev=channels[2]
    glm02_dev=channels[3]
    glm03_dev=channels[4]
    gle03_dev=channels[5]
    gle13_dev=channels[6]
    glw11_dev=channels[7]

rem --- Dimension string templates

    dim glm01a$:templates$[2],glm02a$:templates$[3],glm03a$:templates$[4],
:       gle03a$:templates$[5],gle13a$:templates$[6],glw11a$:templates$[7]
    glcontrol_template$=stbl("+GLCONTROL_TPL",err=*next)
    dim glcontrol$:glcontrol_template$

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="gls-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim gls01a$:templates$[1]

rem --- Assign input values to local variables

    period$=rd_rec_data$[1,0]
    year$=rd_rec_data$[2,0]
    if cvs(year$,2)="" year$="2004"

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    glcontrol$=stbl("+GLCONTROL",err=*next)
    m0$=gls01a.acct_output$
    m1$=gls01a.amount_mask$
    m2$=gls01a.unit_mask$
    acctlen=num(gls01a.acct_length$)
    m4$="##0.00%"
    m4=len(m4$)
    call pgmdir$+"adc_sizemask.aon",m2$,m2,7,10
    if cvs(period$,2)="" period$=gls01a.current_per$
    if cvs(year$,2)="" year$=gls01a.current_year$

rem --- Initializations

    precision 2
    dim pctline$(m4,"-"),amtline$(m1-1,"-"),unitline$(m2-1,"-"),totals[2],w[2]
    h0=80
    more=1
    moredetail=1
    balanced=0
    period=num(period$)
    year=num(year$)
    unithdr$=""
    if gls01a.units_flag$<>"Y" unitline$=""

rem --- Initialize print positions

    o[5]=h0
    if gls01a.units_flag$="Y" o[5]=h0-m2,unithdr$="Units"
    o[4]=o[5]-m1
    o[3]=o[4]-m4-1
    x1=m0
    x2=m0
    if x1<9 x1=9
    if x2<12 x2=12
    o[1]=o[0]+x1
    o[2]=o[1]+x2
    width=o[3]-o[2]
    if width>35 width=35

rem --- Display progress meter

    call pgmdir$+"adc_progress.aon","N","","","","",0,gle03_dev,1,meter_num,status

rem --- Which glm-02 record?

    record$="0"
    if gls01a.gl_yr_closed$<>"Y" record$="4"

rem --- Get posting date, retrieve journal record and position file

    call pgmdir$+"adc_perioddates.aon",ads01_dev,period,year,x$,gldate$,status
    glm03_key$=firm_id$+glcontrol.journal_id$
    glm03a.code_desc$="Unknown Journal ID"
    find record (glm03_dev,key=glm03_key$,dom=*next)glm03a$
    read (gle03_dev,key=firm_id$,dom=*next)

rem --- Get next gle-03 record

    while more
          gle03_key$=key(gle03_dev,end=*break)
          if pos(firm_id$=gle03_key$)<>1 break
          read record (gle03_dev)gle03a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

      rem --- Additional File Reads

          dim totals[2]
          glm01a.gl_account$=gle03a.gl_account$
          glm01a.gl_acct_desc$="(Not On File)"
          glm01_key$=firm_id$+gle03a.gl_account$
          glm02_key$=firm_id$+gle03a.gl_account$+record$
          find record (glm01_dev,key=glm01_key$,dom=*next)glm01a$
          find record (glm02_dev,key=glm02_key$,dom=*next)glm02a$

      rem --- Accumulate total to allocate

          gle03a.gl_post_amt=nfield(glm02a$,"period_amt_"+str(period:"00"))
          gle03a_units=0
          if gls01a.units_flag$="Y" gle03a.units=nfield(glm02a$,"period_units_"+str(period:"00"))

      rem --- Generate recap

          account$=gle03a.gl_account$
          amount=-gle03a.gl_post_amt
          units=0
          ref1$="Source"
          ref2$=""
          ref3$=""
          memo$=glm03a.code_desc$
          if gls01a.units_flag$="Y" units=-gle03a.units
          gosub glrecap

      rem --- Print header

          if l+4>l9 gosub report_heading
          units$=""
          if gls01a.units_flag$="Y" units$=str(gle03a.units:m2$)
          print (printer_dev)""
          print (printer_dev)@(o[0]),fnmask$(glm01a.gl_account$(1,acctlen),m0$),
:                            @(o[2]),glm01a.gl_acct_desc$(1,width),@(o[4]),gle03a.gl_post_amt:m1$,
:                            @(o[5]),units$
          print (printer_dev)""
          l=l+3

      rem --- Position gle-13

          read (gle13_dev,key=gle03_key$,dom=*next)

      rem --- Read next detail record

          while moredetail
                k$=key(gle13_dev,end=*break)
                if pos(gle03_key$=k$)<>1 break
                read record (gle13_dev)gle13a$
                w[0]=gle13a.percentage
                w[1]=gle13a.gl_post_amt
                w[2]=gle13a.units

                rem --- Last detail?

                last=1
                k$=key(gle13_dev,end=get_account)
                if pos(gle03_key$=k$)=1 last=0

                get_account: rem --- Retrieve account master for this line

                glm01a.gl_account$=gle03a.gl_account$
                glm01a.gl_acct_desc$="(Not On File)"
                glm01_key$=firm_id$+gle03a.gl_account$
                find record (glm01_dev,key=glm01_key$,dom=*next)glm01a$

                rem --- Calculate amount to be allocated to this account

                gle13a.gl_post_amt=(gle03a.gl_post_amt*gle13a.percentage)/100
                if gls01a.units_flag$="Y" gle13a.units=(gle03a.units*gle13a.percentage)/100

                rem --- If last detail, check for rounding problems

                if last=0 goto print_detail
                x=gle03a.gl_post_amt-(totals[1]+gle13a.gl_post_amt)
                if abs(x)>0 gle13a.gl_post_amt=gle13a.gl_post_amt+x
                if gls01a.units_flag$<>"Y" goto print_detail
                x=gle03a.units-(totals[2]+gle13a.units)
                if abs(x)<=1 gle13a.units=gle13a.units+x

                print_detail: rem --- Print a record

                if l+1>l9 gosub report_heading
                units$=""
                units=0
                if gls01a.units_flag$="Y" units$=str(gle13a.units:m2$),
:                                         units=gle13a.units
                print (printer_dev)@(o[1]),fnmask$(glm01a.gl_account$(1,acctlen),m0$),
:                                  @(o[2]),glm01a.gl_acct_desc$(1,width),@(o[3]),gle13a.percentage:m4$,
:                                  @(o[4]),gle13a.gl_post_amt:m1$,@(o[5]),units$
                l=l+1

                rem --- Accumulate totals

                for x=0 to 2
                    totals[x]=totals[x]+w[x]
                next x

                rem --- Update gle-13 record

                write record (gle13_dev,key=w0$)gle13a$

                rem --- Generate recap

                account$=gle13a.gl_dest_acct$
                memo$=glm03a.code_desc$
                amount=gle13a.gl_post_amt
                ref1$="Target"
                ref2$=fnmask$(gle03a.gl_src_acct$(1,acctlen),m0$)
                ref3$="Line "+gle13a.line_no$
                gosub glrecap

            rem --- Loop back for next detail

          wend

      rem --- Print transaction totals

          if l+2>l9 gosub report_heading
          warning$=""
          if totals[0]<>100 warning$="Entry Must Equal 100% ---->",balanced=1
          if gls01a.units_flag$="Y" units$=str(totals[2]:m2$)
          print (printer_dev)@(o[3]),pctline$,@(o[4]),amtline$,@(o[5]),unitline$
          print (printer_dev)warning$,@(o[3]-17),"Total For Entry",@(o[3]),totals[0]:m4$,
:                            @(o[4]),totals[1]:m1$,@(o[5]),units$
          l=l+2

      rem --- Update gle-03 record

          write record (gle03_dev)gle03a$

      rem --- Loop back for next header

    wend

rem --- All Done

    width=h0
    update$="glu_allocate.aon"
    run pgmdir$+"glr_recap.aon"

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,h0,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)""
    print (printer_dev)@(o[0]),"Source",@(o[1]),"Destination"
    print (printer_dev)@(o[0]),"Account",@(o[1]),"Account",@(o[2]),"Description",@(o[3]),"Percent",
:                      @(o[4]+m1-7),"Amount",@(o[5]+m2-6),unithdr$
    l=l+3
    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,
:                                            ref2$,ref3$,memo$,amount,units,status
    return

rem --- Functions

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
