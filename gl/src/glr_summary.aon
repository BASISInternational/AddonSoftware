rem glr - GL Summary Report (Report Overlay)
rem Program glr_summary v8.0.0 27May2006 (glr_ib)
rem Created by adx_progconv.bbx v1.0.3 (05/27/2006 05:27:11)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- This program is run from four places:

rem --- 1) GL Summary Activity Report (gle_summary)
rem --- 2) Budget Revision Report (gle_budgetreport)
rem --- 3) Budget Revision Register (gle_budgetupdate)
rem --- 4) GL Account Maintenance

rem --- Pick screens for each of these tasks are different, but the
rem --- front end programs must provide the following values:

rem --- BEGACCT$ : Optional beginning account number
rem --- ENDACCT$ : Optional ending account number
rem --- WILDCARD$: Optional wildcard mask
rem --- ID$      : Up to four record id's (summary or budget)
rem --- AU$      : Up to four flags for amounts or units

rem --- At least one id and corresponding amount/units flag must be
rem --- specified.

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="glm-01",ids$[2]="GLM_ACCT"
    files$[3]="glm-02",ids$[3]="GLM_ACCTSUMMARY"
    files$[4]="glm-08",ids$[4]="GLM_BUDGETMASTER"
    files$[5]="glm-18",ids$[5]="GLM_RECORDTYPES"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01_dev=channels[1]
    glm01_dev=channels[2]
    glm02_dev=channels[3]
    glm08_dev=channels[4]
    glm18_dev=channels[5]

rem --- Dimension string templates

    dim gls01a$:templates$[1],glm01a$:templates$[2],glm02a$:templates$[3],glm08a$:templates$[4],glm18a$:templates$[5]

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    units_flag$=gls01a.units_flag$
    total_pers=num(gls01a.total_pers$)
    acctlen=num(gls01a.acct_length$)
    m0$=gls01a.acct_output$
    m1$=gls01a.amount_mask$
    m2$=gls01a.unit_mask$
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    mp=13
    subheadings=1
    max=total_pers+2

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Initializations

    dim subheadings$[subheadings],o[max],a[mp],u[mp]
    when$=sysinfo.system_date$
    clock$=""
    width=132
    page=0
    l9=59
    l=l9+1
    number=0
    done=0
    more=1
    h1$="Account"
    lines=records+2
    tm$="##,###,##0-"
    mm$="###,##0-"
    tm=len(tm$)
    mm=len(mm$)
    records=len(cvs(id$,2))
    if total_pers>12 h1$="Acct",lines=records*2+2

rem --- Document columns

    columns=14
    dim columns$[14,4]
    columns$[0,0]="Account",columns$[0,1]="C",columns$[0,2]="30",columns$[0,3]=m0$
    columns$[1,0]="Beginning",columns$[1,1]="N",columns$[1,2]="10",columns$[0,3]=m1$
    columns$[2,0]="Jan",columns$[2,1]="N",columns$[2,2]="8",columns$[2,3]=m1$
    columns$[3,0]="Feb",columns$[3,1]="N",columns$[3,2]="8",columns$[3,3]=m1$
    columns$[4,0]="Mar",columns$[4,1]="N",columns$[4,2]="8",columns$[4,3]=m1$
    columns$[5,0]="Apr",columns$[5,1]="N",columns$[5,2]="8",columns$[5,3]=m1$
    columns$[6,0]="May",columns$[6,1]="N",columns$[6,2]="8",columns$[6,3]=m1$
    columns$[7,0]="Jun",columns$[7,1]="N",columns$[7,2]="8",columns$[7,3]=m1$
    columns$[8,0]="Jul",columns$[8,1]="N",columns$[8,2]="8",columns$[8,3]=m1$
    columns$[9,0]="Aug",columns$[9,1]="N",columns$[9,2]="8",columns$[9,3]=m1$
    columns$[10,0]="Sep",columns$[10,1]="N",columns$[10,2]="8",columns$[10,3]=m1$
    columns$[11,0]="Oct",columns$[11,1]="N",columns$[11,2]="8",columns$[11,3]=m1$
    columns$[12,0]="Nov",columns$[12,1]="N",columns$[12,2]="8",columns$[12,3]=m1$
    columns$[13,0]="Dec",columns$[13,1]="N",columns$[13,2]="8",columns$[13,3]=m1$
    columns$[14,0]="Ending",columns$[14,1]="N",columns$[14,2]="15",columns$[14,3]=m1$


rem --- Initialize print positions

    o[max]=width-tm+1
    for x=max-1 to 2 step -1
        o[x]=o[x+1]-mm
    next x
    o[1]=o[2]-tm

rem --- Initialize report subheadings

    dim buffer$(width)
    buffer$(1)=h1$
    buffer$(o[1]+tm-10)="Beginning"
    for x=2 to max-1
        buffer$(o[x]+mm-4)=field(gls01a$,"abbr_name_"+str(x-1:"00"))
    next x
    buffer$(width-6)="Ending"
    subheadings$[subheadings]=buffer$

rem --- Retrieve and store titles

    if records=0 goto done
    dim titles$[records]
    for x=1 to records
        record$=id$(x,1)
        flag$=au$(x,1)
        call stbl("+DIR_PGM")+"glc_suminfo.aon",glm08_dev,glm18_dev,firm_id$,record$,flag$,x$,title$,status
        if status=0 titles$[x]=title$
    next x

rem --- Start progress meter

    call pgmdir$+"adc_progress.aon","NC","","","","",0,glm01_dev,1,meter_num,status
    k$=firm_id$+begacct$
    found=0
    read record (glm01_dev,key=k$,dom=*next)glm01a$;found=1

rem --- Get next GL Account Master (glm-01) record

    while more
          if found=1
            found=0
          else
            read record (glm01_dev,end=*break)glm01a$            
          endif
          if firm_id$<>glm01a.firm_id$ break
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if endacct$<>"" if glm01a.gl_account$>endacct$ break
          gosub wildcard
          if status continue
          acct$=fnmask$(glm01a.gl_account$(1,acctlen),m0$)+" "+glm01a.gl_acct_desc$
          number=number+1
          gosub account_heading

          rem --- Retrieve selected GL Summary/Budget (glm-02) records

          for r=1 to records
              dim a[mp],u[mp],x[max]
              record_id$=id$(r,1)
              flag$=au$(r,1)
              if pos(record$="012345ABCDEFGHIJKLMNOPQRSTUVWXYZ")=0 continue
              glm02a.firm_id$=glm01a.firm_id$
              glm02a.gl_account$=glm01a.gl_account$
              glm02a.record_id$=record_id$
              glm02_key$=glm02a.firm_id$+glm02a.gl_account$+glm02a.record_id$
              find record (glm02_dev,key=glm02_key$,dom=build_detail)glm02a$
              call pgmdir$+"glc_summary.aon","R",glm02a$,a[all],u[all],status
    
              build_detail: rem --- Build detail line array
    
              x[0]=a[0]
              title$=titles$[r]
              if flag$="U" x[0]=u[0]
              x[max]=x[0]
              for x=1 to mp
                  if flag$="A" amount=a[x]
                  if flag$="U" amount=u[x]
                  x[x]=amount
                  x[max]=x[max]+amount
              next x
    
              rem --- Print a record
    
              if total_pers>12
                OutVect!.addItem(title$)
                abc=fnblank(14)
              endif
    
              rem --- Print detail line
    
              dim buffer$(width)
              if total_pers<13 buffer$(1,o[1]-1)=title$
              OutVect!.addItem(buffer$(o[1]-14))
              buffer$(o[1])=str(x[0]:tm$)
              OutVect!.addItem(buffer$(o[1]))
              for x=2 to max-1
                  buffer$(o[x])=str(x[x-1]:mm$)
                  OutVect!.addItem(buffer$(o[x]))
              next x
              buffer$(o[max])=str(x[max]:tm$)
              if total_pers<13 buffer$(1,o[1]-1)=title$
              OutVect!.addItem(buffer$(o[max]))

              rem --- Loop back for next summary/budget record

          next r


          rem --- Loop back for next account master

    wend

done: rem --- All Done

    abc=fnblank(15)
    abc=fnblank(13)
    OutVect!.addItem(str(number))
    OutVect!.addItem(" Accounts Listed")

    if update$<>"" next_overlay$=update$
    goto std_exit

account_heading: rem --- Account Heading

    length=len(acct$)
    abc=fnblank(15)
    OutVect!.addItem(acct$(1,7))
    abc=fnblank(14)
    OutVect!.addItem(acct$(9))
    abc=fnblank(14)
    abc=fnblank(15)

    return

wildcard: rem --- Test account number against specified wildcard mask

    status=0
    if wildcard$="" return
    if wildcard<>len(wildcard$) wildcard=len(wildcard$)
    x$=fnmask$(glm01a.gl_account$(1,acctlen),m0$)
    for x=1 to wildcard
        if wildcard$(x,1)="?" continue
        if x$(x,1)<>wildcard$(x,1) status=1
    next x
    return

rem --- Functions

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+update$,err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
