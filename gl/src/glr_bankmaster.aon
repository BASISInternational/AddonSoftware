rem glm - Bank Reconciliation, Detail Listing
rem Program glr_bankmaster v8.0.0 19Jun2006 (glm_rf)
rem Created by adx_progconv.bbx v1.0.3 (06/19/2006 05:53:33)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Call/Enter

    enter gl_account$

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="glm-05",ids$[2]="GLM_BANKMASTER"
    files$[3]="glt-05",ids$[3]="GLT_BANKCHECKS"
    files$[4]="glt-15",ids$[4]="GLT_BANKOTHER"
    files$[5]="gls_params",ids$[5]="GLS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    glm05_dev=channels[2]
    glt05_dev=channels[3]
    glt15_dev=channels[4]
    gls01_dev=channels[5]

rem --- Dimension string templates

    dim glm01a$:templates$[1],glm05a$:templates$[2],
:       glt05a$:templates$[3],glt15a$:templates$[4],gls01a$:templates$[5]


rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",m0$,0,acctlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","A","",m1$,0,0
    m9$="####0"
    m0=len(m0$)
    m1=len(m1$)
    m9=len(m4$)
    headings=7
    width=120

rem --- Initializations

    dim headings$[headings],h$(width)
    dim o[5]
    dim bar$(width+2,"-")
    headings$[0]=cvs(sysinfo.firm_name$,2)
    headings$[1]=cvs(sysinfo.task_desc$,2)
    more=1
    page=0
    l9=59
    l=l9+1
    number=0
    pbufwidth=123
    checkhead=0
    otherhead=0
    clock$=""
    when$=sysinfo.system_date$
    checkopen=0
    otheropen=0
    checkpaid=0
    otherpaid=0
    opencheck=0
    openother=0
    paidcheck=0
    paidother=0

rem --- Calculate print positions

    o[0]=1
    o[1]=o[0]+9
    o[2]=o[1]+7
    o[3]=o[2]+12
    o[5]=width-m9-2
    o[4]=o[5]-m1-1

rem --- Load GL Account (glm-01) and Bank Master (glm-05) records

    glm01a.firm_id$=firm_id$
    glm01a.gl_account$=gl_account$
    glm05a.firm_id$=firm_id$
    glm05a.gl_account$=gl_account$
    glm01_key$=glm01a.firm_id$+glm01a.gl_account$
    glm05_key$=glm05a.firm_id$+glm05a.gl_account$
    find record (glm01_dev,key=glm01_key$,dom=*next) glm01a$
    find record (glm05_dev,key=glm05_key$,dom=*next) glm05a$

rem --- Build remaining headings

    headings$[3]="Bank Name: "+cvs(glm05a.name$,2)
    headings$[4]="Account Number: "+cvs(glm05a.bnk_acct_no$,2)
    headings$[5]="Account Name: "+cvs(glm05a.description$,2)
    headings$[6]="GL Account: "+fnmask$(glm01a.gl_account$(1,acctlen),m0$)
    headings$[7]="Description: "+cvs(glm01a.gl_acct_desc$,2)

    dim columns$[0,10]
    columns$[0,0]="",columns$[0,1]="C",columns$[0,2]="125"
    columns=0

rem --- Does the user only want to print outstanding items?

    prompt$="Do you want to only print outstanding items?"
    call pgmdir$+"adc_yesno.aon",1,prompt$,1,v$,v3
    if v3=4 goto std_exit
    if v$="Y" print_outstanding=1 
:        else print_outstanding=0
    if print_outstanding headings$[1]=headings$[1]+" (Outstanding Items Only)"

rem --- Open printer, start progress meter and position files

    call pgmdir$+"adc_progress.aon","NC","","","","",0,glt05_dev,1,meter_num,status
    read (glt05_dev,key=glm05_key$,dom=*next)

rem --- This section prints the checks. Get the next check transaction (glt-05) record.

    while more
          k$=key(glt05_dev,end=*break)
          if pos(glm05_key$=k$)<>1 break
          read record (glt05_dev) glt05a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status

          rem --- If we're printing only outstanding items, is this one outstanding?

          if print_outstanding and glt05a.paid_code$<>"O" continue

          rem --- Skip future transactions

          if glt05a.bnk_chk_date$>glm05a.curstm_date$ continue

          rem --- Print this check transaction (glt-05) record

          if glt05a.paid_code$<>"O" checkpaid=checkpaid+glt05a.check_amount,paidcheck=paidcheck+1
:                              else checkopen=checkopen+glt05a.check_amount,opencheck=opencheck+1
          endif
          if checkhead=0
             gosub check_heading
          endif
          dim pbuf$(pbufwidth)
          pbuf$(o[0])=glt05a.check_no$
          pbuf$(o[1])=glt05a.check_type$
          pbuf$(o[2])=fndate$(glt05a.bnk_chk_date$)
          pbuf$(o[3])=glt05a.description$
          pbuf$(o[4])=str(glt05a.check_amount:m1$)
          pbuf$(o[5])=glt05a.paid_code$
          OutVect!.addItem(pbuf$)
          l=l+1

          rem --- Loop back for next check transaction record

    wend

rem --- Print message if there weren't any checks to print

    if opencheck+paidcheck goto other_transactions
    if checkhead=0
       gosub check_heading
    endif
    dim pbuf$(pbufwidth)
    pbuf$(o[0])="No check transactions found"
    OutVect!.addItem(pbuf$)
    l=l+1

other_transactions: rem --- Print any other transactions

rem --- Position file

    gosub other_heading
    read (glt15_dev,key=glm05_key$,dom=*next)

rem --- This section prints the other transactions. 
rem --- Get the next other transaction (glt-15) record.

    while more
          k$=key(glt15_dev,end=*break)
          if pos(glm05_key$=k$)<>1 break
          read record (glt15_dev) glt15a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status

          rem --- If we're printing only outstanding items, is this one outstanding?

          if print_outstanding and glt15a.posted_code$<>"O" continue

          rem --- Skip future transactions

          if glt15a.trns_date$>glm05a.curstm_date$ continue

          rem --- Print this other transaction (glt-15) record

          if glt15a.posted_code$<>"O" otherpaid=otherpaid+glt15a.trans_amt,paidother=paidother+1
:                                else otheropen=otheropen+glt15a.trans_amt,openother=openother+1
          endif
          if otherhead=0
             gosub other_heading
             otherhead=1
          endif
          dim pbuf$(pbufwidth)
          pbuf$(o[0])=glt15a.trans_no$
          pbuf$(o[1])=glt15a.trans_type$
          pbuf$(o[2])=fndate$(glt15a.trns_date$)
          pbuf$(o[3])=glt15a.description$
          pbuf$(o[4])=str(glt15a.trans_amt:m1$)
          pbuf$(o[5])=glt15a.posted_code$
          OutVect!.addItem(pbuf$)
          l=l+1

          rem --- Loop back for next transaction record

    wend

rem --- Print message if there weren't any other transactions to print

    if openother+paidother goto balance
    if otherhead=0
       gosub other_heading
    endif
    dim pbuf$(pbufwidth)
    pbuf$(o[0])="No other transactions found" 
    OutVect!.addItem(pbuf$)
    l=l+1

balance: rem --- Print the balance information

    balance=glm05a.cur_stmt_amt-checkopen+otheropen
    gosub balance_heading
    dim pbuf$(pbufwidth)
    pbuf$(o[1])="Statement Balance:"
    pbuf$(o[4])=str(glm05a.cur_stmt_amt:m1$)
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[1])="Checks Outstanding:"
    pbuf$(o[4])=str(checkopen:m1$)
    pbuf$(o[5])=str(opencheck:m9$)
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[1])="Transactions Outstanding:"
    pbuf$(o[4])=str(otheropen:m1$)
    pbuf$(o[5])=str(openother:m9$)
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[4])=fill(m1,"-")
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[1])="Ending Balance:"
    pbuf$(o[4])=str(balance:m1$)
    OutVect!.addItem(pbuf$)
    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(o[1])="Check Book Balance as of "+fndate$(glm05a.curstm_date$)
    pbuf$(o[4])=str(glm05a.book_balance:m1$)
    OutVect!.addItem(pbuf$)
    difference=glm05a.book_balance-balance
    if difference>0 message$="Short"
    if difference<0 message$="Over"
    if difference<>0
       OutVect!.addItem("")
       dim pbuf$(pbufwidth)
       pbuf$(o[1])="This Account Is "+message$+" By "
       pbuf$(o[4])=str(difference:m1$)
       OutVect!.addItem(pbuf$)
    endif
    if print_outstanding=0
       OutVect!.addItem("")
       dim pbuf$(pbufwidth)
       pbuf$(o[1])="Paid Checks:"
       pbuf$(o[4])=str(checkpaid:m1$)
       pbuf$(o[5])=str(paidcheck:m9$)
       OutVect!.addItem(pbuf$)
       dim pbuf$(pbufwidth)
       pbuf$(o[1])="Paid Transactions:"
       pbuf$(o[4])=str(otherpaid:m1$)
       pbuf$(o[5])=str(paidother:m9$)
       OutVect!.addItem(pbuf$)
    endif

rem --- All Done

    goto std_exit

check_heading: rem --- Check transaction subheading

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    pbuf$(o[1],8)=" Checks "
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[0])="Number"
    pbuf$(o[1])="Type"
    pbuf$(o[2])="Check Date"
    pbuf$(o[3])="Description"
    pbuf$(o[4]+m1-6)="Amount"
    pbuf$(o[5])="Paid?"
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    OutVect!.addItem(pbuf$)
    checkhead=1
    l=l+4
    return

other_heading: rem --- Other transaction subheading

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    pbuf$(o[1],20)=" Other Transactions "
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[0])="Number"
    pbuf$(o[1])="Type"
    pbuf$(o[2])="Trans Date"
    pbuf$(o[3])="Description"
    pbuf$(o[4]+m1-6)="Amount"
    pbuf$(o[5])="Paid?"
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    OutVect!.addItem(pbuf$)
    otherhead=1
    l=l+4
    return

balance_heading: rem --- Account balance subheading

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    pbuf$(o[1],21)=" Balance Information "
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[4]+m1-6)="Amount"
    pbuf$(o[5])="Items"
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    OutVect!.addItem(pbuf$)
    return

rem --- Functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    rd_called$="YES"
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

    exit

rem #endinclude std_end.src

    end
