rem glr - Journal Entry Register (Report Overlay)
rem Program glr_register v8.0.0 22Apr2006 (glr_mb)
rem Created by adx_progconv.bbx v1.0.1 (04/22/2006 11:55:37)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- NOTE: If this register is being run as part of the Recurring Journal Entry
rem --- Register process, then gle01$ and gle11$ are actually referring to gle-02
rem --- and gle-12.

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files-1
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="GLS_PARAMS",ids$[1]=files$[1]
    files$[2]=gle01$,ids$[2]=gle01_alias$
    files$[3]=gle11$,ids$[3]=gle11_alias$
    files$[4]="glm-01",ids$[4]="GLM_ACCT"
    files$[5]="glm-03",ids$[5]="GLC_JOURNALCODE"
    options$[2]="L"
    options$[3]="L"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01_dev=channels[1]
    gle01_dev=channels[2]
    gle11_dev=channels[3]
    glm01_dev=channels[4]
    glm03_dev=channels[5]

rem --- Dimension string templates

    dim gls01a$:templates$[1],gle01a$:templates$[2],gle11a$:templates$[3],glm01a$:templates$[4],glm03a$:templates$[5]

rem --- Retrieve parameter records

    gls01a_key$=sysinfo.firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    total_periods=num(gls01a.total_pers$)
    period=num(gls01a.current_per$)
    year=num(gls01a.current_year$)
    account_length=num(gls01a.acct_length$)
    m0$=gls01a.acct_output$
    m1$=gls01a.amount_mask$
    m2$=gls01a.unit_mask$
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)

rem --- Report initializations

    headings=2
    width=131
    page=0
    l9=59
    l=l9+1
    verify$="N"

rem --- Initializations

    dim amountdash$(m1-1,"-"),unitdash$(m2-1,"-")
    dim headings$[headings+1],o[6],entry[2],total[2]
    h1$=cvs(sysinfo.firm_name$,2)
    h2$=cvs(sysinfo.task_desc$,2)
    task$=h2$
    when$=sysinfo.system_date$
    clock$=""
    done$="N"
    errors=0
    dw=30
    update=0
    number=0
    more=1
    moredetail=1
    headings$[0]=h1$
    headings$[1]=h2$
    if cycles$="Y" headings=headings+1,headings$[2]=h3$
    if gls01a.units_flag$<>"Y" unitdash$=""

rem --- Print positions

    m=m0
    if m<8 m=8
    o[0]=3
    o[1]=o[0]+4
    o[2]=o[1]+m+1
    o[3]=58
    o[6]=width
    if gls01a.units_flag$="Y" o[6]=width-m2,h6=o[6]+m2-6,unithdr$="Units"
    o[5]=o[6]-m1
    o[4]=o[5]-m1
    dw=min(dw,o[4]-o[3]-7)

rem --- Additional file opens (for journal entry register)

    gl$="N"
    status=0
    if je$<>"Y" goto open_printer
    call pgmdir$+"glc_ctlcreate.aon",err=std_exit,source$,"GL",glw11$,gl$,status
    if status goto std_exit
    endfile=endfile+1
    begfile=endfile
    files$[endfile]=glw11$
    ids$[endfile]="A"
    options$[endfile]="CL"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glw11_dev=channels[endfile]

open_printer: rem --- Open printer, initialize the progress meter and position the file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC",sysinfo.task_desc$,"","Printing","",13,gle01_dev,1,0,status
    read (gle01_dev,key=firm_id$,dom=*next)

rem --- Loop through Journal Entry Header records

    while more
          gle01_key$=key(gle01_dev,end=*break)
          if pos(firm_id$=gle01_key$)<>1 break
          read record (gle01_dev,key=gle01_key$)gle01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status

          rem --- Check cycle code if necessary for recurring journal entries

          if cycles$<>"Y" goto level_breaks
          if cycle$="" goto level_breaks
          if gle01a.cycle_code$=cycle$ goto level_breaks
          continue

          level_breaks: rem --- Level breaks

          gosub transaction_break

          rem --- Position to first line item"

          gosub subheading
          number=number+1
          read (gle11_dev,key=gle01_key$,dom=*next)

          rem --- Cycle through all line items for this entry

          while moredetail
                k$=key(gle11_dev,end=*break)
                if pos(gle01_key$=k$)<>1 break
                read record (gle11_dev)gle11a$

                rem --- Retrieve glm-01 Account Master

                glm01_key$=firm_id$+gle11a.gl_account$
                glm01a.gl_account$=gle11a.gl_account$
                glm01a.gl_acct_desc$=pad("(Not On File)",35)
                find record (glm01_dev,key=glm01_key$,dom=*next)glm01a$

                rem --- Format output fields

                debit$=""
                credit$="" 
                units$=""
                amount=gle11a.debit_amt
                if gle11a.credit_amt<>0 amount=-gle11a.credit_amt
                if amount<0 credit$=str(abs(amount):m1$)
                if amount>0 debit$=str(amount:m1$)
                if gls01a.units_flag$="Y" if gle11a.units<>0 units$=str(gle11a.units:m2$)

                rem --- Print detail line

                if l+1>l9 gosub report_heading
                print (printer_dev)@(o[0]),gle11a.line_no$,@(o[1]),fnmask$(gle11a.gl_account$(1,account_length),m0$),
:                                  @(o[2]),glm01a.gl_acct_desc$,@(o[3]),gle11a.gl_post_memo$,@(o[4]),debit$,
:                                  @(o[5]),credit$,@(o[6]),units$
                l=l+1

                rem --- Accumulate totals

                x=0
                entry[2]=entry[2]+gle11a.units
                if amount<0 x=1
                entry[x]=entry[x]+amount

                rem --- Generate summary record

                account$=gle11a.gl_account$
                gldate$=gle01a.trans_date$
                units=gle11a.units
                ref1$=gle01a.je_trans_id$
                ref2$=gle11a.line_no$
                ref3$=""
                memo$=gle11a.gl_post_memo$
                if cvs(gle01a.cycle_code$,2)<>"" ref3$="Cycle "+gle01a.cycle_code$
                gosub glrecap
                if cvs(gle01a.reverse_date$,2)="" continue
                account$=gle11a.gl_account$
                gldate$=gle01a.reverse_date$
                ref3$="Reversal"
                amount=-gle11a.gl_post_amt
                units=-gle11a.units
                gosub glrecap
          wend
    wend

rem --- All done

    done$="Y"
    gosub transaction_break
    balance=total[0]+total[1]
    warning$="",units$=""
    if balance<>0 warning$="Register Is Out Of Balance ---->"
    if gls01a.units_flag$="Y" units$=str(total[2]:m2$)
    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[4]),amountdash$,@(o[5]),amountdash$,@(o[6]),unitdash$
    print (printer_dev)warning$,@(o[4]-20),"Total For Register",@(o[4]),total[0]:m1$,@(o[5]),abs(total[1]):m1$,
:                      @(o[6]),units$

rem --- Run update overlay

    run pgmdir$+"glr_recap.aon"

report_heading: rem --- Report Heading

    l=headings+3
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)"Journal",@(26),"Transaction",@(40),"Date",@(48),"Reversal",@(o[3]),"Memo",
:                      @(o[4]-6),"Cycle",@(o[4]+m1-7),"Debits",@(o[5]+m1-8),"Credits",@(h6),unithdr$
    print (printer_dev)""
    return

subheading: rem --- Subheading

    if l+4>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(o[0]),"Seq",@(o[1]),"Account",@(o[2]),"Description"
    l=l+2
    return

transaction_break: rem --- Transaction Break

    if t0$="" goto journal_id
    balance=entry[0]+entry[1]
    reversal$=""
    units$=""
    warning$=""
    if balance<>0 warning$="Entry Is Out Of Balance ---->"
    if gls01a.units_flag$="Y" units$=str(entry[2]:m2$)
    for x=0 to 2
        total[x]=total[x]+entry[x]
    next x
    if l+3>l9 gosub report_heading
    print (printer_dev)@(o[4]),amountdash$,@(o[5]),amountdash$,@(o[6]),unitdash$
    print (printer_dev)warning$,@(o[4]-17),"Total For Entry",@(o[4]),entry[0]:m1$,
:                      @(o[5]),abs(entry[1]):m1$,@(o[6]),units$
    print (printer_dev)""
    l=l+3

journal_id: rem --- Retrieve journal id record

    dim entry[2]
    if done$="Y" goto transaction_break_exit
    glm03_key$=firm_id$+gle01a.journal_id$
    glm03a.code_desc$="(Not On File)"
    missing=0
    find record (glm03_dev,key=glm03_key$,dom=missing_journal_id)glm03a$
    goto transaction_heading

missing_journal_id: rem --- Missing or invalid journal id code

    errors=errors+1
    missing=missing+1

transaction_heading: rem --- Print transaction heading

    if cvs(gle01a.reverse_date$,2)<>"" reversal$=fndate$(gle01a.reverse_date$)
    if l+6>l9 gosub report_heading
    print (printer_dev)glm03a.journal_id$," ",glm03a.code_desc$,@(26),gle01a.je_trans_id$,@(38),
:                      fndate$(gle01a.trans_date$),@(48),reversal$,@(o[3]),gle01a.description$(1,dw),
:                      @(o[4]-6),gle01a.cycle_code$
    t0$=gle01a.je_trans_id$
    l=l+1

rem --- Update global variable

    if gl$<>"Y" goto transaction_break_exit
    if missing>0 goto transaction_break_exit
    glcontrol_template$=stbl("+GLCONTROL_TPL",err=transaction_break_exit)
    dim glcontrol$:glcontrol_template$
    glcontrol$=stbl("+GLCONTROL",err=transaction_break_exit)
    glcontrol.journal_id$=glm03a.journal_id$
    glcontrol.post_yr_end$=glm03a.post_yr_end$
    glcontrol.post_locked$=glm03a.post_locked$
    if je$="Y" glcontrol.permit_je$=je$
    x$=stbl("+GLCONTROL",glcontrol$)

rem --- Check dates

    gldate$=gle01a.trans_date$
    call pgmdir$+"glc_datecheck.aon",gldate$,verify$,period$,year$,glstatus
    if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,gldate$,glstatus,l,errors,status
    if cvs(gle01a.reverse_date$,2)="" goto transaction_break_exit
    gldate$=gle01a.reverse_date$
    call pgmdir$+"glc_datecheck.aon",gldate$,verify$,period$,year$,glstatus
    if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,gldate$,glstatus,l,errors,status

transaction_break_exit:

    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    return

rem --- Functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
