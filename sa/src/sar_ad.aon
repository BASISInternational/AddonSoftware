rem --- Generic Sales Analysis 12 Period Report
rem --- Program sar_ad v8.0.0 23Jul2007 (sar_ad)
rem --- Created by adx_codeport.bbx v1.1.5 (07/23/2007 02:12:39)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fncx (Line 0192)
rem --- Undefined function fncx (Line 0192)
rem --- Undefined function fncx (Line 0194)
rem --- Undefined function fncx (Line 0194)
rem --- Undefined function fncx (Line 0195)
rem --- Undefined function fncx (Line 0195)
rem --- Undefined function fncx (Line 0195)
rem --- Undefined function fncx (Line 0195)
rem --- Undefined function fnhash_ins$ (Line 0630)
rem --- Undefined function fnhash_ins$ (Line 0656)
rem --- Undefined function fnhash_ins$ (Line 0661)
rem --- Undefined function fnhash_ins$ (Line 0666)
rem --- Undefined function fnsdo_legal_name$ (Line 0666)
rem --- Undefined function fnsdo_excel_mask$ (Line 0668)
rem --- Undefined function fnsdo_excel_mask$ (Line 0668)
rem --- Undefined function fnyear_yy21$ (Line 0683)
rem --- Undefined function fnyy_year (Line 0683)

rem --- The following channel references have been identified:

rem --- sas01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)    

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=1,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]

rem --- IOLists

saw00a: iolist a0$,nmbr[all],total
sam00a: iolist x0$,q[all],c[all],s[all]
descchana: iolist x$[all]


rem --- Dimension string templates

rem jpb    dim descca$:templates$[2],sam00a$:templates$[3],saw00a$:templates$[4]

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="sas-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim sas01a$:templates$[1]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    sas01a_key$=firm_id$+"SA00"
    find record (ads01_dev,key=sas01a_key$,err=std_missing_params) sas01a$

rem --- Open/Lock Files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Parameters

    gosub get_sort_parameters
    dim wpos[nmbr]; rem "Key positions of segments in 'sorted' Work file
    wpos[0]=3
    for x=1 to nmbr
        wpos[x]=2+kpos[x]+sort_size-fldlen[0]
    next x
    level=pos(level$=levels$)
    if pos(seq$="AD")=0 goto l500
    if level>1 wpos[1]=wpos[0]
    if level>2 wpos[2]=wpos[1]+fldlen[1]
    if level>3 wpos[3]=wpos[2]+fldlen[2]
    if level>1 wpos[0]=wpos[level-1]+fldlen[level-1]; rem "Key position of Sort Amount in 'sorted' Work file

l500: rem --- Initializations

    dim a0$(sort_size+keylen-2),c[12],q[12],s[12],nmbr[11]
    total=0
    endperiod=num(period$)
    begperiod=endperiod-11
    endyear$=year$
    begyear$=year$
    if begperiod<1 begyear$=str(num(begyear$)-1:"0000"),begperiod=begperiod+periods
    endperiod$=periods$[endperiod]+" "+str(num(endyear$):"0000")
    m1$="########0-"
    m1=len(m1$)
    m2$="#######0-"
    m2=len(m2$)
    width=132
    page=0
    l9=59
    l=l9+1
    when$=sysinfo.system_date$
    clock$=""
    headings=6
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]="12 Period "+sysinfo.task_desc$
    headings$[2]=sus$[pos(su$=sus$)]+" Through "+endperiod$
    prev_seg1_head$=""
    prev_seg2_head$=""
    prev_seg3_head$=""
rem jpb    sdo_tabs$="\t\t\t\t\t"
rem jpb    sdo_dev=0
rem jpb    dim sdo_count[4]
rem jpb    sdo_run=fnglobal("+SDO_RUN",0)
rem jpb    if sdo_run gosub sdo_inits

rem --- Print positions

    dim o[4],o1[12]
    o[1]=0
    o[2]=o[1]+3
    o[3]=o[2]+3
    o[4]=o[3]+3
    o1[12]=width-m1
    for i=11 to 0 step -1
        o1[i]=o1[i+1]-m2
    next i
    if pos("M"=myp$) detail=len(mtd$)+1 else detail=4
    sum_fldlen=0
    for i=1 to segments
        if literals$[i]="" continue
        if literals$[i]="Item" desclen=iv_desc[1]+iv_desc[2]+iv_desc[3] else desclen=desclen[i]
        sum_fldlen=sum_fldlen+fldlen[i]
    next i

rem --- Report headings

    dim h1$(width),h2$(width),x1$[level],x2$[level]
    h=0
    literals$=""
    for i=1 to level
        if literals$[i]="" continue
        h=h+1
        literals$=literals$+"/"+literals$[i]
        x1$[h]="From "+literals$[i]+": "
        x2$[h]="  To "+literals$[i]+": "
        if begsegs$[i]="" x1$[h]=x1$[h]+"First" else x1$[h]=x1$[h]+begsegs$[i]
        if endsegs$[i]="" x2$[h]=x2$[h]+"Last" else x2$[h]=x2$[h]+endsegs$[i]
    next i
    dim h[h]
    if h=1 h[1]=min(fncx(x1$[1],width/2),fncx(x2$[1],width/2))
    if h=2 h[1]=1,h[2]=width-max(len(x1$[2]),len(x2$[2]))
    if h=3 h[1]=1,h[2]=min(fncx(x1$[2],width/2),fncx(x2$[2],width/2)),h[3]=width-max(len(x1$[3]),len(x2$[3]))
    if h=4 h[1]=1,h[2]=min(fncx(x1$[2],width/3),fncx(x2$[2],width/3)),h[3]=min(fncx(x1$[3],2*width/3),fncx(x2$[3],2*width/3)),h[4]=width-max(len(x1$[4]),len(x2$[4]))
    for i=1 to h
        h1$(h[i])=x1$[i]
        h2$(h[i])=x2$[i]
    next i
    literals$=literals$(2)
    headings$[4]=h1$
    headings$[5]=h2$
    gosub get_period_headings

rem --- Set Sales Anaylsis Year

    call pgmdir$+"adc_progress.aon","N","","","","",0,sam_dev,1,meter_num,status
    sayear$=begyear$
    t0$=""

l950: rem --- Position Sort File Pointer

    if action=21
        read (sam_dev,key=firm_id$+sayear$,knum=1,dom=*next)
    endif
    if action<>21
        read (sam_dev,key=firm_id$+sayear$,dom=*next)
    endif

l1000: rem --- Build Report Work File

    sam_k$=key(sam_dev,end=l1700)
l1020:
    if pos(firm_id$+sayear$=sam_k$)<>1 goto l1700
    read (sam_dev)
    i=1; rem "Begin loop

l1050: rem --- Validate Segment Begin

    if begsegs$[i]="" goto l1100
    if sam_k$(kpos[i],fldlen[i])>=begsegs$[i] goto l1100
    sam_k$=sam_k$(1,kpos[i]-1)+begsegs$[i]
    read (sam_dev,key=sam_k$,dom=l1600)
    goto l1020

l1100: rem --- Validate Segment End

    if endsegs$[i]="" goto l1150
    if sam_k$(kpos[i],fldlen[i])<=endsegs$[i] goto l1150
    sam_k$=sam_k$(1,kpos[i]-1)+$FF$
    read (sam_dev,key=sam_k$,dom=l1600)

l1150: rem --- Check Next Segment

    i=i+1
    if i<=segments goto l1050; rem "End loop
    call pgmdir$+"adc_progress.aon","S","","","","",0,sam_dev,1,meter_num,status

rem --- Detail Level Break?

    if t0$="" goto l1400
    for i=1 to level
        if literals$[i]<>"" and sam_k$(kpos[i],fldlen[i])<>t0$(kpos[i],fldlen[i]) exitto l1300
    next i
    goto l1500

l1300: rem --- Write Report Work File Record

    total=0
    for i=0 to 11
        total=total+nmbr[i]
    next i
    if zero$="N" and total=0 goto l1400
    write (saw00_dev,key=a0$) iol=saw00a

l1400: rem --- Initialize New Report Work File Record

    dim a0$(sort_size+keylen-4),nmbr[11]
    t0$=sam_k$(1,kpos[level]+fldlen[level]-1)
    a0$(1,2)=firm_id$
    a0$(3+sort_size)=t0$(kpos[1])
    total=0
    read (saw00_dev,key=a0$,dom=*next) iol=saw00a

l1500: rem --- Next Sales Analysis Record

    sam00_k$=sam_k$
rem jpb    if action>20 gosub un_xref_key
    if action=21
        read (sam00_dev,key=sam00_k$,knum=1,dom=l1600) iol=sam00a
    endif
    if action<>21
        read (sam00_dev,key=sam00_k$,dom=l1600) iol=sam00a
    endif
    if sayear$=begyear$ p=begperiod,first=0 else p=1,first=periods-begperiod+1
    for i=first to 11
        if su$="S" nmbr[i]=nmbr[i]+s[p-1] else nmbr[i]=nmbr[i]+q[p-1]
        p=p+1
        if p>periods exitto l1600
    next i

l1600: rem --- Get Next Sort Record

    goto l1000

l1700: rem --- Set End Sales Anaylsis Year

    if sayear$=endyear$ goto l1750
    sayear$=endyear$
    goto l950

l1750: rem --- Write Last Report Work File Record

    if pos(" "<>a0$(3))=0 goto l1900; rem "Empty report
    total=0
    for i=0 to 11
        total=total+nmbr[i]
    next i
    if zero$="N" and total=0 goto l1800
    write (saw00_dev,key=a0$) iol=saw00a

l1800: rem --- Sort Report Work File

    if pos(seq$="AD")=0 goto l1900
    call pgmdir$+"adc_progress.aon","S","","","","",0,saw00_dev,1,meter_num,status
    read (saw00_dev,key="",dom=*next)
l1830:
    saw00_k$=key(saw00_dev,end=l1900)
    if pos(" "<>saw00_k$(3,sort_size)) goto l1900
    read (saw00_dev,key=saw00_k$) iol=saw00a
    call pgmdir$+"adc_progress.aon","S","","","","",0,saw00_dev,1,meter_num,status
    if seq$="A" if total>0 a0$(3,sort_size)=str(-total:sort_mask$) else a0$(3,sort_size)=str(sort_num+total:sort_mask$)
    if seq$="D" if total<0 a0$(3,sort_size)=str(total:sort_mask$) else a0$(3,sort_size)=str(sort_num-total:sort_mask$)
    if level=1 goto l1885
    a0$(wpos[0],sort_size)=a0$(3,sort_size)
    for i=1 to level
        a0$(wpos[i],fldlen[i])=saw00_k$(2+sort_size-fldlen[0]+kpos[i],fldlen[i])
    next i
l1885:
    write (saw00_dev,key=a0$) iol=saw00a
    remove (saw00_dev,key=saw00_k$)

    goto l1830

l1900: rem --- Position Report Work File Pointer

    call pgmdir$+"adc_progress.aon","S","","","","",0,saw00_dev,1,meter_num,status
    dim nmbr_tot[11],n[11]
    done=0
    seg1_head=0
    seg2_head=0
    total_tot=0
    t=0
    t0$=""
    t1$=""
    t2$=""
    read (saw00_dev,key="",dom=*next)

l2000: rem --- Process Report Work File

    saw00_k$=key(saw00_dev,end=done)
    read (saw00_dev,key=saw00_k$) iol=saw00a
    tmp$=""
    for i=1 to level
        if literals$[i]<>"" tmp$=tmp$+a0$(wpos[i],fldlen[i])
    next i
    call pgmdir$+"adc_progress.aon","S","","","","",0,saw00_dev,1,meter_num,status

rem --- Segment Breaks

    if a0$(wpos[1],fldlen[1])<>t0$ gosub first_break
    if a0$(wpos[2],fldlen[2])<>t1$ gosub second_break
    if a0$(wpos[3],fldlen[3])<>t2$ gosub third_break

rem --- Print Segment Subheadings

    if seg1_head gosub first_subhead
    if seg2_head gosub second_subhead
    if seg3_head gosub third_subhead

rem --- Fourth Segment Detail

    if level<4 or literals$[4]="" goto l2600
    seg=4
    seg$=a0$(wpos[seg],fldlen[seg])
    gosub get_seg_desc
    if l+2>l9 gosub third_subhead
    print (printer_dev)@(o[4]),segdesc$
    l=l+1
    n[all]=nmbr[all]
    t=total
    gosub print_detail

l2600: rem --- Accumulate Totals

    nmbr_tot[all]=nmbr_tot[all]+nmbr[all]
    total_tot=total_tot+total
    if literals$[1]<>"" nmbr_tot1[all]=nmbr_tot1[all]+nmbr[all],total_tot1=total_tot1+total
    if level>1 and literals$[2]<>"" nmbr_tot2[all]=nmbr_tot2[all]+nmbr[all],total_tot2=total_tot2+total
    if level>2 and literals$[3]<>"" nmbr_tot3[all]=nmbr_tot3[all]+nmbr[all],total_tot3=total_tot3+total

rem --- Get Next Report Work File Record

    goto l2000

done: rem --- All done

    done=1
    gosub first_break
    if l+1>l9 gosub report_heading
    if level=1 print (printer_dev)""; let l=l+1
    if l+2>l9 gosub report_heading
    print (printer_dev)@(o[1]),"Total for Report"
    n[all]=nmbr_tot[all]
    t=total_tot
rem jpb    sdo_line_head$="Total for Report"+sdo_tabs$(1,level*2)
    gosub print_detail
rem jpb    if sdo_run gosub sdo_grand_totals
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[1]),literals$,
    if o[1]+len(literals$)+2>o1[0]+m2-7 print (printer_dev)""; let l=l+1
    print (printer_dev)@(o1[0]),h3$
    print (printer_dev)""
rem jpb    if sdo_run and page=1 gosub sdo_rpt_headings
    l=l+2
    seg1_head=1
    seg2_head=1
    seg3_head=1
    return

first_subhead: rem --- First Segment Subheading

    if l+1+level>l9 gosub report_heading
    if literals$[1]="" or seg1_head=0 goto l5290
    print (printer_dev)@(o[1]),seg1_head$
    l=l+1
    seg1_head=0
l5290:
    return

second_subhead: rem --- Second Segment Subheading

    if l+1+level-1>l9 gosub first_subhead
    if level<2 or literals$[2]="" or seg2_head=0 goto l5490
    print (printer_dev)@(o[2]),seg2_head$
    l=l+1
    seg2_head=0
l5490:
    return

third_subhead: rem --- Third Segment Subheading

    if l+1+level-2>l9 gosub second_subhead
    if level<3 or literals$[3]="" or seg3_head=0 goto l5690
    print (printer_dev)@(o[3]),seg3_head$
    l=l+1
    seg3_head=0
l5690:
    return

print_detail: rem --- Print Detail Line

rem jpb    if sdo_line_head$="*skip*" goto l5880
    for i=0 to 11
        print (printer_dev)@(o1[i]),n[i]:m2$,
    next i
    print (printer_dev)@(o1[12]),t:m1$
    l=l+1
rem jpb    if sdo_run gosub sdo_detail
l5880:
rem jpb    sdo_line_head$=""
    return

first_break: rem --- First Segment Break

    if literals$[1]="" goto l6190
    if t0$="" goto l6100
    gosub second_break
    if level=1 goto l6060
    if l+1>l9 gosub report_heading
    if level=2 print (printer_dev)""; let l=l+1
    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[1]),"Total for ",t0$; let l=l+1
rem jpb    if sdo_run seg=1; gosub sdo_set_line_head
l6060:
    n[all]=nmbr_tot1[all]
    t=total_tot1
rem jpb    sdo_count[1]=0
    gosub print_detail
    if level<>1 print (printer_dev)""; let l=l+1
l6100:
    if done goto l6190
    dim nmbr_tot1[11]
    t0$=a0$(wpos[1],fldlen[1])
    total_tot1=0
    t1$=""
    t2$=""
    if break$="Y" gosub report_heading
    seg$=t0$
    seg=1
    gosub get_seg_desc
    seg1_head$=segdesc$
    seg1_head=1
l6190:
    return

second_break: rem --- Second Segment break

    if level<2 or literals$[2]="" goto l6390
    if t1$="" goto l6300
    gosub third_break
    if level=2 goto l6260
    if l+1>l9 gosub first_subhead
    if level=3 print (printer_dev)""; let l=l+1
    if l+1>l9 gosub first_subhead
    print (printer_dev)@(o[2]),"Total for ",t1$; let l=l+1
rem jpb    if sdo_run seg=2; gosub sdo_set_line_head
l6260:
    n[all]=nmbr_tot2[all]
    t=total_tot2
rem jpb    sdo_count[2]=0
rem jpb    sdo_count[1]=sdo_count[1]+1
    gosub print_detail
    if l+1>l9 goto l6300
    if level<>2 print (printer_dev)""; let l=l+1
l6300:
    if done goto l6390
    dim nmbr_tot2[11]
    t1$=a0$(wpos[2],fldlen[2])
    total_tot2=0
    t2$=""
    seg$=t1$
    seg=2
    gosub get_seg_desc
    seg2_head$=segdesc$
    seg2_head=1
l6390:
    return

third_break: rem --- Third Segment break

    if level<3 or literals$[3]="" goto l6590
    if t2$="" goto l6500
    if level=3 goto l6460
    if l+3>l9 gosub third_subhead
    print (printer_dev)'LF',@(o[3]),"Total for ",t2$; let l=l+2
rem jpb    if sdo_run seg=3; gosub sdo_set_line_head
l6460:
    n[all]=nmbr_tot3[all]
    t=total_tot3
rem jpb    sdo_count[3]=0
rem jpb    sdo_count[2]=sdo_count[2]+1
    gosub print_detail
    if l+1>l9 goto l6500
    if level<>3 print (printer_dev)""; let l=l+1
l6500:
    if done goto l6590
    dim nmbr_tot3[11]
    t2$=a0$(wpos[3],fldlen[3])
    total_tot3=0
    seg$=t2$
    seg=3
    gosub get_seg_desc
    seg3_head$=segdesc$
    seg3_head=1
l6590:
    return

get_period_headings: rem --- Build Period Heading String

    dim h3$(width)
    p=begperiod
    yr$=begyear$
    for i=0 to 11
        h3$(o1[i]+m2-6)=periods$[p]+" "+str(num(yr$):"0000")
        p=p+1
        if p>periods yr$=str(num(yr$)+1:"0000"),p=1
    next i
    h3$(o1[12]+m1-5)="Total"
    h3$=h3$(o1[0]+1)
    return

un_xref_key: rem --- Build Sales Analysis Key From Cross Reference Key

    x_k$=sam00_k$(kpos[0],fldlen[0])
    for x=1 to segments
        x_k$=x_k$+sam00_k$(kpos[xrefs[x]],fldlen[xrefs[x]])
    next x
    sam00_k$(1)=x_k$
    return

get_seg_desc: rem --- Get Description For Segment Selection

    dim x$[descstr[seg]],x$[descstr[seg]](descpos[seg]+desclen[seg]),fld$(inlen[seg])
    if descchan[seg]=0 goto l6850
    x$[descstr[seg]](descpos[seg])="Unknown "+literals$[seg]
    if cvs(seg$,2)="" and literals$[seg]="Item" x$[descstr[seg]](descpos[seg])="Summarized Items"
    if cvs(seg$,2)="" and literals$[seg]="Customer Ship-To" x$[descstr[seg]](descpos[seg])="Bill-To Address"
    if literals$[seg]="Customer Ship-To" descrec$[seg]=a0$(wpos[seg-1],fldlen[seg-1])
    read (descchan[seg],key=firm_id$+descrec$[seg]+seg$,dom=*next) iol=descchana
l6850:
    desc$=x$[descstr[seg]](descpos[seg],desclen[seg])
    fld$(1)=seg$
    if types$[seg]="M" fld$=fnmask$(fld$(1,inlen[seg]),omasks$[seg])
    if literals$[seg]="Item" desc$=fnitem$(x$[descstr[seg]](descpos[seg],desclen[seg]),iv_desc[1],iv_desc[2],iv_desc[3]),fld$=fld$(1,inlen[seg])
    segdesc$=fld$+"  "+desc$
    return

get_sort_parameters: rem --- Get Sort Parameters

    sort_size=16
    sort_mask$="-"+fill(sort_size-1,"0")
    m$=m1$
    if report$="Y" and su$="U" m$=m2$
    x=pos("."=m$)
    if x=0 goto l6960
    if pos("-"=m$)>x x=x+1
    sort_mask$(sort_size-len(m$)+x,1)="."; rem "Place the decimal point
l6960:
    sort_num=num("1"+sort_mask$(2))+num(sort_mask$(1,sort_size-1)+"1"); rem "Maximum value that fits mask
    return

sdo_detail: rem --- Start sdOffice detail line

    if sdo_line_head$<>"" sdo_line$=sdo_line_head$; goto l7100
    if cvs(seg1_head$,2)<>"" if seg1_head$<>prev_seg1_head$ sdo_line$=cvs(seg1_head$,2)+"\t" else sdo_line$="\t"
    if cvs(seg2_head$,2)<>"" if seg1_head$<>prev_seg1_head$ or seg2_head$<>prev_seg2_head$ sdo_line$=sdo_line$+cvs(seg2_head$,2)+"\t"else let sdo_line$=sdo_line$+"\t"
    if cvs(seg3_head$,2)<>"" if seg1_head$<>prev_seg1_head$ or seg2_head$<>prev_seg2_head$ or seg3_head$<>prev_seg3_head$ sdo_line$=sdo_line$+cvs(seg3_head$,2)+"\t" else sdo_line$=sdo_line$+"\t"
    if level=4 sdo_line$=sdo_line$+segdesc$+"\t"
    prev_seg1_head$=seg1_head$
    prev_seg2_head$=seg2_head$
    prev_seg3_head$=seg3_head$

l7100: rem --- Add to sdOffice detail line

    for ii=0 to 11
        sdo_line$=sdo_line$+str(n[ii])+"\t"
    next ii
    sdo_line$=sdo_line$+str(t)+"\t"

rem --- Finish sdOffice detail line

    if sdo_line_head$<>"" sdo_line$=sdo_line$+"\n\n"
    call pgmdir$+"adc_sdoffice.aon",sdo_file$,"detail",fnhash_ins$("","line",sdo_line$),sdo_dev,sdo_text$,sdo_dat$,status
    if status sdo_run=0; goto l7290
    if sdo_line_head$="" and level=4 sdo_count[3]=sdo_count[3]+1
l7290:
    return

sdo_set_line_head: rem --- Set line heading

    switch seg
    case 1
    if cvs(t0$,2)="" and literals$[1]="Item" sdo_t0$="Summerized" else sdo_t0$=cvs(t0$,2)
    if sdo_count[1]>=2 sdo_line_head$="Total for "+sdo_t0$+sdo_tabs$(1,level*2) else sdo_line_head$="*skip*"
    break
    case 2
    if cvs(t1$,2)="" and literals$[2]="Item" sdo_t1$="Summerized" else sdo_t1$=cvs(t1$,2)
    if sdo_count[2]>=2 sdo_line_head$="\tTotal for "+sdo_t1$+sdo_tabs$(1,(level-1)*2) else sdo_line_head$="*skip*"
    break
    case 3
    if cvs(t2$,2)="" and literals$[3]="Item" sdo_t2$="Summerized" else sdo_t2$=cvs(t2$,2)
    if sdo_count[3]>=2 sdo_line_head$="\t\tTotal for "+sdo_t2$+sdo_tabs$(1,(level-2)*2) else sdo_line_head$="*skip*"
    break
    swend
    return

sdo_rpt_headings: rem --- sdOffice Heading

    call pgmdir$+"adc_sdoffice.aon",sdo_file$,"rpt_headings",fnhash_ins$("","head",sdo_head$+sdo_per_head$),sdo_dev,sdo_text$,sdo_dat$,status
    if status sdo_run=0
    return
rem --- sdOffice Totals
sdo_grand_totals:
    call pgmdir$+"adc_sdoffice.aon",sdo_file$,"grand_totals",fnhash_ins$("","wide_form",sdo_wide_form$),sdo_dev,sdo_text$,sdo_dat$,ignore_status
    return
rem --- Build formatting columns for sdOffice
sdo_inits:
    let sdo_file$=pgm(-2),sdo_text$=""
    call pgmdir$+"adc_sdoffice.aon",sdo_file$,"inits",fnhash_ins$("","title",fnsdo_legal_name$(sysinfo.task_desc$)),sdo_dev,sdo_text$,sdo_dat$,status
    if status sdo_run=0; goto sdo_inits_done
    let sdo_excel_m1$=fnsdo_excel_mask$(m1$),sdo_excel_m2$=fnsdo_excel_mask$(m2$)
    let sdo_wide_form$=""
    for ii=1 to 12
        let sdo_wide_form$=sdo_wide_form$+sdo_excel_m2$+"\t"
    next ii
    let sdo_wide_form$=sdo_wide_form$+sdo_excel_m1$+"\t"
    for ii=1 to level; let sdo_wide_form$="\t"+sdo_wide_form$; next ii
    let sdo_head$="",sdo_cols=0
    for ii=1 to level
        if literals$[ii]<>"" sdo_head$=sdo_head$+literals$[ii]+"\t",sdo_cols=sdo_cols+1
    next ii
    let p=begperiod,yr$=begyear$,sdo_per_head$=""
    for i=0 to 11
        let sdo_per_head$=sdo_per_head$+"'"+periods$[p]+" "+str(num(yr$):"0000")+"\t"
        let p=p+1
        if p>periods yr$=str(num(yr$)+1:"0000"),p=1
    next i
rem jpb    let sdo_per_head$=sdo_per_head$+"Total"
sdo_inits_done: return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncx(q$,q)=int(q-len(q$)/2)

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
