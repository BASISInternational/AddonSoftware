rem --- Retrieve Sales Analysis Control Parameters
rem --- Program sac_pa v8.0.0 25Jul2007 (sac_pa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/25/2007 04:19:05)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x sys-01 reference [sys01_dev,fi] (Line 0086)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0127)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0134)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0153)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0154)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0166)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0167)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0168)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0169)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0170)

rem --- The following IOLIST's were removed from this program:

rem --- aps01a: iolist app0$,app1$,app2$,app3$,app4$,apm0$,apm1$,apm2$,apm3$
rem --- ars01a: iolist arp0$,arp1$,arp2$(1),arp3$,arp4$(1),arm0$,arm1$,arm2$,arm3$
rem --- gls01a: iolist glp0$,glp1$,glp2$(1),glp3$(1)
rem --- ivs01a: iolist ivp0$,ivp1$,ivp2$(1),ivp3$,ivp4$,ivm0$,ivm1$,ivm2$,ivm3$
rem --- rem --- descstr[n]    : iolist string containing description (returned)

rem --- The following channel references have been identified:

rem --- ivm14a: Channel reference (Line 0203)

rem --------------------------------------------------------------------------------
rem --- sas01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0201)

rem --- ACTION        : Specifies which sales analysis to perform (Input)
rem --- 1 = sam-01  Customer      Product    Item
rem --- 2 = sam-02  Territory     Product    Item
rem --- 3 = sam-03  Salesperson   Product    Item
rem --- 4 = sam-04  Cust Type     Product    Item
rem --- 5 = sam-05  Customer      Ship-To    Item
rem --- 6 = sam-06  SIC           Product    Item
rem --- 7 = sam-07  Product       Item
rem --- 8 = sam-08  Warehouse     Product    Item
rem --- 9 = sam-09  Vendor        Product    Item
rem --- 10 = sam-10  Dist Code     Product    Item
rem --- 11 = sam-11  Product       Non-Stock
rem --- 12 = sam-12  Territory     Customer   Product
rem --- >20 = use cross reference file
rem --- ADS01_DEV     : ads-01 channel (Input)
rem --- N0$           : Firm ID (Input)
rem --- SEGMENTS      : Number of key segments to use (Returned)
rem --- LEVELS$[n]    : Character designation of detail levels (Returned)
rem --- LITERALS$[n]  : Screen literals to display (Returnd)
rem --- TYPES$[n]     : V0$ field types (Returned)
rem --- IMASKS$[n]    : V3$ field input masks (Returned)
rem --- OMASKS$[n]    : Output display masks (Returned)
rem --- PROMPTS$[n]   : V4$ field prompts to display (Returned)
rem --- INLEN[n]      : Number of characters in input field (Returned)
rem --- FLDLEN[n]     : Length of key segment (Returned)
rem --- DESCCHAN[n]   : Channel of file to obtain description (Returned)
rem --- DESCREC$[n]   : ID of record to obtain description (Returned)
rem --- DESCPOS[n]    : Start position of description in DESCSTR (Returned)
rem --- DESCLEN[n]    : Length of description in DESCSTR (Returned)
rem --- SA_CHANNELS[n]: Channels of Sales Analysis files (Returned)
rem --- [1]=SAM-xx file   [2]=SAM-xx cross reference file
rem --- KEYLEN        : Key length of SAM-xx record (Returned)
rem --- XREFS[n]      : Segment position in cross reference file (Returned)
rem --- FY$           : Current Sales Analysis fiscal year (Returned)
rem --- PERIODS       : Number of fiscal periods (Returned)
rem --- PERIODS$[x]   : Abbreviated period names (Returned)
rem --- IV_MASKS$[y]  : Inventory parameter masks (Returned)
rem --- [1] = Amount   [2] = Unit   [3] = Cost
rem --- IV_DESC[z]    : Inventory item description parameters (Returned)
rem --- [0]        = Item number length
rem --- [1] to [3] = Description segment lengths
rem --- IVM14_DEV     : ivm-14 channel (Returned)
rem --- STATUS        : Status Code (0 = No Errors) (Returned)

    setesc std_error
    seterr std_error
    enter action,ads01_dev,firm_id$,segments,levels$[all],literals$[all],types$[all],imasks$[all],omasks$[all],prompts$[all],inlen[all],fldlen[all],descchan[all],descrec$[all],descstr[all],descpos[all],desclen[all],sa_channels[all],keylen,xrefs[all],fy$,periods,periods$[all],iv_masks$[all],iv_desc[all],ivm14_dev,status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-14"
rem    files$[3]="rem- -"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm14_dev=channels[2]
    rem -_dev=channels[3]

rem --- Dimension string templates

    dim ivm14a$:templates$[2];rem -a$:templates$[3]

rem --- Retrieve miscellaneous templates

    files=5,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="aps-01A"
    ids$[2]="ars-01A"
    ids$[3]="gls-01A"
    ids$[4]="ivs-01A"
    ids$[5]="sas-01A"
rem jpb    ids$[6]="sys-01A"

    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim aps01a$:templates$[1],ars01a$:templates$[2],gls01a$:templates$[3],
:       ivs01a$:templates$[4],sas01a$:templates$[5];rem jpb,sys01a$:templates$[6]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
rem jpb    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (ads01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sas01a_key$=firm_id$+"SA00"
    find record (ads01_dev,key=sas01a_key$,err=std_missing_params) sas01a$
    ads01a_key$=firm_id$+"SY00"
rem    find record (ads01_dev,key=ads01a_key$,err=std_missing_params) ads01a$

rem --- Open/Lock Files

    files=7
    dim files$[files],options$[files],channels[files]
    files$[7]="ivm-14"

rem --- Parameters

    saopts=11
    dim sap1$(saopts),sap2$(saopts),arp2$(6),arp4$(4),glp2$(10),glp3$(13*25),ivp2$(53)
    find record (ads01_dev,key=firm_id$+"SA00",dom=std_missing_params) sas01a$
    find record (ads01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    find record (ads01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    find record (ads01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    if action=9 find record (ads01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$

rem --- Initializations

    xrefs[1]=1
    xrefs[2]=2
    xrefs[3]=3
    xrefs[4]=4

    fy$=ars01a.current_year$
    periods=num(gls01a.total_pers$)
    for x=1 to periods
        if x=1 periods$[x]=gls01a.abbr_name_01$
        if x=2 periods$[x]=gls01a.abbr_name_02$
        if x=3 periods$[x]=gls01a.abbr_name_03$
        if x=4 periods$[x]=gls01a.abbr_name_04$
        if x=5 periods$[x]=gls01a.abbr_name_05$
        if x=6 periods$[x]=gls01a.abbr_name_06$
        if x=7 periods$[x]=gls01a.abbr_name_07$
        if x=8 periods$[x]=gls01a.abbr_name_08$
        if x=9 periods$[x]=gls01a.abbr_name_09$
        if x=10 periods$[x]=gls01a.abbr_name_10$
        if x=11 periods$[x]=gls01a.abbr_name_11$
        if x=12 periods$[x]=gls01a.abbr_name_12$
        if x=13 periods$[x]=gls01a.abbr_name_13$        
    next x
    iv_masks$[1]=ivs01a.unit_mask$
    iv_masks$[2]=ivs01a.cost_mask$
    iv_masks$[3]=ivs01a.price_mask$
    iv_desc[0]=num(ivs01a.item_id_len$)
    iv_desc[1]=num(ivs01a.desc_len_01$)
    iv_desc[2]=num(ivs01a.desc_len_02$)
    iv_desc[3]=num(ivs01a.desc_len_03$)

rem --- Which Sales Analysis?

    on mod(action,20) goto l4600,l1100,l1200,l1300,l1400,l1500,l1600,l1700,l1800,l1900,l2000,l2100,l2200,l4600

l1100: rem --- (Action = 1 & 21) Customer/Product/Item

    if mod(action,20)=1 if sas01a.by_customer$<>"Y" exitto l4500            
    levels$[1]="C"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(sas01a.customer_lev$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]="Customer"
    literals$[2]="Product Type"
    literals$[3]="Item"
    types$[1]="M"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=ars01a.amount_mask$
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=ars01a.customer_output$
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]="Enter Valid "+literals$[x]
    next x
    inlen[1]=NUM(ars01a.customer_size$)
    inlen[2]=3
    inlen[3]=iv_desc[0]
    fldlen[1]=6
    fldlen[2]=3
    fldlen[3]=20
    files$[1]="arm-01"
    files$[2]="ivm-10"
    files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    descrec$[1]=""
    descrec$[2]="A"
    descrec$[3]=""
    descstr[1]=1
    descstr[2]=0
    descstr[3]=1
    descpos[1]=1
    descpos[2]=7
    descpos[3]=1
    desclen[1]=30
    desclen[2]=20
    desclen[3]=60
    files$[5]="sam-01"
    files$[6]="sam-21"; rem "Files for SA_CHANNELS[1& 2]
    keylen=35
    xrefs[1]=3
    xrefs[2]=1
    xrefs[3]=2; rem "Cross references to sam-21
    goto done

l1200: rem --- (Action = 2) Territory/Product/Item

    if mod(action,20)=2 if sas01a.by_territory$<>"Y" exitto l4500        
    levels$[1]="T"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(sas01a.terrcode_lev$=levels$[1]+levels$[2]+levels$[3])    
    literals$[1]="Territory"
    literals$[2]="Product Type"
    literals$[3]="Item"
    types$[1]="S"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=""
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=""
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]="Enter Valid "+literals$[x]
    next x
    inlen[1]=3
    inlen[2]=3
    inlen[3]=iv_desc[0]
    fldlen[1]=3
    fldlen[2]=3
    fldlen[3]=20
    files$[1]="arm-10"
    files$[2]="ivm-10"
    files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    descrec$[1]="H"
    descrec$[2]="A"
    descrec$[3]=""
    descstr[1]=0
    descstr[2]=0
    descstr[3]=1
    descpos[1]=7
    descpos[2]=7
    descpos[3]=1
    desclen[1]=20
    desclen[2]=20
    desclen[3]=60
    files$[5]="sam-02"
    files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    keylen=32
    goto done

l1300: rem --- (Action = 3) Salesperson/Product/Item

    if mod(action,20)=3 if sas01a.by_salespsn$<>"Y" exitto l4500    
    levels$[1]="S"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(sas01a.salespsn_lev$=levels$[1]+levels$[2]+levels$[3])    
    literals$[1]="Salesperson"
    literals$[2]="Product Type"
    literals$[3]="Item"
    types$[1]="S"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=""
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=""
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]="Enter Valid "+literals$[x]
    next x
    inlen[1]=3
    inlen[2]=3
    inlen[3]=iv_desc[0]
    fldlen[1]=3
    fldlen[2]=3
    fldlen[3]=20
    files$[1]="arm-10"
    files$[2]="ivm-10"
    files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    descrec$[1]="F"
    descrec$[2]="A"
    descrec$[3]=""
    descstr[1]=0
    descstr[2]=0
    descstr[3]=1
    descpos[1]=7
    descpos[2]=7
    descpos[3]=1
    desclen[1]=20
    desclen[2]=20
    desclen[3]=60
    files$[5]="sam-03"
    files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    keylen=32
    goto done

l1400: rem --- (Action = 4) Customer Type/Product/Item

    if mod(action,20)=1 if sas01a.by_customer_type$<>"Y" exitto l4500
    levels$[1]="C"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(sas01a.custtype_lev$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]="Customer Type"
    literals$[2]="Product Type"
    literals$[3]="Item"
    types$[1]="S"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=""
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=""
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]="Enter Valid "+literals$[x]
    next x
    inlen[1]=3
    inlen[2]=3
    inlen[3]=iv_desc[0]
    fldlen[1]=3
    fldlen[2]=3
    fldlen[3]=20
    files$[1]="arm-10"
    files$[2]="ivm-10"
    files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    descrec$[1]="L"
    descrec$[2]="A"
    descrec$[3]=""
    descstr[1]=0
    descstr[2]=0
    descstr[3]=1
    descpos[1]=7
    descpos[2]=7
    descpos[3]=1
    desclen[1]=20
    desclen[2]=20
    desclen[3]=60
    files$[5]="sam-04"
    files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    keylen=32
    goto done

l1500: rem --- (Action = 5) Customer/Ship-to/Item

    if mod(action,20)=5 if sas01a.by_shipto$<>"Y" exitto l4500    
    levels$[1]="C"
    levels$[2]="S"
    levels$[3]="I"
    segments=pos(sas01a.shipto_lev$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]="Customer"
    literals$[2]="Customer Ship-To"
    literals$[3]="Item"
    types$[1]="M"
    types$[2]="Z"
    types$[3]="S"
    imasks$[1]=ars01a.amount_mask$
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=ars01a.customer_output$
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]="Enter Valid "+literals$[x]
    next x
    inlen[1]=len(ars01a.customer_size$)
    inlen[2]=6
    inlen[3]=iv_desc[0]
    fldlen[1]=6
    fldlen[2]=6
    fldlen[3]=20
    files$[1]="arm-01"
    files$[2]="arm-03"
    files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    descrec$[1]=""
    descrec$[2]=""
    descrec$[3]=""
    descstr[1]=1
    descstr[2]=1
    descstr[3]=1
    descpos[1]=1
    descpos[2]=1
    descpos[3]=1
    desclen[1]=30
    desclen[2]=30
    desclen[3]=60
    files$[5]="sam-05"
    files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    keylen=38
    goto done

l1600: rem --- (Action = 6) SIC/Product/Item

    if mod(action,20)=6 if sas01a.by_sic_code$<>"Y" exitto l4500
    levels$[1]="C"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(sas01a.sic_code_lev$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]="SIC"
    literals$[2]="Product Type"
    literals$[3]="Item"
    types$[1]="S"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=""
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=""
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]="Enter Valid "+literals$[x]
    next x
    inlen[1]=8
    inlen[2]=3
    inlen[3]=iv_desc[0]
    fldlen[1]=8
    fldlen[2]=3
    fldlen[3]=20
    files$[1]=""
    files$[2]="ivm-10"
    files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    descrec$[1]=""
    descrec$[2]="A"
    descrec$[3]=""
    descstr[1]=0
    descstr[2]=0
    descstr[3]=1
    descpos[1]=8
    descpos[2]=7
    descpos[3]=1
    desclen[1]=20
    desclen[2]=20
    desclen[3]=60
    files$[5]="sam-06"
    files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    keylen=37
    goto done

l1700: rem --- (Action = 7) Product/Item

    if mod(action,20)=7 if sas01a.by_product$<>"Y" exitto l4500
    levels$[1]="P"
    levels$[2]="I"
    levels$[3]=""
    segments=pos(sas01a.product_lev$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]="Product Type"
    literals$[2]="Item"
    types$[1]="S"
    types$[2]="S"
    imasks$[1]=""
    imasks$[2]=""
    omasks$[1]=""
    omasks$[2]=""
    for x=1 to segments
        let prompts$[x]="Enter Valid "+literals$[x]
    next x
    let inlen[1]=3
    let inlen[2]=iv_desc[0]
    let fldlen[1]=3
    let fldlen[2]=20
    let files$[1]="ivm-10"
    let files$[2]="ivm-01"
    let files$[3]=""; rem "Files for DESCCHAN[1, 2 & 3]
    let descrec$[1]="A"
    let descrec$[2]=""
    let descstr[1]=0
    let descstr[2]=1
    let descpos[1]=7
    let descpos[2]=1
    let desclen[1]=20
    let desclen[2]=60
    let files$[5]="sam-07"
    let files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    let keylen=29
    goto done

l1800: rem --- (Action = 8) Warehouse/Product/Item

    if mod(action,20)=8 if sas01a.by_whse$<>"Y" exitto l4500
    let levels$[1]="W"
    let levels$[2]="P"
    let levels$[3]="I"
    segments=pos(sas01a.whse_lev$=levels$[1]+levels$[2]+levels$[3])
    let literals$[1]="Warehouse"
    let literals$[2]="Product Type"
    let literals$[3]="Item"
    let types$[1]="S"
    let types$[2]="S"
    let types$[3]="S"
    let imasks$[1]=""
    let imasks$[2]=""
    let imasks$[3]=""
    let omasks$[1]=""
    let omasks$[2]=""
    let omasks$[3]=""
    for x=1 to segments
        let prompts$[x]="Enter Valid "+literals$[x]
    next x
    let inlen[1]=2
    let inlen[2]=3
    let inlen[3]=iv_desc[0]
    let fldlen[1]=2
    let fldlen[2]=3
    let fldlen[3]=20
    let files$[1]="ivm-10"
    let files$[2]="ivm-10"
    let files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    let descrec$[1]="C"
    let descrec$[2]="A"
    let descrec$[3]=""
    let descstr[1]=0
    let descstr[2]=0
    let descstr[3]=1
    let descpos[1]=6
    let descpos[2]=7
    let descpos[3]=1
    let desclen[1]=24
    let desclen[2]=20
    let desclen[3]=60
    let files$[5]="sam-08"
    let files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    let keylen=31
    goto done

l1900: rem --- (Action = 9) Vendor/Product/Item

    if mod(action,20)=9 if sas01a.by_vendor$<>"Y" exitto l4500
    let levels$[1]="V"
    let levels$[2]="P"
    let levels$[3]="I"
    segments=pos(sas01a.vendor_lev$=levels$[1]+levels$[2]+levels$[3])
    let literals$[1]="Vendor"
    let literals$[2]="Product Type"
    let literals$[3]="Item"
    let types$[1]="M"
    let types$[2]="S"
    let types$[3]="S"
    let imasks$[1]=aps01a.amount_mask$
    let imasks$[2]=""
    let imasks$[3]=""
    let omasks$[1]=aps01a.vendor_output$
    let omasks$[2]=""
    let omasks$[3]=""
    for x=1 to segments
        let prompts$[x]="Enter Valid "+literals$[x]
    next x
    let inlen[1]=num(aps01a.vendor_size$)
    let inlen[2]=3
    let inlen[3]=iv_desc[0]
    let fldlen[1]=6
    let fldlen[2]=3
    let fldlen[3]=20
    let files$[1]="apm-01"
    let files$[2]="ivm-10"
    let files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    let descrec$[1]=""
    let descrec$[2]="A"
    let descrec$[3]=""
    let descstr[1]=1
    let descstr[2]=0
    let descstr[3]=1
    let descpos[1]=1
    let descpos[2]=7
    let descpos[3]=1
    let desclen[1]=30
    let desclen[2]=20
    let desclen[3]=60
    let files$[5]="sam-09"
    let files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    let keylen=35
    goto done

l2000: rem --- (Action = 10) Dist Code/Product/Item

    if mod(action,20)=10 if sas01a.by_dist_code$<>"Y" exitto l4500
    let levels$[1]="D"
    let levels$[2]="P"
    let levels$[3]="I"
    segments=pos(sas01a.distcode_lev$=levels$[1]+levels$[2]+levels$[3])
    let literals$[1]="Distribution Code"
    let literals$[2]="Product Type"
    let literals$[3]="Item"
    let types$[1]="S"
    let types$[2]="S"
    let types$[3]="S"
    let imasks$[1]=""
    let imasks$[2]=""
    let imasks$[3]=""
    let omasks$[1]=""
    let omasks$[2]=""
    let omasks$[3]=""
    for x=1 to segments
        let prompts$[x]="Enter Valid "+literals$[x]
    next x
    let inlen[1]=2
    let inlen[2]=3
    let inlen[3]=iv_desc[0]
    let fldlen[1]=2
    let fldlen[2]=3
    let fldlen[3]=20
    let files$[1]="arm-10"
    let files$[2]="ivm-10"
    let files$[3]="ivm-01"; rem "Files for DESCCHAN[1, 2 & 3]
    let descrec$[1]="D"
    let descrec$[2]="A"
    let descrec$[3]=""
    let descstr[1]=0
    let descstr[2]=0
    let descstr[3]=1
    let descpos[1]=6
    let descpos[2]=7
    let descpos[3]=1
    let desclen[1]=20
    let desclen[2]=20
    let desclen[3]=60
    let files$[5]="sam-10"
    let files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    let keylen=31
    goto done

l2100: rem --- (Action = 11) Product/Non-stock

    if mod(action,20)=11 if sas01a.by_nonstock$<>"Y" exitto l4500
    let levels$[1]="P"
    let levels$[2]="N"
    let levels$[3]=""
    segments=pos(sas01a.nonstock_lev$=levels$[1]+levels$[2]+levels$[3])
    let literals$[1]="Product Type"
    let literals$[2]="Non-Stock Item"
    let types$[1]="S"
    let types$[2]="S"
    let imasks$[1]=""
    let imasks$[2]=""
    let omasks$[1]=""
    let omasks$[2]=""
    for x=1 to segments
        let prompts$[x]="Enter Valid "+literals$[x]
    next x
    let inlen[1]=3
    let inlen[2]=40
    let fldlen[1]=3
    let fldlen[2]=40
    let files$[1]="ivm-10"
    let files$[2]=""
    let files$[3]=""; rem "Files for DESCCHAN[1, 2 & 3]
    let descrec$[1]="A",descrec$[2]=""
    let descstr[1]=0
    let descstr[2]=0
    let descpos[1]=7
    let descpos[2]=0
    let desclen[1]=20
    let desclen[2]=0
    let files$[5]="sam-11"
    let files$[6]=""; rem "Files for SA_CHANNELS[1 & 2]
    let keylen=49
    goto done

l2200: rem --- (Action = 12) Territory/Customer/Product/Item

    if mod(action,20)=1 if sas01a.by_customer$<>"Y" exitto l4500
    let levels$[1]="T"
    let levels$[2]="C"
    let levels$[3]="P"
    let levels$[4]="I"
    let segments=pos(sas01a.customer_lev$=levels$[1]+levels$[2]+levels$[3]+levels$[4])
    let literals$[1]="Territory"
    let literals$[2]="Customer"
    let literals$[3]="Product Type"
    let literals$[4]="Item"
    let types$[1]="S"
    let types$[2]="M"
    let types$[3]="S"
    let types$[4]="S"
    let imasks$[1]=""
    let imasks$[2]=arp1$
    let imasks$[3]=""
    let imasks$[4]=""
    let omasks$[1]=""
    let omasks$[2]=arm0$
    let omasks$[3]=""
    let omasks$[4]=""
    for x=1 to segments
        let prompts$[x]="Enter Valid "+literals$[x]
    next x
    let inlen[1]=3
    let inlen[2]=num(ars01a.customer_size$(1,2))
    let inlen[3]=3
    let inlen[4]=iv_desc[0]
    let fldlen[1]=3
    let fldlen[2]=6
    let fldlen[3]=3
    let fldlen[4]=20
    let files$[1]="arm-10"
    let files$[2]="arm-01"
    let files$[3]="ivm-10"
    let files$[4]="ivm-01"; rem "Files for DESCCHAN[1, 2, 3 & 4]
    let descrec$[1]="H"
    let descrec$[2]=""
    let descrec$[3]="A"
    let descrec$[4]=""
    let descstr[1]=0
    let descstr[2]=1
    let descstr[3]=0
    let descstr[4]=1
    let descpos[1]=7
    let descpos[2]=1
    let descpos[3]=7
    let descpos[4]=1
    let desclen[1]=20
    let desclen[2]=30
    let desclen[3]=20
    let desclen[4]=60
    let files$[5]="sam-12"
    let files$[6]="sam-01"; rem "Files for SA_CHANNELS[1& 2]
    let keylen=38
    let xrefs[1]=4
    let xrefs[2]=1
    let xrefs[3]=2
    let xrefs[4]=3; rem "Cross references to sam-01
    goto done

done: rem --- Open Sales Analysis File(s)

    dim ids$[endfile],templates$[endfile],channels[endfile]
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto l4600
    let descchan[1]=channels[1],descchan[2]=channels[2],descchan[3]=channels[3],descchan[4]=channels[4]
rem jpb    let sa_channels[1]=channels[5],sa_channels[2]=channels[6]
rem jpb    let ivm14_dev=channels[7]

rem --- All Done

    goto std_exit

l4500: rem --- Selected Sales Analysis Not Available

    let number=1
    dim message$[number]
    let message$[0]="This Sales Analysis is currently not available."
    let message$[1]="           <Enter> = Continue"
    call pgmdir$+"adc_stdmessage.aon",3,message$[all],number,-1,-1,v$,v3

l4600: rem --- Return STATUS = ERR

    let status=err
    if status=0 status=999
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
