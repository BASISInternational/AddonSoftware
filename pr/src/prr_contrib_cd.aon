rem --- Contribution Code Maintenance Listing
rem --- Program prm_dc v8.0.0 02Jun2008 (prm_dc)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/02/2008 12:30:53)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    precision p[3]

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="PRC_CONTCODE",ids$[1]="PRC_CONTCODE"
    files$[2]="PRS_PARAMS",ids$[2]="PRS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    prc_contocde_dev=channels[1]
    prs_params_dev=channels[2]

rem --- Dimension string templates

    dim prc_contocde$:templates$[1],prs_params$:templates$[2]



rem --- Retrieve parameter records

    prs_params_key$=firm_id$+"PR00"
    find record (prs_params_dev,key=prs_params_key$,err=std_missing_params) prs_params$

rem --- Open/Lock Files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status=1 then goto std_exit

rem --- Initializations

    h=0
    h0=132,h1=75,headings=2
    l9=59
    l=l9+1,t0=0
    dim headings$[headings]
    when$=sysinfo.system_date$
    clock$=""
    headings$[0]=n1$
    headings$[1]=n4$+" Listing"
    more=1

rem --- Initial Read

    read (prc_contocde_dev,key=firm_id$+"D",dom=*next)

rem --- Main Read

    while more
        k$=key(prc_contocde_dev,end=done)
        if pos(firm_id$+"D"=k$)<>1 then goto done
        read record (prc_contocde_dev) prc_contocde$

rem --- Print

        if l+2>l9 then gosub report_heading
        print (printer_dev)@(0),prc_contocde.contrib_code$,@(5),prc_contocde.pr_code_desc$,@(22),prc_contocde.check_code$,
:                          @(25),prc_contocde.calc_type$,@(27),prc_contocde.pers_taken$,@(33),prc_contocde.regpren_flg$,
:                          @(35),prc_contocde.basis_tot_cd$,@(40),prc_contocde.special_flag$,@(45),a[0]:m3$,a[1]:m1$,a[2]:m1$,
        for x=0 to 4
            print (printer_dev)@(31+4*m1+x*3),FIELD(prc_contocde$,"pr_total_to_"+str(x:"00")),
        next x

        print (printer_dev)'lf',
        for x=0 to 4
            print (printer_dev)@(31+4*m1+x*3),FIELD(prc_contocde$,"pr_tot_oper_"+str(x:"00")),
        next x
        print (printer_dev)'lf',
        l=l+2
        t0=t0+1
    wend

done: rem --- Options

    print (printer_dev)'lf',@(10),"Total Records:",t0
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status<>0 then exitto std_exit
    if p3$(2,1)="Y" then print @(29),"Dist",
    print (printer_dev)@(0),"Contribution",@(27),"Period",@(30+m1),"Contrib",
:                      @(33+2*m1),"Min",@(33+3*m1),"Max",@(31+4*m1),"Total To/"
    print (printer_dev)@(0),"Code",@(5),"Description",@(22),"RC",@(25),"T",@(27),"Taken",
:                      @(33),"P",@(35),"TC",@(39),"Spl",@(33+m1),"Rate",@(31+2*m1),"Limit",
:                      @(31+3*m1),"Limit",@(31+4*m1),"Operator",'lf'
    l=l+3
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
