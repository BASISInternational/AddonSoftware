REM /**
REM  * MoveUtils.bbj
REM  * @author shaun
REM  *
REM  * 
REM  *  This is a utility for moving an Addon installation between two machines
REM  * 
REM  */

use java.io.File
use java.nio.file.Files
use java.nio.file.Paths
use java.nio.file.StandardCopyOption
use java.text.SimpleDateFormat
use java.util.Arrays
use java.util.Date
use java.util.Iterator
use java.util.List
use java.util.Properties
use java.util.Vector

use ::ado_util.src::util
use ::bbtranslator.bbj::BBTranslator
use ::jar/TGZUtil.bbj::TGZFile

declare PackagerExtractor eventHandler!
eventHandler!=new PackagerExtractor()

class public PackagerExtractor

    REM PRIVATE FIELDS
    rem --- lay out window
    field private BBjSysGui Sysgui!=BBjAPI().openSysGui("X0")
    field private BBjTopLevelWindow Win!=#Sysgui!.addWindow(100,100,630,220,"Addon Installation Packager and Extractor",$00080012$)
    field private BBjTabCtrl TabCtrl!=#Win!.addTabCtrl(#Win!.getAvailableControlID(),0,0,#Win!.getWidth(),#Win!.getHeight())
    rem --- packager tab
    field private BBjChildWindow PackagerWin!=#Win!.addChildWindow(#Win!.getAvailableControlID(),0,0,#Win!.getWidth()-4,#Win!.getHeight()-2,$$,$00010800$,#Sysgui!.getAvailableContext())
    field private BBjRadioButton PackagerProductionRB!=#PackagerWin!.addRadioButton(#PackagerWin!.getAvailableControlID(),150,10,450,17,"Production Use: Include applications, but not data",$0024$)
    field private BBjRadioButton PackagerTestingRB!=#PackagerWin!.addRadioButton(#PackagerWin!.getAvailableControlID(),150,30,450,17,"Testing Use: Include data as well as applications",$0020$)
    field private BBjStaticText PackagerInstallationLocationST!=#PackagerWin!.addStaticText(#PackagerWin!.getAvailableControlID(),5,50,160,17,"Installation Base Directory:",$8000$)
    field private BBjInputE PackagerInstallationLocationEB!=#PackagerWin!.addInputE(#PackagerWin!.getAvailableControlID(),170,49,430,19)
    field private BBjToolButton PackagerInstallationBrowseBtn!=#PackagerWin!.addToolButton(#PackagerWin!.getAvailableControlID(),600,49,20,19,"...")
    field private BBjStaticText PackagerBaristaLocationST!=#PackagerWin!.addStaticText(#PackagerWin!.getAvailableControlID(),5,70,160,17,"Barista Directory:",$8000$)
    field private BBjInputE PackagerBaristaLocationEB!=#PackagerWin!.addInputE(#PackagerWin!.getAvailableControlID(),170,69,430,19)
    field private BBjToolButton PackagerBaristaBrowseBtn!=#PackagerWin!.addToolButton(#PackagerWin!.getAvailableControlID(),600,69,20,19,"...")
    field private BBjStaticText PackagerArchiveLocationST!=#PackagerWin!.addStaticText(#PackagerWin!.getAvailableControlID(),5,90,160,17,"Archive File:",$8000$)
    field private BBjInputE PackagerArchiveLocationEB!=#PackagerWin!.addInputE(#PackagerWin!.getAvailableControlID(),170,89,430,19)
    field private BBjButton PackagerBtn!=#PackagerWin!.addButton(#PackagerWin!.getAvailableControlID(),490,160,110,23,"Package")
    rem --- extractor tab 
    field private BBjChildWindow ExtractorWin!=#Win!.addChildWindow(#Win!.getAvailableControlID(),0,0,#Win!.getWidth()-4,#Win!.getHeight()-2,$$,$00010800$,#Sysgui!.getAvailableContext())
    field private BBjStaticText ExtractorNewDatabaseNameST!=#ExtractorWin!.addStaticText(#ExtractorWin!.getAvailableControlID(),5,10,160,17,"New Database Name:",$8000$)
    field private BBjInputE ExtractorNewDatabaseNameEB!=#ExtractorWin!.addInputE(#ExtractorWin!.getAvailableControlID(),170,9,430,19)
    field private BBjStaticText ExtractorApplicationDescriptionST!=#ExtractorWin!.addStaticText(#ExtractorWin!.getAvailableControlID(),5,30,160,17,"Application Description:",$8000$)
    field private BBjInputE ExtractorApplicationDescriptionEB!=#ExtractorWin!.addInputE(#ExtractorWin!.getAvailableControlID(),170,29,430,19)
    field private BBjStaticText ExtractorInstallationLocationST!=#ExtractorWin!.addStaticText(#ExtractorWin!.getAvailableControlID(),5,50,160,17,"Installation Base Directory:",$8000$)
    field private BBjInputE ExtractorInstallationLocationEB!=#ExtractorWin!.addInputE(#ExtractorWin!.getAvailableControlID(),170,49,430,19)
    field private BBjToolButton ExtractorInstallationBrowseBtn!=#ExtractorWin!.addToolButton(#ExtractorWin!.getAvailableControlID(),600,49,20,19,"...")
    field private BBjStaticText ExtractorBaristaLocationST!=#ExtractorWin!.addStaticText(#ExtractorWin!.getAvailableControlID(),5,70,160,17,"Barista Directory:",$8000$)
    field private BBjInputE ExtractorBaristaLocationEB!=#ExtractorWin!.addInputE(#ExtractorWin!.getAvailableControlID(),170,69,430,19)
    field private BBjStaticText ExtractorArchiveLocationST!=#ExtractorWin!.addStaticText(#ExtractorWin!.getAvailableControlID(),5,90,160,17,"Archive File:",$8000$)
    field private BBjInputE ExtractorArchiveLocationEB!=#ExtractorWin!.addInputE(#ExtractorWin!.getAvailableControlID(),170,89,430,19)
    field private BBjToolButton ExtractorArchiveBrowseBtn!=#ExtractorWin!.addToolButton(#ExtractorWin!.getAvailableControlID(),600,89,20,19,"...")
    field private BBjButton ExtractorBtn!=#ExtractorWin!.addButton(#ExtractorWin!.getAvailableControlID(),490,160,110,23,"Extract")

    rem --- Packager state fields 
    field private BBjNumber PRODUCTION_PACKAGING_TYPE=0
    field private BBjNumber TESTING_PACKAGING_TYPE=1
    field private BBjNumber PackagerPackagingType=#PRODUCTION_PACKAGING_TYPE
    field private BBjNumber isPackagerBaseDirectoryValid!=0
    field private BBjNumber isPackagerBaristaDirectoryValid!=0
    field private BBjNumber isPackagerArchiveFileValid!

    rem --- environment fields 
    field private BBjNumber isWindows!=new String(info(0,0)).contains("Win")
    field private BBjColor InvalidColor!=#Sysgui!.makeColor(255,85,85)
    field private BBjColor ValidColor!=#PackagerInstallationLocationEB!.getBackColor()

    rem --- information specific to packaging
    field private BBjString ArchiveLocation!
    field private BBjString ArchiveBaseName!="aoninstall_"
    field private BBjString ArchiveDatePattern!="yyyyMMdd_HHmmss"
    field private BBjString ArchiveExtension!=".tgz"

    method public PackagerExtractor()
        rem -- Add the directory this program resides in to the prefix.  We should be able to find any other 
        rem -- programs we need in this same directory
        declare BBjString programFileName!
        declare File programFile!
        declare String programDirName!

        rem -- get the full path to the program file using fid
        programFileName!=pgm(-2)
        testChan=unt
        open(testChan) programFileName!
        programFileName$=fid(testChan)
        programFileName!=programFileName$(9)

        rem -- get the parent directory of the program file and add it to the prefix
        programFile!=new File(programFileName!)
        programDirName!=programFile!.getParent()+File.separator
        prefix programDirName!+" "+pfx

        rem -- List for grouping radiobuttons together
        declare BBjVector rbList!

        rem -- put tabs into the tab control
        #TabCtrl!.addTab("Packager",#PackagerWin!)
        #TabCtrl!.addTab("Extractor",#ExtractorWin!)

        rem -- adjust our control states 
        #PackagerBaristaLocationEB!.setEnabled(#PackagerPackagingType=#TESTING_PACKAGING_TYPE)
        #PackagerBaristaBrowseBtn!.setEnabled(#PackagerPackagingType=#TESTING_PACKAGING_TYPE)
        #PackagerArchiveLocationEB!.setEnabled(0)
        #PackagerBtn!.setEnabled(0)
        rem #ExtractorBaristaLocationEB!.setEnabled(0)
        #ExtractorBtn!.setEnabled(0)

        rbList!=BBjAPI().makeVector()
        rbList!.addItem(#PackagerProductionRB!)
        rbList!.addItem(#PackagerTestingRB!)
        #Win!.addRadioGroup(rbList!)

        rem  -- set up our events
        #Win!.setCallback(BBjWindow.ON_CLOSE,#this!,"quit")
        #PackagerProductionRB!.setCallback(BBjRadioButton.ON_CHECK_ON,#this!,"switchPackagingType")
        #PackagerTestingRB!.setCallback(BBjRadioButton.ON_CHECK_ON,#this!,"switchPackagingType")
        #PackagerInstallationBrowseBtn!.setCallback(BBjToolButton.ON_TOOL_BUTTON_PUSH,#this!,"browsePackagerDirectory")
        #PackagerInstallationLocationEB!.setCallback(BBjInputE.ON_CONTROL_VALIDATION,#this!,"handleValidatePackager")
        #PackagerBaristaBrowseBtn!.setCallback(BBjToolButton.ON_TOOL_BUTTON_PUSH,#this!,"browsePackagerDirectory")
        #PackagerBaristaLocationEB!.setCallback(BBjInputE.ON_CONTROL_VALIDATION,#this!,"handleValidatePackager")
        #PackagerBtn!.setCallback(BBjButton.ON_BUTTON_PUSH,#this!,"package")

        #ExtractorNewDatabaseNameEB!.setCallback(BBjInputE.ON_CONTROL_VALIDATION,#this!,"handleValidateExtractor")
        #ExtractorApplicationDescriptionEB!.setCallback(BBjInputE.ON_CONTROL_VALIDATION,#this!,"handleValidateExtractor")
        #ExtractorInstallationLocationEB!.setCallback(BBjInputE.ON_CONTROL_VALIDATION,#this!,"handleValidateExtractor")
        #ExtractorInstallationBrowseBtn!.setCallback(BBjToolButton.ON_TOOL_BUTTON_PUSH,#this!,"browseExtractorDirectory")
        #ExtractorBaristaLocationEB!.setCallback(BBjInputE.ON_CONTROL_VALIDATION,#this!,"handleValidateExtractor")
        #ExtractorArchiveBrowseBtn!.setCallback(BBjToolButton.ON_TOOL_BUTTON_PUSH,#this!,"browseExtractorDirectory")
        #ExtractorArchiveLocationEB!.setCallback(BBjInputE.ON_CONTROL_VALIDATION,#this!,"handleValidateExtractor")
        #ExtractorBtn!.setCallback(BBjButton.ON_BUTTON_PUSH,#this!,"extract")

        rem -- make window visible and start event loop
        #Win!.setVisible(1)
        process_events

    methodend

    method public void quit(BBjCloseEvent event!)
        release
    methodend

    method public void switchPackagingType(BBjCheckOnEvent event!)
        if (#PackagerProductionRB!.isSelected()) then
            #PackagerPackagingType=#PRODUCTION_PACKAGING_TYPE
        endif
        if (#PackagerTestingRB!.isSelected()) then
            #PackagerPackagingType=#TESTING_PACKAGING_TYPE
        endif

        #PackagerBaristaLocationEB!.setEnabled(#PackagerPackagingType=#TESTING_PACKAGING_TYPE)
        #PackagerBaristaBrowseBtn!.setEnabled(#PackagerPackagingType=#TESTING_PACKAGING_TYPE)
        #PackagerBtn!.setEnabled(#readyForPackaging())
    methodend

    method public void markInputEInvalid(BBjInputE inputE!, BBjString shortCue!)
        inputE!.setBackColor(#InvalidColor!)
        inputE!.setShortCue(shortCue!)
        inputE!.showToolTipText()
    methodend

    method public void markInputEValid(BBjInputE inputE!)
        inputE!.setBackColor(#ValidColor!)
        inputE!.setShortCue($$)
    methodend


    method public void browsePackagerDirectory(BBjToolButtonPushEvent event!)
        declare BBjString location!
        declare BBjString browsedPath!
        declare BBjInputE inputE!

        rem choose the inpute based on the tool button
        if (event!.getControl()=#PackagerInstallationBrowseBtn!) then
            inputE!=#PackagerInstallationLocationEB!
        endif

        if (event!.getControl()=#PackagerBaristaBrowseBtn!) then
            inputE!=#PackagerBaristaLocationEB!
        endif

        location!=inputE!.getText()
        browsedPath!=fileOpen("Select directory for Addon Installation", location!,"","","",1)

        rem --- set the installation path to the browsed path if the user did not cancel or encounter an error
        if (! browsedPath!.startsWith("::")) then
            location!=browsedPath!
        endif

        rem --- set the field to the installation path
        inputE!.setText(location!)

        rem --- validate the installation path
        #readyForPackaging()

    methodend

    method public void handleValidatePackager(BBjControlValidationEvent event!)

        rem -- check all field values including the installation location to package up.  Mark fields that are invalid. 
        #readyForPackaging()

        rem -- accept validation 
        event!.accept(1)
    methodend

    rem /**
    rem  * Validates the installation path for the Addon installation.  The installation path is valid 
    rem  * for testing installations if:
    rem  *      The path is an existing directory on the server's file system. 
    rem  *      Somewhere under the file system are an addon and barista directory. 
    rem  * The installation path is valid for production installations if: 
    rem  *      The path is an existing directory on the server's file system. 
    rem  *      There is an aon directory and a barista directory directly under the specified path. 
    rem  * 
    rem  * @param installationLocation! An absolute path to the base directory above the aon and barista directory in an Addon installation. 
    rem  * 
    rem  * @return A string indicating the validation error.  A blank string means success. 
    rem  */    
    method public BBjString validatePackageInstallationLocation(BBjString installationLocation!)
        print "validatePackageInstallationLocation"
        declare BBjString baristaLocation!
        declare File installationLocationFile!
        declare BBjString statusString!

        REM installation directory must exist and be a directory
        if !#directoryExists(installationLocation!) then
            methodret "The directory "+$22$+installationLocation!+$22$+" either does not exist or is not a directory. Please check the path and respecify."
        endif

        REM get the installation directory's canonical path and make sure it ends with a slash
        installationLocationFile!=new File(installationLocation!)
        installationLocation!=installationLocationFile!.getCanonicalPath()
        installationLocation!=installationLocation!.replaceAll("[/\\]","\"+File.separator)
        if ! installationLocation!.endsWith(File.separator) then
            installationLocation!=installationLocation!+File.separator
        endif

        REM How we check the location of the Barista directory is going to depend on whether we're 
        REM packaging for production or testing. 
        if (#PackagerPackagingType=#PRODUCTION_PACKAGING_TYPE) then
            REM installation directory must contain a barista installation (well, at least a barista directory)
            baristaLocation!=installationLocation!+"barista"
            if (!#directoryExists(baristaLocation!)) then
                methodret "The Barista directory "+$22$+baristaLocation!+$22$+" must exist, but does not."
            endif
        endif

        methodret ""
    methodend

    rem /**
    rem  * Validates the barista path.  The barista path is valid for testing installations if:
    rem  *      The path is an existing directory on the server's file system. 
    rem  *      The barista path resides under the installation base path.  
    rem  * The barista path is valid for production installations if: 
    rem  *      The path is an existing directory on the server's file system. 
    rem  *      The barista path is directly under the installation base path.  
    rem  * 
    rem  * @param baristaLocation! An absolute path to the barista directory. 
    rem  * 
    rem  * @return A string indicating the validation error.  A blank string means success. 
    rem  */    
    method public BBjString validatePackageBaristaLocation(BBjString baristaLocation!)

        print "validatePackageBaristaLocation"
        declare BBjString baristaLocation!

        if (! baristaLocation!.matches("[^\s]*[/\\]barista[/\\]?$")) then
            methodret $22$+baristaLocation!+$22$+" does not end with "+$22$+"barista"+$22$
        endif

        installationLocation!=#PackagerInstallationLocationEB!.getText()
        if (#PackagerPackagingType=#TESTING_PACKAGING_TYPE) then
            valid=installationLocation!<>"" and baristaLocation!.startsWith(installationLocation!)
            if (!valid) then
                methodret "Barista directory is not under the installation directory."
            endif
        endif

        if (#PackagerPackagingType=#PRODUCTION_PACKAGING_TYPE) then
            baristaLocationForComparison!=baristaLocation!.replaceAll("[/\\]",File.separator)
            valid=(baristaLocationForCompariston!=installationLocation!.replaceAll("[/\\",File.separator)+"barista")
            if (!valid) then
                methodret "Barista directory is not immediately under installation directory."
            endif
        endif
        methodret ""
    methodend


    method public BBjNumber readyForPackaging()
        print "readyForPackaging"
        declare BBjString installationLocation!
        declare BBjString baristaLocation!
        declare BBjString archiveLocation!
        declare SimpleDateFormat format!
        declare File baristaDirectory!
        declare BBjNumber installationDirectoryValid!
        #PackagerBtn!.setEnabled(0)

        rem -- validate the installation location
        installationLocation!=#PackagerInstallationLocationEB!.getText()
        if (installationLocation!<>"") then
            installationLocation!=new File(installationLocation!).getCanonicalPath()
            if (! installationLocation!.endsWith(File.separator)) then
                installationLocation!=installationLocation!.concat(File.separator)
            endif
            #PackagerInstallationLocationEB!.setText(installationLocation!)

            status$=#validatePackageInstallationLocation(installationLocation!)
            if (status$<>"") then
                #markInputEInvalid(#PackagerInstallationLocationEB!,status$)
                #isPackagerBaseDirectoryValid!=0
                methodret 0
            endif
            #markInputEValid(#PackagerInstallationLocationEB!)
            #isPackagerBaseDirectoryValid!=1
        else
            #isPackagerBaseDirectoryValid!=0
            methodret 0
        endif

        rem -- If we're in packaging for production, verify the installation location.  If it's valid, then 
        rem -- set the barista location and the archive location and then enable the packager button because 
        rem -- we're ready to archive. 
        if (#PackagerPackagingType=#PRODUCTION_PACKAGING_TYPE) then
            baristaLocation!=installationLocation!.replaceAll("[/\\]","\"+File.separator)
            if (!baristaLocation!.endsWith(File.separator)) then
                baristaLocation!=baristaLocation!+File.separator
            endif
            baristaLocation!=baristaLocation!+"barista"
            #PackagerBaristaLocationEB!.setText(baristaLocation!)
            #markInputEValid(#PackagerBaristaLocationEB!)
            #isPackagerBaristaDirectoryValid!=1
        endif

        rem -- if we're in test mode, then verify that the installation path is neither empty nor invalid.  Also verify that 
        rem -- the barista installation location is neither empty nor invalid.  
        if (#PackagerPackagingType=#TESTING_PACKAGING_TYPE) then
            baristaLocation!=#PackagerBaristaLocationEB!.getText()
            if (baristaLocation!<>"") then
                baristaLocation!=new File(baristaLocation!).getCanonicalPath()
                if (!baristaLocation!.endsWith(File.separator)) then
                    baristaLocation!=baristaLocation!.concat(File.separator)
                endif
                status$=#validatePackageBaristaLocation(baristaLocation!)
                if (status$<>"") then
                    #markInputEInvalid(#PackagerBaristaLocationEB!,status$)
                    #isPackagerBaristaDirectoryValid!=0
                    methodret 0
                endif
                #markInputEValid(#PackagerBaristaLocationEB!)
                #isPackagerBaristaDirectoryValid!=1
            else
                #isPackagerBaristaDirectoryValid!=0
            endif
        endif

        rem --- set the name of the archive if it hasn't already been set and we have a valid base directory
        if (#isPackagerBaseDirectoryValid!) then
            format!=new SimpleDateFormat(#ArchiveDatePattern!)
            #ArchiveLocation!=installationLocation!+#ArchiveBaseName!+format!.format(new java.util.Date())+#ArchiveExtension!
            #PackagerArchiveLocationEB!.setText(#ArchiveLocation!)
            #isPackagerArchiveFileValid!=1
        endif

        rem --- enable packaging if everything is ready and return status
        if (#isPackagerBaseDirectoryValid! and #isPackagerBaristaDirectoryValid! and #isPackagerArchiveFileValid!) then
            #PackagerBtn!.setEnabled(1)
            methodret 1
        else
            methodret 0
        endif

    methodend

    method public BBjNumber directoryExists(BBjString location$)
        rem -- installationLocation must not be blank and must be an existing directory
        if (location$=$$) then
            methodret 0
        endif

        locationFile!=new File(location$)
        if !(locationFile!.exists() and locationFile!.isDirectory()) then
            methodret 0
        endif

        methodret 1
    methodend

    method public void package(BBjButtonPushEvent event!)
        rem Set state of pack button back to disabled
        #PackagerBtn!.setEnabled(0)

        REM Get values needed for packaging
        baseDir$=#PackagerInstallationLocationEB!.getText()
        barDir$=#PackagerBaristaLocationEB!.getText()
        jarFile$=#PackagerArchiveLocationEB!.getText()

        baseDirFile!=new File(baseDir$)
        baseDir$=baseDirFile!.getCanonicalPath()

    rem --- Initializations
        declare Vector copyPath!
        declare Vector firmsVect!
        declare Vector prefixVect!
        declare Properties sourcePaths!
        declare Properties stblPaths!
        declare BBjSysGui sysGUI!
        declare Properties systems!
        declare BBjString savedDir$
        declare BBjNumber skipped

        copyPath!=new Vector()
        firmsVect!=new Vector()
        prefixVect!=new Vector()
        sourcePaths!=new Properties()
        stblPaths!=new Properties()
        stblValues!=new Properties()
        sysGUI! = BBjAPI().getSysGui()
        systems!=new Properties()
        savedDir$=dir("")
        skipped=0

    rem --- Get user inputs
        if (Translate!=null()) then
            Translate!=BBTranslator.getInstance("barista",stbl("+USER_LOCALE"),null(),stbl("+DIR_SYR"))
        endif
        baseDirLen=len(baseDir$)

    rem --- Open DDM_TABLE_TPLS in source Barista installation
        ddmTableTpls_dev=unt
        open(ddmTableTpls_dev)barDir$+"/sys/data/ddm_table_tpls.dat"; rem --- Error if not found, something is wrong.
        dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"

    rem --- Open DDM_TABLES in source Barista installation
        ddmTables_dev=unt
        open(ddmTables_dev)barDir$+"/sys/data/ddm_tables.dat"; rem --- Error if not found, something is wrong.
        findrecord(ddmTableTpls_dev,key=pad("DDM_TABLES",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
        dim ddmTables$:ddm_table_tpls.template$

    rem --- Open DDM_TABLE_COLS in source Barista installation
        ddmTableCols_dev=unt
        open(ddmTableCols_dev)barDir$+"/sys/data/ddm_table_cols.dat"; rem --- Error if not found, something is wrong.
        findrecord(ddmTableTpls_dev,key=pad("DDM_TABLE_COLS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
        dim ddmTableCols$:ddm_table_tpls.template$

    rem --- Open DDM_SYSTEMS in source Barista installation
        ddmSystems_dev=unt
        open(ddmSystems_dev)barDir$+"/sys/data/ddm_systems.dat"; rem --- Error if not found, something is wrong.
        findrecord(ddmTableTpls_dev,key=pad("DDM_SYSTEMS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
        dim ddmSystems$:ddm_table_tpls.template$

    rem --- Get Mounted Directory for system (application) installed in source Barista
        read(ddmSystems_dev,key="",dom=*next)
        while 1
            readrecord(ddmSystems_dev,end=*break)ddmSystems$
            systems!.setProperty(cvs(ddmSystems.mount_sys_id$,2),cvs(ddmSystems.mount_dir$,2))
        wend

    rem --- Open ADM_FIRMS in source Barista installation, and initialize firmsVect! vector
        adm_firms_dev=unt
        open(adm_firms_dev)barDir$+"/sys/data/adm_firms.dat"; rem --- Error if not found, something is wrong.
        findrecord(ddmTableTpls_dev,key=pad("ADM_FIRMS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
        dim adm_firms$:ddm_table_tpls.template$

        read(adm_firms_dev,key="",dom=*next)
        while 1
            readrecord(adm_firms_dev,end=*break)adm_firms$
            firmsVect!.add(adm_firms.company_id$)
        wend
        close(adm_firms_dev,err=*next)

    rem --- Initialize stblValues! with Barista STBLs
        stblValues!.setProperty("+DIR_BRA",barDir$+"/sys/data/")
        stblValues!.setProperty("+DIR_BRD",barDir$+"/sys/data/")
        stblValues!.setProperty("+DIR_SYP",barDir$+"/sys/prog/")
        stblValues!.setProperty("+DIR_SYR",barDir$+"/sys/prop/")

    rem --- Start main progress meter
        meter_title$=#Win!.getTitle()
        meter_total_recs=2*systems!.size()+2
        meter_text$=""
        meter_action$="WIN-LST-OK"
        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
        mainMeter!=meterWin!
        mainMeterProcRecs=meter_proc_recs
        mainMeterTotalRecs=meter_total_recs

    rem --- Open log file
        location$ = baseDir$
        log$ = baseDir$+File.separator+"adx_jaraon.log"
        erase log$,err=*next
        string log$
        log_dev=unt
        open(log_dev)log$

        rem --- write log header info
        print(log_dev)"Copy Addon Installation Utility log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
        print(log_dev)
        print(log_dev)"Source Operating System: " + info(0,0)
        print (log_dev) "Source BBj Installation Directory: " + System.getProperty("basis.BBjHome")
        print(log_dev)"Source Installation Base Directory: " + baseDir$
        print(log_dev)"Source Barista Installation Location: " + barDir$
        print(log_dev)"Archive Filename: " + jarFile$

    rem --- Build sourcePaths! Properties object of directories and files used by each system (application) installed in source Barista
        systemsIter!=systems!.keySet().iterator()
        while systemsIter!.hasNext()
            system$=systemsIter!.next()
            mount_path$=systems!.getProperty(system$)
            mountDir!=new java.io.File(mount_path$)
            mount_dir$=mountDir!.getCanonicalPath()

            REM On Windows, do a case insensitive comparison when determining if mount_path$
            REM falls under base_path$
            if #isWindows! then
                goodPath=pos(cvs(baseDir$,4)=cvs(mount_path$,4))=1
            else
                goodPath=pos(baseDir$=mount_dir$)=1
            endif

            if goodPath then
                rem --- Good path
                sourcePaths!.setProperty(mount_path$,mount_dir$)
            endif

            rem --- Increment main progress meter
            meterWin!=mainMeter!
            meter_total_recs=mainMeterTotalRecs
            mainMeterProcRecs=mainMeterProcRecs+1
            meter_text$=system$+": verify paths in syn file"
            meter_proc_recs=mainMeterProcRecs
            meter_action$="MTR-LST"
            call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
            print(log_dev)
            print(log_dev)meter_text$

            rem --- Get STBLs in system (application) syn file
            lines=0
            appSyn_dev=unt
            open(appSyn_dev,isz=-1)mount_dir$+"/config/"+cvs(system$,8)+".syn"; rem --- Error if not found, something is wrong.
            while 1
                read(appSyn_dev,end=*break)record$
                lines=lines+1

                key$ = record$(1, pos("="=record$) - 1)
                switch (BBjAPI().TRUE)
                    case key$ = "STBL"
                    case key$ = "SYSSTBL"
                        xpos = pos(" "=record$)
                        ypos = pos("="=record$,1,2)
                        stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                        path$ = cvs(record$(ypos+1),3)
                        stblValues!.setProperty(stbl$,path$)
                        break
                    case default
                        rem --- skip other lines
                        break
                swend
            wend
            close(appSyn_dev,err=*next)

            rem --- Start secondary progress meter
            meter_title$=mount_dir$+"/config/"+cvs(system$,8)+".syn"
            meter_total_recs=lines
            meter_proc_recs=0
            meter_text$=""
            meter_action$="WIN-LST"
            call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
            detailMeter!=meterWin!

            rem --- Verify paths in system (application) syn file
            appSyn_dev=unt
            open(appSyn_dev,isz=-1)mount_dir$+"/config/"+cvs(system$,8)+".syn"; rem --- Error if not found, something is wrong.
            while 1
                read(appSyn_dev,end=*break)record$

                meter_text$=""
                key$ = record$(1, pos("="=record$) - 1)
                switch (BBjAPI().TRUE)
                    case key$ = "DIR"
                    case key$ = "SYSDIR"
                        xpos = pos("="=record$)
                        path$ = cvs(record$(xpos+1),3)
                        gosub verify_path
                        meter_text$=key$
                        if skip_path then
                            meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                        endif
                        stblPaths!.setProperty(key$,canonicalPath$)
                        break
                    case key$ = "APROD"
                    case key$ = "SYSAPP"
                        xpos = pos("="=record$)
                        ypos = pos(";"=record$)
                        app$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                        xpos = pos(";"=record$,1,5)
                        ypos = pos(";"=record$,1,6)
                        path$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                        gosub verify_path
                        meter_text$=key$+": "+app$
                        if skip_path then
                            meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                        endif
                        break
                    case key$ = "STBL"
                    case key$ = "SYSSTBL"
                        xpos = pos(" "=record$)
                        ypos = pos("="=record$,1,2)
                        stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                        path$ = cvs(record$(ypos+1),3)
                        rem --- Sanity check if this looks like a path
                        if  ((pos("/"=path$) or pos("\"=path$)) and (pos("http:"=path$)=0 and pos("https:"=path$)=0)) or (pos("["=path$) and pos("]"=path$)) then
                            gosub verify_path
                            meter_text$=key$+": "+stbl$
                            if skip_path then
                                if stbl$="+DIR_INV_IMAGES" then
                                    skipped=skipped-1
                                else
                                    meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                                endif
                            endif
                            stblPaths!.setProperty(stbl$,canonicalPath$)
                        endif
                        break
                    case key$ = "PREFIX"
                    case key$ = "SYSPFX"
                        rem --- replace SYSPFX/PREFIX path with new path
                        xpos = pos("="=record$)
                        path$ = cvs(record$(xpos+1),3)
                        gosub verify_path
                        meter_text$=key$+" "+path$
                        if skip_path then
                            meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                        endif
                        prefixVect!.add(path$)
                        break
                    case key$ = "CFG"
                    case key$ = "SYSCFG"
                        rem --- replace SYSCFG/CFG path with new path for corresponding STBL
                        xpos = pos("="=record$)
                        ypos = pos("="=record$,1,2)
                        stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                        path$ = cvs(record$(ypos+1),3)
                        gosub verify_path
                        meter_text$=key$+": "+stbl$
                        if skip_path then
                            meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                        endif
                        break
                    case default
                        rem --- skip other lines
                        break
                swend

                rem --- Increment secondary progress meter
                if meter_text$<>"" then
                    meterWin!=detailMeter!
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
                    print(log_dev)"    "+meter_text$
                endif
            wend
            close(appSyn_dev,err=*next)

            rem --- Stop secondary progress meter
            meterWin!=detailMeter!
            meter_text$=""
            meter_proc_recs=meter_total_recs
            meter_action$="LST-END"
            call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$

            rem --- Verify paths in system (application) adm_modules~*.xml files
            pathsToAdmModules!=new Vector()
            pathsToAdmModules!.add("data/sync")
            pathsToAdmModules!.add("data/admin_backup")
            for i=0 to pathsToAdmModules!.size()-1
                admModulePath$=pathsToAdmModules!.get(i)

                rem --- Increment main progress meter
                meterWin!=mainMeter!
                meter_total_recs=mainMeterTotalRecs
                mainMeterProcRecs=mainMeterProcRecs+1
                meter_text$=system$+": verify paths in "+admModulePath$+"/adm_modules~*.xml files"
                meter_proc_recs=mainMeterProcRecs
                meter_action$="MTR-LST"
                call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
                print(log_dev)meter_text$

                rem --- Verify paths in adm_modules~*.xml files
                dir!=new File(mount_dir$ + File.separator + admModulePath$)
                rem --- Validate directory
                if dir! <> null() and dir!.exists() and dir!.isDirectory() and dir!.list() <> null()
                    fileVector! = new Vector(java.util.Arrays.asList(dir!.list(new AdmModulesFilter())))

                    if(fileVector!.size()>0) then
                        rem --- Start secondary progress meter
                        meter_title$=system$+" adm_modules~*.xml files"
                        meter_total_recs=14*2
                        meter_proc_recs=0
                        meter_text$=""
                        meter_action$="WIN-LST"
                        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
                        detailMeter!=meterWin!

                        rem --- Verify paths in LOCALE_PATH and DD_MOUNT_DIR tags
                        startLocalePath$ = "<LOCALE_PATH>"
                        startLocalePathLen = len(startLocalePath$)
                        endLocalePath$ = "</LOCALE_PATH>"
                        startDdMountDir$ = "<DD_MOUNT_DIR>"
                        startDdMountDirLen = len(startDdMountDir$)
                        endDdMountDir$ = "</DD_MOUNT_DIR>"

                        for j=0 to fileVector!.size()-1
                            admModuleFile$=fileVector!.get(j)
                            admModule_dev=unt
                            open(admModule_dev,isz=-1)dir!.getCanonicalPath()+File.separator+admModuleFile$; rem --- Error if not found, something is wrong.
                            while 1
                                read(admModule_dev,end=*break)record$
                                meter_text$=""

                                rem --- Verify path in <LOCALE_PATH> lines
                                startLocalePath = pos(startLocalePath$=cvs(record$,4))
                                if startLocalePath then
                                    path$ = record$(startLocalePath + startLocalePathLen)
                                    path$ = path$(1,pos(endLocalePath$=cvs(path$,4))-1)
                                    gosub verify_path
                                    meter_text$=admModuleFile$+": "+startLocalePath$
                                    if skip_path then
                                        meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                                    endif
                                endif

                                rem --- Verify path in <DD_MOUNT_DIR> lines
                                startDdMountDir = pos(startDdMountDir$=cvs(record$,4))
                                if startDdMountDir then
                                    path$ = record$(startDdMountDir + startDdMountDirLen)
                                    path$ = path$(1,pos(endDdMountDir$=cvs(path$,4))-1)
                                    gosub verify_path
                                    meter_text$=admModuleFile$+": "+startDdMountDir$
                                    if skip_path then
                                        meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                                    endif
                                endif

                                rem --- Increment secondary progress meter
                                if meter_text$<>"" then
                                    meterWin!=detailMeter!
                                    meter_proc_recs=meter_proc_recs+1
                                    meter_action$="MTR-LST"
                                    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
                                    print(log_dev)"    "+meter_text$
                                endif
                            wend
                            close(admModule_dev,err=*next)
                        next j

                        rem --- Stop secondary progress meter
                        meterWin!=detailMeter!
                        meter_text$=""
                        meter_proc_recs=meter_total_recs
                        meter_action$="LST-END"
                        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
                    endif
                endif
            next i
        wend

    rem --- Verify paths referenced in data files and add to sourcePaths! Properties object

        rem --- Increment main progress meter
        meterWin!=mainMeter!
        meter_total_recs=mainMeterTotalRecs
        mainMeterProcRecs=mainMeterProcRecs+1
        meter_text$="Verify paths referenced in data files"
        meter_proc_recs=mainMeterProcRecs
        meter_action$="MTR-LST"
        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
        print(log_dev)
        print(log_dev)meter_text$

        rem --- Check these Element Types for directory and file paths
        elementTypes!=new Vector()
        elementTypes!.add("ADM_CONFIG_FILE")
        elementTypes!.add("DATA_PATH")
        elementTypes!.add("DD_MOUNT_DIR")
        elementTypes!.add("DD_MOUNT_MENU")
        elementTypes!.add("DD_TABLE_PATH")
        elementTypes!.add("DIR_BROWSE")
        elementTypes!.add("DOC_PATH")
        elementTypes!.add("EMAIL_FILES")
        elementTypes!.add("GENERIC_FILE_80")
        elementTypes!.add("IMAGE_PATH")
        elementTypes!.add("LOCALE_PATH")
        elementTypes!.add("LOGO_FILE")
        elementTypes!.add("PROGRAM_PATH")

        rem --- Start secondary progress meter
        meter_title$="Verify Element Type data paths"
        meter_total_recs=elementTypes!.size()
        meter_proc_recs=0
        meter_text$=""
        meter_action$="WIN-LST"
        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
        detailMeter!=meterWin!

        rem --- Check tables using Element Type, and verify paths
        for i=0 to elementTypes!.size()-1
            elementType$=elementTypes!.get(i)

            rem --- Increment secondary progress meter
            meter_text$=elementType$
            meterWin!=detailMeter!
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
            print(log_dev)"    "+elementType$

            rem --- Search tables using this Element Type
            read(ddmTableCols_dev,key=elementType$,knum="COLUMN_ID",dom=*next)
            while 1
                readrecord(ddmTableCols_dev,end=*break)ddmTableCols$
                if cvs(ddmTableCols.dd_data_name$,2)<>elementType$ then break

                rem --- Get disk file name for this table
                findrecord(ddmTables_dev,key=ddmTableCols.dd_table_alias$,dom=*continue)ddmTables$
                if pos(ddmTables.dd_alias_type$="OPQRT") then continue; rem --- Skip if not a BBj data file
                if cvs(ddmTables.dd_table_alias$,2)="ADS_AUTOLAUNCH" and cvs(ddmTableCols.dd_dvar_name$,2)="PROGRAM_ARGS" then continue; rem --- Does not hold paths
                filename$=cvs(ddmTables.dd_file_name$,2)
                if filename$="" then filename$=cvs(ddmTables.dd_table_alias$,10)

                rem --- Log table.column being verified for this Element Type
                print(log_dev)"    "+"    "+cvs(ddmTables.dd_table_alias$,2)+"."+ddmTableCols.dd_dvar_name$

                rem --- Get path to this file in source installation
                if pos(ddmTables.asc_prod_id$="ADBDDBSQB",3) then
                    rem --- It is a Barista system file
                    filePath$=barDir$+"/sys/data"
                else
                    rem --- It is an installed application's file
                    filePath$=ddmTables.dd_table_path$
                    if cvs(filePath$,2)="" then filePath$=barDir$+"/sys/data"

                    rem --- Resolve embedded STBLs, except not [+FIRM_ID].
                    pathName$=filePath$
                    gosub resolvePathStbls
                    filePath$=resolvedPath$
                endif
                filePath!=new java.io.File(filePath$)
                filePath$=filePath!.getCanonicalPath()

                rem --- If path includes [+FIRM_ID], then replace with actual COMPANY_IDs
                for j=0 to firmsVect!.size()-1
                    thisPath$=filePath$
                    xpos=pos("[+FIRM_ID]"=thisPath$)
                    if xpos then
                        thisPath$=thisPath$(1,xpos-1)+firmsVect!.get(j)+thisPath$(xpos+10)
                    endif

                    rem --- Open file and verify paths for this Element Type
                    table_dev=unt
                    open(table_dev,err=*continue)thisPath$+File.separator+filename$; rem --- If error, assume file not created yet.
                    findrecord(ddmTableTpls_dev,key=pad(ddmTables.dd_table_alias$,16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
                    dim table$:ddm_table_tpls.template$
                    read(table_dev,key="",dom=*next)
                    while 1
                        key$=key(table_dev,end=*break)
                        readrecord(table_dev)table$
                        path$ = field(table$,cvs(ddmTableCols.dd_dvar_name$,2))
                        if cvs(path$,2)="" continue

                        rem --- Resolve STBLs embedded in path
                        pathName$=path$
                        gosub resolvePathStbls
                        path$=resolvedPath$

                        if pos("/"=path$)+pos("\"=path$)=0 then
                            rem --- Filename only. Look for it under the Prefix paths
                            if prefixVect!.size() then
                                found_it=0
                                for j=0 to prefixVect!.size()-1
                                    prefixDir$=prefixVect!.get(j)
                                    prefixDir!=new File(prefixDir$)
                                    fileList!=new Vector(java.util.Arrays.asList(prefixDir!.listFiles()))
                                    if fileList!<>null() and fileList!.size()>0 then
                                        for k=0 to fileList!.size()-1
                                            nextFile!=fileList!.get(k)
                                            tempFile!=nextFile!.getCanonicalPath()
                                            if tempFile!.endsWith(File.separator+path$)
                                                path$=tempFile!
                                                found_it=1
                                                break
                                            endif
                                        next k
                                    endif
                                    if found_it then break
                                next j
                            endif
                        else
                            if cvs(ddmTables.dd_table_alias$,2)="ADM_MODULES" and
:                                (cvs(ddmTableCols.dd_dvar_name$,2)="DD_MOUNT_DIR" or cvs(ddmTableCols.dd_dvar_name$,2)="LOCALE_PATH") and
:                                (pos("sys/"=path$)=1 or pos("./sys/"=path$)=1) then
                                path$=barDir$+"/sys/"
                            endif
                        endif

                        gosub verify_path
                        if skip_path then
                            print(log_dev)"    "+"    "+"    "+"***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "
                            print(log_dev)"    "+"    "+"    "+"    "+"key="+key$
                            print(log_dev)"    "+"    "+"    "+"    "+"path="+path$
                        endif
                    wend
                    close(table_dev,err=*next)

                    if pos("[+FIRM_ID]"=filePath$)=0 then break
                next j
            wend
        next i

        rem --- Stop secondary progress meter
        meterWin!=detailMeter!
        meter_text$=""
        meter_proc_recs=meter_total_recs
        meter_action$="LST-END"
        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$

    rem --- Verify paths in barista.syn file

        rem --- Increment main progress meter
        meterWin!=mainMeter!
        meter_total_recs=mainMeterTotalRecs
        mainMeterProcRecs=mainMeterProcRecs+1
        meter_text$="Verify paths in barista.syn file"
        meter_proc_recs=mainMeterProcRecs
        meter_action$="MTR-LST"
        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
        print(log_dev)
        print(log_dev)meter_text$

        barSyn_found=0
        barSyn_dev=unt
        open(barSyn_dev,isz=-1,err=*next)barDir$+"/sys/config/barista.syn"; barSyn_found=1
        if barSyn_found then
            while 1
                read(barSyn_dev,end=*break)record$

                key$ = record$(1, pos("="=record$) - 1)
                switch (BBjAPI().TRUE)
                    case key$ = "SYN"
                        xpos = pos("="=record$)
                        path$ = cvs(record$(xpos+1),3)
                        gosub verify_path
                        meter_text$=path$
                        if skip_path then
                            print(log_dev)"    "+"***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "
                            print(log_dev)"    "+"    "+key$+": "+path$
                        else
                            print(log_dev)"    "+key$+": "+path$
                        endif
                        break
                    case default
                        rem --- skip other lines
                        break
                swend
            wend
            close(barSyn_dev,err=*next)
        endif

    rem --- Log canonical paths of key paths in sourcePaths!
        print(log_dev)
        pathIter!=sourcePaths!.keySet().iterator()
        while pathIter!.hasNext()
            keyPath$=pathIter!.next()
            keyPath!=new java.io.File(keyPath$)
            canonicalKeyPath$=keyPath!.getCanonicalPath()

            rem --- Use keyPath$ if canonicalKeyPath$ does not start with baseDir$
            if len(canonicalKeyPath$)<baseDirLen or pos("["=canonicalKeyPath$(1,baseDirLen)) then canonicalKeyPath$=keyPath$

            rem --- As needed add ending file separator to directory paths
            if pos(keyPath$(len(keyPath$),1)="/\") and canonicalKeyPath$(len(canonicalKeyPath$),1)<>File.separator then
                canonicalKeyPath$=canonicalKeyPath$+File.separator
            endif

            print(log_dev) "Canonical Key Path: "+cvs(keyPath$,3)+"::::"+cvs(canonicalKeyPath$,3)
        wend

    rem --- Build copyPath! Vector from sourcePaths! Properties, eliminating redundant canonical paths
        copyPath!.add(barDir$)
        pathIter!=sourcePaths!.keySet().iterator()
        while pathIter!.hasNext()
            path$=pathIter!.next()

            canonicalPath$=sourcePaths!.getProperty(path$)

            rem --- Check whether the file exists
            declare File testFile!
            testFile!=new File(canonicalPath$)
            if !testFile!.exists() then continue

            rem --- Is this canonical path redundant (i.e. begins with canoncial path already in copyPath!)?
            declare Iterator copyPathIter!
            redundant=0

            copyPathIter!=copyPath!.iterator()
            while copyPathIter!.hasNext()
                existingCopyPath$=cast(BBjString,copyPathIter!.next())

                declare BBjString path1!
                declare BBjString path2!
                path1!=existingCopyPath$
                if (#isWindows!) then path1!=path1!.toUpperCase()

                if (! path1!.endsWith(File.separator)) then
                    path1!=path1!.concat(File.separator)
                endif

                path2!=canonicalPath$
                if (#isWindows!) then path2!=path2!.toUpperCase()

                if (path2!.startsWith(path1!)) then
                   redundant=1
                   break
                endif
            wend

            REM if the path is redundant, just go on to the next path
            if (redundant) then continue

            rem --- Add non-redundant canonical paths to copyPath!
            rem --- Remove all existing copyPath! <canonical_path>s that begin with the new canonical path being added
            removePaths!=new Vector()
            for i=0 to copyPath!.size()-1
                declare BBjString path1!
                declare BBjString path2!
                existingCopyPath$=copyPath!.get(i)
                path1!=existingCopyPath$
                path2!=canonicalPath$
                if (!path2!.endsWith(File.separator)) then path2!=path2!.concat(File.separator)
                if #isWindows! then
                    path1!=path1!.toUpperCase()
                    path2!=path2!.toUpperCase()
                endif
                if path1!.startsWith(path2!) then removePaths!.add(existingCopyPath$)
            next i
            if removePaths!.size() then copyPath!.removeAll(removePaths!)

            rem --- Add new canonical path if the path exists
            copyPath!.add(canonicalPath$)
        wend

        rem --- Build jar file
        rem --- Increment main progress meter
        meterWin!=mainMeter!
        meter_total_recs=mainMeterTotalRecs
        mainMeterProcRecs=mainMeterProcRecs+1
        meter_text$="Build jar file"
        meter_proc_recs=mainMeterProcRecs
        meter_action$="MTR-LST"
        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
        print(log_dev)
        print(log_dev)meter_text$

        rem --- Jar canonical paths in copyPath! Vector
        if copyPath!.size() then

            rem --- Can't jar open files, so close them
            close(ddmTableTpls_dev,err=*next)
            close(ddmTables_dev,err=*next)
            close(ddmTableCols_dev,err=*next)
            close(ddmSystems_dev,err=*next)

            rem --- Start secondary progress meter
            meter_title$="Build "+jarFile$
            meter_total_recs=copyPath!.size()
            meter_proc_recs=0
            meter_text$=""
            meter_action$="WIN-LST"
            call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
            detailMeter!=meterWin!

            rem --- Show busy/working image while building jar
            nxt_ctlID=util.getNextControlID()
            busyImage!=detailMeter!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

            rem --- Make sure jarFile$ doesn't already exist in baseDir$
            erase jarFile$,err=*next

            rem --- Open the jar file 
            declare TGZFile tgzFile!
            declare BBjString osname!
            tgzFile!=new TGZFile(jarFile$)
            REM chmod 777 all entries in the tar file. 
            tgzFile!.setDefaultFilePermissions("rwxrwxrwx")
            tgzFile!.openForWriting()

            rem --- Remove baseDir$ from copyPath! canonical path before adding it to the jar
            jarList$=""
            for i=0 to copyPath!.size()-1
                canonicalPath$=copyPath!.get(i)
                shortPath$=canonicalPath$(baseDirLen+2)

                rem --- Increment secondary progress meter
                meter_text$=shortpath$
                meterWin!=detailMeter!
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
                print(log_dev)"    "+meter_text$

                rem --- If path includes [+FIRM_ID], then replace with actual COMPANY_IDs
                for j=0 to firmsVect!.size()-1
                    thisPath$=canonicalPath$
                    xpos=pos("[+FIRM_ID]"=thisPath$)
                    if xpos then
                        thisPath$=thisPath$(1,xpos-1)+firmsVect!.get(j)+thisPath$(xpos+10)
                    endif

                    rem --- Tar the path
                    tgzFile!.addFile(thisPath$,baseDir$)
                    print(log_dev)"    "+"    "+thisPath$

                    if pos("[+FIRM_ID]"=thisPath$)=0 then break
                next j
            next i

            rem --- Remove busy/working image from progress meter
            busyImage!.destroy(err=*next)

            rem --- Stop secondary progress meter
            meterWin!=detailMeter!
            meter_text$=""
            meter_proc_recs=meter_total_recs
            meter_action$="LST-END"
            call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
        endif

        rem --- Log adding log file to jar
        print(log_dev)"    adx_jaraon.log"

        rem --- Stop main progress meter
        meterWin!=mainMeter!
        meter_total_recs=mainMeterTotalRecs
        meter_text$=""
        meter_proc_recs=mainMeterTotalRecs
        meter_action$="LST-END"
        call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
        print(log_dev)
        print(log_dev)"Copy Addon Installation Utility log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
        close(log_dev)

        rem --- Show busy/working image while finishing things up
        nxt_ctlID=util.getNextControlID()
        busyImage!=#Win!.addImageCtrl(nxt_ctlID,250,20,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

        rem --- Add log file to jar and close jar
        tgzFile!.addFile(baseDir$+File.separator+"adx_jaraon.log",baseDir$)
        tgzFile!.closeForWriting()

    done: rem --- All done

        rem --- Close open files
        if copyPath!.size()=0 then
            close(ddmTableTpls_dev,err=*next)
            close(ddmTables_dev,err=*next)
            close(ddmTableCols_dev,err=*next)
            close(ddmSystems_dev,err=*next)
        endif

        rem --- Warn if paths were skipped, i.e. skipped>0
        if skipped then
            msg_id$="AD_SKIPPED_PATHS"
            dim msg_tokens$[2]
            msg_tokens$[1]=str(skipped)
            msg_tokens$[2]=log$
            call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
        endif

        rem --- Remove busy/working image from form
        busyImage!.destroy(err=*next)

        goto std_exit

verify_path: rem --- Verify path is located under installation base directory
        skip_path=0

        rem --- Resolve embedded STBLs, except not [+FIRM_ID]
        pathName$=path$
        gosub resolvePathStbls

        resolvedPath!=new java.io.File(resolvedPath$)

        isUrl=resolvedPath!.getPath().matches("^https?:.*")

        if !isUrl then
            canonicalPath$=resolvedPath!.getCanonicalPath()
        endif

        if !isUrl and pos(baseDir$=canonicalPath$)=1 then
            rem --- Good path
            sourcePaths!.setProperty(path$,canonicalPath$)
        else
            rem --- Bad path
            skip_path=1
            skipped=skipped+1
        endif
        return
resolvePathStbls: rem --- Resolve embedded STBLs, except not [+FIRM_ID]. (Based on ado_util.src resolvePathStbls(BBjString pathName$) method)
        resolvedPath$=pathName$

        occurrence=1
        while pos("["=resolvedPath$,1,occurrence)
            startPos=pos("["=resolvedPath$,1,occurrence)+1
            endPos=pos("]"=resolvedPath$,1,occurrence)
            tmpStbl$=resolvedPath$(startPos,endPos-startPos)
            if tmpStbl$="+FIRM_ID" then
                occurrence=occurrence+1
                continue
            endif
            rem --- Must get STBL from packaged installation's *.syn, not from installation running the utility
            tmpPath!=stblValues!.getProperty(tmpStbl$,err=*break)
            if tmpPath!=null() then break
            tmpPath$=tmpPath!
            if pos(" "=tmpPath$) then tmpPath$=$22$+tmpPath$+$22$
            resolvedPath$=resolvedPath$(1,startPos-2)+tmpPath$+resolvedPath$(endPos+1)
        wend

        return

std_exit:
    methodend

    REM *** Extractor
    method public BBjString validateExtractorNewDatabaseName(BBjString databaseName!)
        declare BBjString databaseListString!
        declare java.util.List databaseList!

        rem --- Get the list of existing database names and the new database name
        databaseListString!=sqllist(0)
        databaseList!=Arrays.asList(databaseListString!.split($0A$))

        databaseName!=databaseName!.trim()

        rem --- Database name can not be in the list of existing databases
        if (databaseList!.contains(databaseName!)) then
            methodret "Database already exists"
        endif

        methodret ""

    methodend

    method public BBjString validateExtractorApplicationDescription(BBjString applicationDescription!)
        if (applicationDescription!=null() or applicationDescription!="") then
            methodret "Application description can not be blank."
        endif

        methodret ""
    methodend

    method public BBjString validateExtractorInstallationLocation(BBjString installationLocation!)
        declare File installationLocationFile!
        declare BBjNumber valid!

        REM Verify that location exists
        if (! #directoryExists(installationLocation!)) then
            methodret "Directory must exist."
        endif

        methodret ""
    methodend

    method public BBjString validateExtractorBaristaLocation(BBjString baristaLocation!)
        declare BBjString installationPath!
        declare File installationPathFile!
        declare File baristaLocationFile!

        rem Check if installation path has been filled out.  Hard to validate the barista path without it
        installationPath!=#ExtractorInstallationLocationEB!.getText()
        if (installationPath!="") then
            methodret "Can't validate barista path since base path is blank."
        endif

       rem Check if the installation path exists 
        if (! #directoryExists(installationPath!)) then
            methodret "Can't validate barista path since base path does not exist."
        endif

        rem Check if the path ends in "barista"
        baristaLocationFile!=new File(baristaLocation!)
        baristaLocation!=baristaLocationFile!.getCanonicalPath()
        if (!baristaLocation!.endsWith(File.separator)) then
            baristaLocation!=baristaLocation!.concat(File.separator)
        endif

        if (!baristaLocation!.endsWith(File.separator+"barista"+File.separator)) then
            methodret "Barista path must end with "+$22$+File.separator+"barista"+File.separator+$22$
        endif

        rem Check if the barista path is under the installation path
        installationPathFile!=new File(installationPath!)
        installationPath!=installationPathFile!.getCanonicalPath()
        if (! installationPath!.endsWith(File.separator)) then
            installationPath!=installationPath!.concat(File.separator)
        endif
        if (! baristaLocation!.startsWith(installationPath!)) then
            methodret "Barista path must be under base path."
        endif

        rem If all checks have passed, return an empty string. 
        methodret ""
    methodend



    method public void browseExtractorDirectory(BBjToolButtonPushEvent event!)
        declare BBjString location!
        declare BBjString browsedPath!
        declare BBjInputE inputE!
        declare BBjString browseMsg!
        declare BBjNumber browseOption!

        if (event!.getControl()=#ExtractorArchiveBrowseBtn!) then
            inpute!=#ExtractorArchiveLocationEB!
            browseMsg!="Select Archive File"
            rem --- browse for a file
            browseOption!=0
        endif

        if (event!.getControl()=#ExtractorInstallationBrowseBtn!) then
            inpute!=#ExtractorInstallationLocationEB!
            browseMsg!="Select directory for Addon Installation"
            rem --- browse for a directory
            browseOption!=1
        endif

        location!=inputE!.getText()

        browsedPath!=fileOpen(browseMsg!, location!,"","","",browseOption!)

        rem --- set the installation path to the browsed path if the user did not cancel or encounter an error
        if (! browsedPath!.startsWith("::")) then
            location!=browsedPath!
        endif

        rem --- set the field to the installation path
        inputE!.setText(location!)

        rem --- validate fields 
        #readyForExtraction()
    methodend

    method public BBjString validateExtractorArchiveFile(BBjString archiveLocation!)
        declare File archiveFile!

        archiveFile!=new File(archiveLocation!)
        if (!archiveFile!.exists()) then
            methodret "Archive file must exist"
        endif

        if (! archiveFile!.isFile()) then
            methodret "Archive file must be a file."
        endif

        methodret ""
    methodend

    method public void handleValidateExtractor(BBjControlValidationEvent event!)
        #readyForExtraction()
        event!.accept(1)
    methodend

    method public BBjNumber readyForExtraction()
        declare BBjString databaseName!
        declare BBjString applicationDescription!
        declare BBjString installationLocation!
        declare BBjString baristaLocation!
        declare BBjString archiveFile!
        declare BBjNumber isExtractorNewDatabaseNameReady!
        declare BBjNumber isExtractorApplicationDescriptionReady!
        declare BBjNumber isExtractorInstallLocationReady!
        declare BBjNumber isExtractorBaristaLocationReady!
        declare BBjNumber isExtractorArchiveFileReady!
        declare BBjString status$

        rem -- initialize our status variables
        isExtractorNewDatabaseNameReady!=0
        isExtractorApplicationDescriptionReady!=0
        isExtractorInstallLocationReady!=0
        isExtractorBaristaLocationReady!=0
        isExtractorArchiveFileReady!=0

        rem --- disable extraction
        #ExtractorBtn!.setEnabled(0)

        rem -- validate the new database name
        databaseName!=#ExtractorNewDatabaseNameEB!.getText()
        if (databaseName!<>$$) then
            status$=#validateExtractorNewDatabaseName(databaseName!)
            isExtractorNewDatabaseNameReady!=(status$="")
            if (isExtractorNewDatabaseNameReady!) then
                #markInputEValid(#ExtractorNewDatabaseNameEB!)
            else
                #markInputEInvalid(#ExtractorNewDatabaseNameEB!,status$)
            endif
        else
            isExtractorNewDatabaseNameReady!=0
        endif

        rem -- validate the application description
        applicationDescription!=#ExtractorApplicationDescriptionEB!.getText()
        if (applicationDescription!<>"") then
            status$=#validateExtractorApplicationDescription(applicationDescription!)
            isExtractorApplicationDescriptionReady!=(status$="")
            if (isExtractorApplicationDescriptionReady!) then
                #markInputEValid(#ExtractorApplicationDescriptionEB!)
            else
                #markInputEInvalid(#ExtractorApplicationDescriptionEB!,status!)
            endif
        else
            isExtractorApplicationDescriptionReady!=0
        endif

        rem -- validate installation directory
        installationLocation!=#ExtractorInstallationLocationEB!.getText()
        if (installationLocation!<>"")  then
            installationLocation!=new File(installationLocation!).getCanonicalPath()
            if (! installationLocation!.endsWith(File.separator)) then
                installationLocation!=installationLocation!.concat(File.separator)
            endif
            #ExtractorInstallationLocationEB!.setText(installationLocation!)
            status$=#validateExtractorInstallationLocation(installationLocation!)
            isExtractorInstallationLocationReady!=(status$="")
            if (isExtractorInstallationLocationReady!) then
                #markInputEValid(#ExtractorInstallationLocationEB!)
            else
                #markInputEInvalid(#ExtractorInstallationLocationEB!,status$)
            endif
        else
           isExtractorInstallationLocationReady!=0
        endif

        rem -- validate barista directory 
        baristaLocation!=#ExtractorBaristaLocationEB!.getText()
        if (baristaLocation!<>"") then
            baristaLocation!=new File(baristaLocation!).getCanonicalPath()
            if (! baristaLocation!.endsWith(File.separator)) then
                baristaLocation!=baristaLocation!.concat(File.separator)
            endif
            #ExtractorBaristaLocationEB!.setText(baristaLocation!)
            status$=#validateExtractorBaristaLocation(baristaLocation!)
            isExtractorBaristaLocationReady!=(status$="")
            if (isExtractorBaristaLocationReady!) then
                #markInputEValid(#ExtractorBaristaLocationEB!)
            else
                #markInputEInvalid(#ExtractorBaristaLocationEB!,status$)
            endif
        else
            isExtractorBaristaLocationReady!=0
        endif

        rem -- validate archive file 
        archiveFile!=#ExtractorArchiveLocationEB!.getText()
        if (archiveFile!<>"") then
            status$=#validateExtractorArchiveFile(archiveFile!)
            isExtractorArchiveFileReady!=(status$="")
            if (isExtractorArchiveFileReady!) then
                #markInputEValid(#ExtractorArchiveLocationEB!)
            else
                #markInputEInvalid(#ExtractorArchiveLocationEB!,status$)
            endif
        else
            isExtractorArchiveFileReady!=0
        endif

        rem -- allow extraction if all fields are ready
        if (isExtractorNewDatabaseNameReady! and isExtractorApplicationDescriptionReady! and isExtractorInstallationLocationReady! and isExtractorBaristaLocationReady! and isExtractorArchiveFileReady!) then
            #ExtractorBtn!.setEnabled(1)
            methodret 1
        else
            methodret 0
        endif
    methodend

    method public void extract(BBjButtonPushEvent event!)

      rem --- Initializations
      firmsVect!=new Vector()
      prefixVect!=new Vector()
      sourcePaths!=new Properties()
      stblValues!=new Properties()
      systems!=new Properties()
      savedDir$=dir("")
      bbjHome$=java.lang.System.getProperty("basis.BBjHome").replace("\","/")
      Translate!=BBTranslator.getInstance("barista",stbl("+USER_LOCALE"),null(),stbl("+DIR_SYR"))

      rem --- Initialize stblValues! with Barista STBLs
      stblValues!.setProperty("+DIR_BRA",barDir$+"/sys/data/")
      stblValues!.setProperty("+DIR_BRD",barDir$+"/sys/data/")
      stblValues!.setProperty("+DIR_SYP",barDir$+"/sys/prog/")
      stblValues!.setProperty("+DIR_SYR",barDir$+"/sys/prop/")


      rem --- Get and validate user input 
      dbName$=#ExtractorNewDatabaseNameEB!.getText()
      appDesc$=#ExtractorApplicationDescriptionEB!.getText()
      baseDir$=#ExtractorInstallationLocationEB!.getText()
      jarFile$=#ExtractorArchiveLocationEB!.getText()
      barDir$=#ExtractorBaristaLocationEB!.getText()
      rd_dir_syp$=dsk("")+dir("")+stblValues!.getProperty("+DIR_SYP")

      if (dbName$="" or appDesc$="" or baseDir$="" or jarFile$="" or barDir$="") then
          x=msgbox("Please fill in all values.")
          return
      endif

      call rd_dir_syp$+"bac_em_login.bbj",#Sysgui!,#Win!,rdAdmin!,status$,user$,password$

      rem --- Remove trailing slash (/ or \) from directory paths
      if baseDir$(len(baseDir$))=File.separator then baseDir$=baseDir$(1,len(baseDir$)-1)
      if barDir$(len(barDir$))=File.separator then barDir$=barDir$(1,len(barDir$)-1)

      rem --- Start main progress meter
      meter_title$=#Win!.getTitle()
      meter_total_recs=14
      meter_text$=""
      meter_action$="WIN-LST-OK"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      mainMeter!=meterWin!
      mainMeterProcRecs=meter_proc_recs
      mainMeterTotalRecs=meter_total_recs

      rem --- Open log file
      location$ = baseDir$
      log$ = baseDir$+File.separator+"adx_unjaraon.log"
      erase log$,err=*next
      string log$
      log_dev=unt
      open(log_dev)log$

      rem --- write log header info
      print(log_dev)"Install Copied Addon Installation Utility log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
      print(log_dev)"Destination BBj Installation: "+System.getProperty("basis.BBjHome")
      print(log_dev)"Source Operating System: " + info(0,0)
      print(log_dev)
      print(log_dev)"New Database Name: " + dbName$
      print(log_dev)"Source Installation Base Directory: " + baseDir$
      print(log_dev)"Jar Filename: " + jarFile$
      print(log_dev)"Source Barista Installation Location: " + barDir$

      rem --- Un-package existing Barista installation jar file at the new installation base directory
      rem --- Increment main progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      mainMeterProcRecs=mainMeterProcRecs+1
      meter_text$="Extract files from archive file "+jarFile$
      meter_proc_recs=mainMeterProcRecs
      meter_action$="MTR-LST"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)meter_text$

      rem --- Show busy/working image while extracting files from jar
      nxt_ctlID=util.getNextControlID()
      busyImage!=mainMeter!.addImageCtrl(nxt_ctlID,150,75,33,33,bbjHome$+"/utils/reporting/bbjasper/images/CreatingReport.gif")

      rem --- Un-package archive file
      chdir baseDir$
      declare TGZFile tgzFile!
      declare java.util.List failedToExtract!
      declare Iterator failedToExtractI!
      tgzFile!=new TGZFile(jarFile$)

      tgzFile!.setDefaultFilePermissions("rwxrwxrwx")
      tgzFile!.extractAll(baseDir$)

      REM log any files we did not overwrite. 
      failedToExtract!=tgzFile!.getFailedToExtract()
      if (failedToExtract!<>null()) then
          print (log_dev)  "Did not overwrite the following files:"
          failedToExtractI!=failedToExtract!.iterator()
          while (failedToExtractI!.hasNext())
              print (log_dev) "Did not overwrite: ",failedToExtractI!.next()
          wend
      endif
      chdir savedDir$

      rem --- Remove busy/working image from progress meter
      busyImage!.destroy(err=*next)

      rem --- Open DDM_TABLE_TPLS in target Barista installation
      ddmTableTpls_dev=unt
      open(ddmTableTpls_dev)barDir$+"/sys/data/ddm_table_tpls.dat"; rem --- Error if not found, something is wrong.
      dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"

      rem --- Open DDM_TABLES in source Barista installation
      ddmTables_dev=unt
      open(ddmTables_dev)barDir$+"/sys/data/ddm_tables.dat"; rem --- Error if not found, something is wrong.
      findrecord(ddmTableTpls_dev,key=pad("DDM_TABLES",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
      dim ddmTables$:ddm_table_tpls.template$

      rem --- Open DDM_TABLE_COLS in source Barista installation
      ddmTableCols_dev=unt
      open(ddmTableCols_dev)barDir$+"/sys/data/ddm_table_cols.dat"; rem --- Error if not found, something is wrong.
      findrecord(ddmTableTpls_dev,key=pad("DDM_TABLE_COLS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
      dim ddmTableCols$:ddm_table_tpls.template$

      rem --- Open DDM_SYSTEMS in target Barista installation
      ddmSystems_dev=unt
      open(ddmSystems_dev)barDir$+"/sys/data/ddm_systems.dat"; rem --- Error if not found, something is wrong.
      findrecord(ddmTableTpls_dev,key=pad("DDM_SYSTEMS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
      dim ddmSystems$:ddm_table_tpls.template$

      rem --- Get Mounted Directory for system (application) installed in target Barista
      read(ddmSystems_dev,key="",dom=*next)
      while 1
          readrecord(ddmSystems_dev,end=*break)ddmSystems$
          sysid!=cvs(ddmSystems.mount_sys_id$,2)
          mountDir!=cvs(ddmSystems.mount_dir$,2)
          systems!.setProperty(sysid!,mountDir!)
      wend
      close(ddmSystems_dev,err=*next)

      rem --- Open ADM_FIRMS in target Barista installation, and initialize firmsVect! vector
      adm_firms_dev=unt
      open(adm_firms_dev)barDir$+"/sys/data/adm_firms.dat"; rem --- Error if not found, something is wrong.
      findrecord(ddmTableTpls_dev,key=pad("ADM_FIRMS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
      dim adm_firms$:ddm_table_tpls.template$

      read(adm_firms_dev,key="",dom=*next)
      while 1
          readrecord(adm_firms_dev,end=*break)adm_firms$
          firmsVect!.add(adm_firms.company_id$)
      wend
      close(adm_firms_dev,err=*next)

      rem --- Open ADM_MODULES in target Barista installation
      admModules_dev=unt
      open(admModules_dev)barDir$+"/sys/data/adm_modules.dat"; rem --- Error if not found, something is wrong.
      findrecord(ddmTableTpls_dev,key=pad("ADM_MODULES",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
      dim admModules$:ddm_table_tpls.template$

      rem --- Get version of Barista's ADB module
      readrecord(admModules_dev,key="01007514"+"ADB",dom=*next)admModules$
      barVersion=num(admModules.version_id$)
      close(admModules_dev,err=*next)

      rem --- Initialize stblValues! with Barista STBLs
      stblValues!.setProperty("+DIR_BRA",barDir$+"/sys/data/")
      stblValues!.setProperty("+DIR_BRD",barDir$+"/sys/data/")
      stblValues!.setProperty("+DIR_SYP",barDir$+"/sys/prog/")
      stblValues!.setProperty("+DIR_SYR",barDir$+"/sys/prop/")

      rem --- Increment main progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      mainMeterProcRecs=mainMeterProcRecs+1
      meter_text$="Get old source paths used"
      meter_proc_recs=mainMeterProcRecs
      meter_action$="MTR-LST"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)meter_text$

      rem --- Process "Canonical Key Path:" lines in adx_jaraon.log file
      sourceLog$=baseDir$+File.separator+"adx_jaraon.log"
      sourceLog_dev=unt
      open(sourceLog_dev,isz=-1)sourceLog$; rem --- Error if not found, something is wrong.
      while 1
          read(sourceLog_dev,end=*break)line$

          key$=line$(1,pos(":"=line$))
          switch (BBjAPI().TRUE)
              case key$="Source Installation Base Directory:"
                  sourceBaseDir!=cvs(line$(pos(":"=line$)+1),3)
                  sourceBaseDir$=sourceBaseDir!.replace("\","/")
                  sourceBaseDirLen=len(sourceBaseDir$)
                  break
              case key$="Canonical Key Path:"
                  path$=line$(pos(": "=line$)+2)
                  path$=path$(1,pos("::::"=path$)-1)
                  canonicalPath$=line$(pos("::::"=line$)+4)
                  canonicalPath!=canonicalPath$
                  canonicalPath!=canonicalPath!.replace("\","/")
                  sourcePaths!.setProperty(path$,canonicalPath!)
                  break
              case key$="Source BBj Installation Directory:"
                  sourceBBjDir!=cvs(line$(pos(":"=line$)+1),3)
                  sourceBBjDir$=SourceBBjDir!.replace("\","/")
                  sourceBBjDirLen=len(sourceBBjDir$)
              case default
                  break
          swend
      wend
      close(sourceLog_dev,err=*next)

      rem --- Update paths in system (application) syn file

      rem --- Increment main progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      mainMeterProcRecs=mainMeterProcRecs+1
      meter_text$="Update paths in *.syn files"
      meter_proc_recs=mainMeterProcRecs
      meter_action$="MTR-LST"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)meter_text$

      rem --- Locate target syn files and update paths
      systemsIter!=systems!.keySet().iterator()
      while systemsIter!.hasNext()
          system$=systemsIter!.next()
          sourceMountDir$=systems!.getProperty(system$)
          if !sourcePaths!.containsKey(sourceMountDir$) then continue
          sourceCanonicalMountDir$=sourcePaths!.getProperty(sourceMountDir$)
          targetMountDir$=sourceCanonicalMountDir$
          if pos(sourceBaseDir$=sourceCanonicalMountDir$)=1 then
              targetMountDir!=baseDir$+sourceCanonicalMountDir$(sourceBaseDirLen+1)
              targetMountDir$=targetMountDir!.replace("\","/")
          endif
          print(log_dev)"    "+targetMountDir$

          rem --- Open target syn file, and temporary work file
          appSynFile$=targetMountDir$+"/config/"+cvs(system$,8)+".syn"
          appSyn_dev=unt
          open(appSyn_dev,isz=-1)appSynFile$; rem --- Error if not found, something is wrong.
          tmpWorkFile$=targetMountDir$+"/config/workfile.tmp"
          erase tmpWorkFile$, err=*next
          tmpWork_dev=unt
          open(tmpWork_dev,isz=-1,mode="O_CREATE,O_TRUNC")tmpWorkFile$

          rem --- Update paths
          while 1
              read(appSyn_dev,end=*break)record$

              key$ = record$(1, pos("="=record$) - 1)
              switch (BBjAPI().TRUE)
                  case key$ = "DIR"
                  case key$ = "SYSDIR"
                      xpos = pos("="=record$)
                      path$ = cvs(record$(xpos+1),3)
                      if sourcePaths!.containsKey(path$) then
                          sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                          if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                              path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                          endif
                          record$=record$(1,xpos)+path$
                      endif
                      stblValues!.setProperty(key$,path$)
                      print(log_dev)"    "+"    "+key$+": "+path$
                      break
                  case key$ = "APROD"
                  case key$ = "SYSAPP"
                      xpos = pos("="=record$)
                      ypos = pos(";"=record$)
                      app$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                      xpos = pos(";"=record$,1,5)
                      ypos = pos(";"=record$,1,6)
                      path$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                      if sourcePaths!.containsKey(path$) then
                          sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                          if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                              path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                          endif
                          record$=record$(1,xpos)+path$+record$(ypos)
                      endif
                      print(log_dev)"    "+"    "+key$+"="+app$+": "+path$
                      break
                  case key$ = "STBL"
                  case key$ = "SYSSTBL"
                      xpos = pos(" "=record$)
                      ypos = pos("="=record$,1,2)
                      stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                      path$ = cvs(record$(ypos+1),3)
                      if cvs(stbl$,3)="+MDI_TITLE" then
                          rem --- Set +MDI_TITLE to appDesc$
                          path$=appDesc$
                          record$=record$(1,ypos)+path$
                      else
                          if sourcePaths!.containsKey(path$) then
                              sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                              if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                  path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                              endif
                              record$=record$(1,ypos)+path$
                          endif
                      endif
                      stblValues!.setProperty(stbl$,path$)
                      print(log_dev)"    "+"    "+key$+" "+stbl$+": "+path$
                      break
                  case key$ = "PREFIX"
                  case key$ = "SYSPFX"
                      xpos = pos("="=record$)
                      path$ = cvs(record$(xpos+1),3)
                      if sourcePaths!.containsKey(path$) then
                          sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                          if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                              path!=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                              path$=path!
                          endif
                          record$=record$(1,xpos)+path$
                      endif
                      prefixVect!.add(path$)
                      print(log_dev)"    "+"    "+key$+": "+path$
                      break
                  case key$ = "CFG"
                  case key$ = "SYSCFG"
                      xpos = pos("="=record$)
                      ypos = pos("="=record$,1,2)
                      stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                      path$ = cvs(record$(ypos+1),3)
                      if sourcePaths!.containsKey(path$) then
                          sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                          if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                              path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                          endif
                          record$=record$(1,ypos)+path$
                      endif
                      print(log_dev)"    "+"    "+key$+" "+stbl$+": "+path$
                      break
                  case default
                      rem --- skip other lines
                      break
              swend
              write(tmpWork_dev)record$
          wend
          close(appSyn_dev,err=*next)
          close(tmpWork_dev,err=*next)
          erase appSynFile$, err=*next
          rename tmpWorkFile$ to appSynFile$, err=*next
      wend

      rem --- Update paths in system (application) adm_modules~*.xml files
      pathsToAdmModules!=new Vector()
      pathsToAdmModules!.add("data"+File.separator+"sync")
      pathsToAdmModules!.add("data"+File.separator+"admin_backup")
      for i=0 to pathsToAdmModules!.size()-1
          admModulePath$=pathsToAdmModules!.get(i)

          rem --- Increment main progress meter
          meterWin!=mainMeter!
          meter_total_recs=mainMeterTotalRecs
          mainMeterProcRecs=mainMeterProcRecs+1
          meter_text$="Update paths in "+admModulePath$+File.separator+"adm_modules~*.xml files"
          meter_proc_recs=mainMeterProcRecs
          meter_action$="MTR-LST"
          call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
          print(log_dev)
          print(log_dev)meter_text$

          rem --- Locate target adm_modules~*.xml files and update paths
          systemsIter!=systems!.keySet().iterator()
          while systemsIter!.hasNext()
              system$=systemsIter!.next()
              sourceMountDir$=systems!.getProperty(system$)
              if !sourcePaths!.containsKey(sourceMountDir$) then continue
              sourceCanonicalMountDir$=sourcePaths!.getProperty(sourceMountDir$)
              targetMountDir$=sourceCanonicalMountDir$
              if pos(sourceBaseDir$=sourceCanonicalMountDir$)=1 then
                  sourceCanonicalMountDir!=sourceCanonicalMountDir$
                  sourceCanonicalMountDir$=sourceCanonicalMountDir!.replace("\","/")
                  targetMountDir!=baseDir$+sourceCanonicalMountDir$(sourceBaseDirLen+1)
                  targetMountDir$=targetMountDir!.replace("\","/")
              endif

              rem --- Process adm_modules~*.xml files for this system
              dir!=new File(targetMountDir$ + File.separator + admModulePath$)
              rem --- Validate directory
              if dir! <> null() and dir!.exists() and dir!.isDirectory() and dir!.list() <> null()
                  fileVector! = new Vector(java.util.Arrays.asList(dir!.list(new AdmModulesFilter())))
                  if(fileVector!.size()>0) then
                      rem --- Update paths in LOCALE_PATH and DD_MOUNT_DIR tags
                      startLocalePath$ = "<LOCALE_PATH>"
                      startLocalePathLen = len(startLocalePath$)
                      endLocalePath$ = "</LOCALE_PATH>"
                      startDdMountDir$ = "<DD_MOUNT_DIR>"
                      startDdMountDirLen = len(startDdMountDir$)
                      endDdMountDir$ = "</DD_MOUNT_DIR>"

                      for j=0 to fileVector!.size()-1
                          admModuleFile$=dir!.getCanonicalPath()+File.separator+fileVector!.get(j)
                          print(log_dev)"    "+admModuleFile$

                          rem --- Open target adm_modules~*.xml file, and temporary work file
                          admModule_dev=unt
                          open(admModule_dev,isz=-1)admModuleFile$; rem --- Error if not found, something is wrong.
                          tmpWorkFile$=dir!.getCanonicalPath()+File.separator+"workfile.tmp"
                          erase tmpWorkFile$, err=*next
                          tmpWork_dev=unt
                          open(tmpWork_dev,isz=-1,mode="O_CREATE,O_TRUNC")tmpWorkFile$

                          rem --- Update paths
                          while 1
                              read(admModule_dev,end=*break)record$

                              rem --- Update path in <LOCALE_PATH> lines
                              startLocalePath = pos(startLocalePath$=cvs(record$,4))
                              if startLocalePath then
                                  path$ = record$(startLocalePath + startLocalePathLen)
                                  path$ = path$(1,pos(endLocalePath$=cvs(path$,4))-1)
                                  if sourcePaths!.containsKey(path$) then
                                      sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                                      if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                          path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                                      endif
                                      record$=record$(1,startLocalePath + startLocalePathLen - 1)+path$+record$(pos(endLocalePath$=cvs(record$,4), -1))
                                  endif
                                  print(log_dev)"    "+"    "+startLocalePath$+": "+path$
                              endif

                              rem --- Update path in <DD_MOUNT_DIR> lines
                              startDdMountDir = pos(startDdMountDir$=cvs(record$,4))
                              if startDdMountDir then
                                  path$ = record$(startDdMountDir + startDdMountDirLen)
                                  path$ = path$(1,pos(endDdMountDir$=cvs(path$,4))-1)
                                  if sourcePaths!.containsKey(path$) then
                                      sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                                      if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                          path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                                      endif
                                      record$=record$(1,startDdMountDir + startDdMountDirLen - 1)+path$+record$(pos(endDdMountDir$=cvs(record$,4), -1))
                                  endif
                                  print(log_dev)"    "+"    "+startDdMountDir$+": "+path$
                              endif

                              write(tmpWork_dev)record$
                          wend
                          close(admModule_dev,err=*next)
                          close(tmpWork_dev,err=*next)
                          erase admModuleFile$, err=*next
                          rename tmpWorkFile$ to admModuleFile$, err=*next
                      next j
                  endif
              endif
          wend
      next i

      rem --- Update paths in system (application) data files

      rem --- Increment main progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      mainMeterProcRecs=mainMeterProcRecs+1
      meter_text$="Update paths referenced in data files"
      meter_proc_recs=mainMeterProcRecs
      meter_action$="MTR-LST"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)meter_text$

      rem --- Check these Element Types for directory and file paths
      elementTypes!=new Vector()
      elementTypes!.add("ADM_CONFIG_FILE")
      elementTypes!.add("DATA_PATH")
      elementTypes!.add("DD_ATTR_CPGM")
      elementTypes!.add("DD_MOUNT_DIR")
      elementTypes!.add("DD_MOUNT_MENU")
      elementTypes!.add("DD_TABLE_PATH")
      elementTypes!.add("DIR_BROWSE")
      elementTypes!.add("DOC_PATH")
      elementTypes!.add("EMAIL_FILES")
      elementTypes!.add("GENERIC_FILE_80")
      elementTypes!.add("IMAGE_PATH")
      elementTypes!.add("LOCALE_PATH")
      elementTypes!.add("LOGO_FILE")
      elementTypes!.add("PROGRAM_PATH")

      rem --- Check tables using Element Type, and update paths
      for i=0 to elementTypes!.size()-1
          elementType$=elementTypes!.get(i)
          print(log_dev)"    "+elementType$

          rem --- Search tables using this Element Type
          read(ddmTableCols_dev,key=elementType$,knum="COLUMN_ID",dom=*next)
          while 1
              readrecord(ddmTableCols_dev,end=*break)ddmTableCols$
              if cvs(ddmTableCols.dd_data_name$,2)<>elementType$ then break

              rem --- Get disk file name for this table
              findrecord(ddmTables_dev,key=ddmTableCols.dd_table_alias$,dom=*continue)ddmTables$
              if pos(ddmTables.dd_alias_type$="OPQRT") then continue; rem --- Skip if not a BBj data file
              if cvs(ddmTables.dd_table_alias$,2)="ADS_AUTOLAUNCH" and cvs(ddmTableCols.dd_dvar_name$,2)="PROGRAM_ARGS" then continue; rem --- Does not hold paths
              filename$=cvs(ddmTables.dd_file_name$,2)
              if filename$="" then filename$=cvs(ddmTables.dd_table_alias$,10)

              rem --- Log table.column being updated for this Element Type
              print(log_dev)"    "+"    "+cvs(ddmTables.dd_table_alias$,2)+"."+ddmTableCols.dd_dvar_name$

              rem --- Get path to this table in source installation
              if pos(ddmTables.asc_prod_id$="ADBDDBSQB",3) and elementType$<>"DD_ATTR_CPGM" then
                  rem --- It is a Barista system file
                  filePath$=barDir$+File.separator+"sys"+File.separator+"data"
              else
                  rem --- It is an installed application's file
                  filePath$=ddmTables.dd_table_path$
                  if cvs(filePath$,2)="" then filePath$=barDir$+File.separator+"sys"+File.separator+"data"

                  rem --- Resolve embedded STBLs, except not [+FIRM_ID].
                  pathName$=filePath$
                  gosub resolvePathStbls
                  filePath$=resolvedPath$
              endif

              rem --- If path includes [+FIRM_ID], then replace with actual COMPANY_IDs
              for j=0 to firmsVect!.size()-1
                  thisPath$=filePath$
                  xpos=pos("[+FIRM_ID]"=thisPath$)
                  if xpos then
                      thisPath$=thisPath$(1,xpos-1)+firmsVect!.get(j)+thisPath$(xpos+10)
                  endif

                  rem --- Open file and update paths for this Element Type
                  dataFile$=filePath$+File.separator+filename$
                  table_dev=unt
                  open(table_dev,err=*continue)dataFile$; rem --- If error, assume file not created yet.
                  table_dev2=unt
                  open(table_dev2,err=*continue)dataFile$; rem --- If error, assume file not created yet.
                  findrecord(ddmTableTpls_dev,key=pad(ddmTables.dd_table_alias$,16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
                  dim table$:ddm_table_tpls.template$
                  read(table_dev,key="",dom=*next,end=*continue)
                  while 1
                      key$=key(table_dev,end=*break)
                      readrecord(table_dev)table$
                      path$ = field(table$,cvs(ddmTableCols.dd_dvar_name$,2))
                      if cvs(path$,2)="" continue
                      startPath$=path$

                      rem --- Update path with new installation base directory
                      if elementType$="DD_ATTR_CPGM"
                          all_cpgm_paths$=path$;rem --- for DD_ATTR_CPGM, >1 pathname can be present in semi-colon-separated string (e.g.,if mods project was involved, path to standard aon as well as mods)
                          new_cpgm_paths$=""
                          if all_cpgm_paths$(len(all_cpgm_paths$),1)<>";" then all_cpgm_paths$=all_cpgm_paths$+";";rem --- have seen some entries w/o final semi-colon
                          while all_cpgm_paths$<>""
                              path$=all_cpgm_paths$(1,pos(";"=all_cpgm_paths$)-1)
                              all_cpgm_paths$=all_cpgm_paths$(pos(";"=all_cpgm_paths$)+1)
                              if sourcePaths!.containsKey(path$) then
                                  sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                                  if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                      path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                                  endif
                              endif
                              new_cpgm_paths$=new_cpgm_paths$+path$+";"
                          wend
                          path$=new_cpgm_paths$
                      else
                          if sourcePaths!.containsKey(path$) then
                              sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                              if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                  path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                              endif
                          endif
                      endif

                      if startPath$<>path$ then print(log_dev) "    "+"    "+"    "+startPath$+" >>> "+path$
                      field table$,cvs(ddmTableCols.dd_dvar_name$,2)=path$
                      table$=field(table$)
                      writerecord(table_dev2)table$
                  wend
                  close(table_dev,err=*next)
                  close(table_dev2,err=*next)

                  if pos("[+FIRM_ID]"=filePath$)=0 then break
              next j
          wend
      next i

      rem --- Update paths in system (application) *.def files for ALL languages if pre-v19 Barista
      if barVersion<19 then

          rem --- Increment main progress meter
          meterWin!=mainMeter!
          meter_total_recs=mainMeterTotalRecs
          mainMeterProcRecs=mainMeterProcRecs+1
          meter_text$="Update paths referenced in *.def files"
          meter_proc_recs=mainMeterProcRecs
          meter_action$="MTR-LST"
          call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
          print(log_dev)
          print(log_dev)meter_text$

          rem --- Locate target *.def files and update paths
          systemsIter!=systems!.keySet().iterator()
          while systemsIter!.hasNext()
              system$=systemsIter!.next()
              sourceMountDir$=systems!.getProperty(system$)

              if !sourcePaths!.containsKey(sourceMountDir$) then continue
              sourceCanonicalMountDir$=sourcePaths!.getProperty(sourceMountDir$)
              targetMountDir$=sourceCanonicalMountDir$
              if pos(sourceBaseDir$=sourceCanonicalMountDir$)=1 then
                  targetMountDir$=baseDir$+sourceCanonicalMountDir$(sourceBaseDirLen+1)
              endif

              print(log_dev)"    "+system$

              rem --- Get path to this system's def directory

              systemDefDir$=targetMountDir$+File.separator+"data"+File.separator+"def"
              defDir!=new File(systemDefDir$)

              rem --- Get languages for this system's *def files
              if defDir! <> null() and defDir!.exists() and defDir!.isDirectory() and defDir!.list() <> null()
                  langDirVector! = new Vector(java.util.Arrays.asList(defDir!.listFiles()))
                  if(langDirVector!.size()>0) then
                      for i=0 to langDirVector!.size()-1
                          langDir!=langDirVector!.get(i)
                          if !langDir!.isDirectory() or langDir!.list()=null() then continue
                          print(log_dev)"    "+"    "+langDir!.getName()

                          rem --- Get *def files for this language
                          fileVector! = new Vector(java.util.Arrays.asList(langDir!.listFiles(new DefFileFilter())))
                          if(fileVector!.size()>0) then

                              rem --- Start secondary progress meter
                              meter_title$=system$+" "+langDir!.getName()+" *.def files"
                              meter_total_recs=langDirVector!.size()
                              meter_proc_recs=0
                              meter_text$=""
                              meter_action$="WIN-LST"
                              call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
                              detailMeter!=meterWin!

                              rem --- Update paths in *.def files for this language
                              for j=0 to fileVector!.size()-1
                                  defFile!=fileVector!.get(j)
                                  if !defFile!.isFile() then continue

                                  rem --- Increment secondary progress meter
                                  meter_text$=defFile!.getName()
                                  meterWin!=detailMeter!
                                  meter_proc_recs=meter_proc_recs+1
                                  meter_action$="MTR-LST"
                                  call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$

                                  rem --- Open target *.def file, and temporary work file
                                  defFile$=defFile!.getCanonicalPath()
                                  defFile_dev=unt
                                  open(defFile_dev,isz=-1)defFile$; rem --- Error if not found, something is wrong.
                                  tmpWorkFile$=defFile!.getParent()+File.separator+"workfile.tmp"
                                  erase tmpWorkFile$, err=*next
                                  tmpWork_dev=unt
                                  open(tmpWork_dev,isz=-1,mode="O_CREATE,O_TRUNC")tmpWorkFile$

                                  rem --- Update paths in *.def file
                                  cpgmColumn_pos=0
                                  cpgmTable_pos=0
                                  doColumnAttrs=0
                                  doColumnDefs=0
                                  doTableAttrs=0
                                  doTableDefs=0
                                  while 1
                                      read(defFile_dev,end=*break)line$

                                      key$=line$(1,pos("}"=line$))
                                      switch (BBjAPI().TRUE)
                                          case key$="{TableAttrs}"
                                              doTableAttrs=2
                                              break
                                          case key$="{TableDefs}"
                                              doTableDefs=1
                                              break
                                          case key$="{TableDefsEnd}"
                                              doTableDefs=0
                                              break
                                          case key$="{ColumnAttrs}"
                                              doColumnAttrs=2
                                              break
                                          case key$="{ColumnDefs}"
                                              doColumnDefs=1
                                              break
                                          case key$="{ColumnDefsEnd}"
                                              doColumnDefs=0
                                              break
                                          case default
                                              break
                                      swend

                                      rem --- Get position of CPGM attribute for Tables
                                      if doTableAttrs then
                                          if doTableAttrs=1 then
                                              cpgmTable_pos=pos("CPGM"=line$,5)
                                              if cpgmTable_pos then cpgmTable_pos=(cpgmTable_pos-1)/5
                                          endif
                                          doTableAttrs=doTableAttrs-1
                                      endif

                                      rem --- Get position of CPGM attribute for Columns
                                      if doColumnAttrs then
                                          if doColumnAttrs=1 then
                                              cpgmColumn_pos=pos("CPGM"=line$,5)
                                              if cpgmColumn_pos then cpgmColumn_pos=(cpgmColumn_pos-1)/5
                                          endif
                                          doColumnAttrs=doColumnAttrs-1
                                      endif

                                      rem --- Update CPGM attribute for Tables
                                      if doTableDefs and pos("{TableDefs}"=line$)=0 then
                                          tmpLine1$=line$(1,pos("^"=line$,1,cpgmTable_pos))
                                          path$=line$(pos("^"=line$,1,cpgmTable_pos)+1)
                                          if pos("^"=path$)>1 and pos(";^"=path$) then
                                              tmpline2$=path$(pos(";^"=path$)+1)
                                              all_cpgm_paths$=path$(1,pos(";^"=path$))
                                              new_cpgm_paths$=""
                                              while all_cpgm_paths$<>""
                                                  path$=all_cpgm_paths$(1,pos(";"=all_cpgm_paths$)-1)
                                                  all_cpgm_paths$=all_cpgm_paths$(pos(";"=all_cpgm_paths$)+1)
                                                  if sourcePaths!.containsKey(path$) then
                                                      sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                                                      if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                                          path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                                                      endif
                                                  endif
                                                  new_cpgm_paths$=new_cpgm_paths$+path$+";"
                                              wend
                                              line$=tmpline1$+new_cpgm_paths$+tmpline2$
                                          endif
                                      endif

                                      rem --- Update CPGM attribute for Columns
                                      if doColumnDefs and pos("{ColumnDefs}"=line$)=0 then
                                          tmpLine1$=line$(1,pos("^"=line$,1,cpgmColumn_pos))
                                          path$=line$(pos("^"=line$,1,cpgmColumn_pos)+1)
                                          if pos("^"=path$)>1 and pos(";^"=path$) then
                                              tmpline2$=path$(pos(";^"=path$)+1)
                                              all_cpgm_paths$=path$(1,pos(";^"=path$))
                                              new_cpgm_paths$=""
                                              while all_cpgm_paths$<>""
                                                  path$=all_cpgm_paths$(1,pos(";"=all_cpgm_paths$)-1)
                                                  all_cpgm_paths$=all_cpgm_paths$(pos(";"=all_cpgm_paths$)+1)
                                                  if sourcePaths!.containsKey(path$) then
                                                      sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                                                      if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                                          path$=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                                                      endif
                                                  endif
                                                  new_cpgm_paths$=new_cpgm_paths$+path$+";"
                                              wend
                                              line$=tmpline1$+new_cpgm_paths$+tmpline2$
                                          endif
                                      endif

                                      write(tmpWork_dev)line$
                                  wend

                                  close(defFile_dev,err=*next)
                                  close(tmpWork_dev,err=*next)
                                  erase defFile$, err=*next
                                  rename tmpWorkFile$ to defFile$, err=*next
                              next j

                              rem --- Stop secondary progress meter
                              meterWin!=detailMeter!
                              meter_text$=""
                              meter_proc_recs=meter_total_recs
                              meter_action$="LST-END"
                              call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
                          endif
                      next i
                  endif
              endif
          wend
      endif

      rem --- Update paths in <new_base_dir>/barista/sys/config/barista.syn

      rem --- Open barista.syn file, and temporary work file
      barSyn_found=0
      barSynFile$=barDir$+"/sys/config/barista.syn"
      barSyn_dev=unt
      open(barSyn_dev,isz=-1,err=*next)barSynFile$; barSyn_found=1
      if barSyn_found then
          rem --- Increment main progress meter
          meterWin!=mainMeter!
          meter_total_recs=mainMeterTotalRecs
          mainMeterProcRecs=mainMeterProcRecs+1
          meter_text$="Update paths in barista.syn"
          meter_proc_recs=mainMeterProcRecs
          meter_action$="MTR-LST"
          call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
          print(log_dev)
          print(log_dev)meter_text$

          rem --- Open temporary work file
          tmpWorkFile$=barDir$+"/sys/config/workfile.tmp"
          erase tmpWorkFile$, err=*next
          tmpWork_dev=unt
          open(tmpWork_dev,isz=-1,mode="O_CREATE,O_TRUNC")tmpWorkFile$

          rem --- Update paths
          while 1
              read(barSyn_dev,end=*break)record$

              key$ = record$(1, pos("="=record$) - 1)
              switch (BBjAPI().TRUE)
                  case key$ = "SYN"
                      xpos = pos("="=record$)
                      path$ = cvs(record$(xpos+1),3)
                      startPath$=path$
                      if sourcePaths!.containsKey(path$) then
                          sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                          if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                              path!=baseDir$+sourceCanonicalPath$(sourceBaseDirLen+1)
                              path$=path!.replace("\","/")
                          endif
                          record$=record$(1,pos("="=record$))+path$
                          if startPath$<>path$ then print(log_dev) "    "+startPath$+" >>> "+path$
                      endif
                      break
                  case default
                      rem --- skip other lines
                      break
              swend
              write(tmpWork_dev)record$
          wend
          close(barSyn_dev,err=*next)
          close(tmpWork_dev,err=*next)
          erase barSynFile$, err=*next
          rename tmpWorkFile$ to barSynFile$, err=*next
      endif

      rem --- Update PREFIX, dbname, dbname_api, port and SSL settings in barista.cfg for ALL languages

      rem --- Increment main progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      mainMeterProcRecs=mainMeterProcRecs+1
      meter_text$="Update barista.cfg files"
      meter_proc_recs=mainMeterProcRecs
      meter_action$="MTR-LST"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)meter_text$

      rem --- Get languages for barista's barista.cfg files
      barConfigDir!=new File(barDir$+File.separator+"sys"+File.separator+"config")
      if barConfigDir! <> null() and barConfigDir!.exists() and barConfigDir!.isDirectory() and barConfigDir!.list() <> null()
          langDirVector! = new Vector(java.util.Arrays.asList(barConfigDir!.listFiles()))
          if(langDirVector!.size()>0) then
              for i=0 to langDirVector!.size()-1
                  langDir!=langDirVector!.get(i)
                  if !langDir!.isDirectory() or langDir!.list()=null() then continue
                  print(log_dev)"    "+langDir!.getName()

                  rem --- Open barista.cfg file for this language, and temporary work file
                  barCfgFile$=langDir!.getPath()+File.separator+"barista.cfg"
                  barCfg_dev=unt
                  open(barCfg_dev,isz=-1,err=*continue)barCfgFile$
                  tmpWorkFile$=langDir!.getPath()+File.separator+"workfile.tmp"
                  erase tmpWorkFile$, err=*next
                  tmpWork_dev=unt
                  open(tmpWork_dev,isz=-1,mode="O_CREATE,O_TRUNC")tmpWorkFile$

                  rem --- Update PREFIX, dbname, dbname_api, port and SSL settings in barista.cfg for this language
                  dsksynProcessed=0
                  while 1
                      read(barCfg_dev,end=*break)line$
                      if line$="" then continue


                      rem --- replace the original BBj path in the line with the new BBj path
                      if (sourceBBjDir$<>"")
                          sourceBBjDir!=sourceBBjDir$
                          sourceBBjDir$=sourceBBjDir!.replace("\","/")
                          bbjHome!=bbjHome$
                          bbjHome$=bbjHome!.replace("\","/")
                          line!=line$
                          line!=line!.replace("\","/")
                          if (line!.contains(sourceBBjDir$)) then
                              line$=line!.replace(sourceBBjDir$,bbjHome$)
                          endif
                      endif

                      if pos("PREFIX"=line$)=1 then
                          line!=line$
                          linePrefixVect!=Arrays.asList(line!.split(" "))
                          pfxIter!=linePrefixVect!.iterator()
                          newPfx$=""
                          while pfxIter!.hasNext()

                              rem Take care of prefix entries that have quotes around them. 
                              token!=cast(BBjString,pfxIter!.next())
                              if (token!.startsWith($22$)) then
                                  rem Remove the beginning quote
                                  token!=token!.substring(1)

                                  rem Take care of entries with embedded spaces that were split into more than one token.
                                  rem A token that starts with a quote but never terminates will cause an error.  
                                  while (! token!.endsWith($22$))
                                      next_token!=cast(BBjString,pfxIter!.next())
                                      token!=token!+" "+next_token!
                                  wend

                                  rem Take the ending quote off
                                  token!=token!.substring(0,token!.length()-1)
                              endif

                              rem Keep only relative paths and paths beginning with BBJ_HOME
                              addToken=(token!="PREFIX") OR (token!.startsWith(bbjHome$)) OR (!(new java.io.File(token!).isAbsolute()) AND !token!.startsWith("/"))
                              if addToken then
                                  if (token!.contains(" ")) then
                                      token!=$22$+token!+$22$
                                  endif
                                  newPfx$=newPfx$+token!+" "
                              endif
                          wend
                          newPfx$=newPfx$+String.join(" ",prefixVect!)
                          line$=newPfx$
                      endif

                      REM Process DSKSYN Lines
                      if (pos("DSKSYN"=line$)=1) then
                            if (dsksynProcessed) then continue
                            dsksynProcessed=1
                            line$=$$
                            for alphaOffset=0 to 25
                               drive$=chr(65+alphaOffset)
                               if (#isWindows!) then
                                   setdrive drive$,err=dsksynThisOne
                                   continue
                               endif
                               dsksynThisOne:
                               line$=line$+"DSKSYN "+drive$+":"+$0A$
                           next alphaOffset
                      endif

                      rem --- Note: Most of the paths in barista.cfg containing the old base directory
                      rem --- will have their path replaced with the new directory during a sync after 
                      rem --- the startup of the new installation.  This utility does not change them.
                      key$=cvs(line$(1,pos("="=line$)-1),3)
                      switch (BBjAPI().TRUE)
                          case key$="SET +DBNAME"
                              line$=line$(1,pos("="=line$,-1))+dbName$
                              break
                          case key$="SET +DBNAME_API"
                              line$=key$+"="+dbName$
                              break
                          case key$="SET +DBPORT"
                              line$=key$+"="+stbl("+DBPORT",err=*break)
                              break
                          case key$="SET +DBSQLPORT"
                              line$=key$+"="+stbl("+DBSQLPORT",err=*break)
                              break
                          case key$="SET +DBSSL"
                              line$=key$+"="+stbl("+DBSSL",err=*break)
                              break
                          case key$="SET +EMAIL_USE_SSL"
                              line$=key$+"="+stbl("+EMAIL_USE_SSL",err=*break)
                              break
                          case key$="SET +ENPORT"
                              line$=key$+"="+stbl("+ENPORT",err=*break)
                              break
                          case default
                              break
                      swend

                      write(tmpWork_dev)line$
                  wend

                  close(barCfg_dev,err=*next)
                  close(tmpWork_dev,err=*next)
                  erase barCfgFile$, err=*next
                  rename tmpWorkFile$ to barCfgFile$, err=*next
              next i
          endif
      endif

      rem --- Attach to new database and set some properties

      rem --- Increment progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      mainMeterProcRecs=mainMeterProcRecs+1
      meter_text$=Translate!.getTranslation("AON_ATTACH_DB","Attaching to new database",1)
      meter_proc_recs=mainMeterProcRecs
      meter_action$="MTR-LST"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)meter_text$

      rdAdmin!.attachDatabaseOnDisk(cvs(dbName$,3),cvs(barDir$,3)+File.separator+"bbdict"+File.separator)

      dataBase!=rdAdmin!.getDatabase(cvs(dbName$,3))

      dataBase!.setString("DATABASE",cvs(dbName$,2))
      dataBase!.setString("DICTIONARY",barDir$+File.separator+"bbdict"+File.separator)
      dataBase!.setString("+DIR_BRD",barDir$+File.separator+"sys"+File.separator+"data"+File.separator)
      dataBase!.setString("+DIR_BRA",barDir$+File.separator+"sys"+File.separator+"data"+File.separator)
      dataBase!.setString("ACCESSPOLICY","ALL")
      dataBase!.setBoolean("ADVISORYLOCKING",BBjAPI().TRUE)
      dataBase!.setBoolean("AUTO_ANALYZE_TABLES",BBjAPI().TRUE)
      dataBase!.setBoolean("ENFORCE_VARCHAR_LENGTH",BBjAPI().TRUE)
      dataBase!.setBoolean("STRICTKEYCHECKING",BBjAPI().TRUE)

      dataBase!.commit()

      rdAdmin!.reloadDatabaseConfig(err=*next)

      rem --- Create new session specific classpath (SSCP) in Enterprise Manager

      rem --- Increment progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      mainMeterProcRecs=mainMeterProcRecs+1
      meter_text$=Translate!.getTranslation("AON_CREATE_SSCP","Creating new classpath",1)
      meter_proc_recs=mainMeterProcRecs
      meter_action$="MTR-LST"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)meter_text$

      sscpName$=cvs(dbName$,8)
      copyData%=0
      status=0
      oldAonLoc$=""
      testChan=unt
      open(testChan,err=*next) "adc_createsscp.aon"
      exists=err<>12
      close (testChan)
      if (exists) then
        version$=rev
        version=num(version$(4))
        if (version<20) then
            call "adc_createsscp.aon",sscpName$,barDir$+File.separator+"..",copyData%,rdAdmin!,status
        else
            call "adc_createsscp.aon",sscpName$,barDir$+File.separator+"..",oldAonLoc$,copyData%,rdAdmin!,status
        endif
      else
        print (log_dev) "The Packager Extractor doesn't create SSCPs for Addon installations before version 19.10, since adc_createsscp.aon doesn't exist."
        REM --- keep going
        status=1
      endif
      if status
          rem --- Increment progress meter
          meterWin!=mainMeter!
          meter_total_recs=mainMeterTotalRecs
          mainMeterProcRecs=mainMeterProcRecs+1
          meter_text$=Translate!.getTranslation("AON_CREATE_SSCP_ERROR","Unable to create new classpath",1)
          meter_proc_recs=mainMeterProcRecs
          meter_action$="MTR-LST"
          call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
          print(log_dev)meter_text$
      endif

      rem --- Update XML Configuration File barista_installs.xml
      update_barista_installs: rem --- Update XML Configuration File barista_installs.xml

      rem --- Increment progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      mainMeterProcRecs=mainMeterProcRecs+1
      meter_text$=Translate!.getTranslation("AON_UPDT_INSTALLS","Updating barista_installs.xml",1)
      meter_proc_recs=mainMeterProcRecs
      meter_action$="MTR-LST"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)meter_text$

      call stbl("+DIR_SYP")+"bax_version.bbj",barVersion$,""
      newVersion$=barVersion$+"."+stbl("+BUILD_ID")
      line_sep$=java.lang.System.getProperty("line.separator")
      tempSep$=$01$

      baseProp$="-tT0 -q -CP"+sscpName$+" -WD"+$22$+barDir$+$22$+" -c"+$22$+barDir$+"/sys/config/enu/barista.cfg"+$22$+" "+$22$+barDir$+"/sys/prog/bar_login.bbj"+$22$+" - aon"

      barInstallFile$=bbjHome$+"/barista/sys/config/barista_installs.xml"

      temp_tag$=$09$+"<RECORD id="+$22$+cvs(dbName$,136)+$22$+">"

      xml_chan=unt
      open (xml_chan,err=create_installs)barInstallFile$
      xml_chan_fin$=fin(xml_chan)
      read record(xml_chan,siz=dec($00$+xml_chan_fin$(1,4)))xml_data$
      close (xml_chan)

      xmlData!=xml_data$
      xmlData!=xmlData!.replace($0d0a$,tempSep$)
      xmlData!=xmlData!.replace($0d$,tempSep$)
      xml_data$=xmlData!.replace($0a$,tempSep$)

      rec_block$=$09$+"<RECORD id="+$22$+cvs(dbName$,136)+$22$+">"+line_sep$+$0909$+"<ID id="+$22$+cvs(dbName$,136)+$22$+">"+dbName$+"</ID>"+line_sep$+$0909$+"<DESCRIPTION id="+$22$+cvs(dbName$,136)+$22$+">"+appDesc$+"</DESCRIPTION>"+line_sep$+$0909$+"<LOCATION id="+$22$+cvs(dbName$,136)+$22$+">"+barDir$+"</LOCATION>"+line_sep$+$0909$+"<VERSION id="+$22$+cvs(dbName$,136)+$22$+">"+newVersion$+"</VERSION>"+line_sep$+$0909$+"<DATE_CREATED id="+$22$+cvs(dbName$,136)+$22$+">"+date(0:"%Yd%Mz%Dz%Hz%mz%sz")+"</DATE_CREATED>"+line_sep$+$0909$+"<PROPERTIES id="+$22$+cvs(dbName$,136)+$22$+">"+baseProp$+"</PROPERTIES>"+line_sep$+$09$+"</RECORD>"+line_sep$

      temp_pos=pos(temp_tag$=xml_data$)
      if temp_pos=0
          temp_pos=pos("</INSTALLATIONS>"=xml_data$)
          xml_data$=xml_data$(1,temp_pos-1)+rec_block$+xml_data$(temp_pos)
      else
          temp_pos=pos(temp_tag$=xml_data$)
          temp_block=pos($09$+"</RECORD>"=xml_data$(temp_pos))+10
          xml_data$=xml_data$(1,temp_pos-1)+rec_block$+xml_data$(temp_pos+temp_block)
      endif

      xmlData!=xml_data$
      xmlData!=xmlData!.replace(tempSep$,line_sep$)
      xml_data$=xmlData!

      initfile barInstallFile$
      xml_chan=unt
      open (xml_chan)barInstallFile$
      write record(xml_chan)xml_data$
      close(xml_chan)

      rem --- Reset ADS_AUTOLAUNCH record for BUILDSPROC, 50AUTOSYNC, and 90MNUIMP processes

      sql_prep$="UPDATE ADS_AUTOLAUNCH SET PROCESS_STATUS='N',TRANS_DATE='',TRANS_TIME='' WHERE PROCESS_ID='BUILDSPROC'"
      sql_chan=sqlunt
      sqlopen(sql_chan)dbName$

      sqlprep(sql_chan)sql_prep$
      sqlexec(sql_chan)

      sql_prep$="UPDATE ADS_AUTOLAUNCH SET PROCESS_STATUS='N',TRANS_DATE='',TRANS_TIME='' WHERE PROCESS_ID='50AUTOSYNC'"
      sqlprep(sql_chan)sql_prep$
      sqlexec(sql_chan)

      sql_prep$="UPDATE ADS_AUTOLAUNCH SET PROCESS_STATUS='N',TRANS_DATE='',TRANS_TIME='' WHERE PROCESS_ID='90MNUIMP'"
      sqlprep(sql_chan)sql_prep$
      sqlexec(sql_chan)

      sqlclose(sql_chan)

      rem --- Set permissions for extracted directory and file
      rem --- (HOLD: This may not be necessary. Need to determine.)

      done: rem --- All done

      rem --- Stop main progress meter
      meterWin!=mainMeter!
      meter_total_recs=mainMeterTotalRecs
      meter_text$=""
      meter_proc_recs=mainMeterTotalRecs
      meter_action$="LST-END"
      call stbl("+DIR_SYP")+"bam_prog_bar.bbj",#Sysgui!,#Win!,meterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_text$,meter_action$
      print(log_dev)
      print(log_dev)"Install Copied Addon Installation Utility log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
      close(log_dev)

      rem --- Close open files
      close(ddmTableTpls_dev,err=*next)
      close(ddmTables_dev,err=*next)
      close(ddmTableCols_dev,err=*next)

      goto std_exit

      resolvePathStbls: rem --- Resolve embedded STBLs, except not [+FIRM_ID]. (Based on ado_util.src resolvePathStbls(BBjString pathName$) method)
      resolvedPath$=pathName$

      occurrence=1
      while pos("["=resolvedPath$,1,occurrence)
        startPos=pos("["=resolvedPath$,1,occurrence)+1
        endPos=pos("]"=resolvedPath$,1,occurrence)
        tmpStbl$=resolvedPath$(startPos,endPos-startPos)
        if tmpStbl$="+FIRM_ID" then
            occurrence=occurrence+1
            continue
        endif
        rem --- Must get STBL from packaged installation's *.syn, not from installation running the utility
        tmpPath!=stblValues!.getProperty(tmpStbl$,err=*break)
        if tmpPath!=null() then break
        tmpPath$=tmpPath!
        if pos(" "=tmpPath$) then tmpPath$=$22$+tmpPath$+$22$
        resolvedPath$=resolvedPath$(1,startPos-2)+tmpPath$+resolvedPath$(endPos+1)
      wend

      return

      create_installs:rem --- Create Installations File

      xml_dir$=bbjHome$+File.separator+"barista"+File.separator

      xml_data$="<?xml version='1.0' encoding='UTF-8' ?>"+line_sep$+"<INSTALLATIONS>"+line_sep$
      xml_data$=xml_data$+$09$+"<RECORD id="+$22$+"barista"+$22$+">"+line_sep$
      xml_data$=xml_data$+$0909$+"<ID id="+$22$+"barista"+$22$+">BARISTA</ID>"+line_sep$
      xml_data$=xml_data$+$0909$+"<DESCRIPTION id="+$22$+"barista"+$22$+">Barista Application Framework</DESCRIPTION>"+line_sep$
      xml_data$=xml_data$+$0909$+"<LOCATION id="+$22$+"barista"+$22$+">"+xml_dir$+"</LOCATION>"+line_sep$
      xml_data$=xml_data$+$0909$+"<VERSION id="+$22$+"barista"+$22$+">"+barVersion$+"."+stbl("+BUILD_ID")+"</VERSION>"+line_sep$
      xml_data$=xml_data$+$0909$+"<DATE_CREATED id="+$22$+"barista"+$22$+">"+date(0:"%Yd%Mz%Dz%Hz%mz%sz")+"</DATE_CREATED>"+line_sep$
      xml_data$=xml_data$+$0909$+"<PROPERTIES id="+$22$+"barista"+$22$+">-tT0 -q -WD"+$22$+xml_dir$+$22$+" -c"+$22$+xml_dir$+"sys/config/enu/barista.cfg"+$22$+" "+$22$+xml_dir$+"sys/prog/bar_login.bbj"+$22$+"</PROPERTIES>"+line_sep$
      xml_data$=xml_data$+$09$+"</RECORD>"+line_sep$
      xml_data$=xml_data$+"</INSTALLATIONS>"

      string barInstallFile$

      xml_chan=unt
      open (xml_chan)barInstallFile$
      write record(xml_chan)xml_data$
      close(xml_chan)

      retry

      std_exit:
    methodend

classend

class public AdmModulesFilter implements java.io.FilenameFilter

    method public boolean accept(File dir!, String file!)
        if file!.startsWith("adm_modules~") and file!.endsWith(".xml")
            methodret Boolean.valueOf("true")
        else
            methodret Boolean.valueOf("false")
        endif
    methodend

classend

class public DefFileFilter implements java.io.FilenameFilter

    method public boolean accept(File dir!, String file!)
        if file!.endsWith(".def")
            methodret Boolean.valueOf("true")
        else
            methodret Boolean.valueOf("false")
        endif
    methodend

classend
