rem DataPort - Conversion of version 6 data to 8
rem normalization.bbj - Normalization of version 7 data files (10/30/2007)


gosub get_template
a=msgbox("Normalizing data files",0,"Normalization")
Print "Normalization of Data Files"

rem --- Open XRef file 'file_normalization'
open_xref:
    let chanXRef=unt
    open(chanXRef)filedir$+"file_normalization"
read_XRef:
    read(chanXRef,end=finished)dat$
    if dat$="" goto read_xref
    size=0
    if dat$(1,6)<>prev_dat$ then
        print ""
        print "Normalizing File "+dat$(1,6)
    endif
    prev_dat$=dat$(1,6)

rem --- Open DDM_TABLE_COLS for determining the record size
open_dictfile:

    let chan=unt
    open(chan)dictfile$+"ddm_table_cols.dat"
rem ---Read DDM_TABLE_COLS data corresponding to the XRef file data
read_dictfile:
    readrecord(chan,end=read_dictfile_end)dd_table_cols$
        if dd_table_cols.dd_table_alias$<>dat$(27,16) then goto read_dictfile
        datalen=num(dd_table_cols.dd_attr_maxl)
        if datalen=0 then gosub read_datafield_length
        if dd_table_cols.dd_col_occurs<>0 then datalen=datalen*(dd_table_cols.dd_col_occurs)
        if dd_table_cols.dd_col_repeats<>0 then datalen=datalen*(dd_table_cols.dd_col_repeats)
        size=size+datalen
        rem if dd_table_cols.dd_field_delim$="Y" then size=size+1
        goto read_dictfile
    read_dictfile_end:

   rem --- Create XKeyed file
        filename$=cvs(cvs(dat$(27,16),2),8)
        rem --- Check whether the data file already exists
        let chanTemp=unt
        open(chanTemp,err=create_file)destin_folder$+"/"+filename$
        close(chanTemp)
        goto copying
        create_file:
            print ""
            print "     Creating Data File "+filename$
            call dictpgm$+"bac_create_table.bbj",cvs(filename$,4),destin_folder$+"/"+filename$,rd_table_chans$[all],"CREATE",status$
            print "     Data File "+filename$+" created"

        copying:
        rem --- Copy data to normalized file
        let chanCopy=unt
        open(chanCopy,err=err_copydata)source_folder$+"/"+cvs(dat$(1,6),8)
        let chanWrite=unt
        open(chanWrite,err=err_copydata)destin_folder$+"/"+filename$
        print "     Copying data from "+ cvs(dat$(1,6),8)+ " to file "+ filename$
        copy_data:
            readrecord(chanCopy,end=end_copy_data)value$
            if dat$(1,6)="sys-01" then 
                if value$(3,4)=cvs(dat$(44,4),2) then writerecord(chanWrite)value$(1,size)
                if value$(1,1)=cvs(dat$(44,4),2) then writerecord(chanWrite)value$(1,size)
                goto copy_data
            endif
            if value$(3,1)=cvs(dat$(44,4),2) then writerecord(chanWrite)value$(1,size)
        goto copy_data
        end_copy_data:
        print "     Copying data from "+ cvs(dat$(1,6),8)+ " to file "+ filename$+" Completed"
        goto close_chans
        err_copydata:
        print "     Data File "+cvs(dat$(1,6),8)+" not found"
        close_chans:
        close(chanWrite)
        close(chanCopy)
    goto read_XRef
    finished:
    print ""
    print "Normalization completed successfully"
    a=msgbox("Normalization completed",0,"Normalization")
    release

rem --- To find datafield length if dd_attr_maxl=0
read_datafield_length:
    let chanTemp=unt
    open(chanTemp)dictfile$+"ddm_elements.dat"
    findrecord(chanTemp,key=dd_table_cols.dd_data_name$)dd_elements$
    let datalen=dd_elements.dd_data_length
    close(chanTemp)
return

rem --- Template declaration for Dictionary files
get_template:
dim dd_table_cols$:"dd_table_alias:c(16*),dd_sequence:c(3*),dd_data_name:c(16*),dd_dvar_name:c(16*),"+
:               "dd_col_repeats:n(4*),dd_col_occurs:n(4*),dd_field_delim:c(1*),dd_delim_char:c(2*),"+
:               "asc_comp_id:c(3*),asc_prod_id:c(3*),dd_system_rec:c(1*),dd_system_id:c(2*),dd_mask_type:c(1*),"+
:               "dd_create_date:c(8*),dd_lstrev_date:c(8*),dd_attr_ablc:c(40*),dd_attr_ablv:c(10*),dd_attr_cpgm:c(60*),"+
:               "dd_attr_ctlx:n(4*),dd_attr_ctly:n(4*),dd_attr_ctlw:n(4*),dd_attr_ctlh:n(4*),dd_attr_dflt:c(30*),dd_attr_drle:c(16*),"+
:               "dd_attr_ghdr:c(30*),dd_attr_labl:c(30*),dd_attr_labs:c(20*),dd_attr_mlan:c(1*),dd_attr_minl:n(4*),dd_attr_maxl:n(4*),"+
:               "dd_attr_minv:c(20*),dd_attr_maxv:c(20*),dd_attr_prom:c(80*),dd_attr_pval:c(30*),dd_attr_slev:c(4*),dd_attr_tabg:c(1*),"+
:               "dd_attr_tind:c(3*),dd_attr_help:c(10*),reserved_str_01:c(10*),reserved_str_02:c(10*),reserved_str_03:c(10*),reserved_str_04:c(10*),"+
:               "reserved_str_05:c(10*),reserved_num_01:n(10*),reserved_num_02:n(10*),reserved_num_03:n(10*),reserved_num_04:n(10*),reserved_num_05:n(10*)"


dim dd_elements$:"dd_data_name:c(16*),dd_description:c(30*),dd_data_type:c(1*),dd_data_length:n(4*),dd_system_id:c(2*),dd_mask_type:c(1*),dd_special_mask:c(15*),"+
:               "dd_system_rec:c(1*),asc_comp_id:c(3*),asc_prod_id:c(3*),dd_create_date:c(8*),dd_lstrev_date:c(8*),dd_attr_cdat:c(10*),dd_attr_ctlw:n(4*),dd_attr_ctlh:n(4*),"+
:               "dd_attr_ctyp:c(1*),dd_attr_dcol:c(16*),dd_attr_dcom:c(12*),dd_attr_dexp:c(12*),dd_attr_dflt:c(30*),dd_attr_dknm:c(16*),dd_attr_dkey:c(40*),dd_attr_dtab:c(16*),"+
:               "dd_attr_labl:c(30*),dd_attr_labs:c(20*),dd_attr_maxl:n(4*),dd_attr_maxr:n(2*),dd_attr_maxv:c(20*),dd_attr_minl:n(4*),dd_attr_minv:c(20*),dd_attr_mski:c(20*),dd_attr_msko:c(20*),"+
:               "dd_attr_padc:c(2*),dd_attr_padj:c(1*),dd_attr_prec:n(2*),dd_attr_prom:c(80*),dd_attr_pval:c(30*),dd_attr_sdlg:c(1*),dd_attr_slev:c(4*),dd_attr_styp:c(1*),reserved_str_01:c(10*),"+
:               "reserved_str_02:c(10*),reserved_str_03:c(10*),reserved_str_04:c(10*),reserved_str_05:c(10*),reserved_num_01:n(10*),reserved_num_02:n(10*),reserved_num_03:n(10*),reserved_num_04:n(10*),reserved_num_05:n(10*)"
return