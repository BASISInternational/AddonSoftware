rem --- v7.00 Administrator Upgrade (Record Conversion Overlay)
rem --- Program syx70d_bbj v8.0.0 29Oct2007 (syx70d)
rem --- Created by adx_codeport.bbj v1.1.5 (52/d/y 04:52:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


initializations: rem --- Initialization

    dim a[2],b[4]
    dim c[2],l[3],s[4]
    dim t[6]
    m1$="###,##0"
    files=11
    begfile=3
    modules=2
    upgrade$=""
    dim modules$[modules,4]
    modules$[1,1]="SY"
    modules$[1,2]="Administrator  "
    modules$[2,1]="DD"
    modules$[2,2]="Data Dictionary"

    dim files$[files],options$[files],channels[files],descriptions$[files]
    files$[1]="ddm-02"
    files$[2]="sym-04"
    files$[3]="sym-02"
    files$[4]="sym-19"
    files$[5]="sym-29"
    files$[6]="sym-39"
    files$[7]="sym-69"
    files$[8]="sym-99"
    files$[9]="sys-11"
    files$[10]="sys-21"
    files$[11]="glm-06"

rem --- Build UPGRADE$ string

    for x=1 to modules
        upgrade$=upgrade$+modules$[x,1]
    next x

rem --- Additional file opens

    glm06_dev=unt
    open (glm06_dev,err=chn_error1)dir$+"glm-06"
    ddm02_dev=unt
    open (ddm02_dev,err=chn_error2)dir$+"ddm-02"
    sym04_dev=unt
    open (sym04_dev,err=chn_error3)dir$+"sym-04"
    sym02_dev=unt
    open (sym02_dev,err=chn_error4)dir$+"sym-02"
    sym19_dev=unt
    open (sym19_dev,err=chn_error5)dir$+"sym-19"
    sym29_dev=unt
    open (sym29_dev,err=chn_error6)dir$+"sym-29"
    sym39_dev=unt
    open (sym39_dev,err=chn_error7)dir$+"sym-39"
    sym69_dev=unt
    open (sym69_dev,err=chn_error8)dir$+"sym-69"
    sym99_dev=unt
    open (sym99_dev,err=chn_error9)dir$+"sym-99"
    sys11_dev=unt
    open (sys11_dev,err=chn_error10)dir$+"sys-11"
    sys21_dev=unt
    open (sys21_dev,err=chn_error11)dir$+"sys-21"

    print "This phase of the upgrade will convert existing Administrator data records into the new v7.0 format."

rem --- Is GL being installed?

    call "glc_vn.bbx",err=check_sym04,version$
    gl$="Y"
    goto initializations

check_sym04: rem --- Is GL currently installed?

    find record (sym04_dev,key="GL",dom=initializations) sym04a$
    if sym04a$(41,1)="Y" gl$="Y"

rem --- Load descriptions

    print "The following file(s) will be converted..."
    curfile=begfile-1
    for x=begfile to files
        find record (ddm02_dev,key=cvs(files$[x],4),dom=*next) ddm02a$
    description:
        descriptions$[x]=ddm02a$(7,30)
        if x=files if gl$<>"Y" goto next_file
        gosub display_file
    next_file:
    next x

rem --- Convert sym-02 Operator Master record(s) to v7.0 format

    print"Converting records in the following file(s)..."
    curfile=begfile-1
    gosub display_file
    read (sym02_dev,key="",dom=*next)

next_sym02: rem --- Read next sym-02 Operator Master

    k$=key(sym02_dev,end=convert_sym19)
    read record (sym02_dev) sym02a$

rem --- Convert Operator Master record to v7.0 format

    sym02a$(38,1)=fnglobal$("+INTERFACE_MODE","W")
    sym02a$(39,2)="PF"
    sym02a$(117,10)=sym02a$(108,6)
    sym02a$(108,6)=""
    sym02a$(127,10)=fnglobal$("+FAVORITES","mb_favor")
    for x=45 to 85 step 20
        if cvs(sym02a$(x,10),2)="" sym02a$(x,10)="BLACK"
        if cvs(sym02a$(x+10,10),2)="" sym02a$(x+10,10)="WHITE"
    next x
    write record (sym02_dev,key=k$) sym02a$
    goto next_sym02

convert_sym19: rem --- Convert sym-19 Process Definition record(s) to v7.0 format

    gosub display_file
    read (sym19_dev,key="",dom=*next)

next_sym19: rem --- Read next sym-19 Process Definition

    k$=key(sym19_dev,end=convert_sym29)
    read record (sym19_dev) sym19a$
    if len(k$)=20 goto next_sym19

rem --- Convert Process Definition record to v7.0 format

    sym19a$(11)=fnprogname$(sym19a$(11))
    if sym19a$(11,2)="wo" sym19a$(11,2)="sf"
    write record (sym19_dev,key=k$) sym19a$
    remove (sym19_dev,key=k$,dom=next_sym19)
    goto next_sym19

convert_sym29: rem --- Convert sym-29 Program/Process Xref record(s) to v7.0 format

    gosub display_file
    read (sym19_dev,key="",dom=*next)

next_sym29: rem --- Read next sym-19 Process Definition

    k$=key(sym19_dev,end=convert_sym39)
    read record (sym19_dev) sym19a$

rem --- Write new Program/Process Xref record

    sym29a$=sym19a$(11)+sym19a$(1)
    write record (sym29_dev,key=sym29a$) sym29a$
    goto next_sym29

convert_sym39: rem --- Convert sym-39 Process Batch File record(s) to v7.0 format

    gosub display_file
    read (sym39_dev,key="",dom=*next)

next_sym39: rem --- Read next sym-39 Process Batch File record

    k$=key(sym39_dev,end=convert_sym69)
    read record (sym39_dev) sym39a$
    if cvs(k$,8)=sym39a$(11,2) goto next_sym39

rem --- Convert Process Definition record to v7.0 format

    sym39a$(11)=cvs(sym39a$(11),8)
    if sym39a$(11,2)="wo" sym39a$(11,2)="sf"
    write record (sym39_dev,key=sym39a$(11,2)) sym39a$
    remove (sym39_dev,key=k$,dom=next_sym39)
    goto next_sym39

convert_sym69: rem --- Convert sym-69 File/Process Xref record(s) to v7.0 format

    gosub display_file
    read (sym39_dev,key="",dom=*next)

next_sym69: rem --- Read next sym-39 Process Batch Files record

    k$=key(sym39_dev,end=convert_sym99)
    read record (sym39_dev) sym39a$

rem --- Write new File/Process Xref record

    sym69a$=sym39a$(11)+sym39a$(1,10)
    write record (sym69_dev,key=sym69a$(1,6)) sym69a$
    goto next_sym69

convert_sym99: rem --- Convert sym-99 SpeedInstall Master record(s) to v7.0 format

    gosub display_file
    read (sym99_dev,key="",dom=*next)

next_sym99: rem --- Read next sym-99 SpeedInstall Master record

    k$=key(sym99_dev,end=convert_sys11)
    if cvs(k$(1,2),8)=k$(1,2) goto convert_sys11
    read record (sym99_dev) sym99a$

rem --- Convert SpeedInstall Master record to v7.0 format

    sym99a$(1,6)=cvs(sym99a$(1,6),8)
    if sym99a$(1,2)="wo" sym99a$(1,2)="sf"
    write record (sym99_dev,key=sym99a$(1,2)) sym99a$
    remove (sym99_dev,key=k$,dom=next_sym99)
    goto next_sym99

convert_sys11: rem --- Convert sys-11 On-Line Help Master record(s) to v7.0 format

    gosub display_file
    read (sys11_dev,key="",dom=*next)

next_sys11: rem --- Read next sys-11 On-Line Help Master

    k$=key(sys11_dev,end=convert_sys21)
    read record (sys11_dev) sys11a$
    if len(k$)=16 goto next_sys11

rem --- Convert On-Line Help Master record to v7.0 format

    x$=sys11a$(3,8)
    s$=sys11a$(11,4)
    sys11a$(3,10)=fnprogname$(x$)
    sys11a$(13)=s$
    if sys11a$(3,2)="wo" sym19a$(3,2)="sf"
    write record (sys11_dev,key=sys11a$(3,2)) sys11a$
    remove (sys11_dev,key=k$,dom=next_sys11)
    goto next_sys11

convert_sys21: rem --- Convert sys-21 On-Line Help Detail record(s) to v7.0 format

    gosub display_file
    read (sys21_dev,key="",dom=*next)

next_sys21: rem --- Read next sys-21 On-Line Help Detail

    k$=key(sys21_dev,end=convert_glm06)
    read record (sys21_dev) sys21a$
    if len(k$)=19 goto next_sys21

rem --- Convert On-Line Help Detail record to v7.0 format

    x$=sys21a$(3,8)
    s$=sys21a$(11,7)
    sys21a$(3,10)=fnprogname$(x$)
    sys21a$(13)=s$
    if sys21a$(3,2)="wo" sys21a$(3,2)="sf"
    write record (sys21_dev,key=sys21a$(3,2)) sys21a$
    remove (sys21_dev,key=k$,dom=next_sys21)
    goto next_sys21

convert_glm06: rem --- Convert glm-06 Audit Control Detail record(s) to v7.0 format

    if gl$<>"Y" goto done
    gosub display_file
    read (glm06_dev,key="",dom=*next)

next_glm06: rem --- Read next glm-06 Audit Control Detail

    k$=key(glm06_dev,end=update_version)
    read record (glm06_dev) glm06a$
    if len(k$)=22 goto next_glm06

rem --- Convert Audit Control Detail record to v7.0 format

    glm06a$(13,10)=fnprogname$(t0$(13,10))
    glm06a$(54,6)=cvs(glm06a$(54,6),8)
    if glm06a$(13,2)="wo" glm06a$(13,2)="sf"
    write record (glm06_dev,key=glm06a$) glm06a$
    remove (glm06_dev,key=k$,dom=next_glm06)

    goto next_glm06

update_version: rem --- Update version number for installed modules

    print "This phase of the upgrade will update existing AddonSoftware version numbers for the Administrator."
    print "Updating System Version Number"

rem --- Update each installed module

    for x=1 to modules
        if modules$[x,3]<>"Y" goto next_module
        print modules$[x,1],"  ",modules$[x,2]
    
        rem --- Update v6.x sym-04 System Description
    
        sym04a$=modules$[x,1]
        sym04a$(3)=modules$[x,2]
        sym04a$(39,1)="Y"
        sym04a$(40,2)="99"
        sym04a$(69)=""
        find record (sym04_dev,key=p0$,dom=*next) sym04a$
    set_fields:
        sym04a$(42,1)="Y"
        sym04a$(43,6)=version$
        sym04a$(49,1)="N"
        sym04a$(50,1)="N"
        sym04a$(51,1)="W"
        sym04a$(69)=pathname$
        x$=sym04a$(120,1)
        default$="./"+cvs(sym04a$,8)+"/"
        gosub pathname
        sym04a$(120,1)=x$
        write record (sym04_dev,key=sym04a$) sym04a$
    next_module:
    next x

done: rem --- Installation completed

rem --- Close opened files

    close (glm06_dev)
    close (ddm02_dev)
    close (sym02_dev)
    close (sym04_dev)
    close (sym19_dev)
    close (sym29_dev)
    close (sym39_dev)
    close (sym69_dev)
    close (sym99_dev)
    close (sys11_dev)
    close (sys21_dev)

print "The Version 7.0 Administrator upgrade is now complete. "

    run "glx70a.bbj"

display_file: rem --- Display file name

    count=0
    curfile=curfile+1
    print files$[curfile]," ",descriptions$[curfile]
    return

rem --- Verify data or program pathname supplied in X$
pathname: rem --- If incorrect, reset pathname to DEFAULT$

    x$=cvs(x$,2)
    default$=cvs(default$,2)
    channel=unt
    if x$="" goto default_pathname
    if pos(x$=pfx)=0 goto default_pathname
    open (channel,err=default_pathname)dir$+x$
    goto close_channel
default_pathname:
    x$=default$
close_channel:
    close (channel,err=*next)
    return

chn_error1:
    a=msgbox("File not found - glm-06")
    goto std_exit
chn_error2:
    a=msgbox( "File not found - ddm-02")
    goto std_exit
chn_error3:
    a=msgbox("File not found - sym-04")
    goto std_exit
chn_error4:
    a=msgbox("File not found - sym-02")
    goto std_exit
chn_error5:
    a=msgbox( "File not found - sym-19")
    goto std_exit
chn_error6:
    a=msgbox( "File not found - sym-29")
    goto std_exit
chn_error7:
    a=msgbox( "File not found - sym-39")
    goto std_exit
chn_error8:
    a=msgbox( "File not found - sym-69")
    goto std_exit
chn_error9:
    a=msgbox("File not found - sym-99")
    goto std_exit
chn_error10:
    a=msgbox( "File not found - sys-11")
    goto std_exit
chn_error11:
    a=msgbox( "File not found - sys-21")
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- "fnprogname$ Convert XXX.XX program name to xxx_xx.bbx format"

    def fnprogname$(Q$)
    let Q$=cvs(Q$,8+2),Q=len(Q$)
    if Q>3 then if Q$(4,1)="." then let Q$(4,1)="_"
    if Q=6 then let Q$=Q$+".bbx"
    return Q$
    fnend

std_exit: rem --- Standard program end (01Mar2006)

    release
    end
