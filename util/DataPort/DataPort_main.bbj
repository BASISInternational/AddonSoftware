rem DataPort Data File Conversion Utility (Template creation program)
rem Program create_template.bbj v8.0.0 28Oct07
rem
rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Feb2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
rem
rem --- This overlay creates templates for version 6/7 data files using
rem --- the Addon dictionary files ddm-01, ddm-03 and ddm-04 and then
rem --- copied to Addon 8 data files after performing date format changes.
rem --- Normalization of data files will also be done in this program.
rem
rem --- Dictionary file templates
dim ddm01$:"data_name:c(12*),description:c(30),lstrev:c(6),data_type:c(1),reserved_str:c(68*),fld_length:n(3*),display_len:n(3*),reserved_num:n(1*)"
dim ddm03$:"file_name:c(6),record_id:c(1*),description:c(30),reserved_str:c(33*),reserved_num:n(3*)"
dim ddm04$:"file_name:c(6),record_id:c(1),layout_seq:c(3*),data_name:c(12),reserved_str1:c(41),fld_sep:c(1),reserved_str2:c(68*),reserved_num:n(1*),fld_repeats:n(3*),fld_occurs:n(3)"

rem --- Open files

ddm01=unt
open (ddm01)source_folder$+"/"+cvs("ddm-01",version_cvs)

ddm03=unt
open (ddm03)source_folder$+"/"+cvs("ddm-03",version_cvs)

ddm04=unt
open (ddm04)source_folder$+"/"+cvs("ddm-04",version_cvs)

ddm_table_tpls = unt
open (ddm_table_tpls)dictfile$+"ddm_table_tpls.dat"
dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"

ddm_tables = unt
open (ddm_tables)dictfile$+"ddm_tables.dat"

rem --- Load xref files into memory

file_alias! = new java.util.HashMap()
dim file_alias$:"file_id:c(16*=124),alias:c(16*=)"
file_alias = unt
open (file_alias)filedir$+"file_alias"
while 1
   read (file_alias,end=*break)file_alias$
   if len(file_alias$)
      keyval$ = cvs(file_alias.file_id$,7)
      dataval$ = cvs(file_alias.alias$,7)
      if file_alias!.get(keyval$)=null() then
         file_alias!.put(keyval$,dataval$)
      else
         print "*** skip duplicate file_alias: ",file_alias$
      endif
   endif
wend
close (file_alias)

file_xref! = new java.util.HashMap()
dim file_xref$:"old_filename:c(16*=124),new_filename:c(16*=)"
file_xref = unt
open (file_xref)filedir$+"file_xref"
while 1
   read (file_xref,end=*break)file_xref$
   if len(file_xref$)
      keyval$ = cvs(file_xref.old_filename$,7)
      dataval$ = cvs(file_xref.new_filename$,3)
      file_xref!.put(keyval$,dataval$)
   endif
wend
close (file_xref)

field_file_xref! = new java.util.HashMap()
dim field_file_xref$:"alias:c(16*=124),old_fieldname:c(16*=124),new_fieldname:c(16*=)"
field_file_xref = unt
open (field_file_xref)filedir$+"field_file_xref"
while 1
   read (field_file_xref,end=*break)field_file_xref$
   if len(field_file_xref$)
      keyval$ = cvs(field_file_xref.alias$,7)+"."+cvs(field_file_xref.old_fieldname$,7)
      dataval$ = cvs(field_file_xref.new_fieldname$,7)
      field_file_xref!.put(keyval$,dataval$)
   endif
wend
close (field_file_xref)

field_name_xref! = new java.util.HashMap()
dim field_name_xref$:"old_fieldname:c(16*=124),new_fieldname:c(16*=)"
field_name_xref = unt
open (field_name_xref)filedir$+"field_name_xref"
while 1
   read (field_name_xref,end=*break)field_name_xref$
   if len(field_name_xref$)
      keyval$ = cvs(field_name_xref.old_fieldname$,7)
      dataval$ = cvs(field_name_xref.new_fieldname$,7)
      field_name_xref!.put(keyval$,dataval$)
   endif
wend
close (field_name_xref)

rem --- Read the v6/v7 data directory
old_dir=unt
open (old_dir)source_folder$

read_dir:
    readrecord (old_dir,end=end_read_dir)datafile$
    datafile$=cvs(datafile$,version_cvs)

    rem ' skip these files -- TODO: Explain why.
    if pos("."=datafile$)=1 then goto read_dir
    if pos("_"=datafile$)=1 then goto read_dir
    if pos("z"=cvs(datafile$,8))=1 then  goto read_dir
    if pos("dd"=cvs(datafile$,8))=1 then goto read_dir
    if pos("w-"=cvs(datafile$,8))=1 then goto read_dir
    if pos("sh"=cvs(datafile$,8))=1 then goto read_dir

    print "Data file: ",datafile$
    print (log_dev)"Data file: ",datafile$

    if cvs(datafile$,8)="ivm-03" then
        rem ' create the v8 ivm-03
        old_ivm03$=source_folder$+"/"+datafile$
        old_ivm03=unt
        open (old_ivm03)old_ivm03$
        new_ivm03$=destin_folder$+"/"+cvs(datafile$,8)
        fid$=fid(old_ivm03)
        fid$=fid$(1,8)+new_ivm03$
        erase new_ivm03$,err=*next
        file fid$
        new_ivm03=unt
        open (new_ivm03)new_ivm03$
        lock (new_ivm03)
        while 1
            k$=key(old_ivm03,end=*break)
            readrecord(old_ivm03,end=*break)rec$
            writerecord(new_ivm03,key=k$)rec$
        wend
        close (old_ivm03)
        close (new_ivm03)
        goto read_dir
    endif; rem ivm-03

    if cvs(datafile$,8)="sys-01" then
       normalize_sys01=1
    endif; rem ' sys-01

rem --- Read the dictionary file ddm-03 to get data file info

    read(ddm03,key=pad(datafile$,6),dom=*next)

next_ddm03:
    if copy_sys01 then
       readrecord(ddm03,key=k$,dom=read_normalize_xref)ddm03$
    else
       readrecord(ddm03,end=read_dir)ddm03$
       if cvs(ddm03.file_name$,3)<>cvs(datafile$,3) then
          goto read_dir
       endif
    endif
    gosub get_new_template
    rd_gen_table_tpl$=""
    data_seq_str$=""
    fields = 0
    print "   Creating template for "+ddm03.file_name$+ddm03.record_id$+"  ("+table_alias$+")"
    print (log_dev)"   Creating template for "+ddm03.file_name$+ddm03.record_id$

    read(ddm04,key=ddm03.file_name$+ddm03.record_id$,dom=*next)
next_ddm04:
    readrecord(ddm04,end=end_ddm04)ddm04$
    if ddm04.file_name$<>ddm03.file_name$ or ddm04.record_id$<>ddm03.record_id$ then
       goto end_ddm04
    endif

    findrecord(ddm01,key=ddm04.data_name$,dom=next_ddm04)ddm01$
    rd_col_length=ddm01.fld_length
    if ddm04.fld_repeats>1 then
       rd_col_length=ddm01.fld_length*ddm04.fld_repeats
    endif
    rd_col_occurs_sfx$=""
    rd_col_occurs$=""
    rd_col_occurs=1
    if ddm04.fld_occurs>1 THEN
       rd_col_occurs$="YES"
       rd_col_occurs=ddm04.fld_occurs
    endif

    data_seq_pos=pos(pad(ddm04.data_name$,16)=data_seq_str$,20)
    if data_seq_pos<>0 then
       rd_occur_adj=num(data_seq_str$(data_seq_pos+17,2))
    else
       rd_occur_adj=0
       data_seq_str$=data_seq_str$+pad(ddm04.data_name$,16)+"-00;"
    endif

    for rd_curr_occur=1 to rd_col_occurs
       data_seq_pos=pos(pad(ddm04.data_name$,16)=data_seq_str$,20)
       data_seq_str$(data_seq_pos+17,2)=str(num(data_seq_str$(data_seq_pos+17,2))+1:"00")
       if rd_col_occurs$="YES" or rd_occur_adj>0 then
          rd_col_occurs_sfx$="_"+str(rd_curr_occur+rd_occur_adj:"00")
       endif

       rem ' field names can only contain [A-Z0-9_]
       data_name$=tbl(cvs(ddm04.data_name$,7),tbl=az_09)

       rd_temp_seg$=cvs(data_name$,3)+rd_col_occurs_sfx$+":"
       datatype$=iff(ddm01.data_type$="N","N","C")
       rd_temp_seg$=rd_temp_seg$+datatype$+"("
       rd_temp_seg$=rd_temp_seg$+str(rd_col_length)
       if ddm04.fld_sep$="X" or ddm04.fld_sep$="Y" then
          rd_temp_seg$=rd_temp_seg$+"*"
       endif
       rd_temp_seg$=rd_temp_seg$+")"
       fields = fields + 1
       if len(rd_gen_table_tpl$) then
          rd_gen_table_tpl$=rd_gen_table_tpl$+","
       endif
       rd_gen_table_tpl$=rd_gen_table_tpl$+rd_temp_seg$
   next rd_curr_occur

   goto next_ddm04

az_09: table 7f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 30 31 32 33 34 35 36 37 38 39 5f 5f 5f 5f 5f 5f 5f 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59 5a 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f

end_ddm04:
    if rd_gen_table_tpl$="" then
       escape; goto eof
    endif

    dim old_rec$:rd_gen_table_tpl$
    fields$="fname["+str(fields)+"]:c(20*)"
    dim fieldlist$:fields$
    fieldlist$=fattr(old_rec$,"")
    record_id_fieldname$=""
    if pos("RECORD_ID_"=fieldlist.fname$[2]) then
       record_id_fieldname$=fieldlist.fname$[2]
    endif
    if pos("RECORD_ID_"=fieldlist.fname$[1]) then
       record_id_fieldname$=fieldlist.fname$[1]
    endif

    addr_lines=0
    if source_version=6 then
       if pos($0a$+"ADDR_LINE_3"+$0a$=new_fieldlist$) then
          addr_lines=3
       endif
       if pos($0a$+"ADDR_LINE_5"+$0a$=new_fieldlist$) then
          addr_lines=5
       endif
    endif

    old_file=unt
    if copy_sys01 then
       datafile$="sys-01"
    endif
    open (old_file)source_folder$+"/"+datafile$
    lock (old_file)
    print "   Copying data from  "+ddm03.file_name$+ddm03.record_id$
    print(log_dev)"   Copying data from    "+ddm03.file_name$+ddm03.record_id$
next_rec:
    readrecord(old_file,end=eof)old_rec$
    if record_id_fieldname$<>""
       if field(old_rec$,record_id_fieldname$)=ddm03.record_id$ then
          goto copy_fields
       endif
       goto next_rec
    endif

    if copy_sys01
       if field(old_rec$,fieldlist.fname$[2])+field(old_rec$,fieldlist.fname$[3])=dat$(1,4) then
          goto copy_fields
       endif
       goto next_rec
    endif; rem ' copy_sys01

copy_fields:

    for field=1 to fields

        old_fieldname$=fieldlist.fname$[field]

        value$=field(old_rec$,old_fieldname$,err=*continue)

        if pos("_DATE"=old_fieldname$) or
:          pos("_DT"=old_fieldname$) or
:          pos("PER_ENDING_"=old_fieldname$) then

           if cvs(value$,3)="" then
              goto copy_data
           endif

           if len(value$)=2 then
              value$=fna$(value$(1,1),value$)+fna$(value$(2,1),value$)
              goto copy_data
           endif

           if len(value$)=6 then
              goto convert_A4Date
           endif

           if len(value$)<>3 then
              goto copy_data; rem ' Not a date; just copy the raw data
           endif

           rem ' Packed date (length=3)
           value$=fnb$(value$)
           value$=fngetdate$(value$)
           if pos("00"=value$(5)) then
              print (log_dev)"  Invalid date occured in "+datafile$+"; field "+old_fieldname$
           endif
           goto copy_data
convert_A4Date:
           if pos("."=value$) or pos("-"=value$) then
              goto copy_data
           endif
           gosub add_century_prefix
           reserved_str_flag=1
        endif; rem date field

        if pos("YEAR"=old_fieldname$) or pos("YR"=old_fieldname$) then
           if len(cvs(value$,3))=2 then
              gosub add_century_prefix
              year_flag=1
           endif
        endif
copy_data:
        gosub set_new_fieldname
        if len(new_fieldname$) then
           field new_rec$,new_fieldname$=value$
        endif
    next field

    if addr_lines then
       gosub reformat_address
    endif

    new_rec$=field(new_rec$)

write_record:
    writerecord(new_file,err=write_err)new_rec$
    reserved_str_flag=0
    goto next_rec

eof:
    if old_file then
       close (old_file)
    endif
    if new_file then
       close (new_file)
    endif
    if copy_sys01 then
       goto read_normalize_xref
    endif
    goto next_ddm03

rem ' Auto-resize on error
write_err:
    if err<>1 then escape
    fid$=fid(new_file)
    new_file$=fid$(9)
    print "*** Resizing ",new_file$," ... ",
    temp_file$=new_file$+".bak"
    erase temp_file$,err=*next
    fid$=fid$(1,8)+temp_file$
    fid$(7,2)=bin(len(new_rec$),2); rem ' new record size
    fin$=fin(new_file)(86)
    keyed = asc(and(fid$(1,1),$06$)) or asc(and(fid$(1,1),$08$)) or fid$(1,1)=$0d$
    multi = keyed and asc(fid$(2,1))=0
    single = keyed and !(multi)
    if multi then
:      file fid$,fin$
:   else
:      file fid$
:   endif
    close (new_file)
    open (new_file)new_file$
    lock (new_file)
    temp_file=unt
    open (temp_file)temp_file$
    lock (temp_file)
    while 1
        readrecord(new_file,end=*break)rec$
        if single then
           k$=keyp(new_file)
           writerecord(temp_file,key=k$)rec$
        else
           writerecord(temp_file)rec$
        endif
    wend
    close (new_file)
    close (temp_file)
    erase new_file$
    rename temp_file$ to new_file$
    open (new_file)new_file$
    lock (new_file)
    print "(resized)"
    goto write_record

end_read_dir:
    close (old_dir)
    if normalize_sys01 then
        print "sys-01"
        print "   sys-01 will be normalized to different parameter files"
        print (log_dev)"sys-01"
        print (log_dev)"   sys-01 will be normalized to different parameter files"
        temp_chan2=unt
        open (temp_chan2)filedir$+"file_normalization"
read_normalize_xref:
        read(temp_chan2,end=end_read_normalize_xref)dat$
        if dat$=$$ then
           goto read_normalize_xref
        endif
        copy_sys01=1
        k$=cvs(dat$(9,7),version_cvs)
        datafile$=dat$(9,6)
        goto next_ddm03
end_read_normalize_xref:
        close (temp_chan2)
        normalize_sys01=0
        goto end_read_dir
    endif; rem ' normalize_sys01
    a=msgbox("DataPort completed",0,"DataPort")
    print (log_dev)$0a$+"DataPort completed"
    print (log_dev)"DataPort End Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "
    release

add_century_prefix:
    p=pos(value$(1,1)="ABCDEFGHIJKLMNOPQRSTUVWXYZ")
    if p then
        p=p-1
        if len(str(p))=2 then
           value$="2"+str(p)+value$(2)
        else
           value$="20"+str(p)+value$(2)
        endif
    else
        value$="19"+value$
    endif
return

get_new_template:
    new_datafile$=cvs(datafile$,8)
    file_id$=ddm03.file_name$+ddm03.record_id$

    file_id! = file_xref!.get(cvs(file_id$,7))
    if file_id!<>null() then
       rem ' found mapping for filename+record id
       file_id$ = str(file_id!)
       if len(file_id$)>7 then
          rem ' Longer new-style filename
          new_datafile$ = cvs(file_id$,8)
       else
          rem ' Drop the record id from the old-style filename
          new_datafile$=cvs(file_id$(1,len(file_id$)-1),8)
       endif
    else
       file_id! = file_xref!.get(cvs(datafile$,7))
       if file_id!<>null() then
          rem ' found mapping for filename
          file_id$ = str(file_id!)+ddm03.record_id$
          new_datafile$ = cvs(str(file_id!),8)
       endif
    endif

    gosub get_alias_name

    findrecord(ddm_table_tpls,key=pad(table_alias$,16),dom=check_for_definition)ddm_table_tpls$
    dim new_rec$:ddm_table_tpls.template$
    newfieldlist$=$0a$+fattr(new_rec$,"")

    new_file=unt
    open (new_file,err=check_for_definition)destin_folder$+"/"+new_datafile$
    close (new_file)
    a=msgbox(new_datafile$+" already exists in destination folder. Do you want to overwrite data?",3+32+0,"DataPort")
    if a=6 then
       return
    endif
    if a=7 then
       goto eof
    endif
    if a=2 then
       goto eoj
    endif
return; rem ' get_new_template

set_new_fieldname:
    new_fieldname$=""

    if reserved_str_flag and old_fieldname$="RESERVED_STR" then
       old_fieldname$="RESERVED_STR_02"
    endif

    if pos("RESERVED_STR_0"=old_fieldname$) or pos("RESERVED_NUM"=old_fieldname$) then
       new_fieldname$=""
       return
    endif

    if pos($0a$+old_fieldname$+$0a$=newfieldlist$) then
       new_fieldname$=old_fieldname$
    endif

    if new_fieldname$<>"" and new_fieldname$<>"RESERVED_STR" then
       return
    endif

    if source_version=6 and pos("IVC_PRODCODE"=table_alias$) and old_fieldname$="RESERVED_STR" then
       new_fieldname$="SA_LEVEL"
       goto check_fieldlist
    endif

    if pos("INV_DUE_DATE_"=old_fieldname$) then
       new_fieldname$="INV_DUE_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("SLS_INV_DATE_"=old_fieldname$) then
       new_fieldname$="SLS_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("INV_OH_DATE_"=old_fieldname$) then
       new_fieldname$="INV_OH_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_DUE_"=old_fieldname$) then
       new_fieldname$="NO_INV_DUE_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_ORD_SHIP_"=old_fieldname$) then
       new_fieldname$="NO_ORD_SHIP_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_LNS_REC_"=old_fieldname$) then
       new_fieldname$="NO_LNS_REC_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_DATE_"=old_fieldname$) then
       new_fieldname$="NO_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_BYDT_"=old_fieldname$) then
       new_fieldname$="NO_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("EARN_DEDUCT_"=old_fieldname$) then
       new_fieldname$="EARNDEDUCT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    rem ' Some fields have been renamed for v8

    keyval$ = table_alias$+"."+old_fieldname$
    new_fieldname! = field_file_xref!.get(keyval$)
    if new_fieldname! = null() then
       new_fieldname$ = ""
    else
       new_fieldname$=str(new_fieldname!)
       goto check_fieldlist
    endif

    keyval$=old_fieldname$
    new_fieldname! = field_name_xref!.get(keyval$)
    if new_fieldname! = null() then
       new_fieldname$ = ""
       return
    else
       new_fieldname$=str(new_fieldname!)
    endif

check_fieldlist:

    if pos($0a$+new_fieldname$+$0a$=newfieldlist$)=0 then
       new_fieldname$=""
    endif

return; rem ' set_new_fieldname

check_for_definition:
    print "Read DDM_TABLES: ",table_alias$
    find (ddm_tables,key=pad(table_alias$,16),dom=no_8data_file)
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+new_datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then
       print "*** ERROR ***: Couldn't create "+new_datafile$+$0a$+status$
       print (log_dev)"*** ERROR ***: Couldn't create "+new_datafile$+$0a$+status$
       goto eof
    endif
    print "   New file "+new_datafile$+" created in folder "+destin_folder$
    print (log_dev)"   New file "+new_datafile$+" created"
    close (new_file)
    open (new_file)destin_folder$+"/"+new_datafile$
    lock (new_file)
return

no_8data_file:
    print "   Data File "+file_id$+" will not be ported"
    print (log_dev)"   Data File "+file_id$+" will not be ported"
    goto eof
return

get_alias_name:
    table_alias! = file_alias!.get(cvs(file_id$,7))
    table_alias$ = iff(table_alias!=null(),"",str(table_alias!))
    print "Table Alias: ",table_alias$
    if table_alias$="" then
       goto no_8data_file
    endif
return

reformat_address:
    if pos($0a$+"CITY"+$0a$=newfieldlist$) then
       return
    endif
    if addr_lines=5 then
       address$=old_rec.addr_line_1$+old_rec.addr_line_2$+old_rec.addr_line_3$+old_rec.addr_line_4$+old_rec.addr_line_5$
    endif
    if addr_lines=3 then
       address$=old_rec.addr_line_1$+old_rec.addr_line_2$+old_rec.addr_line_3$
    endif
    dim state$(2),city$(24)
    states$="ALAKAZARCACOCTDEDCFLGAHIIDILINIAKSKYLAMEMDMAMIMNMSMOMTNENVNHNJNMNYNCNDOHOKORPAPRRISCSDTNTXUTVTVAVIWAWVWIWY"
    states$=states$+"ABBCMBNBNLNSNTNUONPEQCSKYT"; rem ' Canadian province/territory codes
    if len(address$) and len(address$)/24 then
       for x=len(address$) to 1 step -24
           string1$=cvs(address$(x-23,24),2)
           if string1$="" then
              continue
           endif
           if len(string1$)<2 then
              city$(1)=string1$,address$(x-23,24)=""
              break
           endif
           if len(string1$)=2 then
              break
           endif
           if len(string$)>2 and string1$(len(string1$)-2,1)<>" " then
              city$(1)=""
              break
           endif
           string2$=string1$(len(string1$)-1,2)
           if pos(string2$=states$,2)=0 then
              city$(1)=""
              break
           endif
           state$=string2$
           if len(string1$)=2 then
              if x>1 then
                 city$(1)=address$(x-47,24)
                 address$(x-47,48)=""
              endif
           else
              city$(1)=address$(x-23,len(string1$)-3)
              address$(x-23,24)=""
           endif
           string1$=cvs(city$,2)
           if len(string1$) and string1$(len(string1$),1)="," then
              string1$=string1$(1,len(string1$)-1)
           endif
           city$(1)=string1$
           break
       next x
    endif

    REM ' TODO: More detail here?
    if city$="" or state$="" then
       print(log_dev)"Error copying address fields"
    endif

    new_rec.addr_line_1$=address$(1,24)
    new_rec.addr_line_2$=address$(25,24)
    if addr_lines=5 then
       new_rec.addr_line_3$=address$(49,24)
       new_rec.addr_line_4$=address$(73,24)
    endif
    new_rec.city$=city$
    new_rec.state_code$=state$
return; rem ' reformat_address

rem --- Function for unpacking 3 character date fields to get 8 character date

def fna$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
def fnb$(q1$)=fna$(q1$(2),q1$)+"/"+fna$(q1$(3),q1$)+"/"+fna$(q1$(1),q1$)

def fngetdate$(q1$)
    year$=q1$(len(q1$)-1)
    if q1$(len(q1$)-1)>date(0:"%Yz") then
       q1$=q1$(1,len(q1$)-2)+"19"+year$
    else
       q1$=q1$(1,len(q1$)-2)+"20"+year$
    endif
    q1$=q1$(len(q1$)-3)+q1$(1,2)+q1$(4,2)
    return q1$
fnend

eoj:
    a=msgbox("Exit from DataPort?",4+32+256,"DataPort")
    if a=6 then
       release
    endif
    if a=7 then
       a=msgbox("Continuing DataPort..")
       goto eof
    endif
