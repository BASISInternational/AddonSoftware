rem --- are_ccpmtapi.aon - process credit card payment using J2Pay library (i.e., internal API)
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

	use java.util.Iterator
    use org.json.JSONObject

    use com.tranxactive.j2pay.gateways.parameters.Customer
    use com.tranxactive.j2pay.gateways.parameters.CustomerCard
    use com.tranxactive.j2pay.gateways.parameters.Currency
    use com.tranxactive.j2pay.gateways.parameters.Country

    use com.tranxactive.j2pay.gateways.core.Gateway
    use com.tranxactive.j2pay.gateways.core.GatewayFactory
    use com.tranxactive.j2pay.gateways.core.AvailableGateways
    use com.tranxactive.j2pay.gateways.core.GatewaySampleParameters

    use com.tranxactive.j2pay.net.HTTPResponse
    use com.tranxactive.j2pay.net.JSONHelper
	
    use ::sys/prog/bao_encryptor.bbj::Encryptor

    setesc std_error
    seterr std_error

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    num_files=6
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ART_RESPONSE",open_opts$[1]="OTA"
    open_tables$[2]="ARE_CASHHDR",open_opts$[2]="OTA"
    open_tables$[3]="ARE_CASHDET",open_opts$[3]="OTA"
    open_tables$[4]="ARE_CASHBAL",open_opts$[4]="OTA"
    open_tables$[5]="ARS_CC_CUSTSVC",open_opts$[5]="OTA"
	open_tables$[6]="ARC_GATEWAYDET",open_opts$[6]="OTA"

    gosub open_tables

    art_response=num(open_chans$[1])
    are_cashhdr=num(open_chans$[2])
    are_cashdet=num(open_chans$[3])
    are_cashbal=num(open_chans$[4])
    ars_cc_custsvc=num(open_chans$[5])
	arc_gatewaydet=num(open_chans$[6])

    dim art_response$:open_tpls$[1]
    dim are_cashhdr$:open_tpls$[2]
    dim are_cashdet$:open_tpls$[3]
    dim are_cashbal$:open_tpls$[4]
    dim ars_cc_custsvc$:open_tpls$[5]
	dim arc_gatewaydet$:open_tpls$[6]

rem --- init

    encryptor! = new Encryptor()
    config_id$ = "GATEWAY_AUTH"
    encryptor!.setConfiguration(config_id$)

rem --- read params to get gateway, and get list of invoices/payment amount specified to pay and other inputs from option entry form

    readrecord(ars_cc_custsvc,key=firm_id$+"AR00",dom=*next)ars_cc_custsvc$
    gateway$=ars_cc_custsvc.gateway_id$

    vectInvoices!=callpoint!.getDevObject("vectInvoices")
    apply_amt!=cast(BBjNumber, num(option!.getOptionData("<<DISPLAY>>.APPLY_AMT")))
    cust_id$=option!.getOptionData("CUSTOMER_ID")

rem --- Assign form input values to local variables

	name_first$=option!.getOptionData("NAME_FIRST")
	name_last$=option!.getOptionData("NAME_LAST")
	address_line_1$=option!.getOptionData("ADDRESS_LINE_1")
	address_line_2$=option!.getOptionData("ADDRESS_LINE_2")
	city$=option!.getOptionData("CITY")
	state_code$=option!.getOptionData("STATE_CODE")
	zip_code$=option!.getOptionData("ZIP_CODE")
	cntry_id$=option!.getOptionData("CNTRY_ID")
	phone_no$=option!.getOptionData("PHONE_NO")
	email_addr$=option!.getOptionData("EMAIL_ADDR")

	card_no$=callpoint!.getDevObject("card_no")
	security_cd$=callpoint!.getDevObject("security_cd")
	month$=callpoint!.getDevObject("month")
	year$=callpoint!.getDevObject("year")

	callpoint!.setDevObject("card_no","")
	callpoint!.setDevObject("security_cd","")
	callpoint!.setDevObject("month","")
	callpoint!.setDevObject("year","")

	ip$="127.0.0.1";rem currently only required by BillPro. TODO CAH add this to BillPro config in arc_gatewaydet

	rem --- Use J2Pay library
	gw! = new GatewayFactory()
	apiSampleParameters! = new JSONObject()
	
	gateway! = gw!.getGateway(AvailableGateways.valueOf(cvs(gateway$,3)))
	apiSampleParameters! = gateway!.getApiSampleParameters()
	paramKeys! = apiSampleParameters!.keys()
	if !paramKeys!.hasNext() then goto std_exit;rem --- shouldn't happen
	while paramKeys!.hasNext()
		gw_attrib$=paramKeys!.next()
		read record (arc_gatewaydet,key=firm_id$+gateway$+pad(gw_attrib$,len(arc_gatewaydet.config_attr$)),knum="AO_ATTRIBUTE",err=std_exit)arc_gatewaydet$
		apiSampleParameters!.put(gw_attrib$,encryptor!.decryptData(cvs(arc_gatewaydet.config_value$,3)))
	wend

	gateway!.setTestMode(BBjAPI.TRUE)

	customer! = new Customer()
	customer!.setFirstName(name_first$)
	customer!.setLastName(name_last$)
	customer!.setCountry(Country.valueOf(cntry_id$))
	customer!.setState(state_code$)
	customer!.setCity(city$)
	customer!.setAddress(address_line_1$+" "+address_line_2$)
	customer!.setZip(zip_code$)
	customer!.setPhoneNumber(phone_no$)
	customer!.setEmail(email_addr$)
	customer!.setIp(ip$)

	customerCard! = new CustomerCard()
	customerCard!.setName(name_first$+" "+name_last$)
	customerCard!.setNumber(card_no$);rem note - only certain credit card numbers allowed for testing
	customerCard!.setCvv(security_cd$)
	customerCard!.setExpiryMonth(month$)
	customerCard!.setExpiryYear(year$)
 
	response! = new HTTPResponse()
	response! = gateway!.purchase(apiSampleParameters!, customer!, customerCard!, Currency.USD, apply_amt!.floatValue())
 
	rem --- write response to history file
	trans_id$=""
	full_response!=response!.getJSONResponse()
	trans_id$=full_response!.get("lr").get("transactionId",err=*next)
	trans_msg$=full_response!.get("lr").get("message")


	rem --- write response text to art_response
	if trans_id$<>""
		response_text$=full_response!.toString()
		trans_amount$=str(full_response!.get("lr").get("amount",err=*next))
		trans_approved$=iff(response!.isSuccessful(),"A","D");rem A=approved, D=declined
		gosub write_to_response_log
	endif

	rem --- if transaction was approved, create cash receipt
	if response!.isSuccessful()
		gosub create_cash_receipt
	else
		cash_msg$=""
	endif

	dim msg_tokens$[1]
	msg_tokens$[0]=trans_msg$+$0A$+cash_msg$
	msg_id$="GENERIC_OK"
	gosub disp_message

	goto std_exit

write_to_response_log:rem --- write to art_response
rem --- in: firm_id$, cust_id$, trans_id$, response_text$, vectInvoices!
    for inv_row=0 to vectInvoices!.size()-1 step 7
        pay_flag$=vectInvoices!.get(inv_row)
        if pay_flag$="Y"
            ar_inv_no$=vectInvoices!.get(inv_row+1)
            redim art_response$
            art_response.firm_id$=firm_id$
            art_response.customer_id$=cust_id$
            art_response.ar_inv_no$=ar_inv_no$
            art_response.transaction_id$=trans_id$
			art_response.gateway_id$=gateway$
			art_response.amount$=trans_amount$
			art_response.approve_decline$=trans_approved$
            art_response.response_text$=response_text$
            art_response.created_user$=sysinfo.user_id$
            art_response.created_date$=date(0:"%Yd%Mz%Dz")
            art_response.created_time$=date(0:"%Hz%mz")
            art_response$=field(art_response$)
            writerecord(art_response)art_response$
        endif
    next inv_row

    return

create_cash_receipt:
rem --- in: firm_id$, cust_id$, apply_amt!, trans_id$, vectInvoices!

    rem --- write are_cashhdr
    rem --- TODO CAH need to read/update, not just create, as >1 payment could have been made so header already exists
    rem --- TODO CAH same for are_cashbal/are_cashdet, don't just create them
    rem --- TODO CAH also need to add logic to use deposit_ID and batch_no, and update ars_cc_custsvc with same
    rem --- TODO CAH if there is already an are_cashdet for this invoice with balance < pay amount, apply on account

    are_cashhdr$.firm_id$=firm_id$
    are_cashhdr.receipt_date$=stbl("+SYSTEM_DATE")
    are_cashhdr.customer_id$=cust_id$
    are_cashhdr.cash_rec_cd$="C"
    are_cashhdr.payment_amt=apply_amt!
    are_cashhdr.batch_no$="0000000"
    are_cashhdr.memo_1024$=$01$
    are_cashhdr$=field(are_cashhdr$)
    writerecord(are_cashhdr)are_cashhdr$

    rem --- now write are_cashdet and are_cashbal recs for each invoice in vectInvoices!
    for inv_row=0 to vectInvoices!.size()-1 step 7
        pay_flag$=vectInvoices!.get(inv_row)
        if pay_flag$="Y"
            ar_inv_no$=vectInvoices!.get(inv_row+1)
            invoice_bal$=vectInvoices!.get(inv_row+5)
            invoice_pay$=vectInvoices!.get(inv_row+6)
            
            redim are_cashdet$
            redim are_cashbal$

            are_cashdet.firm_id$=firm_id$
            are_cashdet.receipt_date$=are_cashhdr.receipt_date$
            are_cashdet.customer_id$=are_cashhdr.customer_id$
            are_cashdet.cash_rec_cd$=are_cashhdr.cash_rec_cd$
            are_cashdet.ar_inv_no$=ar_inv_no$
            are_cashdet.apply_amt$=invoice_pay$
            are_cashdet.batch_no$=are_cashhdr.batch_no$
            are_cashdet.memo_1024$=$01$
            are_cashdet.firm_id$=field(are_cashdet$)
            writerecord(are_cashdet)are_cashdet$

            are_cashbal.firm_id$=firm_id$
            are_cashbal.customer_id$=are_cashhdr.customer_id$
            are_cashbal.ar_inv_no$=ar_inv_no$
            are_cashbal.apply_amt$=invoice_pay$
            are_cashbal$=field(are_cashbal$)
            writerecord(are_cashbal)are_cashbal$

        endif
    next inv_row
    cash_msg$="Cash Receipt has been entered.";rem --- TODO CAH needs localization
    
    return

open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

	return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release
