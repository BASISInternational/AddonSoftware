rem --- Print Customer Statements
rem --- Program arr_statements v8.0.0 29Dec2006 (arr_cb)
rem --- Created by adx_codeport.bbx v1.1.5 (12/29/2006 08:48:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-02",ids$[3]="ARM_CUSTDET"
    files$[4]="art-01",ids$[4]="ART_INVHDR"
    files$[5]="art-11",ids$[5]="ART_INVDET"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    art01_dev=channels[4]
    art11_dev=channels[5]

rem --- Dimension string templates

    dim ars01a$:templates$[1],arm01a$:templates$[2],arm02a$:templates$[3]
    dim art01a$:templates$[4],art11a$:templates$[5]

rem --- Assign form input values to local variables

    asof$=option!.getOptionData("CURSTM_DATE")
    original$=option!.getOptionData("PICK_TEXT")
    cycle$=option!.getOptionData("CYCLE_CODE")
    territory$=option!.getOptionData("TERRITORY")
    period$=option!.getOptionData("PICK_PER")
    basis$=option!.getOptionData("REPORT_TYPE")
    minimum$=option!.getOptionData("PICK_NO")
    option$=option!.getOptionData("REPORT_OPTION")
    sequence$=option!.getOptionData("REPORT_SEQUENCE")
    customer_id$=option!.getOptionData("CUSTOMER_ID")
    alt_sequence$=option!.getOptionData("ALT_SEQUENCE")
    doublespace$=option!.getOptionData("PICK_CHECK")
    minimum=num(minimum$)
    period=num(period$,err=*next)
    spacing=2
    if doublespace$="N" spacing=1

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,10
    m0=len(m0$)
    m1=len(m1$)

rem --- Open Printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Initializations

    headings=0
    dim headings$[headings],p[1],h[3],o[8],f[2],a[3]
    done=0
    offset=0
    address=30
    page=0
    width=80
    lines=0
    maxlines=24
    morecustomers=1
    moreheaders=1
    moredetail=1
    artype$=fill(2)
    answer$="Y"
    prompt$="PRINT_TEST_PATTERN"
    nf$="(Not on file)"
    when$=sysinfo.system_date$
    clock$=""
    keynum=0
    begvalue$=begcust$
    endvalue$=endcust$
    if sequence$="A"
       keynum=2
       begvalue$=begalt$
       endvalue$=endalt$
    endif

rem --- Initialize print positions

    p[0]=offset+46
    p[1]=offset+71
    h[0]=offset+9
    h[1]=offset+48
    h[2]=offset+59
    h[3]=width-m0
    o[0]=offset+1
    o[1]=offset+11
    o[2]=offset+14
    o[3]=offset+23
    o[4]=offset+35
    o[5]=offset+46
    o[6]=offset+58
    o[7]=offset+66
    o[8]=width-m1
    f[0]=offset
    f[1]=o[5]
    f[2]=o[8]
    a[0]=offset
    a[1]=a[0]+m1
    a[2]=a[1]+m1
    a[3]=a[2]+m1

rem --- Determine 30 day aging period dates

    periods$=""
    for x=-5 to 0
        enddate$=""
        call pgmdir$+"adc_daydates.aon",asof$,enddate$,x*30
        period_dates$=enddate$+period_dates$
    next x

rem --- Open the printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Initialize record template fields for printing test patterns

    dim address$(6*address,"X")
    arm01a.customer_id$=fill(6,"9")
    arm01a.customer_name$=fill(30,"X")
    transdate$="mm/dd/yy"
    invoice$=fill(7,"9")
    message$=fill(40,"-")
    message$(16,9)=" Message "
    message$(1,1)="<"
    message$(40,1)=">"
    amount=fntestvalue(m1$)
    applied=amount
    balance=amount
    total=amount
    current=amount
    days30=amount
    days60=amount
    days90=amount

rem --- Print test patterns until the user is satisfied

    while answer$="Y"
          call pgmdir$+"adc_yesno.aon",1,prompt$,1,answer$,fkey
          if fkey=4 break
          if answer$="N" break

          rem --- Print test pattern

          lines=0
          gosub header
          while lines<maxlines
                gosub detail
          wend
          gosub footer
          prompt$="PRINT_ANOTHER_PATTERN"
    wend
    if fkey=4 goto std_exit
    message$=original$

rem --- Start progress meter and position Customer Master (arm-01) file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,arm01_dev,1,meter_num,status
    k$=firm_id$
    if len(begvalue$)>1 then k$=begvalue$(1,len(begvalue$)-1)+$FF$
    read (arm01_dev,knum=keynum,key=k$,dom=*next)
    if pos(option$="RS")
       read (arm01_dev,knum=keynum,key=begvalue$,dom=*proceed)
       k$=keyp(arm01_dev,err=*proceed)
       read (arm01_dev,knum=keynum,key=k$,dom=*proceed)
    endif

rem --- Read next Customer Master (arm-01) and Detail (arm-02) record

    while morecustomers
          k$=key(arm01_dev,knum=keynum,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (arm01_dev,knum=keynum,key=k$) arm01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if sequence$="C" if endvalue$<>"" if arm01a.customer_id$>endvalue$ break
          if sequence$="A" if endvalue$<>"" if arm01a.alt_sequence$>endvalue$ break
          dim arm02a$:fattr(arm02a$)
          k$=arm01a.firm_id$+arm01a.customer_id$+artype$
          find record (arm02_dev,key=k$,dom=*continue) arm02a$

          rem --- Does this customer meet the selection criteria?

          if arm02a.statements$<>"Y" continue
          if territory$<>"" if arm02a.territory$<>territory$ continue
          if cyclecode$<>"" if arm02a.cycle_code$<>cyclecode$ continue

          rem --- Initializations for this customer

          dim aging[5]
          page=0
          total=0
          amount=0
          current=0
          days30=0
          days60=0
          days90=0

          rem --- Format address block

          address$=""
          address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+
:                  arm01a.city$+arm01a.state_code$+arm01a.zip_code$
          call pgmdir$+"adc_address.aon",address$,24,5,9,30

          rem --- Position the Invoice Header (art-01) file for aging

          customer$=arm01a.firm_id$+artype$+arm01a.customer_id$
          read (art01_dev,key=customer$,dom=*next)

          rem --- Read next Invoice Header record

          while moreheaders
                art01_key$=key(art01_dev,end=*break)
                if pos(customer$=art01_key$)<>1 break
                read record (art01_dev) art01a$
                if art01a.invoice_date$>asof$ continue

                rem --- Accumulate any adjustments made to this invoice

                gosub adjustments
                balance=art01a.invoice_amt+applied

                rem --- Age this invoice

                agingdate$=art01a.invoice_date$
                if basis$<>"I" agingdate$=art01a.inv_due_date$
                period=pos(agingdate$>period_dates$,8)
                if period=0 period=5 
:                      else period=int(period/8)
                aging[period]=aging[period]+balance

               rem --- Loop back for next Invoice Header

          wend

          rem --- Above the minimum balance for printing?

          printed=0
          balance=0
          for x=period to 5
                balance=balance+aging[x]
          next x
          if balance<minimum continue

          rem --- Position the Invoice Header (art-01) file for printing

          read (art01_dev,key=customer$,dom=*next)

          rem --- Read next Invoice Header record

          while moreheaders
                art01_key$=key(art01_dev,end=*break)
                if pos(customer$=art01_key$)<>1 break
                read record (art01_dev) art01a$
                if art01a.invoice_date$>asof$ continue
                amount=art01a.invoice_amt

                rem --- Accumulate any adjustments made to this invoice

                gosub adjustments

                rem --- Format detail line fields and print detail line

                transdate$=fndate$(art01a.invoice_date$)
                type$=art01a.invoice_type$
                if type$="S" type$="I"
                if type$="F" type$="FC"
                invoice$=art01a.ar_inv_no$
                balance=amount+applied
                total=total+balance
                if balance=0 continue
                if page=0 gosub header
                gosub detail
                printed=1

                rem --- Loop back for next Invoice Header

          wend

          rem --- Print totals and aging summary for this customer

          current=aging[0]+aging[1]
          days30=aging[2]
          days60=aging[3]
          days90=aging[4]+aging[5]
          if printed gosub footer
                
          rem --- Loop back for next Customer Master

          if option$="S" break

    wend

rem --- All done

    goto std_exit

header: rem --- Print the statement header

    lines=0
    page=page+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(p[0]),"Page ",page:"#0",@(p[1]),"Page ",page:"#0"
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) @(h[0]),arm01a.customer_name$
    print (printer_dev) @(h[0]),address$(1,30),@(h[1]),fnmask$(arm01a.customer_id$(1,customer_size),m0$),
:                       @(h[2]),arm01a.customer_name$(1,21)
    print (printer_dev) @(h[0]),address$(31,30)
    print (printer_dev) @(h[0]),address$(61,30)
    print (printer_dev) @(h[0]),address$(91,30),@(h[1]),fndate$(asof$),@(h[2]),fndate$(asof$),
:                       @(h[3]),fnmask$(arm01a.customer_id$(1,customer_size),m0$)
    print (printer_dev) @(h[0]),address$(121,30)
    print (printer_dev) @(h[0]),address$(151,30)
    print (printer_dev) ""
    print (printer_dev) ""
    return

detail: rem --- Print a statement detail line

    if lines>=maxlines-1 gosub continued
    print (printer_dev) @(o[0]),transdate$,@(o[1]),type$,@(o[2]),invoice$,@(o[3]),amount:m1$,@(o[4]),applied:m1$,
:                       @(o[5]),balance:m1$,@(o[6]),invoice$,@(o[7]),type$,@(o[8]),balance:m1$
    lines=lines+1
    if spacing=2 
       print (printer_dev) ""
       lines=lines+1
    endif
    return

    return

footer: rem --- Print the statement footer

    while lines<maxlines
          print (printer_dev) ""
          lines=lines+1
    wend
    print (printer_dev) @(f[0]),message$
    print (printer_dev) ""
    print (printer_dev) @(f[1]),total:m1$,@(f[2]),total:m1$
    print (printer_dev) ""
    print (printer_dev) @(a[0]+m1-8),"Current",@(a[1]+m1-8),"30 Days",@(a[2]+m1-8),"60 Days",@(a[3]+m1-8),"90 Days"
    print (printer_dev) @(a[0]),current:m1$,@(a[1]),days30:m1$,@(a[2]),days60:m1$,@(a[3]),days90:m1$
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    return

continued: rem --- This statement continues on the next page

    while lines<maxlines+2
          print (printer_dev) ""
          lines=lines+1
    wend
    print (printer_dev) @(f[1]),"(Continued)",@(f[2]),"(Continued)"
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    print (printer_dev) ""
    gosub header
    return


adjustments: rem --- Accumulate any adjustments for the current invoice

rem --- Position Invoice Detail (art-11) file

    art01_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
    read (art11_dev,key=art01_key$,dom=*next)

rem --- Read Invoice Detail (art-11) records

    applied=0
    while moredetail
          k$=key(art11_dev,end=*break)
          if pos(art01_key$=k$)<>1 break
          read record (art11_dev) art11a$
          if art11a.trans_date$<=asof$ applied=applied+art11a.trans_amt+art11a.adjdisc_amt
    wend
    return

address: rem --- Format the address block

    address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+
:            arm01a.city$+arm01a.state_code$+arm01a.zip_code$+arm01a.country$
    call pgmdir$+"adc_address.aon",address$,24,5,9,address
    return

rem --- Functions

rem --- fntestvalue: Return maximum numeric value for a given mask

    def fntestvalue(q$)
        q1$=""
        for q=1 to len(q$)
            if pos(q$(q,1)="#0") q1$=q1$+"9"
            if q$(q,1)="." q1$=q1$+"."
        next q
        q=num(q1$)
        return q
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
