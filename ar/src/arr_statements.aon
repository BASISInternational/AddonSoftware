rem --- Print Customer Statements
rem --- Program arr_statements v8.0.0 29Dec2006 (arr_cb)
rem --- Created by adx_codeport.bbx v1.1.5 (12/29/2006 08:48:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Set document Directory

docdir$="c:\PROGRAM FILES\BASIS\BARISTA\DOCUMENTS\"

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-02",ids$[3]="ARM_CUSTDET"
    files$[4]="art-01",ids$[4]="ART_INVHDR"
    files$[5]="art-11",ids$[5]="ART_INVDET"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    art01_dev=channels[4]
    art11_dev=channels[5]

rem --- Dimension string templates

    dim ars01a$:templates$[1],arm01a$:templates$[2],arm02a$:templates$[3]
    dim art01a$:templates$[4],art11a$:templates$[5]

rem --- Assign form input values to local variables

    asof$=option!.getOptionData("CURSTM_DATE")
    original$=option!.getOptionData("PICK_TEXT")
    cycle$=option!.getOptionData("AR_CYCLECODE")
    territory$=option!.getOptionData("TERRITORY")
    period$=option!.getOptionData("PICK_PER")
    basis$=option!.getOptionData("REPORT_TYPE")
    minimum$=option!.getOptionData("PICK_NO")
    option$=option!.getOptionData("REPORT_OPTION")
    sequence$=option!.getOptionData("REPORT_SEQUENCE")
    customer_id$=option!.getOptionData("CUSTOMER_ID")
    alt_sequence$=option!.getOptionData("ALT_SEQUENCE")
    doublespace$=option!.getOptionData("PICK_CHECK")
    minimum=num(minimum$)
    period=num(period$,err=*next)
    spacing=2
    if doublespace$="N" spacing=1

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
    
    call pgmdir$+"adc_sizemask.aon",m1$,m1,13,13
    m0=len(m0$)
    m1=len(m1$)

rem --- Open the printer


let textfont!= new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,10)
let boldfont!=new java.awt.Font("Times New Roman",java.awt.Font.BOLD,12)
let boldfont2!=new java.awt.Font("Arial",java.awt.Font.BOLD,14)
let bigboldfont!=new java.awt.Font("Arial",java.awt.Font.BOLD,18)
let largefont!=new java.awt.Font("Arial",java.awt.Font.BOLD,26)
let italicFont!=new java.awt.Font("Times New Roman",java.awt.Font.ITALIC,10)
let textfont2!= new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,8)
let textfont3!= new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,9)

red!=new java.awt.Color(red)
white!=new java.awt.Color(white)
grey!=new java.awt.Color(grey)

LET requestAttributes!=new javax.print.attribute.HashPrintRequestAttributeSet()
requestAttributes!.add(javax.print.attribute.standard.MediaSizeName.NA_LETTER)
requestAttributes!.add(javax.print.attribute.standard.OrientationRequested.PORTRAIT)

units=javax.print.attribute.standard.MediaPrintableArea.INCH
x!=new java.lang.Float(0.3).floatValue()
y!=new java.lang.Float(0.3).floatValue()
w!=new java.lang.Float(7.9).floatValue()
h!=new java.lang.Float(10.4).floatValue()
a!=new javax.print.attribute.standard.MediaPrintableArea(x!,y!,w!,h!,units)

requestAttributes!.add(a!)


rem --- Initializations

    headings=0
    dim headings$[headings],p[1],h[3],o[8],f[2],a[3]
    done=0
    offset=0
    address=30
    page=0
    width=80
    lines=0
    maxlines=36
    morecustomers=1
    moreheaders=1
    moredetail=1
    artype$=fill(2)
    nf$="(Not on file)"
    when$=sysinfo.system_date$
    clock$=""
    keynum=0
    begvalue$=begcust$
    endvalue$=endcust$
    if sequence$="A"
       keynum=2
       begvalue$=begalt$
       endvalue$=endalt$
    endif
    first_page=1

rem --- Initialize print positions

    p[0]=offset+46
    p[1]=offset+71
    h[0]=offset+9
    h[1]=offset+48
    h[2]=offset+59
    h[3]=width-m0
    o[0]=offset+1
    o[1]=offset+11
    o[2]=offset+14
    o[3]=offset+23
    o[4]=offset+35
    o[5]=offset+46
    o[6]=offset+58
    o[7]=offset+66
    o[8]=width-m1
    f[0]=offset
    f[1]=o[5]
    f[2]=o[8]
    a[0]=offset
    a[1]=a[0]+m1
    a[2]=a[1]+m1
    a[3]=a[2]+m1

rem --- Determine 30 day aging period dates

    periods$=""
    for x=-5 to 0
        enddate$=""
        call pgmdir$+"adc_daydates.aon",asof$,enddate$,x*30
        period_dates$=enddate$+period_dates$
    next x

rem --- Open the printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit




rem --- Start progress meter and position Customer Master (arm-01) file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,arm01_dev,1,meter_num,status
    k$=firm_id$
    if len(begvalue$)>1 then k$=begvalue$(1,len(begvalue$)-1)+$FF$
    read (arm01_dev,knum=keynum,key=k$,dom=*next)
    if pos(option$="RS")
       read (arm01_dev,knum=keynum,key=begvalue$,dom=*proceed)
       k$=keyp(arm01_dev,err=*proceed)
       read (arm01_dev,knum=keynum,key=k$,dom=*proceed)
    endif

rem --- Read next Customer Master (arm-01) and Detail (arm-02) record

    while morecustomers
          k$=key(arm01_dev,knum=keynum,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (arm01_dev,knum=keynum,key=k$) arm01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if sequence$="C" if endvalue$<>"" if arm01a.customer_id$>endvalue$ break
          if sequence$="A" if endvalue$<>"" if arm01a.alt_sequence$>endvalue$ break
          dim arm02a$:fattr(arm02a$)
          k$=arm01a.firm_id$+arm01a.customer_id$+artype$
          find record (arm02_dev,key=k$,dom=*continue) arm02a$

          rem --- Does this customer meet the selection criteria?

          if arm02a.statements$<>"Y" continue
          if territory$<>"" if arm02a.territory$<>territory$ continue
          if cycle$<>"" if arm02a.ar_cyclecode$<>cycle$ continue

          rem --- Initializations for this customer
            
            rem --- create pdf file
            myAPI!=BBjAPI()
            MyPrinter!=BBjAPI()
            prtr_dev=unt
            open (prtr_dev,err=printer)docdir$+"statement"+arm01a.customer_id$+".pdf"
            CLOSE (prtr_dev)
            ERASE docdir$+"statement"+arm01a.customer_id$+".pdf"
            printer:
            doc!=myPrinter!.getBBjPDFForm(docdir$+"Statement"+arm01a.customer_id$+".pdf",requestAttributes!)

          dim aging[5]
          page=0
          total=0
          amount=0
          current=0
          days30=0
          days60=0
          days90=0

          rem --- Format address block

          address$=""
          address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+
:                  arm01a.city$+arm01a.state_code$+arm01a.zip_code$
          call pgmdir$+"adc_address.aon",address$,24,5,9,30

          rem --- Position the Invoice Header (art-01) file for aging

          customer$=arm01a.firm_id$+artype$+arm01a.customer_id$
          read (art01_dev,key=customer$,dom=*next)

          rem --- Read next Invoice Header record

          while moreheaders
                art01_key$=key(art01_dev,end=*break)
                if pos(customer$=art01_key$)<>1 break
                read record (art01_dev) art01a$
                if art01a.invoice_date$>asof$ continue

                rem --- Accumulate any adjustments made to this invoice

                gosub adjustments
                balance=art01a.invoice_amt+applied

                rem --- Age this invoice

                agingdate$=art01a.invoice_date$
                if basis$<>"I" agingdate$=art01a.inv_due_date$
                period=pos(agingdate$>period_dates$,8)
                if period=0 period=5 
:                      else period=int(period/8)
                aging[period]=aging[period]+balance

               rem --- Loop back for next Invoice Header

          wend

          rem --- Above the minimum balance for printing?

          printed=0
          balance=0
          for x=period to 5
                balance=balance+aging[x]
          next x
          if minimum <> 0 then if balance<minimum continue

          rem --- Position the Invoice Header (art-01) file for printing

          read (art01_dev,key=customer$,dom=*next)

          rem --- Read next Invoice Header record

          while moreheaders
                art01_key$=key(art01_dev,end=*break)
                if pos(customer$=art01_key$)<>1 break
                read record (art01_dev) art01a$
                if art01a.invoice_date$>asof$ continue
                amount=art01a.invoice_amt

                rem --- Accumulate any adjustments made to this invoice

                gosub adjustments

                rem --- Format detail line fields and print detail line

                transdate$=fndate$(art01a.invoice_date$)
                type$=art01a.invoice_type$
                if type$="S" type$="Invoice"
                if type$="F" type$="Finance Charge"
                if type$="I" type$="Invoice"
                invoice$=art01a.ar_inv_no$
                balance=amount+applied
                total=total+balance
                if balance=0 continue
                if page=0 gosub header
                gosub detail
                printed=1

                rem --- Loop back for next Invoice Header

          wend

          rem --- Print totals and aging summary for this customer

          current=aging[0]+aging[1]
          days30=aging[2]
          days60=aging[3]
          days90=aging[4]+aging[5]
          if printed gosub footer
                
          rem --- Loop back for next Customer Master

          if option$="S" break

    wend

rem --- All done

    goto std_exit

header: rem --- Print the statement header

    
    first_page=0
    lines=0
    page=page+1

    page!=doc!.createPage()
    
        
    image!=page!.newImage()
    image!.setURL("FILE:c:\apps\aon\data_images\fli001.jpg")
    image!.setPosition(new java.awt.Point(160,20))
    image!.setWidth(260)
    image!.setHeight(80)   

    statement!=page!.newParagraph()
    statement!.setHorizontalFill(1)
    statement!.setPosition(new java.awt.Point(200,0))
    statement!.setText("CUSTOMER STATEMENT")
    statement!.setFont(boldfont!)
    statement!.setTextColor(myAPI!.makeColor("RED"))

    pageno!=page!.newParagraph()
    pageno!.setHorizontalFill(1)
    pageno!.setPosition(new java.awt.Point(370,120))
    pageno!.setText("Page: "+str(page))
    pageno!.setFont(textfont!)

    stdate!=page!.newParagraph()
    stdate!.setHorizontalFill(1)
    stdate!.setPosition(new java.awt.Point(370,135))
    stdate!.setText("Statement Date: "+fndate$(asof$))
    stdate!.setFont(textfont!)

    cust!=page!.newParagraph()
    cust!.setHorizontalFill(1)
    cust!.setPosition(new java.awt.Point(370,150))
    cust!.setText("Customer: "+fnmask$(arm01a.customer_id$(1,customer_size),m0$))
    cust!.setFont(textfont!)

    name!=page!.newParagraph()
    name!.setHorizontalFill(1)
    name!.setPosition(new java.awt.Point(40,120))
    name!.setText(arm01a.customer_name$)
    name!.setFont(textfont!)
    
    add1!=page!.newParagraph()
    add1!.setHorizontalFill(1)
    add1!.setPosition(new java.awt.Point(40,135))
    add1!.setText(address$(1,30)    )
    add1!.setFont(textfont!)

    add2!=page!.newParagraph()
    add2!.setHorizontalFill(1)
    add2!.setPosition(new java.awt.Point(40,150))
    add2!.setText(address$(31,30)    )
    add2!.setFont(textfont!)

    add3!=page!.newParagraph()
    add3!.setHorizontalFill(1)
    add3!.setPosition(new java.awt.Point(40,165))
    add3!.setText(address$(91,30)    )
    add3!.setFont(textfont!)
    
    page!.add(statement!)
    page!.add(image!)
    page!.add(pageno!)
    page!.add(stdate!)
    page!.add(cust!)
    page!.add(name!)    
    page!.add(add1!)
    page!.add(add2!)
    page!.add(add3!)

rem ---Ribbon info
    
    invdt!=page!.newParagraph()
    invdt!.setHorizontalFill(1)
    invdt!.setPosition(new java.awt.Point(0,240))
    invdt!.setText("Invoice Date")
    invdt!.setFont(boldfont!)

    type!=page!.newParagraph()
    type!.setHorizontalFill(1)
    type!.setPosition(new java.awt.Point(100,240))
    type!.setText("Type")
    type!.setFont(boldfont!)

    document!=page!.newParagraph()
    document!.setHorizontalFill(1)
    document!.setPosition(new java.awt.Point(200,240))
    document!.setText("Invoice")
    document!.setFont(boldfont!)

    amount!=page!.newParagraph()
    amount!.setHorizontalFill(1)
    amount!.setPosition(new java.awt.Point(300,240))
    amount!.setText("Amount")
    amount!.setFont(boldfont!)

    apply!=page!.newParagraph()
    apply!.setHorizontalFill(1)
    apply!.setPosition(new java.awt.Point(400,240))
    apply!.setText("Applied")
    apply!.setFont(boldfont!)

    balance!=page!.newParagraph()
    balance!.setHorizontalFill(1)
    balance!.setPosition(new java.awt.Point(500,240))
    balance!.setText("Balance")
    balance!.setFont(boldfont!)

    page!.add(invdt!)
    page!.add(type!)
    page!.add(document!)
    page!.add(amount!)
    page!.add(apply!)
    page!.add(balance!)

    
    
    return

detail: rem --- Print a statement detail line

    if lines>=maxlines-1 gosub continued

    tdate!=page!.newParagraph()
    tdate!.setHorizontalFill(1)
    tdate!.setPosition(new java.awt.Point(10,(lines*15)+270))
    tdate!.setText(transdate$)
    tdate!.setFont(textfont!)

    ttype!=page!.newParagraph()
    ttype!.setHorizontalFill(1)
    ttype!.setPosition(new java.awt.Point(100,(lines*15)+270))
    ttype!.setText(type$)
    ttype!.setFont(textfont!)

    tdoc!=page!.newParagraph()
    tdoc!.setHorizontalFill(1)
    tdoc!.setPosition(new java.awt.Point(200,(lines*15)+270))
    tdoc!.setText(invoice$)
    tdoc!.setFont(textfont!)
       
    tamount!=page!.newParagraph()
    tamount!.setHorizontalFill(1)
    tamount!.setPosition(new java.awt.Point(300,(lines*15)+270))
    tamount!.setText(str(amount:m1$))
    tamount!.setFont(textfont!)
    
    tapply!=page!.newParagraph()
    tapply!.setHorizontalFill(1)
    tapply!.setPosition(new java.awt.Point(400,(lines*15)+270))
    tapply!.setText(str(applied:m1$))
    tapply!.setFont(textfont!)

    tbal!=page!.newParagraph()
    tbal!.setHorizontalFill(1)
    tbal!.setPosition(new java.awt.Point(500,(lines*15)+270))
    tbal!.setText(str(balance:m1$))
    tbal!.setFont(textfont!)

    page!.add(tdate!)   
    page!.add(ttype!)
    page!.add(tdoc!)
    page!.add(tamount!)
    page!.add(tapply!)
    page!.add(tbal!)

    lines=lines+1
    
    return

    return

footer: rem --- Print the statement footer

    
    mess!=page!.newParagraph()
    mess!.setHorizontalFill(1)
    mess!.setPosition(new java.awt.Point(10,600))
    mess!.setText(message$)
    mess!.setFont(textfont!)

    total!=page!.newParagraph()
    total!.setHorizontalFill(1)
    total!.setPosition(new java.awt.Point(420,599))
    total!.setText("Total Balance:")
    total!.setFont(boldfont!)

    totalamt!=page!.newParagraph()
    totalamt!.setHorizontalFill(1)
    totalamt!.setPosition(new java.awt.Point(500,600))
    totalamt!.setText(str(total:m1$))
    totalamt!.setFont(textfont!)
    
    curr!=page!.newParagraph()
    curr!.setHorizontalFill(1)
    curr!.setPosition(new java.awt.Point(10,640))
    curr!.setText("Current")
    curr!.setFont(boldfont!)

    day30!=page!.newParagraph()
    day30!.setHorizontalFill(1)
    day30!.setPosition(new java.awt.Point(70,640))
    day30!.setText("30 Days")
    day30!.setFont(boldfont!)

    day60!=page!.newParagraph()
    day60!.setHorizontalFill(1)
    day60!.setPosition(new java.awt.Point(130,640))
    day60!.setText("60 Days")
    day60!.setFont(boldfont!)
    
    day90!=page!.newParagraph()
    day90!.setHorizontalFill(1)
    day90!.setPosition(new java.awt.Point(190,640))
    day90!.setText("90 Days & Over")
    day90!.setFont(boldfont!)

    curramt!=page!.newParagraph()
    curramt!.setHorizontalFill(1)
    curramt!.setPosition(new java.awt.Point(10,660))
    curramt!.setText(str(current:m1$))
    curramt!.setFont(textfont!)

    dayamt30!=page!.newParagraph()
    dayamt30!.setHorizontalFill(1)
    dayamt30!.setPosition(new java.awt.Point(70,660))
    dayamt30!.setText(str(days30:m1$))
    dayamt30!.setFont(textfont!)

    dayamt60!=page!.newParagraph()
    dayamt60!.setHorizontalFill(1)
    dayamt60!.setPosition(new java.awt.Point(130,660))
    dayamt60!.setText(str(days60:m1$))
    dayamt60!.setFont(textfont!)
    
    dayamt90!=page!.newParagraph()
    dayamt90!.setHorizontalFill(1)
    dayamt90!.setPosition(new java.awt.Point(190,660))
    dayamt90!.setText(str(days90:m1$))
    dayamt90!.setFont(textfont!)
    
    page!.add(mess!)
    page!.add(total!)
    page!.add(totalamt!)
    page!.add(curr!)
    page!.add(day30!)
    page!.add(day60!)
    page!.add(day90!)
    page!.add(curramt!)
    page!.add(dayamt30!)
    page!.add(dayamt60!)
    page!.add(dayamt90!)

    doc!.print()

    return

continued: rem --- This statement continues on the next page

    
    continue!=page!.newParagraph()
    continue!.setHorizontalFill(1)
    continue!.setPosition(new java.awt.Point(130,640))
    continue!.setText("(Continued)")
    continue!.setFont(textfont!) 

    page!.add(continue!)

    
    gosub header
    return


adjustments: rem --- Accumulate any adjustments for the current invoice

rem --- Position Invoice Detail (art-11) file

    art01_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
    read (art11_dev,key=art01_key$,dom=*next)

rem --- Read Invoice Detail (art-11) records

    applied=0
    while moredetail
          k$=key(art11_dev,end=*break)
          if pos(art01_key$=k$)<>1 break
          read record (art11_dev) art11a$
          if art11a.trans_date$<=asof$ applied=applied+art11a.trans_amt+art11a.adjdisc_amt
    wend
    return

address: rem --- Format the address block

    address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+
:            arm01a.city$+arm01a.state_code$+arm01a.zip_code$+arm01a.country$
    call pgmdir$+"adc_address.aon",address$,24,5,9,address
    return

rem --- Functions

rem --- fntestvalue: Return maximum numeric value for a given mask

    def fntestvalue(q$)
        q1$=""
        for q=1 to len(q$)
            if pos(q$(q,1)="#0") q1$=q1$+"9"
            if q$(q,1)="." q1$=q1$+"."
        next q
        q=num(q1$)
        return q
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
