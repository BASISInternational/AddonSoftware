rem --- Aging Analysis Report
rem --- Program arr_analysis v8.0.0 07Jan2007 (arr_hb)
rem --- Created by adx_codeport.bbx v1.1.5 (01/07/2007 03:33:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-02"
    files$[4]="arm-06"
    files$[5]="arm-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm06_dev=channels[4]
    arm10_dev=channels[5]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm02a$:templates$[3],arm06a$:templates$[4],arm10a$:templates$[5]

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    basis$=fnget_fld_data$(table$,"report_type")
    days$=fnget_fld_data$(table$,"pick_integer")
    aging$=fnget_fld_data$(table$,"pick_listbutton")
    sequence$=fnget_fld_data$(table$,"report_sequence")
    begcust$=fnget_fld_data$(table$,"customer_id_1")
    endcust$=fnget_fld_data$(table$,"customer_id_2")
    begalt$=fnget_fld_data$(table$,"alt_sequence_1")
    endalt$=fnget_fld_data$(table$,"alt_sequence_2")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    customer_size=num(ars01a.customer_size$)
    m0$=ars01a.customer_output$
    m1$=ars01a.amount_mask$
    m9$="(###)-###-####"
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    m0=len(m0$)
    m1=len(m1$)
    m9=len(m9$)

rem --- Initializations

    headings=4
    dim headings$[headings],o[7],h[7],totals[8]
    number=0
    page=0
    width=132
    maxlines=59
    lines=maxlines+1
    morecustomers=1
    when$=sysinfo.system_date$
    clock$=""
    artype$=fill(2)
    nf$="(Not on File)"
    keynum=0
    begvalue$=begcust$
    endvalue$=endcust$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" By Customer ID"
    if sequence$="A"
       keynum=2
       begvalue$=begalt$
       endvalue$=endalt$
       headings$[1]=sysinfo.task_desc$+" By Alternate Sequence"
       headings$[3]="Based on Aging Balance"
    endif

rem --- Headings

    x$="From "
    beghdr$="First" 
    endhdr$="Last" 
    if begvalue$<>"" if sequence$="A" beghdr$=begvalue$
    if endvalue$<>"" if sequence$="A" endhdr$=endvalue$
    if begvalue$<>"" if sequence$="C" beghdr$=fnmask$(begvalue$,m0$)
    if endvalue$<>"" if sequence$="C" endhdr$=fnmask$(endvalue$,m0$)
    if begvalue$<>"" x$=x$+"Customer "+beghdr$
:               else x$=x$+"the First Customer"
    x$=x$+" Through "
    if endvalue$<>"" x$=x$+"Customer "+beghdr$
:               else x$=x$+"the Last Customer"
    headings$[2]=x$   
    headings$[3]="Based on Average Days to Pay"
    x$="Future"
    if aging$="C" x$="Current"
    if aging$="30" x$="30 Day"
    if aging$="60" x$="60 Day"
    if aging$="80" x$="90 Day"
    if aging$="120" x$="120 Day"
    if basis$="A" headings$[3]="Based on "+x$+" Aging Balance"

rem --- Define print positions

    o[0]=0
    o[1]=max(o[0]+m0+32,m9+26)
    o[2]=o[1]+9
    o[3]=o[2]+5
    o[7]=width-m1
    o[6]=o[7]-m1
    o[5]=o[6]-m1
    o[4]=o[5]-m1
    for x=0 to 3
        h[x]=o[x]
    next x
    h[4]=o[4]+m1-8
    h[5]=o[5]+m1-8
    h[6]=o[6]+m1-9
    h[7]=o[7]+m1-10
    nw=min(o[1]-m0-1,30)
    cw=min(o[1]-m9-6,20)
    tw=min(o[4]-o[3]-3,20)

rem --- Open printer, start progress meter and position Customer Master (arm-01) file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","","",0,arm01_dev,1,meter_num,status
    k$=firm_id$
    if len(begvalue$)>1 then k$=begvalue$(1,len(begvalue$)-1)+$FF$
    read (arm01_dev,knum=keynum,key=k$,dom=*next)

rem --- Read next Customer Master (arm-01) record

    while morecustomers
          k$=key(arm01_dev,knum=keynum,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (arm01_dev,knum=keynum,key=k$) arm01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if sequence$="C" if endvalue$<>"" if arm01a.customer_id$>endvalue$ break
          if sequence$="A" if endvalue$<>"" if arm01a.alt_sequence$>endvalue$ break

          rem --- Retrieve customer detail and terms information

          dim arm02a$:fattr(arm02a$),arm06a$:fattr(arm06a$),arm10a$:fattr(arm10a$)
          k$=arm01a.firm_id$+arm01a.customer_id$+artype$
          find record (arm02_dev,key=k$,dom=*continue) arm02a$
          k$=arm01a.firm_id$+arm01a.customer_id$
          find record (arm06_dev,key=k$,dom=*next) arm06a$
          arm10a.ar_terms_code$=arm02a.ar_terms_code$
          arm10a.code_desc$=nf$
          k$=arm01a.firm_id$+"A"+arm10a.ar_terms_code$
          find (arm10_dev,key=k$,dom=*next) arm10a$
          if cvs(arm06a.lstpay_date$,2)="" arm06a.lstpay_date$=fill(8)

          rem --- Should the customer be included on the report?

          if basis$="D" if arm06a.avg_days<days continue
          amount=arm02a.aging_future+arm02a.aging_cur+arm02a.aging_30+arm02a.aging_60+
:                arm02a.aging_90+arm02a.aging_120
          if aging$="C" amount=arm02a.aging_cur+arm02a.aging_30+arm02a.aging_60+
:                       arm02a.aging_90+arm02a.aging_120
          if aging$="30" amount=arm02a.aging_30+arm02a.aging_60+arm02a.aging_90+arm02a.aging_120
          if aging$="60" amount=arm02a.aging_60+arm02a.aging_90+arm02a.aging_120
          if aging$="90" amount=arm02a.aging_90+arm02a.aging_120
          if aging$="120" amount=arm02a.aging_120
          if basis$="A" if amount=0 continue

          rem --- Print the customer information and accumulate totals

          phone$=fill(m9)
          extension$=fill(5)
          if cvs(arm01a.phone_no$,2)<>"" phone$=fnmask$(arm01a.phone_no$,m9$)
          if cvs(arm01a.phone_exten$,2)<>"" extension$="x"+arm01a.phone_exten$
          if lines+3>maxlines gosub report_heading
          print (printer_dev) ""
          print (printer_dev) @(o[0]),fnmask$(arm01a.customer_id$(1,customer_size),m0$)," ",
:                             arm01a.customer_name$(1,nw),@(o[1]),fndate$(arm06a.lstinv_date$),
:                             @(o[2]),arm06a.avg_days:"##0",@(o[3]),arm02a.ar_terms_code$," ",
:                             arm10a.code_desc$(1,tw),@(o[4]),arm02a.aging_future:m1$,
:                             @(o[5]),arm02a.aging_30:m1$,@(o[6]),arm02a.aging_90:m1$,
:                             @(o[7]),arm06a.mtd_sales:m1$
          print (printer_dev) @(o[0]),phone$," ",extension$," ",arm01a.contact_name$,
:                             @(o[1]),fndate$(arm06a.lstpay_date$),@(o[4]),arm02a.aging_cur:m1$,
:                             @(o[5]),arm02a.aging_60:m1$,@(o[6]),arm02a.aging_120:m1$,
:                             @(o[7]),arm06a.ytd_sales:m1$
          lines=lines+3
          number=number+1
          totals[1]=totals[1]+arm02a.aging_future
          totals[2]=totals[2]+arm02a.aging_cur
          totals[3]=totals[3]+arm02a.aging_30
          totals[4]=totals[4]+arm02a.aging_60
          totals[5]=totals[5]+arm02a.aging_90
          totals[6]=totals[6]+arm02a.aging_120
          totals[7]=totals[7]+arm06a.mtd_sales
          totals[8]=totals[8]+arm06a.ytd_sales

          rem --- Loop back for next Customer Master record

    wend

rem --- All done

    x$="Totals for Report"
    if number x$=x$+" ("+cvs(str(number:"###,##0"),1)+" Customers)"
    if lines+3>maxlines gosub report_heading
    print (printer_dev) ""
    print (printer_dev) @(o[4]-len(x$)),x$,@(o[4]),totals[1]:m1$,@(o[5]),totals[3]:m1$,
:                       @(o[6]),totals[5]:m1$,@(o[7]),totals[7]:m1$
    print (printer_dev) @(o[4]),totals[2]:m1$,@(o[5]),totals[4]:m1$,
:                       @(o[6]),totals[6]:m1$,@(o[7]),totals[8]:m1$
    goto std_exit

report_heading: rem --- Report Heading

    lines=headings+2
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    print (printer_dev) @(h[1]),"Last Inv",@(h[2]),"Days",@(h[4])," Future",@(h[5]),"30 Days",
:                       @(h[6])," 90 Days",@(h[7]),"MTD Sales"
    print (printer_dev) @(h[0]),"Customer, Phone and Contact",@(h[1]),"Last Pay",@(h[2]),"Pay",
:                       @(h[3]),"Terms",@(h[4]),"Current",@(h[5]),"60 Days",@(h[6]),"120 Days",
:                       @(h[7]),"YTD Sales"
    if status exitto std_exit
    lines=lines+2
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
