rem arm - Customer Detail Listing
rem Program arr_detail v8.0.0 25Dec2006 (arm_mg)
rem Created by adx_progconv.bbx v1.0.3 (12/25/2006 11:12:14)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-02",ids$[3]="ARM_CUSTDET"
    files$[4]="arm-03",ids$[4]="ARM_CUSTSHIP"
    files$[5]="arm-05",ids$[5]="ARM_CUSTCMTS"
    files$[6]="arm-06",ids$[6]="ARM_CUSTPMTS"
    files$[7]="arm-08",ids$[7]="ARM_CYCLECOD"
    files$[8]="arc_distcode",ids$[8]="ARC_DISTCODE"
    files$[9]="art-01",ids$[9]="ART_INVHDR"
    files$[10]="art-11",ids$[10]="ART_INVDET"
    files$[11]="arc_salecode",ids$[11]="ARC_SALECODE"
    files$[12]="arc_terrcode",ids$[12]="ARC_TERRCODE"
    files$[13]="arc_custtype",ids$[13]="ARC_CUSTTYPE"
    files$[14]="arc_termcode",ids$[14]="ARC_TERMCODE"
    files$[15]="ars_credit",ids$[15]="ARS_CREDIT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm03_dev=channels[4]
    arm05_dev=channels[5]
    arm06_dev=channels[6]
    arm08_dev=channels[7]
    arc_distcode_dev=channels[8]
    art01_dev=channels[9]
    art11_dev=channels[10]
    arc_salecode_dev=channels[11]
    arc_terrcode_dev=channels[12]
    arc_custtype_dev=channels[13]
    arc_termcode_dev=channels[14]
    ars_credit_dev=channels[15]

rem --- Dimension string templates

    dim ars01a$:templates$[1],arm01a$:templates$[2],arm02a$:templates$[3],arm03a$:templates$[4]
    dim arm05a$:templates$[5],arm06a$:templates$[6],arm08a$:templates$[7],arm10d$:templates$[8]
    dim art01a$:templates$[9],art11a$:templates$[10],arm10f$:templates$[11],arm10h$:templates$[12]
    dim arm10l$:templates$[13],arm10a$:templates$[14],ars01c$:templates$[15]

rem --- Assign form input values to local variables

    begcustomer$=option!.getOptionData("CUSTOMER_ID_1")
    endcustomer$=option!.getOptionData("CUSTOMER_ID_2")
    comments$=option!.getOptionData("PICK_CHECK")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    cm$="N"
    ars01c_key$=firm_id$+"AR01"
    find record (ars_credit_dev,key=ars01c_key$,err=*next) ars01c$
    if ars01c.sys_install$="Y" cm$="Y"
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,9,11
    m8$="(###) ###-####"
    m0=len(m0$)
    m1=len(m1$)
    dim m5$(m1,"#"),m6$(m1+1,"#")
    m5$(len(m5$)-1)="0-"
    m6$(len(m6$)-5)="0.00%"
    m6$(1,1)="-"

rem --- Is Sales Order Processing and/or Sales Analysis installed?

    dim info$[20]
    application$="OP"
    call pgmdir$+"adc_application.aon",application$,info$[all]
    op$=info$[20]
    if op$<>"Y" cm$="N"
    application$="SA"
    call pgmdir$+"adc_application.aon",application$,info$[all]
    sa$=info$[20]

rem --- Initializations

    headings=2
    dim headings$[headings],o[9],a[6],s[3]
    more=1
    page=0
    width=80
    pbufwidth=85
    maxlines=59
    lines=maxlines+1
    morecustomers=1
    moreheaders=1
    moredetail=1
    morecomments=1
    if comments$="N" morecomments=0
    morejobs=1
    if ars01a.job_nos$<>"Y" morejobs=0
    if op$<>"Y" morejobs=0
    nf$="(Not on file)"
    na$="(Not applicable)"
    artype$=fill(2)
    when$=sysinfo.system_date$
    clock$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$

rem --- Headings and print positions

 
    dim columns$[0,10]
    columns$[0,0]="",columns$[0,1]="C",columns$[0,2]="80"
    columns=0

rem --- Define print positions for the invoice history listing

    o[0]=0
    o[1]=2
    o[2]=10
    o[3]=19
    o[4]=28
    o[5]=31
    o[9]=width-m1
    o[8]=o[9]-m1
    o[7]=o[8]-m1
    o[6]=o[7]-m1

rem --- Define print positions for the aging and sales summary

    x=m1*7
    x=int((width-x)/2)
    a[0]=x
    for x=1 to 6
        a[x]=a[x-1]+m1
    next x
    s[0]=31-m1
    s[1]=46-m1
    s[2]=61-m1
    s[3]=76-m1
 
rem --- Additional file opens

    if op$="Y"
        files=6,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="opm-03",ids$[1]="OPC_DISCCODE"
        files$[2]="opm-04",ids$[2]="OPC_MSG_HDR"
        files$[3]="opm-05",ids$[3]="OPC_PRICECDS"
        files$[4]="opm-06",ids$[4]="OPC_TAXCODE"
        files$[5]="opm-07",ids$[5]="OPM_FRTTERMS"
        files$[6]="opm-09",ids$[6]="OPM_CUSTJOBS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                       ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        opm03_dev=channels[1]
        opm04_dev=channels[2]
        opm05_dev=channels[3]
        opm06_dev=channels[4]
        opm07_dev=channels[5]
        opm09_dev=channels[6]

rem --- Dimension string templates

        dim opm03a$:templates$[1],opm04a$:templates$[2],opm05a$:templates$[3],
:           opm06a$:templates$[4],opm07a$:templates$[5],opm09a$:templates$[6]

    endif

rem --- Open printer, start progress meter and position Customer Master file

    first_cust$="Y"
    call pgmdir$+"adc_progress.aon","NC","","","","",0,arm01_dev,1,meter_num,status
    while begcustomer$<>""
          read (arm01_dev,key=firm_id$+begcustomer$)
          read (arm01_dev,dir=-1,err=*next)
          begcustomer$=""
    wend

rem --- Read next Customer Master (arm-01) record

    while morecustomers
          arm01_key$=key(arm01_dev,end=*break)
          if pos(firm_id$=arm01_key$)<>1 break
          read record (arm01_dev,key=arm01_key$) arm01a$
          if endcustomer$<>"" if arm01a.customer_id$>endcustomer$ break
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status 

          rem --- Print customer master information

          if first_cust$="N"
            BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            HdrVect!.addItem("")
          else
            first_cust$="N"
          endif
          extension$=""
          if cvs(arm01a.phone_exten$,2)<>"" extension$="Ext "+arm01a.phone_exten$
          gosub lines_count
          lines=lines+10

          OutVect!.addItem("")

          dim pbuf$(pbufwidth)
          pbuf$(2,len("Address: " + arm01a.addr_line_1$)) = "Address: " + arm01a.addr_line_1$
          pbuf$(47,len("Telephone:  " + str(fnmask$(arm01a.phone_no$,m8$)) + " " + extension$)) = "Telephone:  " + str(fnmask$(arm01a.phone_no$,m8$)) + " " + extension$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(11,len(arm01a.addr_line_2$)) = arm01a.addr_line_2$
          pbuf$(47,len("Fax Phone:  " + fnmask$(arm01a.fax_no$,m8$))) = "Fax Phone:  " + fnmask$(arm01a.fax_no$,m8$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(11,len(arm01a.addr_line_3$)) = arm01a.addr_line_3$
          pbuf$(49,len("Contact:  " + arm01a.contact_name$)) = "Contact:  " + arm01a.contact_name$
          gosub output_print_buf


          dim pbuf$(pbufwidth)
          pbuf$(11,len(arm01a.addr_line_4$)) = arm01a.addr_line_4$
          pbuf$(38,len("Alternate Sequence:  " + arm01a.alt_sequence$)) = "Alternate Sequence:  " + arm01a.alt_sequence$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(5,len("City: " + arm01a.city$)) = "City: " + arm01a.city$
          pbuf$(45,len("Date Opened:  " + fndate$(arm01a.opened_date$))) = "Date Opened:  " + fndate$(arm01a.opened_date$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(4,len("State: " + arm01a.state_code$)) = "State: " + arm01a.state_code$
          pbuf$(18,len("Zip/Postal:  " + fnzipcode$(arm01a.zip_code$))) = "Zip/Postal:  " + fnzipcode$(arm01a.zip_code$)
          pbuf$(48,len("Ship Via:  " + arm01a.ar_ship_via$)) = "Ship Via:  " + arm01a.ar_ship_via$
          gosub output_print_buf
          
          dim pbuf$(pbufwidth)
          pbuf$(2,len("Country: " + arm01a.country$)) = "Country: " + arm01a.country$
          pbuf$(50,len("F.O.B.:  " + arm01a.fob$)) = "F.O.B.:  " + arm01a.fob$
          gosub output_print_buf
          
          dim pbuf$(pbufwidth)
          pbuf$(6,len("SIC: " + arm01a.sic_code$)) = "SIC: " + arm01a.sic_code$
          pbuf$(43,len("Resale Number:  " + arm01a.resale_no$)) = "Resale Number:  " + arm01a.resale_no$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(3,len("Retain? " + fnyn$(arm01a.retain_cust$))) = "Retain? " + fnyn$(arm01a.retain_cust$)
          pbuf$(46,len("D&B Number: " + arm01a.db_no$)) = "D&B Number: " + arm01a.db_no$
          gosub output_print_buf



         rem --- Retrieve customer detail record

          dim arm02a$:fattr(arm02a$)
          arm02a.firm_id$=arm01a.firm_id$
          arm02a.customer_id$=arm01a.customer_id$
          arm02a.ar_type$=artype$
          arm02_key$=arm02a.firm_id$+arm02a.customer_id$+arm02a.ar_type$
          find record (arm02_dev,key=arm02_key$,dom=*next) arm02a$

          rem --- Get AR code descriptions

          termsdesc$=fncode$(arc_termcode_dev,firm_id$+"A"+arm02a.ar_terms_code$,fattr(arm10a$))
          distdesc$=fncode$(arc_distcode_dev,firm_id$+"D"+arm02a.ar_dist_code$,fattr(arm10d$))
          terrdesc$=fncode$(arc_terrcode_dev,firm_id$+"H"+arm02a.territory$,fattr(arm10h$))
          salesdesc$=fncode$(arc_salecode_dev,firm_id$+"F"+arm02a.slspsn_code$,fattr(arm10f$))
          typedesc$=fncode$(arc_custtype_dev,firm_id$+"L"+arm02a.customer_type$,fattr(arm10l$))
          cycledesc$=fncode$(arm08_dev,firm_id$+arm02a.ar_cyclecode$,fattr(arm08a$))
          if cvs(arm02a.ar_cyclecode$,2)="" cycledesc$=""

          rem --- Get OP code descriptions (if installed)

          discdesc$=na$
          msgdesc$=na$
          pricedesc$=na$
          taxdesc$=na$
          frtdesc$=na$
          if op$="Y"
             discdesc$=fncode$(opm03_dev,firm_id$+arm02a.disc_code$,fattr(opm03a$))
             msgdesc$=fncode$(opm04_dev,firm_id$+arm02a.message_code$,fattr(opm04a$))
             pricedesc$=fncode$(opm05_dev,firm_id$+arm02a.pricing_code$,fattr(opm05a$))
             taxdesc$=fncode$(opm06_dev,firm_id$+arm02a.tax_code$,fattr(opm06a$))
             k$=firm_id$+arm02a.frt_terms$
             dim opm07a$:fattr(opm07a$)
             opm07a.description$=nf$
             find record (opm07_dev,key=k$,dom=*next) opm07a$
             frtdesc$=opm07a.description$
          endif
          if op$="Y" if cvs(arm02a.frt_terms$,2)="" frtdesc$=""

          rem --- Print profile information

          hold$=na$
          limit$=na$
          if cm$="Y"
             limit$=cvs(str(arm02a.credit_limit:m1$),1+2)
             hold$=fnyn$(arm02a.cred_hold$)
          endif
          if cm$="Y" if arm02a.cred_hold$="E" hold$="Exempt"
          sales_analysis$="None"
          if sa$<>"Y" arm02a.sa_flag$="N"
          if arm02a.sa_flag$="I" sales_analysis$="By Item"
          if arm02a.sa_flag$="P" sales_analysis$="By Product"
          if lines+12>maxlines gosub lines_count
          gosub profile_heading
 

          dim pbuf$(pbufwidth)
          pbuf$(1,len("Customer Type: "+arm02a.customer_type$)) = "Customer Type: "+arm02a.customer_type$
          pbuf$(20,len(typedesc$)) = typedesc$
          pbuf$(42,len("Sales Discount: "+arm02a.disc_code$+" "+discdesc$)) = "Sales Discount: "+arm02a.disc_code$+" "+discdesc$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(3,len("Salesperson: "+arm02a.slspsn_code$)) = "Salesperson: "+arm02a.slspsn_code$
          pbuf$(20,len(salesdesc$)) = salesdesc$
          pbuf$(46,len("Label Code: "+arm02a.label_code$)) = "Label Code: "+arm02a.label_code$
          gosub output_print_buf
   
          dim pbuf$(pbufwidth)
          pbuf$(3,len("Terms Code: "+arm02a.ar_terms_code$)) = "Terms Code: "+arm02a.ar_terms_code$
          pbuf$(20,len(termsdesc$)) = termsdesc$
          pbuf$(42,len("Finance Charge? "+fnyn$(arm02a.finance_chg$))) = "Finance Charge? "+fnyn$(arm02a.finance_chg$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(6,len("Tax Code: "+arm02a.tax_code$)) = "Tax Code: "+arm02a.tax_code$
          pbuf$(20,len(taxdesc$)) = taxdesc$
          pbuf$(46,len("Statements? "+fnyn$(arm02a.statements$))) = "Statements? "+fnyn$(arm02a.statements$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(1,len("Freight Terms: "+arm02a.frt_terms$)) = "Freight Terms: "+arm02a.frt_terms$
          pbuf$(20,len(frtdesc$)) = frtdesc$
          pbuf$(46,len("Cycle Code: "+arm02a.ar_cyclecode$+" "+cycledesc$)) = "Cycle Code: "+arm02a.ar_cyclecode$+" "+cycledesc$
          gosub output_print_buf
   
          dim pbuf$(pbufwidth)
          pbuf$(1,len("Territory: "+arm02a.territory$)) = "Territory: "+arm02a.territory$
          pbuf$(20,len(terrdesc$)) = terrdesc$
          pbuf$(42,len("Sales Analysis: "+sales_analysis$)) = "Sales Analysis: "+sales_analysis$
          gosub output_print_buf
          
          dim pbuf$(pbufwidth)
          pbuf$(2,len("Distribution: "+arm02a.ar_dist_code$)) = "Distribution: "+arm02a.ar_dist_code$ 
          pbuf$(20,len(distdesc$)) = distdesc$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(2,len("Message Code: "+arm02a.message_code$)) = "Message Code: "+arm02a.message_code$
          pbuf$(20,len(msgdesc$)) = msgdesc$
          pbuf$(2,len("Credit Limit: "+limit$)) = "Credit Limit: "+limit$
          gosub output_print_buf
          
          
          dim pbuf$(pbufwidth)
          pbuf$(2,len("Pricing Code: "+arm02a.pricing_code$)) = "Pricing Code: "+arm02a.pricing_code$
          pbuf$(20,len(pricedesc$)) = pricedesc$
          pbuf$(45,len("Credit Hold: "+hold$)) = "Credit Hold: "+hold$
          gosub output_print_buf
          
          lines=lines+10


          rem --- Print customer comments

          while morecomments
                gosub comments_heading
                read (arm05_dev,key=arm01_key$,dom=*next)
                while moredetail
                      k$=key(arm05_dev,end=*break)
                      if pos(arm01_key$=k$)<>1 break
                      read record (arm05_dev,key=k$) arm05a$
                      if lines+1>maxlines 
                         gosub lines_count
                         gosub comments_heading
                      endif
                      dim pbuf$(pbufwidth)
                      pbuf$(1,len(arm05a.sequence_num$+" "+arm05a.std_comments$)) = arm05a.sequence_num$+" "+arm05a.std_comments$
                      gosub output_print_buf
        
                      lines=lines+1
                wend
                break
          wend

          rem --- Process customer ship-to records

          first=1
          read (arm03_dev,key=arm01_key$,dom=*next)
          while moredetail
                k$=key(arm03_dev,end=*break)
                if pos(arm01_key$=k$)<>1 break
                read record (arm03_dev,key=k$) arm03a$

                rem --- Get AR code descriptions

                terrdesc$=fncode$(arc_terrcode_dev,firm_id$+"H"+arm03a.territory$,fattr(arm10h$))
                salesdesc$=fncode$(arc_salecode_dev,firm_id$+"F"+arm03a.slspsn_code$,fattr(arm10f$))

                rem --- Get OP code descriptions (if installed)

                taxdesc$=na$
                if op$="Y" taxdesc$=fncode$(opm06_dev,firm_id$+arm03a.tax_code$,fattr(opm06a$))

                rem --- Print the customer ship-to record

                extension$=""
                if cvs(arm03a.phone_exten$,2)<>"" extension$="Ext "+arm03a.phone_exten$
                if len(taxdesc$)>19 taxdesc$=taxdesc$(1,19)
                if len(terrdesc$)>19 terrdesc$=terrdesc$(1,19)
                if len(salesdesc$)>19 salesdesc$=salesdesc$(1,19)
                arm03a.country$=arm03a.country$(1,23)
                if lines+9>maxlines gosub lines_count
                if first gosub shipto_heading
:                   else OutVect!.addItem("") 
 

                dim pbuf$(pbufwidth)
                pbuf$(1,len("Ship To: "+arm03a.shipto_no$)) = "Ship To: "+arm03a.shipto_no$
                pbuf$(47,len("Telephone: "+str(fnmask$(arm03a.phone_no$,m8$))+" "+extension$)) = "Telephone: "+str(fnmask$(arm03a.phone_no$,m8$))+" "+extension$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(4,len("Name: "+arm03a.name$)) = "Name: "+arm03a.name$
                pbuf$(49,len("Contact: "+arm03a.contact_name$)) = "Contact: "+arm03a.contact_name$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(1,len("Address: "+arm03a.addr_line_1$)) = "Address: "+arm03a.addr_line_1$
                pbuf$(45,len("Salesperson: "+arm03a.slspsn_code$+" "+salesdesc$)) = "Salesperson: "+arm03a.slspsn_code$+" "+salesdesc$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(10,len(arm03a.addr_line_2$)) = arm03a.addr_line_2$
                pbuf$(47,len("Territory: "+arm03a.territory$+" "+terrdesc$)) = "Territory: "+arm03a.territory$+" "+terrdesc$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(10,len(arm03a.addr_line_3$)) = arm03a.addr_line_3$
                pbuf$(48,len("Tax Code: "+arm03a.tax_code$+" "+taxdesc$)) = "Tax Code: "+arm03a.tax_code$+" "+taxdesc$
                gosub output_print_buf

  
                dim pbuf$(pbufwidth)
                pbuf$(10,len(arm03a.addr_line_4$)) = arm03a.addr_line_4$
                pbuf$(52,len("SIC: "+arm03a.sic_code$)) = "SIC: "+arm03a.sic_code$
                gosub output_print_buf


                dim pbuf$(pbufwidth)
                pbuf$(4,len("City: "+arm03a.city$)) = "City: "+arm03a.city$
                pbuf$(46,len("D&B Number: "+arm03a.db_no$)) = "D&B Number: "+arm03a.db_no$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(3,len("State: "+arm03a.state_code$)) = "State: "+arm03a.state_code$
                pbuf$(14,len("Zip/Postal: "+fnzipcode$(arm03a.zip_code$))) = "Zip/Postal: "+fnzipcode$(arm03a.zip_code$)
                pbuf$(49,len("Country: "+arm03a.country$)) = "Country: "+arm03a.country$
                gosub output_print_buf


                lines=lines+9

                rem --- Loop back for next ship-to record

          wend

          rem --- Process customer job number records (if job numbers are being used)

          while morejobs
                first=1
                read (opm09_dev,key=arm01_key$,dom=*next)
                while moredetail
                    k$=key(opm09_dev,end=*break)
                    if pos(arm01_key$=k$)<>1 break
                    read record (opm09_dev,key=k$) opm09a$
                    extension$=""
                    if cvs(opm09a.phone_exten$,2)<>"" extension$="Ext "+opm09a.phone_exten$
                    if lines+9>maxlines gosub lines_count
                      if first gosub job_heading
:                         else OutVect!.addItem("")

                    
                    dim pbuf$(pbufwidth)
                    pbuf$(4,len("Job ID: "+opm09a.job_no$)) = "Job ID: "+opm09a.job_no$
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(2,len("Job Name: "+opm09a.customer_name$)) = "Job Name: "+opm09a.customer_name$
                    pbuf$(45,len("Preliminary Lien Information")) = "Preliminary Lien Information"
                    gosub output_print_buf
 
                    dim pbuf$(pbufwidth)
                    pbuf$(2,len("Address: "+opm09a.addr_line_1$)) = "Address: "+opm09a.addr_line_1$
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(12,len(opm09a.addr_line_2$)) = opm09a.addr_line_2$
                    pbuf$(45,len("Lien Date:"+fndate$(opm09a.lien_date$))) = "Lien Date:"+fndate$(opm09a.lien_date$)
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(6,len("City: "+opm09a.city$)) = "City: "+opm09a.city$
                    pbuf$(49,len("Lien ID:"+opm09a.lien_no$)) = "Lien ID:"+opm09a.lien_no$
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(3,len("State: "+opm09a.state_code$)) = "State: "+opm09a.state_code$
                    pbuf$(14,len("Zip/Postal: "+fnzipcode$(arm01a.zip_code$))) = "Zip/Postal: "+fnzipcode$(arm01a.zip_code$)
                    pbuf$(50,len("Amount: "+str(opm09a.lien_amount:m1$))) = "Amount: "+str(opm09a.lien_amount:m1$)
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(3,len("Telephone: "+str(fnmask$(arm03a.phone_no$,m8$))+" "+extension$)) = "Telephone: "+str(fnmask$(arm03a.phone_no$,m8$))+" "+extension$
                    pbuf$(42,len("First Shipment: "+fndate$(opm09a.fst_shp_date$))) = "First Shipment: "+fndate$(opm09a.fst_shp_date$)
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(3,len("Contact: "+opm09a.contact_name$)) = "Contact: "+opm09a.contact_name$
                    pbuf$(37,len("Total Sales to Date: "+str(opm09a.total_sales:m1$))) = "Total Sales to Date: "+str(opm09a.total_sales:m1$)
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(4,len("Retain? "+fnyn$(opm09a.retain_cust$))) = "Retain? "+fnyn$(opm09a.retain_cust$)
                    pbuf$(39,len("Last Invoice Date: "+fndate$(opm09a.lstinv_date$))) = "Last Invoice Date: "+fndate$(opm09a.lstinv_date$)
                    gosub output_print_buf

                    lines=lines+9

                    rem --- Loop back for next customer job record

                wend
                break

                rem --- Done with customer job records

          wend

          rem --- Print aging and sales summary

          mtd_percent=0
          ytd_percent=0
          pytd_percent=0
          nmtd_percent=0
          mtd_profit=arm06a.mtd_sales-arm06a.mtd_cost
          ytd_profit=arm06a.ytd_sales-arm06a.ytd_cost
          pytd_profit=arm06a.pyr_sales-arm06a.pri_ytd_cost
          nmtd_profit=arm06a.nmtd_sales-arm06a.nxt_mtd_cost
          if arm06a.mtd_sales<>0 mtd_percent=(mtd_profit*100)/arm06a.mtd_sales
          if arm06a.ytd_sales<>0 ytd_percent=(ytd_profit*100)/arm06a.ytd_sales
          if arm06a.pyr_sales<>0 pytd_percent=(pytd_profit*100)/arm06a.pyr_sales
          if arm06a.nmtd_sales<>0 nmtd_percent=(nmtd_profi*100)/arm06a.nmtd_sales
          balance=arm02a.aging_future+arm02a.aging_cur+arm02a.aging_30+
:                 arm02a.aging_60+arm02a.aging_90+arm02a.aging_120
          if lines+15>maxlines gosub lines_count
          gosub detail_heading


 
          dim pbuf$(pbufwidth)
          pbuf$((a[0]+m1-7)+1,len("Future")) = "Future"
          pbuf$(a[1]+m1-8,len("Current")) = "Current"
          pbuf$((a[2]+m1-8)+1,len("30 Days")) = "30 Days"
          pbuf$(a[3]+m1-8,len("30 Days")) = "60 Days"
          pbuf$((a[4]+m1-8)+1,len("30 Days")) = "90 Days"
          pbuf$(a[5]+m1-8,len("120 Days")) = "120 Days"
          pbuf$((a[6]+m1-8)+1,len("Balance")) = "Balance"
          gosub output_print_buf

  
          dim pbuf$(pbufwidth)
          pbuf$(a[0]+1,len(str(arm02a.aging_future:m1$))) = str(arm02a.aging_future:m1$)
          pbuf$(a[2]+1,len(str(arm02a.aging_cur:m1$))) = str(arm02a.aging_cur:m1$)
          pbuf$(a[4]+1,len(str(arm02a.aging_30:m1$))) = str(arm02a.aging_30:m1$)
          pbuf$(a[6]+1,len(str(arm02a.aging_60:m1$))) = str(arm02a.aging_60:m1$)
          pbuf$(a[4]+1,len(str(arm02a.aging_90:m1$))) = str(arm02a.aging_90:m1$)
          pbuf$(a[5]+1,len(str(arm02a.aging_120:m1$))) = str(arm02a.aging_120:m1$)
          pbuf$(a[6]+1,len(str(balance:m1$))) = str(balance:m1$)
          gosub output_print_buf

          OutVect!.addItem("")


          dim pbuf$(pbufwidth)
          pbuf$(3,len("Last Invoice: "+fndate$(arm02a.lstinv_date$))) = "Last Invoice: "+fndate$(arm02a.lstinv_date$)
          pbuf$(41,len("Avg Days to Pay: "+cvs(str(arm06a.avg_days:m5$),1+2))) = "Avg Days to Pay: "+cvs(str(arm06a.avg_days:m5$),1+2)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(3,len("Last Payment: "+fndate$(arm02a.lstpay_date$))) = "Last Payment: "+fndate$(arm02a.lstpay_date$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$((s[2]+m1-6)+1,len("Prior")) = "Prior"
          pbuf$((s[3]+m1-6)+1,len("Next")) = "Next"
          gosub output_print_buf
  
          dim pbuf$(pbufwidth)
          pbuf$((s[0]+m1-4)+1,len("MTD"))   = "MTD"
          pbuf$((s[1]+m1-4)+1,len("YTD"))   = "YTD"
          pbuf$((s[2]+m1-6)+1,len("Year"))  = "Year"
          pbuf$((s[3]+m1-6)+1,len("Month")) = "Month"
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(10,len("Sales: ")) = "Sales: "
          pbuf$(s[0]+1,len(str(arm06a.mtd_sales:m1$))) = str(arm06a.mtd_sales:m1$)
          pbuf$(s[1]+1,len(str(arm06a.ytd_sales:m1$))) = str(arm06a.ytd_sales:m1$)
          pbuf$(s[2]+1,len(str(arm06a.pyr_sales:m1$))) = str(arm06a.pyr_sales:m1$)
          pbuf$(s[3]+1,len(str(arm06a.nmtd_sales:m1$))) = str(arm06a.nmtd_sales:m1$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(11,len("Cost: ")) = "Cost: "
          pbuf$(s[0]+1,len(str(arm06a.mtd_cost:m1$))) = str(arm06a.mtd_cost:m1$)
          pbuf$(s[1]+1,len(str(arm06a.ytd_cost:m1$))) = str(arm06a.ytd_cost:m1$)
          pbuf$(s[2]+1,len(str(arm06a.pri_ytd_cost:m1$))) = str(arm06a.pri_ytd_cost:m1$)
          pbuf$(s[3]+1,len(str(arm06a.nxt_mtd_cost:m1$))) = str(arm06a.nxt_mtd_cost:m1$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(11,len("Gross Profit: ")) = "Gross Profit: "
          pbuf$(s[0]+1,len(str(mtd_profit:m1$))) = str(mtd_profit:m1$)
          pbuf$(s[1]+1,len(str(ytd_profit:m1$))) = str(ytd_profit:m1$)
          pbuf$(s[2]+1,len(str(pytd_profit:m1$))) = str(pytd_profit:m1$)
          pbuf$(s[3]+1,len(str(nmtd_profit:m1$))) = str(nmtd_profit:m1$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(2,len("Gross Profit %: ")) = "Gross Profit %: "
          pbuf$(s[0]+1,len(str(mtd_percent:m6$))) = str(mtd_percent:m6$)
          pbuf$(s[1]+1,len(str(ytd_percent:m6$))) = str(ytd_percent:m6$)
          pbuf$(s[2]+1,len(str(pytd_percent:m6$))) = str(pytd_percent:m6$)
          pbuf$(s[3]+1,len(str(nmtd_percent:m6$))) = str(nmtd_percent:m6$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(1,len("Avg Days to Pay: ")) = "Avg Days to Pay: "
          pbuf$(s[0]+1,len(str(arm06a.avg_days_mtd:m5$))) = str(arm06a.avg_days_mtd:m5$)
          pbuf$(s[1]+1,len(str(arm06a.avg_days_ytd:m5$))) = str(arm06a.avg_days_ytd:m5$)
          pbuf$(s[2]+1,len(str(arm06a.avg_dtp_pytd:m5$))) = str(arm06a.avg_dtp_pytd:m5$)
          pbuf$(s[3]+1,len(str(arm06a.avg_dtp_nmtd:m5$))) = str(arm06a.avg_dtp_nmtd:m5$)
          gosub output_print_buf


          dim pbuf$(pbufwidth)
          pbuf$(5,len("High Credit: ")) = "High Credit: "
          pbuf$(s[0]+1,len(str(arm06a.mtd_high_crd:m1$))) = str(arm06a.mtd_high_crd:m1$)
          pbuf$(s[1]+1,len(str(arm06a.ytd_hi_cred:m1$))) = str(arm06a.ytd_hi_cred:m1$)
          pbuf$(s[2]+1,len(str(arm06a.pyr_hi_crd:m1$))) = str(arm06a.pyr_hi_crd:m1$)
          pbuf$(s[3]+1,len(str(arm06a.nmtd_high_cr:m5$))) = str(arm06a.nmtd_high_cr:m5$)
          gosub output_print_buf

          lines=lines+15

          rem --- Print invoice history

          if lines+3>maxlines gosub lines_count

          rem --- Read customer detail records

          first=1
          printed=0
          custinv=0
          custapp=0
          custdis=0
          customer$=arm01a.firm_id$+artype$+arm01a.customer_id$
          read (art01_dev,key=customer$,dom=*next)

          rem --- Read next invoice header record

          while moreheaders
                art01_key$=key(art01_dev,end=*break)
                if pos(customer$=art01_key$)<>1 break
                read record (art01_dev) art01a$
                type$=fntype$(art01a.invoice_type$)
                if lines+1>maxlines gosub lines_count
                if first gosub invoice_heading

                dim pbuf$(pbufwidth)
                pbuf$(o[1],len(art01a.ar_inv_no$)) = art01a.ar_inv_no$
                pbuf$(o[2],len(fndate$(art01a.invoice_date$))) = str(fndate$(art01a.invoice_date$))
                pbuf$(o[3]+1,len(fndate$(art01a.inv_due_date$))) = str(fndate$(art01a.inv_due_date$))
                pbuf$(o[4]+1,len(art01a.ar_terms_code$)) = str(art01a.ar_terms_code$)
                pbuf$(o[5]+1,len(type$)) = str(type$)
                pbuf$(o[6]+1,len(str(art01a.invoice_amt:m1$))) = str(art01a.invoice_amt:m1$)
                pbuf$(o[9]+1,len(str(art01a.disc_allowed:m1$))) = str(art01a.disc_allowed:m1$)
                gosub output_print_buf

                lines=lines+1
                printed=1
                custinv=custinv+art01a.invoice_amt
                custdis=custdis+art01a.disc_allowed
                applied=0
                detail=0
                art01_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
                read (art11_dev,key=art01_key$,dom=*next)

                rem --- Read next invoice detail record

                while moredetail
                      k$=key(art11_dev,end=*break)
                      if pos(art01_key$=k$)<>1 break
                      read record (art11_dev) art11a$
                      detail=1
                      type$=fntype$(art11a.trans_type$)
                      if lines+1>maxlines gosub lines_count
                      if first gosub invoice_heading

                      dim pbuf$(pbufwidth)
                      pbuf$(o[2]+1,len(fndate$(art11a.trans_date$))) = str(fndate$(art11a.trans_date$))
                      pbuf$(o[3]+1,len(fndate$(art11a.refchk_no$))) = str(fndate$(art11a.refchk_no$))
                      pbuf$(o[5]+1,len(type$)) = str(type$)
                      pbuf$(o[7]+1,len(str(art11a.trans_amt:m1$))) = str(art11a.trans_amt:m1$)
                      pbuf$(o[9]+1,len(str(art11a.adjdisc_amt:m1$))) = str(art11a.adjdisc_amt:m1$)
                      gosub output_print_buf

                      lines=lines+1
                      applied=applied+art11a.trans_amt
                      custapp=custapp+art11a.trans_amt
                      custdis=custdis+art11a.adjdisc_amt
                wend

                rem --- Print invoice total and loop back for next invoice header

                if detail=0 continue
                balance=art01a.invoice_amt+applied
                if lines+1>maxlines gosub lines_count
                if first gosub invoice_heading
                dim pbuf$(pbufwidth)
                pbuf$((o[6]-6)+1,len("Total")) = str("Total")
                pbuf$(o[8]+1,len(str(balance:m1$))) = str(balance:m1$)
                gosub output_print_buf

                lines=lines+1

          wend
                
          rem --- Print customer total

          if printed=0 continue
          balance=custinv+custapp
          if lines+1>maxlines gosub lines_count

          dim pbuf$(pbufwidth)
          pbuf$((o[6]-15)+1,len("Customer Total")) = str("Customer Total")
          pbuf$(o[6]+1,len(str(custinv:m1$))) = str(custinv:m1$)
          pbuf$(o[7]+1,len(str(custapp:m1$))) = str(custapp:m1$)
          pbuf$(o[8]+1,len(str(balance:m1$))) = str(balance:m1$)
          pbuf$(o[9]+1,len(str(custdis:m1$))) = str(custdis:m1$)
          gosub output_print_buf

          lines=lines+1
          reportinv=reportinv+custinv
          reportapp=reportapp+custapp
          reportdis=reportdis+custdis

          rem --- Loop back for next Customer Master

    wend

done: rem --- All done

    goto std_exit

output_print_buf:

    OutVect!.addItem(pbuf$)

return


lines_count: rem --- Lines Count

    lines=heading+1
    
    dim pbuf$(pbufwidth)
    cust$ = "Customer: " + str(fnmask$(arm01a.customer_id$(1,customer_size),m0$)) + " " + arm01a.customer_name$

    pbuf$(1,len(cust$)) = cust$
    gosub output_print_buf

 

    lines=lines+1
    first=1
    return

profile_heading: rem --- Profile subheading

    if lines+2>maxlines gosub lines_count

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1,len(fnheader$("Profile Information",pbufwidth))) = fnheader$("Profile Information",pbufwidth)
    gosub output_print_buf
        
    lines=lines+2
    return

comments_heading: rem --- Comments subheading

    if lines+2>maxlines gosub lines_count

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1,len(fnheader$("Comments",pbufwidth))) = fnheader$("Comments",pbufwidth)
    gosub output_print_buf
        
    lines=lines+2
    return

shipto_heading: rem --- Ship-to subheading

    if lines+2>maxlines gosub lines_count

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1,len(fnheader$("Ship-To Address Information",pbufwidth))) = fnheader$("Ship-To Address Information",pbufwidth)
    gosub output_print_buf

    lines=lines+2
    first=0
    return

job_heading: rem --- Job number subheading

    if lines+2>maxlines gosub lines_count

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1,len(fnheader$("Customer Job Information",pbufwidth))) = fnheader$("Customer Job Information",pbufwidth)
    gosub output_print_buf
    lines=lines+2
    first=0
    return

detail_heading: rem --- Aging and Sales Summary subheading

    if lines+2>maxlines gosub lines_count
    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1,len(fnheader$("Aging and Sales Summary",pbufwidth))) = fnheader$("Aging and Sales Summary",pbufwidth)
    gosub output_print_buf
    lines=lines+2
    return

invoice_heading: rem --- Invoice history subheading

    if lines+3>maxlines gosub lines_count
    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1,len(fnheader$("Invoice History",pbufwidth))) = fnheader$("Invoice History",pbufwidth)
    gosub output_print_buf

    dim pbuf$(120)
    pbuf$(o[0]+1,len("Cust/Inv")) = "Cust/Inv"
    pbuf$(o[2]+1,len("Date")) = "Date"
    pbuf$(o[3]+1,len("Due/Ref")) = "Due/Ref"
    pbuf$(o[4]+1,len("TC")) = "TC"
    pbuf$(o[5]+1,len("Type")) = "Type"
    pbuf$((o[6]+m1-8)+1,len("Invoice")) = "Invoice"
    pbuf$((o[7]+m1-8)+1,len("Applied")) = "Applied"
    pbuf$((o[8]+m1-8)+1,len("Balance")) = "Balance"
    pbuf$((o[9]+m1-9)+1,len("Discount")) = "Discount"
    gosub output_print_buf

    lines=lines+3
    first=0
    return

rem --- Functions

rem --- fnyn$: Return Yes/No

    def fnyn$(q$)
        q1$="No"
        if q$="Y" q1$="Yes"
        return q1$
    fnend

rem --- fntype$: Return type description based on code value

    def fntype$(q$)
        q1$=q$
        if q$="S" q1$="Sale"
        if q$="C" q1$="Cash"
        if q$="F" q1$="Fin"
        if q$="A" q1$="Adj"
        if q$="V" q1$="Void"
        if q$="I" q1$="Inv"
        return q1$
    fnend

rem --- fncode$: Retrieve code record and return code description

    def fncode$(q,q$,q1$)
        dim q2$:q1$
        q2.code_desc$="(Not on File)"
        find record (q,key=q$,dom=*next) q2$
        q3$=q2.code_desc$
        return q3$
    fnend

rem --- Assemble and return subheading

    def fnheader$(q$,q)
        dim q1$(q,"-")
        q1=len(q$)+2
        q1$(15,q1)=" "+q$+" "
        return q1$
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),err=*next)
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
