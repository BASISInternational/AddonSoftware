rem --- Conversion Invoice/Finance Charge Register
rem --- Program arr_otherentry v8.0.0 06Jan2007 (arr_ja)
rem --- Created by adx_codeport.bbx v1.1.5 (01/06/2007 05:37:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem --- This register/update combination is used for both the Finance
rem --- Charge Register and the Conversion Invoice Register.

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="are-02",ids$[2]="ARE_FINCHG"
    files$[3]="arm-01",ids$[3]="ARM_CUSTMAST"
    files$[4]="arc_distcode",ids$[4]="ARC_DISTCODE"
    files$[5]="art-01",ids$[5]="ART_INVHDR"
    files$[6]="gls_params",ids$[6]="GLS_PARAMS"
    options$[2]="L"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    are02_dev=channels[2]
    arm01_dev=channels[3]
    arm10_dev=channels[4]
    art01_dev=channels[5]
    gls01_dev=channels[6]

rem --- Dimension string templates

    dim ars01a$:templates$[1],are02a$:templates$[2],arm01a$:templates$[3]
    dim arm10d$:templates$[4],art01a$:templates$[5],gls01a$:templates$[6]

rem --- Retrieve parameter records

    dim info$[20]
    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    source$=pgm(-2)
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    period=num(ars01a.current_per$)
    year=num(ars01a.current_year$)
    account_length=num(gls01a.acct_length$)
    max_acct_len=num(gls01a.max_acct_len$)
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
    m0=len(m0$)
    m1=len(m1$)
    application$="AR"
    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,application$,glw11$,gl$,status
    if status goto std_exit
    application$="OP"
    call stbl("+DIR_PGM")+"adc_application.aon",application$,info$[all]
    op$=info$[20]

rem --- Initializations

    headings=2
    dim headings$[headings],o[9],h[9]
    page=0
    units=0
    total=0
    discount=0
    width=132
    errors=0
    maxlines=59
    lines=maxlines+1
    more=1
    nf$="(Not on file)"
    when$=sysinfo.system_date$
    clock$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$

rem --- Initialize print positions

    o[0]=0
    o[1]=m0+33
    o[2]=o[1]+9
    o[3]=o[2]+6
    o[4]=o[3]+6
    o[5]=o[4]+10
    o[6]=o[5]+10
    o[7]=o[6]+10
    o[9]=width-m1
    o[8]=o[9]-m1
    for x=0 to 7
        h[x]=o[x]
    next x
    h[8]=(o[8]+m1)-7
    h[9]=(o[9]+m1)-9

rem --- Additional file opens

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    if gl$="Y"
       files$[1]="glm-01",ids$[1]="GLM_ACCT"
       files$[2]="glt-04",ids$[2]="GLE_DAILYDETAIL"
       files$[3]=glw11$,ids$[3]=""
       options$[3]="CL"
    endif
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    glt04_dev=channels[2]
    glw11_dev=channels[3]

rem --- Get user approval to proceed

    prompt$="Do you want to produce the "+cvs(sysinfo.task_desc$,2)+"?"
    call pgmdir$+"adc_yesno.aon",1,prompt$,2,answer$,fkey
    if fkey=4 goto std_exit
    if answer$<>"Y" goto std_exit

rem --- Should GL be updated (if it's being used)?

    answer$="N"
    prompt$="Do you want to post to the General Ledger when this register is updated?"
    if gl$="Y" call pgmdir$+"adc_yesno.aon",1,prompt$,2,answer$,fkey
    if fkey=4 goto std_exit
    if answer$<>"Y" gl$="N"

rem --- Open printer, start progress meter and position invoice file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","","",0,are02_dev,1,meter_num,status
    read (are02_dev,key=firm_id$,dom=*next)

rem --- Read next Invoice (are-02) record

    while more
          k$=key(are02_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (are02_dev) are02a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Retrieve the customer master record

          dim arm01a$:fattr(arm01a$)
          arm01a.firm_id$=firm_id$
          arm01a.customer_id$=are02a.customer_id$
          arm01a.customer_name$=nf$
          k$=arm01a.firm_id$+arm01a.customer_id$
          find record (arm01_dev,key=k$,dom=*next) arm01a$

          rem --- Print the invoice record

          if lines+1>maxlines gosub report_heading
          print (printer_dev) @(o[0]),fnmask$(arm01a.customer_id$(1,customer_size),m0$)," ",arm01a.customer_name$,
:                             @(o[1]),are02a.ar_inv_no$,@(o[2]),are02a.ar_dist_code$,@(o[3]),are02a.ar_terms_code$,
:                             @(o[4]),fndate$(are02a.invoice_date$),@(o[5]),fndate$(are02a.inv_due_date$),
:                             @(o[6]),fndate$(are02a.disc_date$),@(o[7]),are02a.invoice_type$,
:                             @(o[8]),are02a.invoice_amt:m1$,@(o[9]),are02a.discount_amt:m1$
          lines=lines+1
          total=total+are02a.invoice_amt
          discount=discount+are02a.discount_amt

          rem --- Update GL if it's being used and the update was requested

          if gl$<>"Y" continue
          dim arm10d$:fattr(arm10d$)
          arm10d.firm_id$=firm_id$
          arm10d.record_id_d$="D"
          arm10d.ar_dist_code$=are02a.ar_dist_code$
          k$=arm10d.firm_id$+arm10d.record_id_d$+arm10d.ar_dist_code$
          find record (arc_distcode_dev,key=k$,dom=*next) arm10d$
          account$=arm10d.gl_ar_acct$
          gldate$=are02a.invoice_date$
          amount=are02a.invoice_amt
          ref1$=fnmask$(arm01a.customer_id$(1,customer_size),m0$)
          ref2$=are02a.ar_inv_no$
          memo$=arm01a.customer_name$
          gosub glrecap
          account$=arm10d.gl_sls_acct$
          amount=-are02a.invoice_amt
          gosub glrecap

          rem --- Check GL posting date if GL is being used

          glstatus=0
          call stbl("+DIR_PGM")+"glc_datecheck.aon",are02a.invoice_date$,"N",period$,year$,glstatus
          if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,are02a.invoice_date$,glstatus,lines,errors,status

    rem --- Loop back for next Invoice record

    wend

rem --- All done

    if lines+2>maxlines gosub report_heading
    x$="Report Totals"
    print (printer_dev) ""
    print (printer_dev) @(o[8]-len(x$)),x$,@(o[8]),total:m1$,@(o[9]),discount:m1$

rem --- Destroy progress meter and run next overlay

    update$=pgmdir$+"aru_otherentry.aon"
    overlay$=update$
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if gl$="Y" overlay$=pgmdir$+"glr_recap.aon"
    run overlay$,err=std_exit

report_heading: rem --- Report Heading

    lines=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(h[1]),"Invoice",@(h[2]),"Dist",@(h[3]),"Terms",@(h[4]),"Invoice",@(h[5]),"Due",
:                       @(h[6]),"Discount"
    print (printer_dev) @(h[0]),"Customer",@(h[1]),"Number",@(h[2]),"Code",@(h[3]),"Code",@(h[4]),"Date",
:                       @(h[5]),"Date",@(h[6]),"Date",@(h[7]),"Type",@(h[8]),"Amount",@(h[9]),"Discount"
    lines=lines+2
    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    return

rem --- Functions

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
