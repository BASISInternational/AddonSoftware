rem --- Simple Invoice Printing/Detail
rem --- Program arr_invoices v8.0.0 01Dec2006 (arr_ub)
rem --- Created by adx_codeport.bbx v1.1.3 (12/01/2006 06:05:56)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="are-05",ids$[2]="ARE_INVHDR"
    files$[3]="are-15",ids$[3]="ARE_INVDET"
    files$[4]="arm-01",ids$[4]="ARM_CUSTMAST"
    files$[5]="arc_termcode",ids$[5]="ARC_TERMCODE"
    files$[6]="ars_report",ids$[6]="ARS_REPORT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    are05_dev=channels[2]
    are15_dev=channels[3]
    arm01_dev=channels[4]
    arm10_dev=channels[5]
    ars_report_dev=channels[6]

rem --- Dimension string templates

    dim ars01a$:templates$[1],are05a$:templates$[2],are15a$:templates$[3],arm01a$:templates$[4],
:       arm10a$:templates$[5],ars01b$:templates$[6]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    restart$=option!.getOptionData("PICK_CHECK")
    invoice$=option!.getOptionData("AR_INV_NO")
    message$=option!.getOptionData("PICK_TEXT")
    copies=num(option!.getOptionData("PICK_INTEGER"))
    copies=max(copies,1)
    address=30

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ars01b_key$=firm_id$+"AR02"
    find record (ars_report_dev,key=ars01b_key$,err=std_missing_params) ars01b$
    remit$=ars01b.addr_line_1$+ars01b.addr_line_2$+ars01b.city$+ars01b.state_code$+ars01b.zip_code$
    call pgmdir$+"adc_address.aon",remit$,24,3,9,address

    call pgmdir$+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call pgmdir$+"adc_getmask.aon","","AR","A","",m1$,0,0
    call pgmdir$+"adc_sizemask.aon",ars01a.amount_mask$,m1,8,13
    call pgmdir$+"adc_getmask.aon","","AR","U","",m2$,0,0
    call pgmdir$+"adc_getmask.aon","","AR","R","",m3$,0,0
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)

rem --- Initializations

    precision 4
    dim bar$(m1,"-"),o[5],h[1]
    fkey=0
    page=0
    offset=0
    width=80
    lines=0
    length=(address*4)+1
    maxlines=59
    moreheaders=1
    moredetail=1
    when$=sysinfo.system_date$
    clock$=""
    answer$="Y"
    prompt$="PRINT_TEST_PATTERN"
    nf$="(Not on file)"

rem --- Initialize print positions

    w=max(m0,8)
    o[0]=offset
    o[1]=offset+5
    o[2]=offset+14
    o[5]=width-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    h[0]=offset+33
    h[1]=width-w
   
rem --- Initialize record template fields for printing test patterns

    dim address$(5*address,"X")
    original$=message$
    arm01a.customer_id$="999999"
    arm01a.customer_name$=fill(30,"X")
    are05a.ar_inv_no$="9999999"
    invoice_date$="mm/dd/yy"
    arm10a.code_desc$=fill(20,"X")
    linedate$="mm/dd/yy"
    are15a.line_no$="999"
    are15a.description$=fill(30,"X")
    message$=fill(30,"-")
    message$(11,9)=" Message "
    message$(1,1)="<"
    message$(30,1)=">"
    are15a.units=fntestvalue(m2$)
    are15a.unit_price=fntestvalue(m3$)
    are15a.ext_price=fntestvalue(m1$)
    total=are15a.ext_price
    limit=maxlines-4

rem --- Open the printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Print test patterns until the user is satisfied

    while answer$="Y"
          call pgmdir$+"adc_yesno.aon",1,prompt$,1,answer$,fkey
          if fkey=4 break
          if answer$="N" break

          rem --- Print test pattern

          page=0
          lines=0
          gosub heading
          while lines<limit
                gosub detail
          wend
          gosub totals
          prompt$="PRINT_ANOTHER_PATTERN"
    wend
    if fkey=4 goto std_exit
    message$=original$

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,are05_dev,1,meter_num,status
    k$=firm_id$
    if restart$<>"N" k$=k$+invoice$(1,max(0,len(invoice$)-1)),invoice$=firm_id$+invoice$
    read (are05_dev,key=k$,dom=*next)

rem --- Read next Invoice Header (are-05) record

    while moreheaders

        read record (are05_dev,end=*break) are05a$
        if are05a.firm_id$<>firm_id$ break
        if restart$<>"N" if are05a$(1,len(invoice$))<invoice$ goto next_wend
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        rem --- Skip voided invoices

        if are05a.sim_inv_type$="V" continue

        rem --- Initialize invoice header fields

        invoice$=are05a.firm_id$+are05a.ar_inv_no$
        invoice_date$=fndate$(are05a.inv_date$)
        total=0

        rem --- Retrieve Customer Master (arm-01) record

        dim arm01a$:fattr(arm01a$)
        arm01a.firm_id$=firm_id$
        arm01a.customer_id$=are05a.customer_id$
        arm01a.customer_name$=nf$
        k$=arm01a.firm_id$+arm01a.customer_id$ 
        find record (arm01_dev,key=k$,dom=*next) arm01a$
        address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+
:                arm01a.addr_line_4$+arm01a.city$+arm01a.state_code$+
:                arm01a.zip_code$+arm01a.country$
        call pgmdir$+"adc_address.aon",address$,24,5,9,address

        rem --- Retrieve Terms Code (arm-10a) Description

        dim arm10a$:fattr(arm10a$)
        arm10a.firm_id$=firm_id$
        arm10a.record_id_a$="A"
        arm10a.ar_terms_code$=are05a.ar_terms_code$
        arm10a.code_desc$=nf$
        k$=arm10a.firm_id$+arm10a.record_id_a$+arm10a.ar_terms_code$ 
        find record (arm10_dev,key=k$,dom=*next) arm10a$

        rem --- Print the requested number of copies of the invoice

        for copy=1 to copies
  
        rem --- Print the invoice heading
    
        page=0
        lines=0
        total=0
        gosub heading

        rem --- Position the Invoice Detail (are-15) file

        read (are15_dev,key=invoice$,dom=*next)

        rem --- Read the next Invoice Detail (are-15) record

        while moredetail
            k$=key(are15_dev,end=*break)
            if pos(invoice$=k$)<>1 break
            read record (are15_dev) are15a$
            total=total+are15a.ext_price
            memo=are15a.units+are15a.ext_price=0
            if len(are15a.trns_date$)=8 then
                linedate$=fndate$(are15a.trns_date$)
            else
                linedate$=are15a.trns_date$
            endif
            rem --- Print the detail line

            if lines+4>maxlines gosub overflow
            if memo gosub memo
:              else gosub detail

next_wend:
        wend

          rem --- Print the total and move on to the next copy

          gosub totals
          next copy

    rem --- Loop back for next Invoice Header

    wend

rem --- All done

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    goto std_exit

heading: rem --- Print the invoice heading

    page=page+1
    lines=headings+16
    print (printer_dev) 'FF',@(h[0]),"*************"
    print (printer_dev) @(h[0]),"** Invoice **"
    print (printer_dev) @(h[0]),"*************"
    print (printer_dev) ""
    print (printer_dev) @(o[0]),ars01b.name$,@(h[1]-5),"Page ",str(page)
    print (printer_dev) @(o[0]),remit$(1,address)
    print (printer_dev) @(o[0]),remit$(address+1,address),@(h[1]-5),"Date ",invoice_date$
    print (printer_dev) @(o[0]),remit$((address*2)+1,address)
    print (printer_dev) @(h[1]-9),"Customer ",fnmask$(arm01a.customer_id$(1,customer_size),m0$)
    print (printer_dev) ""
    print (printer_dev) @(o[0]),"Sold to ",arm01a.customer_name$,
:                       @(h[1]-8),"Invoice ",are05a.ar_inv_no$
    for x=1 to length step address
        if cvs(address$(x,address),2)<>"" 
           print (printer_dev) @(offset+8),address$(x,address)
           lines=lines+1
        endif
    next x
    print (printer_dev) ""
    print (printer_dev) @(o[0]),"  Terms ",arm10a.code_desc$
    print (printer_dev) ""
    print (printer_dev) @(o[0]),"Seq",@(o[1]),"Date",@(o[2]),"Memo",@(o[3]+m2-4),"Qty",
:                       @(o[4]+m3-6),"Price",@(o[5]+m1-10),"Extension"
    return

detail: rem --- Print an invoice detail line

    print (printer_dev) ""
    print (printer_dev) @(o[0]),are15a.line_no$,@(o[1]),linedate$,@(o[2]),are15a.description$,
:                       @(o[3]),are15a.units:m2$,@(o[4]),are15a.unit_price:m3$,
:                       @(o[5]),are15a.ext_price:m1$
    lines=lines+2
    return

memo: rem --- Print a memo line

    print (printer_dev)@(o[0]),are15a.line_no$,@(o[1]),linedate$,@(o[2]),are15a.description$
    lines=lines+1
    return

totals: rem --- Print the invoice total

    print (printer_dev) @(o[5]),bar$
    print (printer_dev) @(o[5]-6),"Total ",@(o[5]),total:m1$
    print (printer_dev) ""
    print (printer_dev) @(o[2]),message$
    return

overflow: rem --- Multi-page invoice

    print (printer_dev) ""
    print (printer_dev) @(o[5]),"Continued"
    gosub heading
    return

rem --- Functions

rem --- fntestvalue: Return maximum numeric value for a given mask

    def fntestvalue(q$)
        q1$=""
        for q=1 to len(q$)
            if pos(q$(q,1)="#0") q1$=q1$+"9"
            if q$(q,1)="." q1$=q1$+"."
        next q
        q=num(q1$)
        return q
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
