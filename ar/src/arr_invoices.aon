rem --- Simple Invoice Printing/Detail
rem --- Program arr_invoices v8.0.0 01Dec2006 (arr_ub)
rem --- Created by adx_codeport.bbx v1.1.3 (12/01/2006 06:05:56)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    
rem --- Set Print Path

    docdir$="c:\PROGRAM FILES\BASIS\BARISTA\DOCUMENTS\"


rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="are-05",ids$[2]="ARE_INVHDR"
    files$[3]="are-15",ids$[3]="ARE_INVDET"
    files$[4]="arm-01",ids$[4]="ARM_CUSTMAST"
    files$[5]="arc_termcode",ids$[5]="ARC_TERMCODE"
    files$[6]="ars_report",ids$[6]="ARS_REPORT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    are05_dev=channels[2]
    are15_dev=channels[3]
    arm01_dev=channels[4]
    arm10_dev=channels[5]
    ars_report_dev=channels[6]

rem --- Dimension string templates

    dim ars01a$:templates$[1],are05a$:templates$[2],are15a$:templates$[3],arm01a$:templates$[4],
:       arm10a$:templates$[5],ars01b$:templates$[6]

rem --- Assign form input values to local variables

    restart$=option!.getOptionData("PICK_CHECK")
    invoice$=option!.getOptionData("AR_INV_NO")
    message$=option!.getOptionData("PICK_TEXT")
    copies=num(option!.getOptionData("PICK_INTEGER"))
    copies=max(copies,1)
    address=30

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ars01b_key$=firm_id$+"AR02"
    find record (ars_report_dev,key=ars01b_key$,err=std_missing_params) ars01b$
    remit$=ars01b.addr_line_1$+ars01b.addr_line_2$+ars01b.city$+ars01b.state_code$+ars01b.zip_code$
    call pgmdir$+"adc_address.aon",remit$,24,3,9,address
        remit$=ars01b.name$+remit$

    call pgmdir$+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call pgmdir$+"adc_getmask.aon","","AR","A","",m1$,0,0
    call pgmdir$+"adc_sizemask.aon",ars01a.amount_mask$,m1,8,13
    call pgmdir$+"adc_getmask.aon","","AR","U","",m2$,0,0
    call pgmdir$+"adc_getmask.aon","","AR","R","",m3$,0,0
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)

rem --- Initializations

    precision 4
    dim bar$(m1,"-"),o[5],h[1]
    fkey=0
    page=0
    offset=0
    width=80
    lines=0
    address=30
    length=(address*4)+1
    maxlines=59
    moreheaders=1
    moredetail=1
    when$=sysinfo.system_date$
    clock$=""
    answer$="Y"
    msg_id$="PRINT_TEST_PATTERN"
    nf$="(Not on file)"

rem --- Initialize print positions

    w=max(m0,8)
    o[0]=offset
    o[1]=offset+5
    o[2]=offset+14
    o[5]=width-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    h[0]=offset+33
    h[1]=width-w
   
rem --- Initialize record template fields for printing test patterns

    dim address$(5*address,"X")
    original$=message$
    arm01a.customer_id$="999999"
    arm01a.customer_name$=fill(30,"X")
    are05a.ar_inv_no$="9999999"
    invoice_date$="mm/dd/yy"
    arm10a.code_desc$=fill(20,"X")
    linedate$="mm/dd/yy"
    are15a.line_no$="999"
    are15a.description$=fill(30,"X")
    message$=fill(30,"-")
    message$(11,9)=" Message "
    message$(1,1)="<"
    message$(30,1)=">"
    are15a.units=fntestvalue(m2$)
    are15a.unit_price=fntestvalue(m3$)
    are15a.ext_price=fntestvalue(m1$)
    total=are15a.ext_price
    limit=maxlines-4

rem --- Open the printer


let textfont!= new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,10)
let boldfont!=new java.awt.Font("Arial",java.awt.Font.PLAIN,12)
let boldfont2!=new java.awt.Font("Arial",java.awt.Font.BOLD,14)
let bigboldfont!=new java.awt.Font("Arial",java.awt.Font.BOLD,18)
let largefont!=new java.awt.Font("Arial",java.awt.Font.BOLD,26)
let italicFont!=new java.awt.Font("Times New Roman",java.awt.Font.ITALIC,10)
let textfont2!= new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,8)
let textfont3!= new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,9)

red!=new java.awt.Color(red)
white!=new java.awt.Color(white)
grey!=new java.awt.Color(grey)

LET requestAttributes!=new javax.print.attribute.HashPrintRequestAttributeSet()
requestAttributes!.add(javax.print.attribute.standard.MediaSizeName.NA_LETTER)
requestAttributes!.add(javax.print.attribute.standard.OrientationRequested.PORTRAIT)

units=javax.print.attribute.standard.MediaPrintableArea.INCH
x!=new java.lang.Float(0.3).floatValue()
y!=new java.lang.Float(0.3).floatValue()
w!=new java.lang.Float(7.9).floatValue()
h!=new java.lang.Float(10.4).floatValue()
a!=new javax.print.attribute.standard.MediaPrintableArea(x!,y!,w!,h!,units)

requestAttributes!.add(a!)





 

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,are05_dev,1,meter_num,status
    k$=firm_id$
    if restart$<>"N" k$=k$+invoice$(1,max(0,len(invoice$)-1)),invoice$=firm_id$+invoice$
    read (are05_dev,key=k$,dom=*next)

rem --- Read next Invoice Header (are-05) record

    while moreheaders

        read record (are05_dev,end=*break) are05a$
        if are05a.firm_id$<>firm_id$ break
        if restart$<>"N" if are05a$(1,len(invoice$))<invoice$ goto next_wend
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        rem --- Skip voided invoices

        if are05a.sim_inv_type$="V" continue

        rem --- Initialize invoice header fields

myAPI!=BBjAPI()
MyPrinter!=BBjAPI()
prtr_dev=unt
open (prtr_dev,err=printer)docdIr$+"invoice"+are05a.ar_inv_no$+".pdf"
CLOSE (prtr_dev)
ERASE docdir$+"invoice"+are05a.ar_inv_no$+".pdf"
printer:
doc!=myPrinter!.getBBjPDFForm(docdir$+"INVOICE"+are05a.ar_inv_no$+".pdf",requestAttributes!)

        invoice$=are05a.firm_id$+are05a.ar_inv_no$
        invoice_date$=fndate$(are05a.inv_date$)
        total=0



       

        rem --- Retrieve Customer Master (arm-01) record

        dim arm01a$:fattr(arm01a$)
        arm01a.firm_id$=firm_id$
        arm01a.customer_id$=are05a.customer_id$
        arm01a.customer_name$=nf$
        k$=arm01a.firm_id$+arm01a.customer_id$ 
        find record (arm01_dev,key=k$,dom=*next) arm01a$
        address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+
:                arm01a.addr_line_4$+arm01a.city$+arm01a.state_code$+
:                arm01a.zip_code$+arm01a.country$
        call pgmdir$+"adc_address.aon",address$,24,5,9,address

        rem --- Retrieve Terms Code (arm-10a) Description

        dim arm10a$:fattr(arm10a$)
        arm10a.firm_id$=firm_id$
        arm10a.record_id_a$="A"
        arm10a.ar_terms_code$=are05a.ar_terms_code$
        arm10a.code_desc$=nf$
        k$=arm10a.firm_id$+arm10a.record_id_a$+arm10a.ar_terms_code$ 
        find record (arm10_dev,key=k$,dom=*next) arm10a$

        rem --- Print the requested number of copies of the invoice

        for copy=1 to copies

         
         page!=doc!.createPage()
  
        rem --- Print the invoice heading
    
        page=0
        lines=0
        total=0
        gosub heading

        rem --- Position the Invoice Detail (are-15) file

        read (are15_dev,key=invoice$,dom=*next)

        rem --- Read the next Invoice Detail (are-15) record

        while moredetail
            k$=key(are15_dev,end=*break)
            if pos(invoice$=k$)<>1 break
            read record (are15_dev) are15a$
            total=total+are15a.ext_price
            memo=are15a.units+are15a.ext_price=0
            if len(are15a.trns_date$)=8 then
                linedate$=fndate$(are15a.trns_date$)
            else
                linedate$=are15a.trns_date$
            endif
            rem --- Print the detail line

            if lines+4>maxlines gosub overflow
            if memo gosub memo
:              else gosub detail

next_wend:
        wend

          rem --- Print the total and move on to the next copy

          gosub totals
          next copy

    rem --- Loop back for next Invoice Header

    wend

rem --- All done

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    goto std_exit

heading: rem --- Print the invoice heading

    page=page+1

image!=page!.newImage()
image!.setURL("FILE:c:\apps\aon\logos\fli001.jpg")
image!.setPosition(new java.awt.Point(160,20))
image!.setWidth(260)
image!.setHeight(80)   

invoice!=page!.newParagraph()
invoice!.setHorizontalFill(1)
invoice!.setPosition(new java.awt.Point(210,0))
invoice!.setText("ORIGINAL INVOICE")
invoice!.setFont(textfont!)
invoice!.setTextColor(myAPI!.makeColor("RED")) 


pageno!=page!.newParagraph()
pageno!.setHorizontalFill(1)
pageno!.setPosition(new java.awt.Point(370,90))
pageno!.setText("Page: "+str(page))
pageno!.setFont(textfont!)

invoiceno!=page!.newParagraph()
invoiceno!.setHorizontalFill(1)
invoiceno!.setPosition(new java.awt.Point(370,120))
invoiceno!.setText("Invoice: "+are05a.ar_inv_no$)
invoiceno!.setFont(textfont!)


remit1!=page!.newParagraph()
remit1!.setHorizontalFill(1)
remit1!.setPosition(new java.awt.Point(10,90))
remit1!.setText("Remit To:"+remit$(1,address))
remit1!.setFont(textfont!)

remit2!=page!.newParagraph()
remit2!.setHorizontalFill(1)
remit2!.setPosition(new java.awt.Point(40,105))
remit2!.setText(remit$(31,address))
remit2!.setFont(textfont!)

remit3!=page!.newParagraph()
remit3!.setHorizontalFill(1)
remit3!.setPosition(new java.awt.Point(40,120))
remit3!.setText(remit$(61,address))
remit3!.setFont(textfont!)

remit4!=page!.newParagraph()
remit4!.setHorizontalFill(1)
remit4!.setPosition(new java.awt.Point(40,135))
remit4!.setText(remit$(91,address))
remit4!.setFont(textfont!)

invdt!=page!.newParagraph()
invdt!.setHorizontalFill(1)
invdt!.setPosition(new java.awt.Point(370,105))
invdt!.setText("Date: "+invoice_date$)
invdt!.setFont(textfont!)

cust!=page!.newParagraph()
cust!.setHorizontalFill(1)
cust!.setPosition(new java.awt.Point(370,135))
cust!.setText("Customer: "+fnmask$(arm01a.customer_id$(1,customer_size),m0$))
cust!.setFont(textfont!)

name!=page!.newParagraph()
name!.setHorizontalFill(1)
name!.setPosition(new java.awt.Point(20,140))
name!.setText("Sold to:" +arm01a.customer_name$)
name!.setFont(textfont!)



add1!=page!.newParagraph()
add1!.setHorizontalFill(1)
add1!.setPosition(new java.awt.Point(40,155))
add1!.setText(address$(1,address))
add1!.setFont(textfont!)

add2!=page!.newParagraph()
add2!.setHorizontalFill(1)
add2!.setPosition(new java.awt.Point(40,170))
add2!.setText(address$(31,address))
add2!.setFont(textfont!)

add3!=page!.newParagraph()
add3!.setHorizontalFill(1)
add3!.setPosition(new java.awt.Point(40,185))
add3!.setText(address$(61,address))
add3!.setFont(textfont!)

add4!=page!.newParagraph()
add4!.setHorizontalFill(1)
add4!.setPosition(new java.awt.Point(40,200))
add4!.setText(address$(91,address))
add4!.setFont(textfont!)

add5!=page!.newParagraph()
add5!.setHorizontalFill(1)
add5!.setPosition(new java.awt.Point(40,215))
add5!.setText(address$(121,address))
add5!.setFont(textfont!)

add6!=page!.newParagraph()
add6!.setHorizontalFill(1)
add6!.setPosition(new java.awt.Point(40,230))
add6!.setText(address$(151,address))
add6!.setFont(textfont!)

    
term!=page!.newParagraph()
term!.setHorizontalFill(1)
term!.setPosition(new java.awt.Point(40,220))
term!.setText("Terms:"+arm10a.code_desc$)
term!.setFont(textfont!)

ribb1!=page!.newParagraph()
ribb1!.setHorizontalFill(1)
ribb1!.setPosition(new java.awt.Point(0,240))
ribb1!.setText("Seq")
ribb1!.setFont(textfont!)

ribb2!=page!.newParagraph()
ribb2!.setHorizontalFill(1)
ribb2!.setPosition(new java.awt.Point(40,240))
ribb2!.setText("Date")
ribb2!.setFont(textfont!)

ribb3!=page!.newParagraph()
ribb3!.setHorizontalFill(1)
ribb3!.setPosition(new java.awt.Point(100,240))
ribb3!.setText("Memo")
ribb3!.setFont(textfont!)

ribb4!=page!.newParagraph()
ribb4!.setHorizontalFill(1)
ribb4!.setPosition(new java.awt.Point(370,240))
ribb4!.setText("Qty")
ribb4!.setFont(textfont!)

ribb5!=page!.newParagraph()
ribb5!.setHorizontalFill(1)
ribb5!.setPosition(new java.awt.Point(410,240))
ribb5!.setText("Price")
ribb5!.setFont(textfont!)

ribb6!=page!.newParagraph()
ribb6!.setHorizontalFill(1)
ribb6!.setPosition(new java.awt.Point(460,240))
ribb6!.setText("Extension")
ribb6!.setFont(textfont!)

page!.add(image!)
page!.add(invoice!)
page!.add(pageno!)
page!.add(remit1!) 
page!.add(remit2!)
page!.add(remit3!)
page!.add(invdt!)
page!.add(cust!)
page!.add(invoiceno!)
page!.add(name!)
page!.add(add1!)
page!.add(add2!)
page!.add(add3!)
page!.add(add4!)
page!.add(add5!)
page!.add(add6!)
page!.add(ribb1!)
page!.add(ribb2!)
page!.add(ribb3!)
page!.add(ribb4!)
page!.add(ribb5!)
page!.add(ribb6!)

                       

    return

detail: rem --- Print an invoice detail line


line!=page!.newParagraph()
line!.setHorizontalFill(1)
line!.setPosition(new java.awt.Point(0,240+((lines+1)*15)))
line!.setText(are15a.line_no$)
line!.setFont(textfont!)

ldate!=page!.newParagraph()
ldate!.setHorizontalFill(1)
ldate!.setPosition(new java.awt.Point(46,240+((lines+1)*15)))
ldate!.setText(linedate$)
ldate!.setFont(textfont!)

memo!=page!.newParagraph()
memo!.setHorizontalFill(1)
memo!.setPosition(new java.awt.Point(100,240+((lines+1)*15)))
memo!.setText(are15a.description$)
memo!.setFont(textfont!)   

unit!=page!.newParagraph()
unit!.setHorizontalFill(1)
unit!.setPosition(new java.awt.Point(370,240+((lines+1)*15)))
unit!.setText(str(are15a.units:m2$))
unit!.setFont(textfont!)   

price!=page!.newParagraph()
price!.setHorizontalFill(1)
price!.setPosition(new java.awt.Point(410,240+((lines+1)*15)))
price!.setText(str(are15a.unit_price:m3$))
price!.setFont(textfont!)   

extsn!=page!.newParagraph()
extsn!.setHorizontalFill(1)
extsn!.setPosition(new java.awt.Point(460,240+((lines+1)*15)))
extsn!.setText(str(are15a.ext_price:m1$))
extsn!.setFont(textfont!)   

lines=lines+2

page!.add(line!)
page!.add(ldate!)
page!.add(memo!)
page!.add(unit!)
page!.add(price!)
page!.add(extsn!)

return

memo: rem --- Print a memo line

memo1!=page!.newParagraph()
memo1!.setHorizontalFill(1)
memo1!.setPosition(new java.awt.Point(100,240+(lines+1*15)))
memo1!.setText(are15a.description$)
memo1!.setFont(textfont!)   

line1!=page!.newParagraph()
line1!.setHorizontalFill(1)
line1!.setPosition(new java.awt.Point(0,240+(lines+1*15)))
line1!.setText(are15a.line_no$)
line1!.setFont(textfont!)

ldate1!=page!.newParagraph()
ldate1!.setHorizontalFill(1)
ldate1!.setPosition(new java.awt.Point(46,240+(lines+1*15)))
ldate1!.setText(linedate$)
ldate1!.setFont(textfont!)
   
lines=lines+1

page!.add(line1!)
page!.add(ldate1!)
page!.add(memo1!)

return

totals: rem --- Print the invoice total

bar!=page!.newParagraph()
bar!.setHorizontalFill(1)
bar!.setPosition(new java.awt.Point(460,540))
bar!.setText(bar$)
bar!.setFont(textfont!)

tottext!=page!.newParagraph()
tottext!.setHorizontalFill(1)
tottext!.setPosition(new java.awt.Point(330,565))
tottext!.setText("Total:")
tottext!.setFont(textfont!)

total!=page!.newParagraph()
total!.setHorizontalFill(1)
total!.setPosition(new java.awt.Point(460,565))
total!.setText(str(total:m1$))
total!.setFont(textfont!)

message!=page!.newParagraph()
message!.setHorizontalFill(1)
message!.setPosition(new java.awt.Point(46,240+(lines*15)))
message!.setText(message$)
message!.setFont(textfont!)

page!.add(bar!)
page!.add(tottext!)
page!.add(total!)
page!.add(message!)

doc!.print()


   
    return

overflow: rem --- Multi-page invoice

    print (printer_dev) ""
    print (printer_dev) @(o[5]),"Continued"
    gosub heading
    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- Functions

rem --- fntestvalue: Return maximum numeric value for a given mask

    def fntestvalue(q$)
        q1$=""
        for q=1 to len(q$)
            if pos(q$(q,1)="#0") q1$=q1$+"9"
            if q$(q,1)="." q1$=q1$+"."
        next q
        q=num(q1$)
        return q
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
