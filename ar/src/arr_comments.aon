rem apr - Customer Comment Listing
rem Program apr_comments v8.0.0 25Dec2006 (arr_ob)
rem Created by adx_progconv.bbx v1.0.3 (12/25/2006 01:04:09)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-02"
    files$[4]="arm-05"
    files$[5]="arm-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm05_dev=channels[4]
    arm10_dev=channels[5]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm02a$:templates$[3],arm05a$:templates$[4],arm10a$:templates$[5]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="arm-10F"
    ids$[3]="arm-10H"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],arm10f$:templates$[2],arm10h$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    sequence$=fnget_fld_data$(table$,"dsp_report_seq")
    begsales$=fnget_fld_data$(table$,"salesperson_1")
    endsales$=fnget_fld_data$(table$,"salesperson_2")
    begterr$=fnget_fld_data$(table$,"territory_1")
    endterr$=fnget_fld_data$(table$,"territory_2")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    customer_size=num(ars01a.customer_size$)
    m0$=ars01a.customer_output$
    m8$="(###)-###-####"
    m0=len(m0$)
    m8=len(m8$)

rem --- Initializations

    headings=1
    dim headings$[headings],o[3]
    done=0
    page=0
    width=80
    total=0
    maxlines=59
    moreheaders=1
    moredetail=1
    lines=maxlines+1
    when$=sysinfo.system_date$
    clock$=""
    lastcode$=""
    nf$="(Not on File)"
    keynum=1
    begvalue$=begsales$
    x$=" By Salesperson"
    if sequence$="T"
       keynum=2
       begvalue$=begterr$
       x$=" By Territory"
    endif
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+x$

rem --- Initialize print positions

    o[0]=0
    o[1]=max(m0+1,7)
    o[2]=o[1]+32
    o[3]=width-m8
    cw=min(20,o[3]-o[2]-1)

rem --- Open printer, start progress meter and position Customer Master file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","","",0,arm01_dev,1,meter_num,status
    read (arm02_dev,knum=keynum,key=firm_id$+begvalue$,dom=*next)

rem --- Read next Customer Detail (arm-02) record

    while moreheaders
          arm02_key$=key(arm02_dev,knum=keynum,end=*break)
          if pos(firm_id$=arm02_key$)<>1 break
          read record (arm02_dev,knum=keynum,key=arm02_key$) arm02a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if sequence$="S" 
:            if endsales$<>""
:               if arm02a.slspsn_code$>endsales$ break
          if sequence$="T" 
:            if endterr$<>""
:               if arm02a.territory$>endterr$ break

          rem --- Level break?

          if sequence$="S" 
:            if arm02a.slspsn_code$<>lastcode$ gosub salesperson
          if sequence$="T" 
:            if arm02a.territory$<>lastcode$ gosub territory

          rem --- Retrieve the Customer Master (arm-01) record

          arm01_key$=arm02a.firm_id$+arm02a.customer_id$
          find record (arm01_dev,key=arm01_key$,dom=*continue) arm01a$

          rem --- Initializations for this customer

          dim continued$(width)
          first=1
          phone$=""
          if cvs(arm01a.phone_no$,2)<>"" phone$=fnmask$(arm01a.phone_no$,m8$)

          rem --- Position Customer Comments (arm-05) file

          read (arm05_dev,key=arm01_key$,dom=*next)

          rem --- Read next Customer Comments (arm-05) record

          while moredetail
                k$=key(arm05_dev,end=*break)
                if pos(arm01_key$=k$)<>1 break
                read record (arm05_dev,key=k$) arm05a$

                rem --- If this is the first comment print the customer info

                if first gosub print_customer

                rem --- Print the comment line

                if lines+1>maxlines gosub report_heading
                print (printer_dev) @(o[1]),arm05a.std_comments$
                lines=lines+1

                rem --- Loop back for next comment

          wend

          rem --- Loop back for next customer record

    wend

rem --- All done

    if total goto std_exit
    done=1
    if lines+2>maxlines gosub report_heading
    print (printer_dev) ""
    print (printer_dev) "No comments found"
    goto std_exit

report_heading: rem --- Report heading

    lines=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if done return
    print (printer_dev) ""
    print (printer_dev) code$
    print (printer_dev) ""
    print (printer_dev) @(o[0]),"Customer",@(o[2]),"Contact",@(o[3]),"Telephone"
    lines=lines+4
    if cvs(continued$,2)<>""
       print (printer_dev) ""
       print (printer_dev) @(o[0]),continued$
       print (printer_dev) ""
       lines=lines+3
    endif
    return

print_customer: rem --- Print customer information

    if lines+4>maxlines gosub report_heading
    first=0
    total=total+1
    print (printer_dev) ""
    print (printer_dev) @(o[0]),fnmask$(arm01a.customer_id$(1,customer_size),m0$),@(o[1]),arm01a.customer_name$,
:                       @(o[2]),arm01a.contact_name$(1,cw),@(o[3]),phone$
    print (printer_dev) ""
    lines=lines+3
    continued$(o[0]+1)=fnmask$(arm01a.customer_id$(1,customer_size),m0$)
    continued$(o[1])=arm01a.customer_name$
    continued$(o[2])="(Continued)"
    return

salesperson: rem --- Retrieve salesperson code and description

    dim arm10f$:fattr(arm10f$)
    arm10f.firm_id$=firm_id$
    arm10f.slspsn_code$=arm02a.slspsn_code$
    arm10f.code_desc$=nf$
    arm10_key$=arm10f.firm_id$+"F"+arm10f.slspsn_code$
    find record (arm10_dev,key=arm10_key$,dom=*next) arm10f$
    lastcode$=arm10f.slspsn_code$
    code$="Salesperson "+arm10f.slspsn_code$+" "+arm10f.code_desc$
    lines=maxlines+1
    return

territory: rem --- Retrieve territory code and description

    dim arm10h$:fattr(arm10h$)
    arm10h.firm_id$=firm_id$
    arm10h.territory$=arm02a.territory$
    arm10h.code_desc$=nf$
    arm10_key$=arm10h.firm_id$+"F"+arm10h.territory$
    find record (arm10_dev,key=arm10_key$,dom=*next) arm10h$
    lastcode$=arm10h.territory$
    code$="Territory "+arm10h.territory$+" "+arm10h.code_desc$
    lines=maxlines+1
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
