rem --- Monthly Cash Receipts Journal (Report)
rem --- Program arr_cashjournal v8.0.0 31Dec2006 (arr_gb)
rem --- Created by adx_codeport.bbx v1.1.5 (12/31/2006 01:37:08)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

            setesc std_error
            seterr std_error

rem --- Document initializations

            OutVect!=bbjAPI().getSysGui().makeVector()
            HdrVect!=bbjAPI().getSysGui().makeVector()
            BrkVect!=bbjAPI().getSysGui().makeVector()
            TotVect!=bbjAPI().getSysGui().makeVector()
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")
            rep_prog$=pgm(-2)

rem --- Retrieve the program path

            pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+SYSINFO",err=*next)
            firm_id$=sysinfo.firm_id$
            
            milestone=50
            milestone=num(stbl("+MILESTONE",err=*next),err=*next)


rem --- Open/Lock files

            files=12,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            files$[1]="ars_params",ids$[1]="ARS_PARAMS"
            files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
            files$[3]="arm-02",ids$[3]="ARM_CUSTDET"
            files$[4]="arc_cashcode",ids$[4]="ARC_CASHCODE"
            files$[5]="ART_INVHEADER",ids$[5]="art_invheader"; rem << WAS: art-01",ids$[5]="ART_INVHDR"
            files$[6]="ART_CASHHEADER",ids$[6]="ART_CASHHEADER"; REM << was: art-06",ids$[6]="ART_CASHHDR"
            files$[7]="ART_TRANSACTIONS",ids$[7]="ART_TRANSACTIONS"; REM <<was: art-11",ids$[7]="ART_INVDET"
            files$[8]="ART_TRANSACTIONS",ids$[8]="ART_TRANSACTIONS"; REM <<was: art-16",ids$[8]="ART_CASHDET"
            files$[9]="ART_CASHPOST",ids$[9]="ART_CASHPOST"; REM <<was: art-26",ids$[9]="ART_CASHGL"
            files$[10]="arw-07",IDS$[10]="ARW_CASHJOURNAL"
            files$[11]="gls_params",ids$[11]="GLS_PARAMS"
            files$[12]="arc_distcode",ids$[12]="ARC_DISTCODE"
            options$[10]="CL"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit_no_update
            ars01_dev=channels[1]
            arm01_dev=channels[2]
            arm02_dev=channels[3]
            arc_cashcode_dev=channels[4]
            invheader_dev=channels[5]
            cashheader_dev=channels[6]
            artrans_dev=channels[7]
            artrans2_dev=channels[8]
            cashpost_dev=channels[9]
            arw07_dev=channels[10]
            gls01_dev=channels[11]
            arc_distcode_dev=channels[12]

rem --- Dimension string templates

            dim ars01a$:templates$[1],arm01a$:templates$[2],arm02a$:templates$[3]
            dim arm10c$:templates$[4],invheader$:templates$[5],cashheader$:templates$[6]
            dim artrans$:templates$[7],artrans2$:templates$[8],cashpost$:templates$[9]
            dim arw07a$:templates$[10],gls01a$:templates$[11],arm10d$:templates$[12]

rem --- Assign form input values to local variables

            sequence$=option!.getOptionData("REPORT_SEQUENCE")
            begcust$=option!.getOptionData("CUSTOMER_ID_1")
            endcust$=option!.getOptionData("CUSTOMER_ID_2")
            begalt$=option!.getOptionData("ALT_SEQUENCE_1")
            endalt$=option!.getOptionData("ALT_SEQUENCE_2")
            begdate$=option!.getOptionData("RECEIPT_DATE_1")
            enddate$=option!.getOptionData("RECEIPT_DATE_2")
            cashcode$=option!.getOptionData("CASH_REC_CD")
            include$=option!.getOptionData("PICK_CHECK")
            export_format$=option!.getOptionData("EXPORT_FORMAT")
            rd_alias_id$=option!.getAlias()    
            if export_format$="Y"
                if len(rd_alias_id$)>15 rd_alias_id$=rd_alias_id$(1,15)
                rd_alias_id$=rd_alias_id$+"X"
            endif

rem --- Retrieve parameter records

            ars01a_key$=firm_id$+"AR00"
            find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
            gls01a_key$=firm_id$+"GL00"
            find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
            call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
            call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
            m0=len(m0$)
            m1=len(m1$)
            call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,account_length
            g0=len(g0$)

rem --- Is General Ledger installed?

            gl$="N"
            if include$="Y"
               application$="AR"
               call pgmdir$+"adc_application.aon",application$,info$[all]
               gl$=info$[9]
            endif
            if gl$="Y"
               application$="GL"
               call pgmdir$+"adc_application.aon",application$,info$[all]
               gl$=info$[20]
            endif

rem --- Initializations

            headings=5
            dim headings$[headings],o[11],h[11],customer[4],totals[4]
            journal=1
            done=0
            detail=0
            page=0
            width=132
            maxlines=59
            lines=maxlines+1
            morecustomers=1
            moreheaders=1
            moredetail=1
            recs=0
            when$=sysinfo.system_date$
            clock$=""
            artype$=fill(2)
            nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
            reserved$=" "
            keynum$="PRIMARY"
            begvalue$=begcust$
            endvalue$=endcust$
            total_recs=0
            headings$[0]=sysinfo.firm_name$
            headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_CUSTOMER_ID")
            if sequence$="A"
               keynum$="AO_ALTSEQ_CUST"
               begvalue$=begalt$
               endvalue$=endalt$
               headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_ALTERNATE_SEQUENCE")
            endif
            headings$[1]=headings$[1]
            gosub init_heading

rem --- Headings

            dim buffer$(width)
            h5$=Translate!.getTranslation("AON_FIRST") 
            h6$=Translate!.getTranslation("AON_LAST") 
            h7$=Translate!.getTranslation("AON_FIRST") 
            h8$=Translate!.getTranslation("AON_LAST") 
            h9$=Translate!.getTranslation("AON_CASH_RECEIPTS_CODE:")
            hc$=""
            if begvalue$<>"" if sequence$="A" h5$=begvalue$
            if endvalue$<>"" if sequence$="A" h6$=endvalue$
            if begvalue$<>"" if sequence$="C" h5$=fnmask$(begvalue$,m0$)
            if endvalue$<>"" if sequence$="C" h6$=fnmask$(endvalue$,m0$)
            if begdate$<>"" h7$=fndate$(begdate$)
            if enddate$<>"" h8$=fndate$(enddate$)
            headings$[3] = Translate!.getTranslation("AON_BEGINNING_CUSTOMER:_")+h5$ +Translate!.getTranslation("AON__--_ENDING_CUSTOMER:_")+h6$
            headings$[4] = Translate!.getTranslation("AON_BEGINNING_RECEIPT_DATE_:_")+h7$ +Translate!.getTranslation("AON__--_ENDING_RECEIPT_DATE:_")+h8$
            p=(width-max(len(h7$),len(h8$)))+1
            h9$=Translate!.getTranslation("AON_CASH_RECEIPTS_CODE:")
            if cashcode$="" h9$=h9$+Translate!.getTranslation("AON__ALL") else h9$=h9$+r5$
            if cashcode$<>""
               receiptcode$=cashcode$
               gosub receipt_code
               hc$=arm10c.cash_rec_cd$+" "+cvs(arm10c.code_desc$,2)
            endif
            headings$[5] = h9$
    
rem --- Define print positions

            o[0]=0
            o[11]=width-m1
            o[10]=o[11]-g0-1
            o[9]=o[10]-m1-1
            o[8]=o[9]-m1
            o[7]=o[8]-m1
            o[6]=o[7]-m1
            o[5]=o[6]-8
            o[4]=o[5]-m1-1
            o[3]=o[4]-7
            o[2]=o[3]-5
            o[1]=o[2]-9
            for x=0 to 3
                h[x]=o[x]
            next x
            h[4]=o[4]+m1-7
            h[5]=o[5]
            h[6]=o[6]+m1-8
            h[7]=o[7]+m1-8
            h[8]=o[8]+m1-9
            h[9]=o[9]+m1-7
            w=max(g0+m1+1,15)
            dim miscellaneous$(w,"-")
            p=int((w-13)/2)-1
            miscellaneous$(p,15)=Translate!.getTranslation("AON__MISCELLANEOUS_")
            h[10]=o[10]
            h[11]=o[11]+m1-7

rem --- Additional file opens

            files=2,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            if gl$="Y"
               files$[1]="glm-01",ids$[1]="GLM_ACCT"
               files$[2]="glw_cashtotals",ids$[2]="GLW_CASHTOTALS"
               options$[2]="CL"
            endif
            if gl$="Y" call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                              ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit_no_update
            glm01_dev=channels[1]
            glw04_dev=channels[2]

rem --- Dimension string templates

             if gl$="Y" dim glm01a$:templates$[1],glw04a$:templates$[2]

rem --- Start progress meter and position Customer Master (arm-01) file

            call pgmdir$+"adc_progress.aon","NC","ARM_CUSTMAST","","","",0,arm01_dev,1,meter_num,status
            k$=firm_id$
            read (arm01_dev,knum=keynum$,key=k$+begvalue$,dir=0,dom=*next)

rem --- Read next Customer Master (arm-01) record

    while morecustomers
          k$=key(arm01_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (arm01_dev,knum=keynum$,key=k$) arm01a$
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
          if sequence$="C" if endvalue$<>"" if arm01a.customer_id$>endvalue$ break
          if sequence$="A" if endvalue$<>"" if arm01a.alt_sequence$>endvalue$ break

rem --- Position Cash Receipts History Header (art-06) file

          keyprefix$=arm01a.firm_id$+arm01a.customer_id$
          knum$="CUST_REC_DT"
          read (cashheader_dev,key=keyprefix$+begdate$,knum=knum$,dom=*next)

rem --- Read next Cash Receipt History Header (art-06) record

          while moreheaders

                k$=key(cashheader_dev,end=*break)
                if pos(keyprefix$=k$)<>1 break
                read record (cashheader_dev) cashheader$
                if enddate$<>"" if cashheader.receipt_date$>enddate$ break
                if cashcode$<>"" if cashheader.cash_rec_cd$<>cashcode$ continue
                if pos("C"=cashheader.status$)<>1 continue
                trans_rcds=0

rem --- Change in customer?
 
                if cashheader.customer_id$<>customer$ gosub customer_break

rem --- Print the Cash Receipt Header

                detail=0
                printed=1
                customer[0]=customer[0]+cashheader.payment_amt
                totals[0]=totals[0]+cashheader.payment_amt

rem --- Position Cash Receipts History Detail (art_transactions) file

                receipt$=cashheader.firm_id$+cashheader.ar_trans_id$
                rdate$= fndate$(cashheader.receipt_date$)
                rcode$= cashheader.cash_rec_cd$
                rcheck$= cashheader.trans_data1$; rem << WAS: ar_chk_no$ >>
                rpay = cashheader.payment_amt

                read (artrans_dev,key=receipt$,dom=*next)

rem --- Read next Cash Receipts History Detail (art_transactions) record

                while moredetail
                      k1$=key(artrans_dev,end=*break)
                      if pos(receipt$=k1$)<>1 break
                      read record (artrans_dev,key=k1$) artrans$
                      
rem --- Calculate invoice balance

                      balance=0
                      while moreheaders
                            dim invheader$:fattr(invheader$)
                            invhdr_key$=artrans.firm_id$+artrans.ar_invoice_id$
                            find record (invheader_dev,key=invhdr_key$,dom=*break) invheader$
                            if invheader.invoice_no$(1,2)="OA" break
                            balance=invheader.invoice_amt
                            altkey$=invhdr_key$,knum$="AR_INVOICE_ID"
                            read (artrans2_dev,key=altkey$,knum=knum$,dom=*next)
                            while moredetail
                                  k2$=key(artrans2_dev,end=*break)
                                  if pos(altkey$=k2$)<>1 break
                                  read record (artrans2_dev) artrans2$
                                  if artrans2.ar_trans_type$="IN" continue
                                  if artrans2.trans_date$>cashheader.receipt_date$ continue

rem --- << Next line: reading in all past CR's to est. Inv_balance before this CR; so don't include the CR we're on >> 
                                  orig_cr$=artrans.firm_id$+artrans.ar_trans_id$+artrans.sequence_no$
                                  cur_cr$=artrans2.firm_id$+artrans2.ar_trans_id$+artrans2.sequence_no$
                                  if cur_cr$=orig_cr$ continue
                                  balance=balance+artrans2.trans_amount+artrans2.disc_amount
                            wend
                            break
                      wend

rem --- Print invoice information

                      credit=artrans.trans_amount+artrans.disc_amount

                      if export_format$="Y"
                        OutVect!.addItem(arm01a.customer_id$)
                        OutVect!.addItem(arm01a.customer_name$)
                        OutVect!.addItem(arm01a.alt_sequence$)
                       else                   
                        OutVect!.addItem("")  
                      endif

                      OutVect!.addItem(rdate$)
                      OutVect!.addItem(rcode$)
                      OutVect!.addItem(rcheck$)
                      if rpay<>0 
                        OutVect!.addItem(str(rpay))
                        else
                        OutVect!.addItem("")
                       endif
rem --- << Reverse trans_amount & disc_amount to match old format >>
                      artrans.trans_amount=artrans.trans_amount*-1
                      artrans.disc_amount=artrans.disc_amount*-1
                      credit=credit*-1
                      
                      OutVect!.addItem(invheader.invoice_no$)
                      OutVect!.addItem(str(balance))
                      OutVect!.addItem(str(artrans.trans_amount))
                      OutVect!.addItem(str(artrans.disc_amount))
                      OutVect!.addItem(str(credit))
                      OutVect!.addItem("")
                      OutVect!.addItem("")
                      detail=1  
                      customer[1]=customer[1]+artrans.trans_amount
                      customer[2]=customer[2]+artrans.disc_amount
                      totals[1]=totals[1]+artrans.trans_amount
                      totals[2]=totals[2]+artrans.disc_amount
                      cust_balance=cust_balance+balance
                      rept_balance=rept_balance+balance
                      recs=recs+1
                      
                      rpay=0

rem --- Retrieve cash receipts code record using the code from
rem --- the receipt header to get the GL cash and discount accounts

                      receiptcode$=cashheader.cash_rec_cd$
                      gosub receipt_code

rem --- The distribution code from the invoice header or customer
rem --- detail record is used to retrieve the GL AR account

                      if invheader.invoice_no$(1,2)="OA" gosub customer_distribution
:                                               else gosub invoice_distribution

rem --- Update the GL summary for this detail record

                      account$=araccount$ 
                      amount=-artrans.trans_amount 
                      gosub update_gl 
                      account$=cashaccount$ 
                      amount=artrans.trans_amount
                      gosub update_gl
                      account$=discaccount$
                      amount=artrans.disc_amount
                      gosub update_gl
                      account$=araccount$
                      amount=-artrans.disc_amount
                      gosub update_gl

rem --- Loop back for next Cash Receipts History Detail record

                wend

rem --- Position Cash Receipts History GL Distribution (art-26) file

                read (cashpost_dev,key=receipt$,dom=*next)

rem --- Read next Cash Receipts History GL Distribution (art-16) record

                while moredetail
                      k$=key(cashpost_dev,end=*break)
          
                      if pos(receipt$=k$)<>1 break
                      read record (cashpost_dev,key=k$) cashpost$

rem --- Print GL distribution information

                      if export_format$="Y"
                        
                        OutVect!.addItem(arm01a.customer_id$)
                        OutVect!.addItem(arm01a.customer_name$)
                        OutVect!.addItem(arm01a.alt_sequence$)
                      
                        OutVect!.addItem(rdate$)
                        OutVect!.addItem(rcode$)
                        OutVect!.addItem(rcheck$)
                        OutVect!.addItem(str(rpay))
                        xwk=fnblank(5) ; rem  columns-1-7)
                        
                      else
                            OutVect!.addItem("")
                            OutVect!.addItem(rdate$)
                            OutVect!.addItem(rcode$)
                            OutVect!.addItem(rcheck$)
                            if rpay<>0 
                               OutVect!.addItem(str(rpay))
                                else
                               OutVect!.addItem("")
                             endif
                            xwk=fnblank(columns-1-5)
                      endif
                            rpay=0
                      
                      OutVect!.addItem(fnmask$(cashpost.gl_account$(1,account_length),g0$))
                      OutVect!.addItem(str(cashpost.trans_amount))
                      detail=1
                      recs=recs+1
                      customer[4]=customer[4]+cashpost.trans_amount
                      totals[4]=totals[4]+cashpost.trans_amount

rem --- Retrieve cash receipts code record using the code from
rem --- the receipt header to get the GL cash account

                      receiptcode$=cashheader.cash_rec_cd$
                      gosub receipt_code

rem --- Update the GL summary for this detail record

                      account$=cashpost.gl_account$ 
                      amount=cashpost.trans_amount 
                      gosub update_gl 
                      account$=cashaccount$ 
                      amount=-cashpost.trans_amount
                      gosub update_gl

rem --- Loop back for next Cash Receipts History GL Distribution record

                wend

rem --- Loop back for next Cash Receipt History Header record
 
                if detail=0 then xwk=fnblank(12)

          wend

rem --- Loop back for next Customer Master record

    wend

rem --- Print report totals

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

            if export_format$<>"Y"
                done=1
                if printed gosub customer_break
                totals[3]=totals[1]+totals[2]
                x$=Translate!.getTranslation("AON_TOTALS_FOR_REPORT")
                xwk=fnblank(12)
                TotVect!.addItem(str(OutVect!.size()/(columns+1)))
                OutVect!.addItem(x$)
                xwk=fnblank(3)
                OutVect!.addItem(str(totals[0]))
                xwk=fnblank(1)
                outVect!.addItem(str(rept_balance))
                OutVect!.addItem(str(totals[1]))
                OutVect!.addItem(str(totals[2]))
                OutVect!.addItem(str(totals[3]))
                OutVect!.addItem("")
                OutVect!.addItem(str(totals[4]))
            endif

rem --- Skip GL Account Distribution if GL isn't installed/used or user didn't request it

            if gl$<>"Y" goto std_exit
            if include$<>"Y" goto std_exit
            next_overlay$="glr_distribution.aon"
            goto std_exit

init_heading: rem --- Init Column Headings

        if export_format$="Y"
            columns=13
            dim columns$[columns,10]
            columns$[0,0]=Translate!.getTranslation("AON_CUST_ID"),      columns$[0,1]="C",columns$[0,2]="10"
            columns$[1,0]=Translate!.getTranslation("AON_NAME"),      columns$[1,1]="C",columns$[1,2]="20"
            columns$[2,0]=Translate!.getTranslation("AON_ALT_SEQ"),      columns$[2,1]="C",columns$[2,2]="10"
        else
            columns=11
            dim columns$[columns,10]
            columns$[0,0]=Translate!.getTranslation("AON_CUSTOMER"),      columns$[0,1]="C",columns$[0,2]="20"
        endif
                    
            columns$[columns-10,0]=Translate!.getTranslation("AON_RECEIPT_DT"),  columns$[columns-10,1]="C",columns$[columns-10,2]="10"
            columns$[columns-9,0]=Translate!.getTranslation("AON_CD"),      columns$[columns-9,1]="C",columns$[columns-9,2]="3"
            columns$[columns-8,0]=Translate!.getTranslation("AON_CHECK_NO"),    columns$[columns-8,1]="C",columns$[columns-8,2]="8"
            columns$[columns-7,0]=Translate!.getTranslation("AON_CHECK_AMT"),       columns$[columns-7,1]="N",columns$[columns-7,2]=str(len(m1$)),columns$[columns-7,3]=m1$,columns$[columns-7,10]="T"
            columns$[columns-6,0]=Translate!.getTranslation("AON_INVOICE"),columns$[columns-6,1]="C",columns$[columns-6,2]="8"
            columns$[columns-5,0]=Translate!.getTranslation("AON_INVOICE_BAL"),   columns$[columns-5,1]="N",columns$[columns-5,2]=str(len(m1$)),columns$[columns-5,3]=m1$,columns$[columns-5,10]="T"
            columns$[columns-4,0]=Translate!.getTranslation("AON_AMT_APPLIED"),   columns$[columns-4,1]="N",columns$[columns-4,2]=str(len(m1$)),columns$[columns-4,3]=m1$,columns$[columns-4,10]="T"
            columns$[columns-3,0]=Translate!.getTranslation("AON_DISCOUNT_AMT"),  columns$[columns-3,1]="N",columns$[columns-3,2]=str(len(m1$)),columns$[columns-3,3]=m1$,columns$[columns-3,10]="T"
            columns$[columns-2,0]=Translate!.getTranslation("AON_TOTAL_CREDIT"),  columns$[columns-2,1]="N",columns$[columns-2,2]=str(len(m1$)),columns$[columns-2,3]=m1$,columns$[columns-2,10]="T"
            columns$[columns-1,0]=Translate!.getTranslation("AON_MISC_ACCT"),    columns$[columns-1,1]="C",columns$[columns-1,2]="8"
            columns$[columns,0]=Translate!.getTranslation("AON_MISC_AMT"),     columns$[columns,1]="N",columns$[columns,2]=str(len(m1$)-2),columns$[columns,3]=m1$,columns$[columns,10]="T"

        return

customer_break: rem --- Customer break

            if export_format$="Y" goto startcust 

            print_totals=customer$<>""
            while print_totals
                  customer[3]=customer[1]+customer[2]
                  x$=Translate!.getTranslation("AON_TOTALS_FOR_CUSTOMER")
                  xwk=fnblank(12)
                  TotVect!.addItem(str(OutVect!.size()/(columns+1)))
                  OutVect!.addItem(x$)
                  xwk=fnblank(3)
                  OutVect!.addItem(str(customer[0]))
                  xwk=fnblank(1)
                  outVect!.addItem(str(cust_balance))
                  OutVect!.addItem(str(customer[1]))
                  OutVect!.addItem(str(customer[2]))
                  OutVect!.addItem(str(customer[3]))
                  OutVect!.addItem("")
                  OutVect!.addItem(str(customer[4]))
                  recs=recs+1
                  break
            wend
startcust:
            if done return
            dim customer[4]
            cust_balance=0
            customer$=cashheader.customer_id$
            if export_format$<>"Y"
                xwk=fnblank(columns+1)
                OutVect!.addItem(fnmask$(arm01a.customer_id$(1,customer_size),m0$)+" "+arm01a.customer_name$+" "+arm01a.alt_sequence$)
                xwk=fnblank(columns)
                recs=recs+1
            endif
            return

receipt_code: rem --- Retrieve the Cash Receipts Code record

            dim arm10c$:fattr(arm10c$)
            arm10c.firm_id$=firm_id$
            arm10c.record_id_c$="C"
            arm10c.cash_rec_cd$=receiptcode$
            arm10c.code_desc$=nf$
            k$=arm10c.firm_id$+arm10c.record_id_c$+arm10c.cash_rec_cd$
            find record (arc_cashcode_dev,key=k$,dom=*next) arm10c$
            cashaccount$=arm10c.gl_cash_acct$
            discaccount$=arm10c.gl_disc_acct$
            return

invoice_distribution: rem --- Get the Distribution Code based on the invoice

            dim arm02a$:fattr(arm02a$),arm10d$:fattr(arm10d$),invheader$:fattr(invheader$)
            k$=artrans.firm_id$+artrans.ar_invoice_id$
            find record (invheader_dev,key=k$,dom=*next) invheader$
            k$=artrans.firm_id$+"D"+invheader.dist_code$
            find record (arc_distcode_dev,key=k$,dom=*next) arm10d$
            araccount$=arm10d.gl_ar_acct$
            return

customer_distribution: rem --- Get the Distribution Code based on the customer

            dim invheader$:fattr(invheader$),arm10d$:fattr(arm10d$)
            k$=cashheader.firm_id$+cashheader.customer_id$+ar_type$
            find record (arm02_dev,key=k$,dom=*next) arm02a$
            k$=artrans.firm_id$+"D"+arm02a.ar_dist_code$
            find record (arc_distcode_dev,key=k$,dom=*next) arm10d$
            araccount$=arm10d.gl_ar_acct$
            return

update_gl: rem --- Update GL summary

            if gl$<>"Y" return
            if include$<>"Y" return
            if amount=0 return
            dim arw07a$:fattr(arw07a$),glw04a$:fattr(glw04a$)
            arw07a.firm_id$=cashheader.firm_id$
            arw07a.ar_type$=artype$
            arw07a.receipt_date$=cashheader.receipt_date$
            arw07a.gl_account$=account$
            arw07a.customer_id$=cashheader.customer_id$
            arw07a.ar_check_no$=cashheader.trans_data1$; rem << WAS: ar_chk_no$ >>
            arw07a.ar_inv_no$=invheader.invoice_no$; rem << WAS: artrans.ar_inv_no$ >>
            k$=arw07a.firm_id$+arw07a.ar_type$+arw07a.receipt_date$+arw07a.gl_account$+
:      arw07a.customer_id$+arw07a.ar_check_no$+arw07a.ar_inv_no$
            find record (arw07_dev,key=k$,dom=*next) arw07a$
            arw07a.trans_amount=arw07a.trans_amount+amount
            arw07a$=field(arw07a$)
            write record (arw07_dev) arw07a$
            glw04a.firm_id$=cashheader.firm_id$
            glw04a.gl_account$=account$
            k$=glw04a.firm_id$+glw04a.gl_account$
            find record (glw04_dev,key=k$,dom=*next) glw04a$
            glw04a.trans_amount=glw04a.trans_amount+amount
            glw04a$=field(glw04a$)
            write record (glw04_dev) glw04a$
            return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_update:

    release
rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
