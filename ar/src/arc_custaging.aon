rem --- Age Customer Transactions
rem --- Program arc_custaging

rem --- AddonSoftware Version 20.01 - Apr2020
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- begcust$     : Beginning Customer ID to age (input)
rem --- endcust$     : Ending Customer ID to age (input)
rem --- aging_date$  : Aging Date (input)
rem --- age_by$      : Age By - Invoice or Due Date (input)
rem --- status       : Status/0=No error (returned)

    setesc std_error
    seterr std_error
    
    enter begcust$,endcust$,aging_date$,age_by$,status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)        

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-02",ids$[1]="ARM_CUSTDET"
    files$[2]="art-01",ids$[2]="ART_INVHDR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm02_dev=channels[1]
    art01_dev=channels[2]

rem --- Dimension string templates

    dim arm02a$:templates$[1],art01a$:templates$[2]

rem --- Initializations

    dim aging[5]
    customer$=""
    total_recs=0

rem --- Determine 30 day aging period dates

    period_dates$=""
    for x=-5 to 0
        enddate$=""
        call pgmdir$+"adc_daydates.aon",aging_date$,enddate$,x*30
        period_dates$=enddate$+period_dates$
    next x

rem --- Start progress meter and position the file

    call pgmdir$+"adc_progress.aon","NC","ART_INVHDR","","","",0,art01_dev,1,meter_num,status
    read (art01_dev,key=firm_id$+"  "+begcust$,dom=*next)

    rem --- Read the next Invoice Header (art-01) record

    while 1
          k$=key(art01_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (art01_dev) art01a$
          if endcust$<>"" if art01a.customer_id$>endcust$ break
          balance=art01a.invoice_bal
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

          rem --- Customer break?

          if art01a.firm_id$+art01a.ar_type$+art01a.customer_id$<>customer$ gosub customer_break

          rem --- Age this invoice

          if age_by$="I" transaction_date$=art01a.invoice_date$
:                   else transaction_date$=art01a.inv_due_date$
          period=pos(transaction_date$>period_dates$,8)
          if period=0 period=5 
:                else period=int(period/8)
          aging[period]=aging[period]+balance
    
          rem --- Loop back for next invoice

    wend
    gosub customer_break

rem --- Done

    if pgm(-1)="aru_agingupdate.aon" then
        msg_id$="UPDATE_COMPLETE"
        dim msg_tokens$[1]
        msg_opt$=""
        gosub disp_message
    endif

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    goto std_exit

customer_break: rem --- Customer Break

    if customer$<>""
       dim arm02a$:fattr(arm02a$)
       extract record (arm02_dev,key=last_arm02_key$,dom=*proceed) arm02a$
       arm02a.aging_future=aging[0]
       arm02a.aging_cur=aging[1]
       arm02a.aging_30=aging[2]
       arm02a.aging_60=aging[3]
       arm02a.aging_90=aging[4]
       arm02a.aging_120=aging[5]
       arm02a.report_date$=aging_date$
       arm02a.report_type$=age_by$
       arm02a.age_credits$="Y"
       arm02a.future_aging$="Y"
       arm02a$=field(arm02a$)
       write record (arm02_dev) arm02a$
    endif
    dim aging[5]
    customer$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$
    last_arm02_key$=art01a.firm_id$+art01a.customer_id$+art01a.ar_type$
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Program end

    close (arm02_dev,err=*next)
    close (art01_dev,err=*next)
    exit

rem #endinclude std_end.src

    end
