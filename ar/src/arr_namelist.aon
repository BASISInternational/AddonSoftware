rem arr - Customer Name Listing
rem Program arr_namelist v8.0.0 05May2006 (arr_rb)
rem Created by adx_progconv.bbx v1.0.2 (05/05/2006 03:13:35)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-02"
    files$[4]="arm-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm10_dev=channels[4]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm02a$:templates$[3],arm10a$:templates$[4]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="arm-10F"
    ids$[3]="arm-10H"
    ids$[4]="arm-10L"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],arm10f$:templates$[2],arm10h$:templates$[3],arm10l$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    sequence$=fnget_fld_data$(table$,"report_seq_msty")
    begterms$=fnget_fld_data$(table$,"ar_terms_code_1")
    endterms$=fnget_fld_data$(table$,"ar_terms_code_2")
    begsales$=fnget_fld_data$(table$,"salesperson_1")
    endsales$=fnget_fld_data$(table$,"salesperson_2")
    begterr$=fnget_fld_data$(table$,"territory_1")
    endterr$=fnget_fld_data$(table$,"territory_2")
    begtype$=fnget_fld_data$(table$,"customer_type_1")
    endtype$=fnget_fld_data$(table$,"customer_type_2")

rem --- Retrieve parameter records

    dim p[5],m0$(9)
    ars01a_key$=sysinfo.firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    customer_size=num(ars01a.customer_size$)
    m0$=ars01a.customer_output$
    m9$="(###)-000-0000"
    m0=len(m0$)
    m9=len(m9$)

rem --- Initializations

    headings=2
    dim headings$[headings],o[4]
    more=1
    page=0
    code=pos(sequence$="MSTY")
    width=132
    total=0
    maxlines=59
    lines=maxlines+1
    nf$="(Not on file)"
    lastvalue$=""
    when$=sysinfo.system_date$
    clock$=""
    terms=1
    salesperson=2
    territory=3
    type=4
    length=2
    keynum=3
    begvalue$=begterms$
    endvalue$=endterms$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" "
    if sequence$="M" headings$[1]=headings$[1]+"By Terms Code"
    if sequence$="S"
       length=3
       keynum=1
       begvalue$=begsales$
       endvalue$=endsales$
       headings$[1]=headings$[1]+"By Salesperson"
    endif
    if sequence$="T"
       length=3
       keynum=2
       begvalue$=begterr$
       endvalue$=endterr$
       headings$[1]=headings$[1]+"By Territory"
    endif
    if sequence$="Y"
       length=3
       keynum=8
       begvalue$=begtype$
       endvalue$=endtype$
       headings$[1]=headings$[1]+"By Customer Type"
    endif
    if begvalue$<>"" begvalue$=begvalue$(1,len(begvalue$)-1)+$FF$
    endvalue=len(endvalue$)

rem --- Initialize print positions

    o[0]=0
    o[1]=o[0]+m0+1
    o[2]=o[1]+31
    o[3]=18+m0
    o[4]=width-m9
    o[3]=o[4]-12
    w=o[3]-o[2]-2

rem --- Open printer, start progress meter and position header file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","","",0,arm02_dev,1,meter_num,status
    read (arm02_dev,knum=keynum,key=firm_id$,dom=*next)

rem --- Initial Read

   read (arm02_dev,knum=keynum,key=firm_id$+begvalue$,dom=*next)

rem --- Read next Customer Detail (arm-02) record

    while more
          k$=key(arm02_dev,knum=keynum,end=*break)
          if pos(firm_id$=k$)<>1 break
          if endvalue$<>"" if k$(3,endvalue)>endvalue$ break
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          read record (arm02_dev) arm02a$

          rem --- Level break?

          value$=k$(3,length)
          if value$<>lastvalue$ 
             gosub code_break
             gosub subheading
          endif

          rem --- Retrieve the Customer Master (arm-01) record

          dim arm01a$:fattr(arm01a$)
          arm01a.customer_name$=nf$
          k$=firm_id$+arm02a.customer_id$
          find record (arm01_dev,key=k$,dom=*next) arm01a$

          rem --- Prepare line

          address$=""
          x$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+
:            arm01a.city$+arm01a.state_code$
          for x=1 to 120 step 24
              l$=cvs(x$(x,24),1+2+32)
              if l$<>"" then if address$<>"" address$=address$+", "
              address$=address$+l$
          next x
          if len(address$)>w address$=address$(1,w)

          rem --- Print the detail line

          if lines+1>maxlines gosub subheading          
          print (printer_dev) @(o[0]),fnmask$(arm01a.customer_id$(1,p[0]),m0$),@(o[1]),arm01a.customer_name$,
:                             @(o[2]),address$,@(o[3]),fnzipcode$(arm01a.zip_code$),@(o[4]),fnmask$(arm01a.phone_no$,m9$)
          lines=lines+1
          total=total+1
    wend

rem --- All done

    if lines+2>maxlines gosub report_heading
    print (printer_dev) ""
    print (printer_dev) total," Customer(s) Listed"
    goto std_exit

report_heading: rem --- Report Heading

    lines=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[0]),"Customer",@(o[2]),"Address",@(o[3]),"Zip/Postal",@(o[4]),"Phone"
    lines=lines+1
    return

subheading: rem --- Subheading by code

    if lines>maxlines-3 gosub report_heading
    print (printer_dev) ""
    print (printer_dev) @(o[0]),buffer$
    print (printer_dev) ""
    lines=lines+3
    return

code_break: rem --- Code sequence break

    dim buffer$(m0+31)
    switch code
           case terms
                dim arm10a$:fattr(arm10a$)
                arm10a.code_desc$=nf$
                k$=firm_id$+"A"+value$
                find record (arm10_dev,key=k$,dom=*next) arm10a$  
                buffer$(1)="Terms "+arm10a.ar_terms_code$+" - "+arm10a.code_desc$
           break
           case salesperson
                dim arm10f$:fattr(arm10f$)
                arm10f.code_desc$=nf$
                k$=firm_id$+"F"+value$
                find record (arm10_dev,key=k$,dom=*next) arm10f$
                buffer$(1)="Salesperson "+arm10f.slspsn_code$+" - "+arm10f.code_desc$
           break
           case territory
                dim arm10h$:fattr(arm10h$)
                arm10h.code_desc$=nf$
                k$=firm_id$+"H"+value$
                find record (arm10_dev,key=k$,dom=*next) arm10h$  
                buffer$(1)="Territory "+arm10h.territory$+" - "+arm10h.code_desc$
           break
           case type
                dim arm10l$:fattr(arm10l$)
                arm10l.code_desc$=nf$
                k$=firm_id$+"L"+value$
                find record (arm10_dev,key=k$,dom=*next) arm10l$  
                buffer$(1)="Customer Type "+arm10l.customer_type$+" - "+arm10l.code_desc$
           break
           case default
           break
    swend
    lastvalue$=value$
    lines=maxlines+1
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
