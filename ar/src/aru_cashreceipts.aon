rem --- Cash Receipts Update
rem --- Program aru_cashreceipts v8.0.0 14Dec2006 (aru_aa)
rem --- Created by adx_codeport.bbx v1.1.4 (12/14/2006 07:38:37)
rem --- Modified by Data-Link Associates v14.00 (11/4/2013 )

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Get user approval to update
    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update


rem --- Start progress meter and position header file
    call pgmdir$+"adc_progress.aon","NC","","","","",0,cashheader_dev,1,meter_num,status

rem --- start update
rem --- Set starting point in CASHHEADER
    cashheader=1, cashtrans=1
    key$=firm_id$+"R"
    key_no$="STS_REC_DT"
    read (cashheader_dev,key=key$,knum=key_no$,dom=*next)


rem --- Read next Cash Receipts Header (cashheader) record
    while cashheader
        cashheader_key$=key(cashheader_dev,end=*break)
        if pos(key$=cashheader_key$)<>1 break
        extract record (cashheader_dev) cashheader$; rem Advisory Locking
rem <<testing>>        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status


        rem --- Initializations for this invoice
        total=0
        mtdcash=0
        mtddisc=0
        mtdgl=0
        nmtdcash=0
        nmtddisc=0
        nmtdgl=0


rem --- Retrieve Customer Master (arm-01) and Customer 
        dim arm01a$:fattr(arm01a$),arm02a$:fattr(arm02a$)
        arm01a.firm_id$=firm_id$
        arm01a.customer_id$=cashheader.customer_id$
        k$=arm01a.firm_id$+arm01a.customer_id$ 
        found=0
        find record (arm01_dev,key=k$,dom=*next) arm01a$; found=1
        if !found then read(cashheader_dev); continue


rem --- Detail (arm-02) records        
        arm02a.firm_id$=firm_id$
        arm02a.customer_id$=cashheader.customer_id$
        arm02a.ar_type$="  "
        k$=arm02a.firm_id$+arm02a.customer_id$+arm02a.ar_type$ 
        find record (arm02_dev,key=k$,dom=*next) arm02a$


rem --- Generate Bank Reconciliation (glt-15) transaction if bank rec is in use
        while br
rem --- Retrieve Cash Receipts Code (arm-10c) record
            dim arm10c$:fattr(arm10c$)
            arm10c.firm_id$=firm_id$
            arm10c.record_id_c$="C"
            arm10c.cash_rec_cd$=cashheader.cash_rec_cd$
            k$=arm10c.firm_id$+arm10c.record_id_c$+arm10c.cash_rec_cd$ 
            find record (arc_cashcode_dev,key=k$,dom=*next) arm10c$


rem --- Post this Bank Reconciliation (glt-15) record
            dim glt15a$:fattr(glt15a$)
            glt15a.firm_id$=firm_id$
            glt15a.gl_account$=arm10c.gl_cash_acct$
            glt15a.trans_no$="C"+cashheader.receipt_date$(3,6)
            glt15a.trans_type$="D"
            glt15a.posted_code$="O"
            glt15a.description$=Translate!.getTranslation("AON_CASH_RECEIPTS_REGISTER")
            glt15a.trns_date$=cashheader.receipt_date$
            glt15a$=field(glt15a$)
            k$=glt15a.firm_id$+glt15a.gl_account$+glt15a.trans_no$
            extract record (glt15_dev,key=k$,dom=*next) glt15a$; rem Advisory Locking
            glt15a.trans_amt=glt15a.trans_amt+cashheader.payment_amt
            glt15a$=field(glt15a$)
            write record (glt15_dev) glt15a$
            break
        wend


rem --- Position Cash Receipts Invoice Detail (art_transactions) file
        receipt$=cashheader.firm_id$+cashheader.ar_trans_id$
        read (cashtrans_dev,key=receipt$,dom=*next)

rem --- Read the next Cash Receipt Invoice Detail (art_transactions) record
        while cashtrans
            cashtrans_key$=key(cashtrans_dev,end=*break)
            if pos(receipt$=cashtrans_key$)<>1 break
            read record (cashtrans_dev) cashtrans$
            dim invheader$:fattr(invheader$)
            invheader.firm_id$=cashtrans.firm_id$
            invheader.ar_trans_id$=cashtrans.ar_invoice_id$
            k$=invheader.firm_id$+invheader.ar_trans_id$
            find record (invheader_dev,key=k$) invheader$


rem --- Retrieve Customer Payment Summary (arm-06) record
            if pos("OA"=invheader.ar_inv_type$)<>1
                dim arm06a$:fattr(arm06a$)
                arm06a.firm_id$=firm_id$
                arm06a.customer_id$=cashheader.customer_id$
                k$=arm06a.firm_id$+arm06a.customer_id$
                extract record (arm06_dev,key=k$,dom=*next) arm06a$; rem Advisory Locking


rem --- Calculate difference in days between the invoice
rem --- date and the receipt date and update the last payment
rem --- date, average days to pay and the number of payments
                begdate$=invheader.invoice_date$
                enddate$=cashtrans.trans_date$
                days=0
REM --- << TESTING >>                call pgmdir$+"adc_daydates.aon",begdate$,enddate$,days
                avgdays=arm06a.avg_days
                payments=arm06a.no_payments
                if payments arm06a.avg_days=fnavgdays(arm06a.no_payments,arm06a.avg_days,days)
:                   else arm06a.avg_days=days
                arm06a.no_payments=arm06a.no_payments+1
                if cashtrans.trans_date$<=endperiod$
                    arm06a.avg_days_mtd=fnavgdays(arm06a.mtd_no_pmts,arm06a.avg_days_mtd,days)
                    arm06a.mtd_no_pmts=arm06a.mtd_no_pmts+1
                    arm06a.avg_days_ytd=fnavgdays(arm06a.ytd_no_pmts,arm06a.avg_days_ytd,days)
                    arm06a.ytd_no_pmts=arm06a.ytd_no_pmts+1
                endif
                if cashtrans.trans_date$>endperiod$
                    arm06a.avg_dtp_nmtd=fnavgdays(arm06a.nmtd_no_pay,arm06a.avg_dtp_nmtd,days)
                    arm06a.nmtd_no_pay=arm06a.nmtd_no_pay+1
                endif
                arm06a.lstpay_date$=cashtrans.trans_date$
                arm06a$=field(arm06a$)
                write record (arm06_dev) arm06a$
                rem << break
            endif


rem --- Accumulate cash and discount totals
            if cashheader.receipt_date$<=endperiod$ 
                mtdcash=mtdcash+cashtrans.trans_amount
                mtddisc=mtddisc+cashtrans.discount_amt
            endif
            if cashheader.receipt_date$>endperiod$ 
                nmtdcash=nmtdcash+cashtrans.trans_amount
                nmtddisc=nmtddisc+cashtrans.disc_amount
            endif
            total=total+cashtrans.trans_amount+cashtrans.disc_amount
        wend; rem --- << End cashtrans=1  loop from cashtrans_dev >>


rem --- Position Cash Receipts Distribution (cashpost) file
        read (cashpost_dev,key=receipt$,dom=*next)


rem --- Read the next Cash Receipt Distribution (cashpost) record
        while 1
            cashpost_key$=key(cashpost_dev,end=*break)
            if pos(receipt$=cashpost_key$)<>1 then break
            read record (cashpost_dev) cashpost$
            if cashpost.gl_trans_type$="M"
                if cashheader.receipt_date$<=endperiod$ 
                    mtdgl=mtdgl+cashpost.trans_amount
                endif
                if cashheader.receipt_date$>endperiod$ 
                    nmtdgl=nmtdgl+cashpost.trans_amount
                endif
            endif
        wend


rem --- Update the Customer Detail (arm-02) record
rem --- "TOTAL" = sum of trans_amount + disc_amount
        while total<>0
            dim arm02a$:fattr(arm02a$)
            arm02a.firm_id$=firm_id$
            arm02a.customer_id$=cashheader.customer_id$
            arm02a.ar_type$="  "
            k$=arm02a.firm_id$+arm02a.customer_id$+arm02a.ar_type$ 
            extract record (arm02_dev,key=k$,dom=*next) arm02a$; rem Advisory Locking
            arm02a.lstpay_date$=cashheader.receipt_date$
            arm02a.aging_cur=arm02a.aging_cur+(-total)
            arm02a$=field(arm02a$)
            write record (arm02_dev) arm02a$
            break
        wend


rem --- Update MTD Cash Totals (ars-10c) record
        dim ars10c$:fattr(ars10c$)
        ars10c.firm_id$=firm_id$
        ars10c.record_id_c$="C"
        k$=ars10c.firm_id$+ars10c.record_id_c$ 
        extract record (ars10_dev,key=k$,dom=*next) ars10c$; rem Advisory Locking
        ars10c.mtd_cash=ars10c.mtd_cash+(-mtdcash)
        ars10c.mtd_csh_disc=ars10c.mtd_csh_disc+(-mtddisc)
        ars10c.mtd_csh_gl=ars10c.mtd_csh_gl+(-mtdgl)
        ars10c.nxt_mtd_cash=ars10c.nxt_mtd_cash+(-nmtdcash)
        ars10c.nmtd_cash_ds=ars10c.nmtd_cash_ds+(-nmtddisc)
        ars10c.nmtd_cashgl=ars10c.nmtd_cashgl+(-nmtdgl)
        ars10c$=field(ars10c$)
        write record (ars10_dev) ars10c$


rem --- Generate GL postings for this invoice
        if invheader.invoice_no$(1,1)<>"A"
            gosub receipt_code
            gosub distribution_code
            account$=arm10d.gl_ar_acct$


rem --- Update Cashheader status flag from R to U
        cashheader.status$="U"
        write record (cashheader_dev,key=cashheader_key$)cashheader$
    wend; rem << End  cashheader=1 loop from cashheader read >>


rem --- All done

    if gl$="Y"
       call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
       call pgmdir$+"glc_ctlupdate.aon",status
       call pgmdir$+"glc_ctldelete.aon",status
    endif
    call pgmdir$+"adc_batchdelete.aon",status
goto std_exit


receipt_code: rem --- Retrieve Cash Receipts Code (arm-10c) record
    dim arm10c$:fattr(arm10c$)
    arm10c.firm_id$=firm_id$
    arm10c.record_id_c$="C"
    arm10c.cash_rec_cd$=cashheader.cash_rec_cd$
    arm10c.code_desc$=nf$
    k$=arm10c.firm_id$+arm10c.record_id_c$+arm10c.cash_rec_cd$ 
    find record (arc_cashcode_dev,key=k$,dom=*next) arm10c$
    return


distribution_code: rem --- Retrieve Distribution Code (arm-10d) record
    dim arm02a$:fattr(arm02a$),arm10d$:fattr(arm10d$)
    onaccount=pos("A"=invheader.invoice_no$)=1
    ar_dist_code$=""
    arm10d.firm_id$=firm_id$
    arm10d.record_id_d$="D"
    arm10d.ar_dist_code$=invheader.dist_code$
    arm10d.code_desc$=nf$
    k$=arm10d.firm_id$+arm10d.record_id_d$+arm10d.ar_dist_code$ 
    find record (arc_distcode_dev,key=k$,dom=*next) arm10d$
return


flip_status_flags: rem --- either all 'R's move to U's if updating or back to O's if not updating
    key$=firm_id$+old_sts$
    key_no$="STS_REC_DT"
    read (cashheader_dev,key=key$,knum=key_no$,dom=*next)
    while 1
        cashheader_key$=key(cashheader_dev,end=*break)
        if pos(key$=cashheader_key$)<>1 break
        extract record (cashheader_dev,key=cashheader_key$)cashheader$
        if cashheader.status$=old_sts$
            cashheader.status$=new_sts$
            write record (cashheader_dev)cashheader$
        endif
        read (cashheader_dev,key=cashheader_key$,dom=*next)
    wend
return


glrecap: rem --- Standard GL Recap Routine
    if gl$="Y" 
        call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    endif
return


rem --- Functions
rem --- fnavgday$: Calculate average days to pay
        def fnavgdays(q1,q2,q3)
            q4=((q1*q2)+q3)/(q1+1)
            precision 0
            q4=q4*1
            precision 2
            return q4
        fnend


rem #include disp_message.src

disp_message:rem --- Display Message Dialog
    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return


rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)
old_sts$="R",new_sts$="O";gosub flip_status_flags

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release


rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

old_sts$="R",new_sts$="O"
gosub flip_status_flags

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
