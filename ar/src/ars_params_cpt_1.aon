rem Callpoint program for ARS_PARAMS
rem Program ars_params_cpt.aon v8.0.0 25Apr2006

rem AddonSoftware Version 8.0.0 - 01Oct2006
rem Copyright (c) 1981-2006 AddonSoftware
rem All Rights Reserved

	seterr std_error
	setesc std_error

	enter callpoint$,
:		aon_tpl$,
:		AONObj!,
:		user_tpl$,
:		rdUserObj!,
:		gui_dev,
:		rdSysGUI!,
:		rdForm!,
:		attr_tbl$[all],
:		attr_col$[all],
:		attr_def_tbl$[all],
:		attr_def_col$[all],
:		rec_data$,
:		rec_data$[all],
:		table_chans$[all],
:		dtlg_param$[all],
:		rdGridVect!,
:		err=*next

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Initializations

	dim cp_data$:fattr(callpoint$)
	cp_data$=callpoint$

	callpoint_alias$=cp_data.callpoint_alias$
	callpoint_type$=cp_data.callpoint_type$
	callpoint_id$=cp_data.callpoint_id$(1,4)
	callpoint_ctl$=cp_data.callpoint_ctl$
	callpoint_var$=cp_data.callpoint_dvar$
	callpoint_data$=cp_data.callpoint_data$
	callpoint_key$=cp_data.callpoint_key$
	callpoint_pfx$=cp_data.callpoint_pfx$

rem --- Local variables


rem --- Callpoints and tables handled by this program

	callpoint_id_str$=
:		"ACAL;ADEL;ADEQ;ADIS;AENA;AGCL;AGDS;AGRD;AKEY;AOPT;AOVE;APRA;APRT;ARAR;ARCO;AREA;AREC;AREM;ASHO;ASIZ;AWRI;"+
:		"BDEL;BDEQ;BENA;BEND;BGRD;BNEK;BNEX;BOVE;BPRI;BPRK;BRCO;BREA;BREC;BREM;BSAV;BSHO;BWAR;BWRI;"+
:		"AINP;AINQ;AVAL;BINP;BINQ;"

	callpoint_var_str$=
:		pad("ARS_PARAMS.AMOUNT_MASK",40)+
:		pad("ARS_PARAMS.AR",40)+
:		pad("ARS_PARAMS.AUTO_NO",40)+
:		pad("ARS_PARAMS.BACKORDERS",40)+
:		pad("ARS_PARAMS.BEG_CMT_LINE",40)+
:		pad("ARS_PARAMS.BR_INTERFACE",40)+
:		pad("ARS_PARAMS.CASH_SALE",40)+
:		pad("ARS_PARAMS.CNTR_PRT_PGM",40)+
:		pad("ARS_PARAMS.COMMIT_DAYS",40)+
:		pad("ARS_PARAMS.CURRENT_PER",40)+
:		pad("ARS_PARAMS.CURRENT_YEAR",40)+
:		pad("ARS_PARAMS.CUSTOMER_ID",40)+
:		pad("ARS_PARAMS.CUSTOMER_INPUT",40)+
:		pad("ARS_PARAMS.CUSTOMER_OUTPUT",40)+
:		pad("ARS_PARAMS.CUSTOMER_SIZE",40)+
:		pad("ARS_PARAMS.DEF_SHP_DAYS",40)+
:		pad("ARS_PARAMS.DIST_BY_ITEM",40)+
:		pad("ARS_PARAMS.DROPSHP_COST",40)+
:		pad("ARS_PARAMS.DROPSHP_WHSE",40)+
:		pad("ARS_PARAMS.END_CMT_LINE",40)+
:		pad("ARS_PARAMS.FIRM_ID",40)+
:		pad("ARS_PARAMS.HOLD_ZERO",40)+
:		pad("ARS_PARAMS.INV_HISTPGM",40)+
:		pad("ARS_PARAMS.INV_HIST_FLG",40)+
:		pad("ARS_PARAMS.JOB_NOS",40)+
:		pad("ARS_PARAMS.LABEL_ACROSS",40)+
:		pad("ARS_PARAMS.LABEL_LENGTH",40)+
:		pad("ARS_PARAMS.LABEL_WIDTH",40)+
:		pad("ARS_PARAMS.LINE_CODE",40)+
:		pad("ARS_PARAMS.LSTCOM_DATE",40)+
:		pad("ARS_PARAMS.MAX_CUSTOMER_LEN",40)+
:		pad("ARS_PARAMS.MIN_CSH_SALE",40)+
:		pad("ARS_PARAMS.MIN_LINE_AMT",40)+
:		pad("ARS_PARAMS.MIN_ORD_AMT",40)+
:		pad("ARS_PARAMS.MULTI_DIST",40)+
:		pad("ARS_PARAMS.MULTI_TYPES",40)+
:		pad("ARS_PARAMS.PRT_GL_DET",40)+
:		pad("ARS_PARAMS.RATE_MASK",40)+
:		pad("ARS_PARAMS.REC_PRT_PGM",40)+
:		pad("ARS_PARAMS.REC_PRT_SYS",40)+
:		pad("ARS_PARAMS.RESERVED_STR",40)+
:		pad("ARS_PARAMS.RESERVED_STR",40)+
:		pad("ARS_PARAMS.RESERVED_STR",40)+
:		pad("ARS_PARAMS.RESERVED_STR",40)+
:		pad("ARS_PARAMS.RESERVED_STR",40)+
:		pad("ARS_PARAMS.RETAIN_HIST",40)+
:		pad("ARS_PARAMS.RETAIN_JOBS",40)+
:		pad("ARS_PARAMS.SEQUENCE_00",40)+
:		pad("ARS_PARAMS.SKIP_LN_CODE",40)+
:		pad("ARS_PARAMS.UNIT_MASK",40)+
:		pad("ARS_PARAMS.ZIP_LENGTH",40)

rem	callpoint_opt_str$="OPT1;OPT2;OPT3;" Sample option string for AOPT callpoints

rem --- Route table callpoint to correct subroutine (Table callpoint if callpoint_var$=null)

	if cvs(callpoint_var$,2)=""
		switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
			case fnstr_pos("ACAL",callpoint_id_str$,5);rem After Form Callbacks
			break
			case fnstr_pos("ADEL",callpoint_id_str$,5);rem After Record Delete
			break
			case fnstr_pos("ADEQ",callpoint_id_str$,5);rem After Delete Query
			break
			case fnstr_pos("ADIS",callpoint_id_str$,5);rem After Record Display
			break
			case fnstr_pos("AENA",callpoint_id_str$,5);rem After Enable Map
			break
			case fnstr_pos("AGCL",callpoint_id_str$,5);rem After Grid Clear
			break
			case fnstr_pos("AGDS",callpoint_id_str$,5);rem After Grid Display
			break
			case fnstr_pos("AGRD",callpoint_id_str$,5);rem After Grid Exit
			break
			case fnstr_pos("AKEY",callpoint_id_str$,5);rem After Key Build
			break
			case fnstr_pos("AOPT",callpoint_id_str$,5);rem After Option Select
rem				switch fnstr_pos(callpoint_tpl.callpoint_id$(6),callpoint_opt_str$,5)
rem					case fnstr_pos("OPT1",callpoint_opt_str$,5);rem Option 1 Select Sample
rem					break
rem					case fnstr_pos("OPT2",callpoint_opt_str$,5);rem Option 2 Select Sample
rem					break
rem					case fnstr_pos("OPT3",callpoint_opt_str$,5);rem Option 3 Select Sample
rem					break
rem					case default
rem					break
rem				swend
			break
			case fnstr_pos("AOVE",callpoint_id_str$,5);rem After Table Overview
			break
			case fnstr_pos("APRA",callpoint_id_str$,5);rem After Print All Select
			break
			case fnstr_pos("APRT",callpoint_id_str$,5);rem After Print Rec Select
			break
			case fnstr_pos("ARAR",callpoint_id_str$,5);rem After Array Transfer
escape
			break
			case fnstr_pos("ARCO",callpoint_id_str$,5);rem After Record Copy
			break
			case fnstr_pos("AREA",callpoint_id_str$,5);rem After Record Read
			break
			case fnstr_pos("AREC",callpoint_id_str$,5);rem After New Record
			break
			case fnstr_pos("AREM",callpoint_id_str$,5);rem After Record Removal
			break
			case fnstr_pos("ASHO",callpoint_id_str$,5);rem After Window Show
			break
			case fnstr_pos("ASIZ",callpoint_id_str$,5);rem After Window Resize
			break
			case fnstr_pos("AWRI",callpoint_id_str$,5);rem After Record Write
			break
			case fnstr_pos("BDEL",callpoint_id_str$,5);rem Before Record Delete
			break
			case fnstr_pos("BDEQ",callpoint_id_str$,5);rem Before Delete Query
			break
			case fnstr_pos("BENA",callpoint_id_str$,5);rem Before Enable Map
			break
			case fnstr_pos("BEND",callpoint_id_str$,5);rem Before Table Exit
			break
			case fnstr_pos("BGRD",callpoint_id_str$,5);rem Before Grid Entry
			break
			case fnstr_pos("BNEK",callpoint_id_str$,5);rem Before Next Record Key
			break
			case fnstr_pos("BNEX",callpoint_id_str$,5);rem Before Next Record
			break
			case fnstr_pos("BOVE",callpoint_id_str$,5);rem Before Table Overview
			break
			case fnstr_pos("BPRI",callpoint_id_str$,5);rem Before Previous Record
			break
			case fnstr_pos("BPRK",callpoint_id_str$,5);rem Before Prev Record Key
			break
			case fnstr_pos("BRCO",callpoint_id_str$,5);rem Before Record Copy
			break
			case fnstr_pos("BREA",callpoint_id_str$,5);rem Before Record Read
			break
			case fnstr_pos("BREC",callpoint_id_str$,5);rem Before New Record
			break
			case fnstr_pos("BREM",callpoint_id_str$,5);rem Before Record Removal
			break
			case fnstr_pos("BSAV",callpoint_id_str$,5);rem Before Detail Save
			break
			case fnstr_pos("BSHO",callpoint_id_str$,5);rem Before Window Show
            
 
            rem --- Retrieve sysinfo data

                sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
                dim sysinfo$:sysinfo_template$
                sysinfo$=stbl("+SYSINFO",err=*next)
                firm_id$=sysinfo.firm_id$

            rem --- Open/Lock files

                files=1,begfile=1,endfile=1
                dim files$[files],options$[files],chans$[files],templates$[files]
                files$[1]="ARS_PARAMS";rem --- "ARS_PARAMS"..."ads-01"
                options$[1]="OTA"
                call pgmdir$+"adc_open_tables.aon",begfile,endfile,files$[all],options$[all],
:                                   chans$[all],templates$[all],table_chans$[all],batch,status$

                if status$<>"" goto std_exit
                ads01_dev=num(chans$[1])

            rem --- Retrieve miscellaneous templates

                files=2,begfile=1,endfile=files
                dim ids$[files],templates$[files]
                ids$[1]="ars-01A"
                ids$[2]="gls-01A"
                call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
                if status goto std_exit

            rem --- Dimension miscellaneous string templates

                dim ars01a$:templates$[1],gls01a$:templates$[2]

            rem --- Retrieve parameter data
               
                dim info$[20]
                p8=6;rem --- hard-coded max cust-size?

                ars01a_key$=firm_id$+"AR00"
                find record (ads01_dev,key=ars01a_key$,err=*next) ars01a$

                gls01a_key$=firm_id$+"GL00"
                find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$  
               
                call pgmdir$+"adc_application.aon","GL",info$[all]
                gl$=info$[20]
                call pgmdir$+"adc_application.aon","AP",info$[all]
                ap$=info$[20],br$=info$[9]
                call pgmdir$+"adc_application.aon","IV",info$[all]
                iv$=info$[20]

                dim aon_tpl$:"app:c(2),max_cust:c(2),cust_size:c(2),gl_pers:c(2),gl_installed:c(1),
:                  ap_installed:c(1),iv_installed:c(1),bank_rec:c(1)"

                aon_tpl.app$="AR",aon_tpl.max_cust$=str(p8:"00"),aon_tpl.cust_size$=ars01a.customer_size$,
:                   aon_tpl.gl_pers$=gls01a.total_pers$,aon_tpl.gl_installed$=gl$,aon_tpl.ap_installed$=ap$,
:                   aon_tpl.iv_installed$=iv$,aon_tpl.bank_rec$=br$

			break
			case fnstr_pos("BWAR",callpoint_id_str$,5);rem Before Write Array
			break
			case fnstr_pos("BWRI",callpoint_id_str$,5);rem Before Record Write
			break
			case default
			break
		swend
	endif

rem --- Route column callpoint to correct subroutine (Column callpoint if callpoint_var$<>null)
rem		Column Events:
rem			AINP-After Column Input
rem			AINQ-After Column Inquiry
rem			AVAL-After Column Validation
rem			BINP-Before Column Input
rem			BINQ-Before Column Inquiry

	if cvs(callpoint_var$,2)<>""
		switch fnstr_pos(callpoint_var$,callpoint_var_str$,40)
			case fnstr_pos("ARS_PARAMS.AMOUNT_MASK",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.AR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.AUTO_NO",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
                    rem --- if Y to auto-number custs, set attr for field to use seq# table
                    if callpoint_data$="Y"
                        attr_col$[fnstr_pos("ARS_PARAMS.AUTO_NO",attr_col$[0,1],40),
:                           fnstr_pos("OPTS",attr_def_col$[0,0],5)]="#"                                    
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.BACKORDERS",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.BEG_CMT_LINE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.BR_INTERFACE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
                        aon_tpl.ap_installed$="N";rem --- test
                        if aon_tpl.ap_installed$<>"Y" or aon_tpl.gl_installed$<>"Y" or aon_tpl.bank_rec$<>"Y"
                            if callpoint_data$<>"N"
                                rd_msg_id$="AR_BANKREC_ERR"
                                call pgmdir$+"adc_message.aon",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,table_chans$[all]
                                rec_data$[fnstr_pos("ARS_PARAMS.BR_INTERFACE",rec_data$[0,0],40),0]="N"                                
                                callpoint.callpoint_stat$="REFRESH"                            
                            endif
                        endif
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.CASH_SALE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.CNTR_PRT_PGM",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.COMMIT_DAYS",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.CURRENT_PER",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
                    if num(callpoint_data$)<1 or num(callpoint_data$)>num(aon_tpl.gl_pers$)
                        rd_msg_id$="AR_INVALID_PER"
                        dim rd_msg_tokens$[1];rd_msg_tokens$[1]=aon_tpl.gl_pers$
                        call pgmdir$+"adc_message.aon",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,table_chans$[all]
                        rec_data$[fnstr_pos("ARS_PARAMS.CURRENT_PER",rec_data$[0,0],40),0]=
:                           rec_data$[fnstr_pos("ARS_PARAMS.CURRENT_PER",rec_data$[0,0],40),1]
                        callpoint.callpoint_stat$="REFRESH"
                    endif
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.CURRENT_YEAR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.CUSTOMER_ID",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.CUSTOMER_INPUT",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
                    maxsz=num(aon_tpl.max_cust$),cust_sz=0
                    for wk=1 to len(callpoint_data$)
                        if pos("#"=callpoint_data$(wk,1))<>0 then let cust_sz=cust_sz+1,cust_out$=cust_out$+"0"
                        if pos("#"=callpoint_data$(wk,1))=0 then let cust_out$=cust_out$+callpoint_data$(wk,1)
                    next wk
                    if cust_sz > num(aon_tpl.max_cust$)
                        rd_msg_id$="AR_CUSTNO_MAX"
                        dim rd_msg_tokens$[1];rd_msg_tokens$[1]=str(num(aon_tpl.max_cust$))
                        call pgmdir$+"adc_message.aon",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,table_chans$[all]
                        rec_data$[fnstr_pos("ARS_PARAMS.CUSTOMER_INPUT",rec_data$[0,0],40),0]=
:                           rec_data$[fnstr_pos("ARS_PARAMS.CUSTOMER_INPUT",rec_data$[0,0],40),1]
                        callpoint.callpoint_stat$="REFRESH" 
                    else
                        rem --- set customer_size and customer_output based on input mask entered
                        rem --- i.e., same as 6200 logic in ARP.AB
                        rec_data$[fnstr_pos("ARS_PARAMS.CUSTOMER_SIZE",rec_data$[0,0],40),0]=str(cust_sz:"00")
                        rec_data$[fnstr_pos("ARS_PARAMS.CUSTOMER_OUTPUT",rec_data$[0,0],40),0]=cust_out$   

                    endif
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.CUSTOMER_OUTPUT",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.CUSTOMER_SIZE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.DEF_SHP_DAYS",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.DIST_BY_ITEM",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
                        if aon_tpl.iv_installed$<>"Y"
                            if callpoint_data$<>"N"
                                rd_msg_id$="AR_DISTITEM_ERR"
                                call pgmdir$+"adc_message.aon",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,table_chans$[all]
                                rec_data$[fnstr_pos("ARS_PARAMS.DIST_BY_ITEM",rec_data$[0,0],40),0]="N"
                                callpoint.callpoint_stat$="REFRESH"                            
                            endif
                        endif
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.DROPSHP_COST",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.DROPSHP_WHSE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.END_CMT_LINE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.FIRM_ID",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.HOLD_ZERO",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.INV_HISTPGM",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.INV_HIST_FLG",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.JOB_NOS",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.LABEL_ACROSS",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.LABEL_LENGTH",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.LABEL_WIDTH",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.LINE_CODE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.LSTCOM_DATE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.MAX_CUSTOMER_LEN",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.MIN_CSH_SALE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.MIN_LINE_AMT",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.MIN_ORD_AMT",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.MULTI_DIST",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.MULTI_TYPES",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.PRT_GL_DET",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.RATE_MASK",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.REC_PRT_PGM",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.REC_PRT_SYS",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.RESERVED_STR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.RESERVED_STR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.RESERVED_STR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.RESERVED_STR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.RESERVED_STR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.RETAIN_HIST",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.RETAIN_JOBS",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.SEQUENCE_00",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.SKIP_LN_CODE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.UNIT_MASK",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARS_PARAMS.ZIP_LENGTH",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break

			case default
			break
		swend
	endif

rem --- All done

	goto std_exit

open_tables:rem --- Open Tables

	call stbl("+DIR_PGM")+"rdc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_PGM")+"adc_message.aon",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,rd_table_chans$[all]

	return

rem --- Functions

	def fnstr_pos(att0$,att1$,att1)=int((pos(att0$=att1$,att1)+att1-1)/att1)
	def fngett_attr$(att0$)=attr_tbl$[fnstr_pos(att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(att0,att0$)=attr_col$[att0,fnstr_pos(att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(att0$,att1$)=attr_col$[fnstr_pos(att0$,attr_col$[0,1],40),fnstr_pos(att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(att0$)=rec_data$[fnstr_pos(att0$,rec_data$[0,0],40),0]
	def fndate$(att0$)=date(jul(num(att0$(1,4)),num(att0$(5,2)),num(att0$(7,2))):stbl("+DATE_MASK"))

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
	pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
	call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$
	if pos("EXIT"=rd_err_act$) goto std_error_exit
	if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$) retry

std_error_exit:
	
	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ escape
	
std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) exit 
	release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

rem #endinclude std_exit.src

	end

