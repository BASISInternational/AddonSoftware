rem arr - Customer Name & Address Listing
rem Program arr_nameaddr v8.0.0 15Jun2006 (arr_db)
rem Created by adx_progconv.bbx v1.0.3 (06/15/2006 03:51:38)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    file_dev=arm01_dev

rem --- Dimension string templates

    dim arm01a$:templates$[2]

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    sequence$=fnget_fld_data$(table$,"dreport_sequence")
    begcust$=fnget_fld_data$(table$,"customer_id_1")
    endcust$=fnget_fld_data$(table$,"customer_id_2")
    begalt$=fnget_fld_data$(table$,"alt_sequence_1")
    endalt$=fnget_fld_data$(table$,"alt_sequence_2")

rem --- Retrieve parameter records

    ars01a_key$=sysinfo.firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    customer_size=num(ars01a.customer_size$)
    m0$=ars01a.customer_output$
    m0=len(m0$)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Initializations

    dim headings$[3]
    m8$="(###)-###-####"
    more=1
    keynum=0
    begvalue$=begcust$
    endvalue$=endcust$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]="By Customer ID"
    if sequence$="A"
       keynum=2
       begvalue$=begalt$
       endvalue$=endalt$
       headings$[2]="By Alternate Sequence"
    endif
    if begvalue$<>"" begvalue$=begvalue$(1,len(begvalue$)-1)+$FF$
    endvalue=len(endvalue$)

rem --- Document columns

    dim columns$[3,3]
    columns$[0,0]="Customer",columns$[0,1]="C",columns$[0,2]=str(m0+1)
    columns$[1,0]="Phone",columns$[1,1]="C",columns$[1,2]=str(len(m8$)+1)
    columns$[2,0]="Name",columns$[2,1]="C",columns$[2,2]="30"
    columns$[3,0]="Address",columns$[3,1]="C",columns$[3,2]="90"

rem --- Start progress meter and position file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,arm01_dev,1,meter_num,status
    read (arm01_dev,knum=keynum,key=firm_id$+begvalue$,dom=*next)

rem --- Read next Customer Master (arm-01) record

    while more
          k$=key(arm01_dev,knum=keynum,end=*break)
          if pos(firm_id$=k$)<>1 break
          if endvalue$<>"" if k$(3,endvalue)>endvalue$ break
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          read record (arm01_dev) arm01a$

          rem --- Prepare line

          address$=""
          x$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+
:            arm01a.city$+arm01a.state_code$+arm01a.zip_code$
          call pgmdir$+"adc_address.aon",x$,24,5,9,24
          for x=1 to 120 step 24
              l$=cvs(x$(x,24),2)
              if l$<>"" then if address$<>"" address$=address$+", "
              address$=address$+l$
          next x

          rem --- Store document line

          OutVect!.addItem(fnmask$(arm01a.customer_id$(1,customer_size),m0$))
          OutVect!.addItem(fnmask$(arm01a.phone_no$,m8$))
          OutVect!.addItem(arm01a.customer_name$)
          OutVect!.addItem(address$)

          rem --- Loop back for next customer master

    wend

rem --- All done

    goto std_exit

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
