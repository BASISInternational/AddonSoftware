rem Callpoint program for ARE_CASHHDRa
rem Program are_cashhdr_cpt.aon v8.0.0 25Apr2006

rem AddonSoftware Version 8.0.0 - 01Oct2006
rem Copyright (c) 1981-2006 AddonSoftware
rem All Rights Reserved

rem --- ******* NOTES;

rem --- need to get rec_data$[0,1](3,1) set to "S" so I can bypass avals on save...Sam?
rem --- need BCAN callpoint to be sure I can delete GL recs written if user subsequently cancels out of form
rem --- make sure auto apply routine doesn't auto-apply against a negative inv (OA or CM)

	seterr std_error
	setesc std_error

	enter callpoint$,
:		aon_tpl$,
:		AONObj!,
:		user_tpl$,
:		rdUserObj!,
:		gui_dev,
:		rdSysGUI!,
:		rdForm!,
:		attr_tbl$[all],
:		attr_col$[all],
:		attr_def_tbl$[all],
:		attr_def_col$[all],
:		rec_data$,
:		rec_data$[all],
:		table_chans$[all],
:		dtlg_param$[all],
:		rdGridVect!,
:		err=*next

rem --- Initializations

	dim cp_data$:fattr(callpoint$)
	cp_data$=callpoint$

	callpoint_alias$=cp_data.callpoint_alias$
	callpoint_type$=cp_data.callpoint_type$
	callpoint_id$=cp_data.callpoint_id$(1,4)
	callpoint_ctl$=cp_data.callpoint_ctl$
	callpoint_var$=cp_data.callpoint_dvar$
	callpoint_data$=cp_data.callpoint_data$
	callpoint_key$=cp_data.callpoint_key$
	callpoint_pfx$=cp_data.callpoint_pfx$

rem --- Local variables

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_id_str$=
:		"ACAL;ADEL;ADEQ;ADIS;AENA;AGCL;AGDS;AGRD;AKEY;AOPT;AOVE;APRA;APRT;ARAR;ARCO;AREA;AREC;AREM;ASHO;ASIZ;AWRI;"+
:		"BDEL;BDEQ;BENA;BEND;BGRD;BNEK;BNEX;BOVE;BPRI;BPRK;BRCO;BREA;BREC;BREM;BSAV;BSHO;BWAR;BWRI;"+
:		"AINP;AINQ;AVAL;BINP;BINQ;AVEC;ACUS;AWIN;"

	callpoint_var_str$=
:		pad("ARE_CASHHDR.ABA_NO",40)+
:		pad("ARE_CASHHDR.AR_CHECK_NO",40)+
:		pad("ARE_CASHHDR.AR_TYPE",40)+
:		pad("ARE_CASHHDR.CASH_CHECK",40)+
:		pad("ARE_CASHHDR.CASH_REC_CD",40)+
:		pad("ARE_CASHHDR.CUSTOMER_ID",40)+
:		pad("ARE_CASHHDR.FIRM_ID",40)+
:		pad("ARE_CASHHDR.PAYMENT_AMT",40)+
:		pad("ARE_CASHHDR.RECEIPT_DATE",40)+
:		pad("ARE_CASHHDR.RESERVED_KEY_01",40)+
:		pad("ARE_CASHHDR.RESERVED_KEY_02",40)+
:		pad("ARE_CASHHDR.RESERVED_STR",40)

rem --- 	callpoint_opt_str$="OPT1;OPT2;OPT3;" Sample option string for AOPT callpoints
	callpoint_opt_str$="APLY;OACT;GLED;"


rem --- Route table callpoint to correct subroutine (Table callpoint if callpoint_var$=null)

	if cvs(callpoint_var$,2)=""
		switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
			case fnstr_pos("ACAL",callpoint_id_str$,5);rem After Form Callbacks
			break
			case fnstr_pos("ACUS",callpoint_id_str$,5);rem After Custom Event

				data_present$="N"
				gosub check_required_fields
				if data_present$="Y"
					dim rd_gui_event$:tmpl(gui_dev)
					dim rd_notify_base$:noticetpl(0,0)
					rd_gui_event$=rdSysGUI!.getLastEventString()
					rd_ctl_ID=dec(rd_gui_event.ID$)
					if rd_gui_event.code$="N"
						rd_notify_base$=notice(gui_dev,rd_gui_event.x%)
						dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
						rd_notice$=rd_notify_base$
					endif

					switch rd_ctl_id
						case num(aon_tpl.OA_chkbox_id$)
							if aon_tpl.existing_chk$="Y"
								rd_msg_id$="AR_CHK_EXISTS"
								gosub disp_message
								if rdForm!.getControl(num(aon_tpl.oa_chkbox_id$)).isSelected()
									rdForm!.getControl(num(aon_tpl.oa_chkbox_id$)).setSelected(0)
								else
									rdForm!.getControl(num(aon_tpl.oa_chkbox_id$)).setSelected(1)
								endif
							else						
								gosub process_OA_chkbox
								callpoint.callpoint_stat$="REFRESH"
							endif
						break
						case num(aon_tpl.zbal_chkbox_id$)
							if aon_tpl.existing_chk$="Y"
								rd_msg_id$="AR_CHK_EXISTS"
								gosub disp_message
								rdForm!.getControl(num(aon_tpl.zbal_chkbox_id$)).setSelected(0)
							else
								gosub process_zbal_chkbox
								callpoint.callpoint_stat$="REFRESH"		
							endif
						break
						case num(aon_tpl.asel_chkbox_id$)
							if num(fnget_rec$("ARE_CASHHDR.PAYMENT_AMT"))<0
								rd_msg_id$="AR_NEG_CHK"
								gosub disp_message
								rdForm!.getControl(num(aon_tpl.asel_chkbox_id$)).setSelected(0)
							else
								if aon_tpl.existing_chk$="Y"
									rd_msg_id$="AR_CHK_EXISTS"
									gosub disp_message
									rdForm!.getControl(num(aon_tpl.asel_chkbox_id$)).setSelected(0)
								else
									on_off=dec(rd_gui_event.flags$)
									gosub process_asel_chkbox
									callpoint.callpoint_stat$="REFRESH"
								endif
							endif
						break

						case num(aon_tpl.gridInvoice_id$)
							gosub process_gridInvoice_event
							callpoint.callpoint_stat$="REFRESH"
						break
					swend
				endif
			break
			case fnstr_pos("ADEL",callpoint_id_str$,5);rem After Record Delete

				gosub delete_cashdet_cashbal

			break
			case fnstr_pos("ADEQ",callpoint_id_str$,5);rem After Delete Query
			break
			case fnstr_pos("ADIS",callpoint_id_str$,5);rem After Record Display
			
				gosub get_customer_balance
				wk_cash_cd$=fnget_rec$("ARE_CASHHDR.CASH_REC_CD")
				gosub get_cash_rec_cd
				rdForm!.getControl(num(aon_tpl.asel_chkbox_id$)).setSelected(0);rem --- force auto-select off for existing tran
				rdForm!.getControl(num(aon_tpl.zbal_chkbox_id$)).setSelected(0);rem --- force zero-bal disp off for existing tran

				are_cashdet_dev=fnget_dev("ARE_CASHDET")
				are_cashgl_dev=fnget_dev("ARE_CASHGL")
				dim are11a$:fnget_tpl$("ARE_CASHDET")
				dim are21a$:fnget_tpl$("ARE_CASHGL")

				existing_dtl$=""
				pymt_dist$=""
				aon_tpl.gl_applied$="0"
				aon_tpl.existing_chk$="Y"

				rem --- read thru/store existing are-11 info
				more_dtl=1
				read (are_cashdet_dev,key=callpoint_key$,dom=*next)
				while more_dtl
					read record(are_cashdet_dev,end=*break)are11a$
					if are11a$(1,len(callpoint_key$))=callpoint_key$
						dim wk$(40)
						wk$(1)=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
						wk$(11)=are11a.ar_inv_no$
						wk$(21)=are11a.apply_amt$
						wk$(31)=are11a.discount_amt$
						pymt_dist$=pymt_dist$+wk$
						existing_dtl$=existing_dtl$+wk$
					else
						more_dtl=0
					endif
				wend

				rem --- read thru existing are-21's and store total GL amt posted this check
				more_dtl=1
				read(are_cashgl_dev,key=callpoint_key$,dom=*next)
				while more_dtl
					read record(are_cashgl_dev,end=*break)are21a$
					if are21a$(1,len(callpoint_key$))=callpoint_key$
						gl_applied=gl_applied+num(are21a.gl_post_amt$)
					else
						more_dtl=0
					endif
				wend

				if gl_applied
					rdForm!.getControl(num(aon_tpl.GLind_id$)).setText("* includes GL distributions")
					rdForm!.getControl(num(aon_tpl.GLstar_id$)).setText("*")
				endif

				aon_tpl.gl_applied$=str(gl_applied)
				AONObj!.setItem(num(aon_tpl.pymt_dist$),pymt_dist$)
				AONObj!.setItem(num(aon_tpl.existing_dtl$),existing_dtl$)
				
				currdtl$=pymt_dist$
				gosub get_open_invoices

				if len(currdtl$)
					rem --- should only happen if new check applied OA, and this OA inv rec not in art-01/11
					if len(currdtl$)<>40 then escape;rem --- for testing... shouldn't happen
					if currdtl$(11,2)<>"OA" then escape;rem --- for testing... shouldn't happen

					vectInvoice!.addItem("")
					vectInvoice!.addItem(currdtl$(11,10))
					vectInvoice!.addItem(fnmdy$(fnget_rec$("ARE_CASHHDR.RECEIPT_DATE")))
					vectInvoice!.addItem(fnmdy$(fnget_rec$("ARE_CASHHDR.RECEIPT_DATE")))
					vectInvoice!.addItem(currdtl$(21,10))
					vectInvoice!.addItem(currdtl$(31,10))
					vectInvoice!.addItem(str(0))
					vectInvoice!.addItem(fnmdy$(fnget_rec$("ARE_CASHHDR.RECEIPT_DATE")))
					vectInvoice!.addItem(str(currdtl$(21,10)))
					vectInvoice!.addItem(str(0))
					vectInvoice!.addItem(str(0))
					vectInvoice!.addItem("")				
					vectInvSel!.addItem("Y")
					chk_applied=chk_applied+num(currdtl$(21,10))
				endif

				disp_applied=chk_applied+gl_applied
				disp_bal=num(fnget_rec$("ARE_CASHHDR.PAYMENT_AMT"))-disp_applied
				rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0]=str(disp_applied)
				rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=str(disp_bal)

				gosub fill_bottom_grid

                callpoint.callpoint_stat$="REFRESH"

			break
			case fnstr_pos("AENA",callpoint_id_str$,5);rem After Enable Map
			break

			case fnstr_pos("AGCL",callpoint_id_str$,5);rem After Grid Clear
			break
			case fnstr_pos("AGDS",callpoint_id_str$,5);rem After Grid Display
			break
			case fnstr_pos("AGRD",callpoint_id_str$,5);rem After Grid Exit
			break
			case fnstr_pos("AKEY",callpoint_id_str$,5);rem After Key Build
			break
			case fnstr_pos("AOPT",callpoint_id_str$,5);rem After Option Select

				switch fnstr_pos(callpoint.callpoint_id$(6),callpoint_opt_str$,5)
					case fnstr_pos("APLY",callpoint_opt_str$,5);rem Apply Select Option button

						gosub validate_before_writing
						switch(pos(validate_passed$="YON")-1)
							case 0;rem --- Y; apply
								gosub update_cashhdr_cashdet_cashbal
							break
							case 1;rem --- O; apply On Acct
								gosub apply_on_acct
							break
							case 2;rem --- N; resume posting
							break
							case default
							break
						swend
					break

					case fnstr_pos("OACT",callpoint_opt_str$,5);rem Apply On Acct button

						gosub apply_on_acct

					break

					case fnstr_pos("GLED",callpoint_opt_str$,5);rem General Ledger Dist
						rem --- change below to "Y" instead of "N" for production
						if aon_tpl.glint$="Y"
							gosub gl_distribution
						else
							rd_msg_id$="AR_NO_GL"
							gosub disp_message							
						endif
					break

					case default
					break
			swend
			break
			case fnstr_pos("AOVE",callpoint_id_str$,5);rem After Table Overview
			break
			case fnstr_pos("APRA",callpoint_id_str$,5);rem After Print All Select
			break
			case fnstr_pos("APRT",callpoint_id_str$,5);rem After Print Rec Select
			break
			case fnstr_pos("ARAR",callpoint_id_str$,5);rem After Array Transfer
			break
			case fnstr_pos("ARCO",callpoint_id_str$,5);rem After Record Copy
			break
			case fnstr_pos("AREA",callpoint_id_str$,5);rem After Record Read
			break
			case fnstr_pos("AREC",callpoint_id_str$,5);rem After New Record
			
				rem --- clear custom controls (grids) and AONObj! items
				
				gridInvoice!=AONObj!.getItem(num(aon_tpl.inv_grid$))                             
                gridInvoice!.clearMainGrid()				
				gridInvoice!.setColumnStyle(0,rdSysGUI!.GRID_STYLE_UNCHECKED)				
				gridInvoice!.setSelectedCell(0,0)
								
				vectInvoice!=rdSysGUI!.makeVector()
				vectInvSel!=rdSysGUI!.makeVector()
							
				AONObj!.setItem(num(aon_tpl.inv_vect$),vectInvoice!)				
				AONObj!.setItem(num(aon_tpl.inv_sel_vect$),vectInvSel!)
				AONObj!.setItem(num(aon_tpl.pymt_dist$),"")
				AONObj!.setItem(num(aon_tpl.existing_dtl$),"")

				aon_tpl.existing_chk$=""
				aon_tpl.gl_applied$="0"
				
				rdForm!.getControl(num(aon_tpl.GLind_id$)).setText("")
				rdForm!.getControl(num(aon_tpl.GLstar_id$)).setText("")
                callpoint.callpoint_stat$="REFRESH"

			break
			case fnstr_pos("AREM",callpoint_id_str$,5);rem After Record Removal
			break
			case fnstr_pos("ASHO",callpoint_id_str$,5);rem After Window Show
			break
			case fnstr_pos("ASIZ",callpoint_id_str$,5);rem After Window Resize

				if AONObj!<>null()
					gridInvoice!=AONObj!.getItem(num(aon_tpl.inv_grid$))
					gridInvoice!.setSize(rdForm!.getWidth()-(gridInvoice!.getX()*2),rdForm!.getHeight()-(gridInvoice!.getY()+40))
					gridInvoice!.setFitToGrid(1)
					gridInvoice!.setColumnWidth(0,25)
				endif

			break
			case fnstr_pos("AVEC",callpoint_id_str$,5);rem After Vector Update
			break
			case fnstr_pos("AWIN",callpoint_id_str$,5);rem After Window Create

				rem --- Open/Lock files

                files=30,begfile=1,endfile=10
                dim files$[files],options$[files],chans$[files],templates$[files]
                files$[1]="ARE_CASHHDR";rem --- "are-01"
                files$[2]="ARE_CASHDET";rem --- "are-11"
                files$[3]="ARE_CASHGL";rem --- "are-21"
                files$[4]="ARE_CASHBAL";rem --- "are-31"
                files$[5]="ART_INVHDR";rem --- "art-01"
                files$[6]="ART_INVDET";rem --- "art-11"
                files$[7]="ARM_CUSTMAST";rem --- "arm-01"
                files$[8]="ARM_CUSTDET";rem --- "arm-02
                files$[9]="ARC_CASHCODE";rem --- "arm-10C"
                files$[10]="ARS_PARAMS";rem --- "ads-01"

                for wkx=begfile to endfile
                    options$[wkx]="OTA"
                next wkx

                call pgmdir$+"adc_open_tables.aon",begfile,endfile,files$[all],options$[all],
:                                   chans$[all],templates$[all],table_chans$[all],batch,status$

                if status$<>"" goto std_exit
                ads01_dev=num(chans$[10])

				rem --- Retrieve miscellaneous templates

                files=2,begfile=1,endfile=files
                dim ids$[files],templates$[files]
                ids$[1]="ars-01A"
                ids$[2]="gls-01A"
                call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
                if status goto std_exit

				rem --- Dimension miscellaneous string templates

                dim ars01a$:templates$[1],gls01a$:templates$[2]
                aon_tpl_str$="firm_id:c(2),glint:c(1),glyr:c(4),glper:c(2),glworkfile:c(16),"
				aon_tpl_str$=aon_tpl_str$+"cash_flag:c(1),disc_flag:c(1),arglboth:c(1),amt_msk:c(15),existing_chk:c(1),"
				aon_tpl_str$=aon_tpl_str$+"OA_chkbox_id:c(5),zbal_chkbox_id:c(5),asel_chkbox_id:c(5),"
				aon_tpl_str$=aon_tpl_str$+"gridCheck_id:c(5),gridInvoice_id:c(5),gridCheck_cols:c(5),gridInvoice_cols:c(5),"
				aon_tpl_str$=aon_tpl_str$+"gridCheck_rows:c(5),gridInvoice_rows:c(5),"
				aon_tpl_str$=aon_tpl_str$+"chk_grid:c(5),inv_grid:c(5),chk_vect:c(5),inv_vect:c(5),chk_sel_vect:c(5),"
				aon_tpl_str$=aon_tpl_str$+"inv_sel_vect:c(5),cur_bal_ofst:c(5),avail_disc_ofst:c(5),"
				aon_tpl_str$=aon_tpl_str$+"applied_amt_ofst:c(5),disc_taken_ofst:c(5),new_bal_ofst:c(5),pymt_dist:c(5),"
				aon_tpl_str$=aon_tpl_str$+"existing_dtl:c(5),sv_row:c(5),GLind_id:c(5),GLstar_id:c(5),gl_applied:c(10)"
				dim aon_tpl$:aon_tpl_str$
                aon_tpl.firm_id$=firm_id$

				rem --- Additional File Opens

                gl$="N"
                status=0
                source$=pgm(-2)
                call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,"AR",glw11$,gl$,status
                if status<>0 goto std_exit
                aon_tpl.glint$=gl$
                aon_tpl.glworkfile$=glw11$

                if gl$="Y"
                    files=21,begfile=20,endfile=21
                    dim files$[files],options$[files],chans$[files],templates$[files]
                    files$[20]="GLM_ACCT",options$[20]="OTA";rem --- "glm-01"
                    files$[21]=glw11$,options$[21]="OTAS";rem --- s means no err if tmplt not found
                    rem --- will need alias name, not disk name, when opening work file
                    rem --- will also need option to lock/clear file [21]; not using in this pgm for now, so bypassing.CAH

	                call pgmdir$+"adc_open_tables.aon",begfile,endfile,files$[all],options$[all],
:	                  chans$[all],templates$[all],table_chans$[all],batch,status$

                    if status$<>"" goto std_exit

				endif

				rem --- Retrieve parameter data - not keeping any of it here, just make sure params exist
               
                ars01a_key$=firm_id$+"AR00"
                find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
				aon_tpl.amt_msk$=ars01a.amount_mask$

                gls01a_key$=firm_id$+"GL00"
                find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$

				rem --- add custom controls, checkboxes and grids
				AONObj!=rdSysGUI!.makeVector()
				nxt_ctlID=num(stbl("+CUSTOM_CTL",err=std_error))

				OA_chkbox!=rdForm!.addCheckBox(nxt_ctlID,545,72,200,20,"Show On-Account and Credits?",$04$)
				zbal_chkbox!=rdForm!.addCheckBox(nxt_ctlID+1,545,92,200,20,"Show zero-balance invoices?",$$)
				asel_chkbox!=rdForm!.addCheckBox(nxt_ctlID+2,545,112,200,20,"Auto-select by Invoice?",$$)
				
				gridInvoice!=rdForm!.addGrid(nxt_ctlID+3,5,160,700,210)

				rdForm!.addStaticText(nxt_ctlID+4,450,140,200,20,"")
				rdForm!.addStaticText(nxt_ctlID+5,510,118,20,20,"")
				
				rem --- store ctl ID's of custom controls				
				aon_tpl.OA_chkbox_id$=str(nxt_ctlID)
				aon_tpl.zbal_chkbox_id$=str(nxt_ctlID+1)
				aon_tpl.asel_chkbox_id$=str(nxt_ctlID+2)				
				aon_tpl.gridInvoice_id$=str(nxt_ctlID+3)
				aon_tpl.GLind_id$=str(nxt_ctlID+4)
				aon_tpl.GLstar_id$=str(nxt_ctlID+5)

				rem --- set user-friendly names for controls' positions in AONObj vector, num grid cols, data pos w/in vector, etc.				
				aon_tpl.gridInvoice_cols$="12"				
				aon_tpl.gridInvoice_rows$="10"				
				aon_tpl.inv_grid$="0"				
				aon_tpl.inv_vect$="1"				
				aon_tpl.inv_sel_vect$="2"
				aon_tpl.cur_bal_ofst$="5"
				aon_tpl.avail_disc_ofst$="6"
				aon_tpl.applied_amt_ofst$="8"
				aon_tpl.disc_taken_ofst$="9"
				aon_tpl.new_bal_ofst$="10"
				aon_tpl.pymt_dist$="3"
				aon_tpl.existing_dtl$="4"

				gosub format_grids

				rem --- store grid, vectors, and existing/newly posted detail strings in AONObj!				
				AONObj!.addItem(gridInvoice!)				
				AONObj!.addItem(rdSysGUI!.makeVector());rem --- vector for open (and maybe closed) invoices				
				AONObj!.addItem(rdSysGUI!.makeVector());rem --- vector for open invoice grid's checkbox values
				AONObj!.addItem("");rem --- string for pymt_dist$, containing chk#/inv#/pd/disc, 10 char ea
				AONObj!.addItem("");rem --- string for existing_dtl$;same format as pymt_dist$,but corres to existing are-11's

				rem --- set callbacks - processed in ACUS callpoint
				gridInvoice!.setCallback(gridInvoice!.ON_GRID_EDIT_START,"custom_event")
				gridInvoice!.setCallback(gridInvoice!.ON_GRID_EDIT_STOP,"custom_event")
				gridInvoice!.setCallback(gridInvoice!.ON_GRID_SELECT_ROW,"custom_event")
				gridInvoice!.setCallback(gridInvoice!.ON_GRID_SELECT_COLUMN,"custom_event")
				OA_chkbox!.setCallback(OA_chkbox!.ON_CHECK_OFF,"custom_event")
				OA_chkbox!.setCallback(OA_chkbox!.ON_CHECK_ON,"custom_event")
				zbal_chkbox!.setCallback(zbal_chkbox!.ON_CHECK_OFF,"custom_event")
				zbal_chkbox!.setCallback(zbal_chkbox!.ON_CHECK_ON,"custom_event")	
				asel_chkbox!.setCallback(asel_chkbox!.ON_CHECK_OFF,"custom_event")
				asel_chkbox!.setCallback(asel_chkbox!.ON_CHECK_ON,"custom_event")

				rem --- misc other init
				gridInvoice!.setColumnEditable(0,1)
				gridInvoice!.setColumnEditable(8,1)
				gridInvoice!.setColumnEditable(9,1)
				gridInvoice!.setTabAction(rdSysGUI!.GRID_NAVIGATE_LEGACY)

			break

			case fnstr_pos("AWRI",callpoint_id_str$,5);rem After Record Write

				rem --- no GL dist logic in here, yet
				gosub validate_before_writing
				if validate_passed$="Y"
					gosub update_cashhdr_cashdet_cashbal
				else
					if validate_passed$="O"
						gosub apply_on_acct
					endif
				endif

			break

			case fnstr_pos("BDEL",callpoint_id_str$,5);rem Before Record Delete
			break
			case fnstr_pos("BDEQ",callpoint_id_str$,5);rem Before Delete Query
			break
			case fnstr_pos("BENA",callpoint_id_str$,5);rem Before Enable Map
			break
			case fnstr_pos("BEND",callpoint_id_str$,5);rem Before Table Exit
			break
			case fnstr_pos("BGRD",callpoint_id_str$,5);rem Before Grid Entry
			break
			case fnstr_pos("BNEK",callpoint_id_str$,5);rem Before Next Record Key
			break
			case fnstr_pos("BNEX",callpoint_id_str$,5);rem Before Next Record
			break
			case fnstr_pos("BOVE",callpoint_id_str$,5);rem Before Table Overview
			break
			case fnstr_pos("BPRI",callpoint_id_str$,5);rem Before Previous Record
			break
			case fnstr_pos("BPRK",callpoint_id_str$,5);rem Before Prev Record Key
			break
			case fnstr_pos("BRCO",callpoint_id_str$,5);rem Before Record Copy
			break
			case fnstr_pos("BREA",callpoint_id_str$,5);rem Before Record Read
			break
			case fnstr_pos("BREC",callpoint_id_str$,5);rem Before New Record
			break
			case fnstr_pos("BREM",callpoint_id_str$,5);rem Before Record Removal
			break
			case fnstr_pos("BSAV",callpoint_id_str$,5);rem Before Detail Save
			break
			case fnstr_pos("BSHO",callpoint_id_str$,5);rem Before Window Show
			break
			case fnstr_pos("BWAR",callpoint_id_str$,5);rem Before Write Array
			break
			case fnstr_pos("BWRI",callpoint_id_str$,5);rem Before Record Write

				gosub validate_before_writing
				if validate_passed$<>"Y"
					callpoint.callpoint_stat$="ABORT"
				endif
			break
			case default
			break
		swend
	endif

rem --- Route column callpoint to correct subroutine (Column callpoint if callpoint_var$<>null)
rem		Column Events:
rem			AINP-After Column Input
rem			AINQ-After Column Inquiry
rem			AVAL-After Column Validation
rem			BINP-Before Column Input
rem			BINQ-Before Column Inquiry

	if cvs(callpoint_var$,2)<>""
		switch fnstr_pos(callpoint_var$,callpoint_var_str$,40)
			case fnstr_pos("ARE_CASHHDR.ABA_NO",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.AR_CHECK_NO",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.AR_TYPE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.CASH_CHECK",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)

						if callpoint_data$="$"
							wctl$=str(num(fngetv_attr$("ARE_CASHHDR.ABA_NO","CTLI")):"00000")
							wpos=pos(wctl$=callpoint.callpoint_map$,8)
							callpoint.callpoint_map$(wpos+6,1)="I"
							callpoint.callpoint_stat$="ABLEMAP"
						else
							wctl$=str(num(fngetv_attr$("ARE_CASHHDR.ABA_NO","CTLI")):"00000")
							wpos=pos(wctl$=callpoint.callpoint_map$,8)
							callpoint.callpoint_map$(wpos+6,1)=" "
							callpoint.callpoint_stat$="ABLEMAP"
						endif

					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.CASH_REC_CD",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
						
						wk_cash_cd$=callpoint_data$
						gosub get_cash_rec_cd

					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.CUSTOMER_ID",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)

						gosub get_customer_balance

						callpoint.callpoint_stat$="REFRESH"

					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.FIRM_ID",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.PAYMENT_AMT",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)

							rem --- coming back thru on save? should be able to check rec_data$[0,1](3,1), but isn't working
							rem --- idea is to avoid doing aval if oper does ctl-S; save should be done w/ option buttons and AOPT
							if rec_data$[fnstr_pos("ARE_CASHHDR.PAYMENT_AMT",rec_data$[0,0],40),1]=callpoint_data$
								break
							else
							if num(rec_data$[fnstr_pos("ARE_CASHHDR.PAYMENT_AMT",rec_data$[0,0],40),1])<>0 and 
:								rec_data$[fnstr_pos("ARE_CASHHDR.PAYMENT_AMT",rec_data$[0,0],40),1]<>callpoint_data$
								pymt_dist$=AONObj!.getItem(num(aon_tpl.pymt_dist$))
								old_pay=num(rec_data$[fnstr_pos("ARE_CASHHDR.PAYMENT_AMT",rec_data$[0,0],40),1])
								new_pay=num(callpoint_data$)
								pay_id$=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
								rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:									str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])-old_pay+new_pay)
								if rdForm!.getControl(num(aon_tpl.asel_chkbox_id$)).isSelected()
									to_pay=new_pay-old_pay
									gosub auto_select_on
								endif								
								callpoint.callpoint_stat$="REFRESH"
							else
								data_present$="NO-MSG"
								gosub check_required_fields
								if data_present$="Y"
									gosub get_open_invoices;rem --- currdtl$ and pymt_dist$ s/b empty here?

									disp_applied=0
									disp_bal=num(callpoint_data$)
									rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=callpoint_data$
									if num(callpoint_data$)>0
										gosub refresh_asel_amounts
									else
										rdForm!.getControl(num(aon_tpl.asel_chkbox_id$)).setSelected(0)
										on_off=0
										gosub process_asel_chkbox
									endif

									gosub fill_bottom_grid
									ctl_stat$="D"
									gosub disable_key_fields
									callpoint.callpoint_stat$="ABLEMAP-REFRESH"									
								else
									callpoint.callpoint_stat$="CLEAR-NEW"
								endif
							endif
						endif
                        rem --- store chk amt so if/as we come thru this routine again we know if on new or existing/changing tran
						rec_data$[fnstr_pos("ARE_CASHHDR.PAYMENT_AMT",rec_data$[0,0],40),1]=callpoint_data$

					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.RECEIPT_DATE",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
							
						if len(callpoint_data$)<6 or pos("9"<>callpoint_data$)=0 then callpoint_data$=stbl("+SYSTEM_DATE")
						gl$=aon_tpl.glint$
						gl$="N";rem --- testing
						recpt_date$=callpoint_data$        
						if gl$="Y" 
							call pgmdir$+"glc_datecheck.aon",recpt_date$,"Y",per$,yr$,status
							if status>99
								callpoint.callpoint_stat$="ABORT"
							else
								aon_tpl.glyr$=yr$
								aon_tpl.glper$=per$
							endif
						endif
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.RESERVED_KEY_01",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.RESERVED_KEY_02",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break
			case fnstr_pos("ARE_CASHHDR.RESERVED_STR",callpoint_var_str$,40)
				switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
					case fnstr_pos("AINP",callpoint_id_str$,5)
					break
					case fnstr_pos("AINQ",callpoint_id_str$,5)
					break
					case fnstr_pos("AVAL",callpoint_id_str$,5)
					break
					case fnstr_pos("BINP",callpoint_id_str$,5)
					break
					case fnstr_pos("BINQ",callpoint_id_str$,5)
					break
				swend
			break

			case default
			break
		swend
	endif

rem --- All done

	goto std_exit

disable_key_fields:
	rem --- used after entering check amount to disable key fields, or on new rec to re-enable them, depending on ctl_stat$
	dim key_fields$[3]
	key_fields$[0]="RECEIPT_DATE"
	key_fields$[1]="CUSTOMER_ID"
	key_fields$[2]="CASH_REC_CD"
	key_fields$[3]="AR_CHECK_NO"

	for wk=0 to 3
		wctl$=str(num(fngetv_attr$("ARE_CASHHDR."+key_fields$[wk],"CTLI")):"00000")
		wpos=pos(wctl$=callpoint.callpoint_map$,8)
		callpoint.callpoint_map$(wpos+6,1)=ctl_stat$
		callpoint.callpoint_stat$="ABLEMAP"
	next wk
return

get_cash_rec_cd:

	arm10_dev=fnget_dev("ARC_CASHCODE")
	dim arm10c$:fnget_tpl$("ARC_CASHCODE")
	read record(arm10_dev,key=firm_id$+"C"+wk_cash_cd$,dom=*next)arm10c$

	aon_tpl.cash_flag$=arm10c.cash_flag$
	aon_tpl.disc_flag$=arm10c.disc_flag$
	aon_tpl.arglboth$=arm10c.arglboth$
	
return

get_customer_balance:

	arm_custdet_dev=fnget_dev("ARM_CUSTDET")
	dim arm02a$:fnget_tpl$("ARM_CUSTDET")
	arm02a.firm_id$=firm_id$,arm02a.customer_id$=fnget_rec$("ARE_CASHHDR.CUSTOMER_ID"),arm02a.ar_type$="  "
	readrecord(arm_custdet_dev,key=arm02a.firm_id$+arm02a.customer_id$+arm02a.ar_type$,err=*next)arm02a$
	rec_data$[fnstr_pos("<<DISPLAY>>.DISP_CUST_BAL",rec_data$[0,0],40),0]=
:		str(num(arm02a.aging_future$)+num(arm02a.aging_cur$)+num(arm02a.aging_30$)+
:       num(arm02a.aging_60$)+num(arm02a.aging_90$)+num(arm02a.aging_120$))

return

check_required_fields:

	if cvs(fnget_rec$("ARE_CASHHDR.RECEIPT_DATE"),3)="" or 
:		cvs(fnget_rec$("ARE_CASHHDR.CUSTOMER_ID"),3)="" or
:		cvs(fnget_rec$("ARE_CASHHDR.CASH_REC_CD"),3)="" or
:		cvs(fnget_rec$("ARE_CASHHDR.AR_CHECK_NO"),3)=""
		if data_present$="NO-MSG"
			rd_msg_id$="AR_REQ_DATA"
			gosub disp_message
			callpoint.callpoint_stat$="ABORT"
		endif
	else
		data_present$="Y"
	endif
return

update_cashhdr_cashdet_cashbal:
rem --- need logic to put out two trans for application of OA funds (and CM) -- a negative to the OA, and positive on the invoice
	are_cashhdr_dev=fnget_dev("ARE_CASHHDR")
	are_cashdet_dev=fnget_dev("ARE_CASHDET")
	are_cashbal_dev=fnget_dev("ARE_CASHBAL")
	are_cashgl_dev=fnget_dev("ARE_CASHGL")


	pymt_dist$=AONObj!.getItem(num(aon_tpl.pymt_dist$))
	if cvs(pymt_dist$,3)<>""

	for updt_loop=1 to len(pymt_dist$) step 40

		dim are01a$:fnget_tpl$("ARE_CASHHDR")
		dim are11a$:fnget_tpl$("ARE_CASHDET")
		dim are31a$:fnget_tpl$("ARE_CASHBAL")
		dim are21a$:fnget_tpl$("ARE_CASHGL")

		are01a.firm_id$=firm_id$,are11a.firm_id$=firm_id$,are31a.firm_id$=firm_id$,are21a.firm_id$=firm_id$
		are01a.receipt_date$=fnget_rec$("ARE_CASHHDR.RECEIPT_DATE"),are11a.receipt_date$=are01a.receipt_date$,
:																	are21a.receipt_date$=are01a.receipt_date$
		are01a.customer_id$=fnget_rec$("ARE_CASHHDR.CUSTOMER_ID"),are11a.customer_id$=are01a.customer_id$,
:																  are31a.customer_id$=are01a.customer_id$,
:																  are21a.customer_id$=are01a.customer_id$
		are01a.cash_rec_cd$=fnget_rec$("ARE_CASHHDR.CASH_REC_CD"),are11a.cash_rec_cd$=are01a.cash_rec_cd$,
:																  are21a.cash_rec_cd$=are01a.cash_rec_cd$
		are01a.ar_check_no$=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO"),are11a.ar_check_no$=are01a.ar_check_no$,
:																  are21a.ar_check_no$=are01a.ar_check_no$		
		are11a.ar_inv_no$=cvs(pymt_dist$(updt_loop+10,10),3),are31a.ar_inv_no$=are11a.ar_inv_no$

		old_pay=0,old_disc=0

		rem --- cashhdr, are-01
		readrecord(are_cashhdr_dev,key=are01a.firm_id$+are01a.ar_type$+are01a.reserved_key_01$+are01a.receipt_date$+
:			are01a.customer_id$+are01a.cash_rec_cd$+are11a.ar_check_no$+are01a.reserved_key_02$,dom=*next)are01a$		
		are01a.payment_amt$=fnget_rec$("ARE_CASHHDR.PAYMENT_AMT")
		are01a.cash_check$=fnget_rec$("ARE_CASHHDR.CASH_CHECK")
		are01a.aba_no$=fnget_rec$("ARE_CASHHDR.ABA_NO")		
		are01a$=field(are01a$);writerecord(are_cashhdr_dev,key=are01a.firm_id$+are01a.ar_type$+are01a.reserved_key_01$+
:			are01a.receipt_date$+are01a.customer_id$+are01a.cash_rec_cd$+are11a.ar_check_no$+are01a.reserved_key_02$)are01a$

		apply_amt=num(pymt_dist$(updt_loop+20,10))
		disc_amt=num(pymt_dist$(updt_loop+30,10))
		rec_data$[0,1](1,2)="C "

		rem --- cashdet, are-11
		readrecord(are_cashdet_dev,key=are11a.firm_id$+are11a.ar_type$+are11a.reserved_key_01$+are11a.receipt_date$+
:			are11a.customer_id$+are11a.cash_rec_cd$+are11a.ar_check_no$+are11a.reserved_key_02$+are11a.ar_inv_no$,dom=*next)are11a$
		if num(are11a.apply_amt)<>0 or num(are11a.discount_amt$)<>0
			old_pay=num(are11a.apply_amt$)
			old_disc=num(are11a.discount_amt$)
		endif
		are11a.apply_amt$=str(apply_amt)
		are11a.discount_amt$=str(disc_amt)
		if apply_amt<>0 or disc_amt<>0
			are11a$=field(are11a$);writerecord(are_cashdet_dev,key=are11a.firm_id$+are11a.ar_type$+are11a.reserved_key_01$+
:				are11a.receipt_date$+are11a.customer_id$+are11a.cash_rec_cd$+are11a.ar_check_no$+are11a.reserved_key_02$+
:				are11a.ar_inv_no$)are11a$
		else
			remove(are_cashdet_dev,key=are11a.firm_id$+are11a.ar_type$+are11a.reserved_key_01$+are11a.receipt_date$+
:				are11a.customer_id$+are11a.cash_rec_cd$+are11a.ar_check_no$+are11a.reserved_key_02$+are11a.ar_inv_no$,dom=*next)
		endif

		rem --- cashbal, are-31
		readrecord(are_cashbal_dev,key=are31a.firm_id$+are31a.ar_type$+are31a.reserved_str$+are31a.customer_id$+
:			are31a.ar_inv_no$,dom=*next)are31a$
		are31a.apply_amt$=str(num(are31a.apply_amt)-old_pay+num(are11a.apply_amt$))
		are31a.discount_amt$=str(num(are31a.discount_amt$)-old_disc+num(are11a.discount_amt$))
		if num(are31a.apply_amt$)<>0 or num(are31a.discount_amt$)<>0
			are31a$=field(are31a$);writerecord(are_cashbal_dev,key=are31a.firm_id$+are31a.ar_type$+are31a.reserved_str$+
:				are31a.customer_id$+are31a.ar_inv_no$)are31a$
		else
			remove(are_cashbal_dev,key=are31a.firm_id$+are31a.ar_type$+are31a.reserved_str$+are31a.customer_id$+
:				are31a.ar_inv_no$,dom=*next)
		endif

	next updt_loop
	endif
	callpoint.callpoint_stat$="NEW"
	gridInvoice!=AONObj!.getItem(num(aon_tpl.inv_grid$))
	gridInvoice!.clearMainGrid()

return


validate_before_writing:
	
	validate_passed$="Y"
	if num(fnget_rec$("<<DISPLAY>>.DISP_BAL"))<>0
		rd_msg_id$="AR_NOT_DIST"
		gosub disp_message
		validate_passed$=rd_msg_opt$
	endif

	vectInvoice!=AONObj!.getItem(num(aon_tpl.inv_vect$))
	cols=num(aon_tpl.gridInvoice_cols$)
	if vectInvoice!.size()
		neg_bal=0
		for check_loop=0 to vectInvoice!.size()-1 step cols
			if num(vectInvoice!.getItem(check_loop+num(aon_tpl.new_bal_ofst$)))<0
				neg_bal=neg_bal+1
			endif
		next check_loop
		if neg_bal<>0
			rd_msg_id$="AR_NEG_BAL"
			gosub disp_message
			if rd_msg_opt$="N"
				validate_passed$="N"
			endif
		endif
	endif

return

apply_on_acct:

	oa_date$=fnget_rec$("ARE_CASHHDR.RECEIPT_DATE")
	oa_date$=oa_date$(4)
	dim wk$(40)
	wk$(1)=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
	wk$(11)="OA"+oa_date$
	wk$(21)=str(num((fnget_rec$("<<DISPLAY>>.DISP_BAL"))))

	if num(wk$(21,10))<>0
		pymt_dist$=AONObj!.getItem(num(aon_tpl.pymt_dist$))
		wk=pos(wk$(1,20)=pymt_dist$)
			if wk<>0
				pymt_dist$(wk+20,10)=str(num(pymt_dist$(wk+20,10))+num(wk$(21,10)))
				pymt_dist$(wk+30,10)=str(num(pymt_dist$(wk+30,10))+num(wk$(31,10)))
			else
				pymt_dist$=pymt_dist$+wk$
			endif

		AONObj!.setItem(num(aon_tpl.pymt_dist$),pymt_dist$)

		gosub update_cashhdr_cashdet_cashbal
	endif

return

delete_cashdet_cashbal:

	are_cashdet_dev=fnget_dev("ARE_CASHDET")
	are_cashbal_dev=fnget_dev("ARE_CASHBAL")	

	dim are11a$:fnget_tpl$("ARE_CASHDET")
	dim are31a$:fnget_tpl$("ARE_CASHBAL")	

	are11a.firm_id$=firm_id$,are31a.firm_id$=firm_id$
	are11a.receipt_date$=fnget_rec$("ARE_CASHHDR.RECEIPT_DATE")
	are11a.customer_id$=fnget_rec$("ARE_CASHHDR.CUSTOMER_ID"),are31a.customer_id$=are11a.customer_id$
	are11a.cash_rec_cd$=fnget_rec$("ARE_CASHHDR.CASH_REC_CD")
	are11a.ar_check_no$=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")		

	read(are_cashdet_dev,key=are11a.firm_id$+are11a.ar_type$+are11a.reserved_key_01$+are11a.receipt_date$+are11a.customer_id$+
:		are11a.cash_rec_cd$+are11a.ar_check_no$+are11a.reserved_key_02$,dom=*next)
	more_dtl=1
	while more_dtl

		rem --- cashdet, are-11
		readrecord(are_cashdet_dev)are11a$
		if are11a.firm_id$=firm_id$ and are11a.receipt_date$=fnget_rec$("ARE_CASHHDR.RECEIPT_DATE") and
:										are11a.customer_id$=fnget_rec$("ARE_CASHHDR.CUSTOMER_ID") and 
:										are11a.cash_rec_cd$=fnget_rec$("ARE_CASHHDR.CASH_REC_CD") and
:										are11a.ar_check_no$=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
			del_pay=num(are11a.apply_amt$)
			del_disc=num(are11a.discount_amt$)
			are31a.ar_inv_no$=are11a.ar_inv_no$
			remove(are_cashdet_dev,key=are11a.firm_id$+are11a.ar_type$+are11a.reserved_key_01$+are11a.receipt_date$+
:				are11a.customer_id$+are11a.cash_rec_cd$+are11a.ar_check_no$+are11a.reserved_key_02$+are11a.ar_inv_no$)
		
			rem --- cashbal, are-31
			readrecord(are_cashbal_dev,key=are31a.firm_id$+are31a.ar_type$+are31a.reserved_str$+are31a.customer_id$+
:				are31a.ar_inv_no$)are31a$
			are31a.apply_amt$=str(num(are31a.apply_amt)-del_pay)
			are31a.discount_amt$=str(num(are31a.discount_amt$)-del_disc)
			if num(are31a.apply_amt$)<>0 or num(are31a.discount_amt$)<>0
				are31a$=field(are31a$);writerecord(are_cashbal_dev,key=are31a.firm_id$+are31a.ar_type$+are31a.reserved_str$+
:					are31a.customer_id$+are31a.ar_inv_no$)are31a$
			else
				remove(are_cashbal_dev,key=are31a.firm_id$+are31a.ar_type$+are31a.reserved_str$+are31a.customer_id$+
:					are31a.ar_inv_no$)
			endif
		else
			more_dtl=0
		endif

	wend

	gridInvoice!=AONObj!.getItem(num(aon_tpl.inv_grid$))
	gridInvoice!.clearMainGrid()

return

gl_distribution:

	rd_user_id$=stbl("+USER_ID")
	dim rd_dflt_data$[1,1]
	rd_key_pfx$=fnget_rec$("ARE_CASHHDR.FIRM_ID")+fnget_rec$("ARE_CASHHDR.AR_TYPE")+
:				fnget_rec$("ARE_CASHHDR.RESERVED_KEY_01")+fnget_rec$("ARE_CASHHDR.RECEIPT_DATE")+
:				fnget_rec$("ARE_CASHHDR.CUSTOMER_ID")+fnget_rec$("ARE_CASHHDR.CASH_REC_CD")+
:				fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")+fnget_rec$("ARE_CASHHDR.RESERVED_KEY_02")
	call stbl("+DIR_PGM")+"rdm_run_prog.aon",
:		"ARE_CASHGL",
:		rd_user_id$,
:		"MNT",
:		rd_key_pfx$,
:		rd_table_chans$[all],
:		"",
:		rd_dflt_data$[all]

	rem --- read thru are-21's just written/updated (if any) to update applied and bal amts
	are_cashgl_dev=fnget_dev("ARE_CASHGL")
	dim are21a$:fnget_tpl$("ARE_CASHGL")
	more_dtl=1
	read(are_cashgl_dev,key=rd_key_pfx$,dom=*next)
	while more_dtl
		read record(are_cashgl_dev,end=*break)are21a$
		if are21a$(1,len(rd_key_pfx$))=rd_key_pfx$
			gl_applied=gl_applied+num(are21a.gl_post_amt$)
		else
			more_dtl=0
		endif
	wend

	glapp=num(aon_tpl.gl_applied$)-gl_applied
	
	if glapp
		rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:			str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])+glapp)
		rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0]=
:			str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0])-glapp)
		rdForm!.getControl(num(aon_tpl.GLind_id$)).setText("* includes GL distributions")
		rdForm!.getControl(num(aon_tpl.GLstar_id$)).setText("*")
		callpoint.callpoint_stat$="REFRESH"
	endif

return

delete_cashgl:
rem --- intended to use if oper cancels out -- GL dist could already be written in another process, so need to be able to remove them
escape;rem --- monitor gl dist remove
	are_cashgl_dev=fnget_dev("ARE_CASHGL")
	dim are21a$:fnget_tpl$("ARE_CASHGL")

	are21a.firm_id$=firm_id$
	are21a.receipt_date$=fnget_rec$("ARE_CASHHDR.RECEIPT_DATE")
	are21a.customer_id$=fnget_rec$("ARE_CASHHDR.CUSTOMER_ID")
	are21a.cash_rec_cd$=fnget_rec$("ARE_CASHHDR.CASH_REC_CD")
	are21a.ar_check_no$=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")	

	read(are_cashgl_dev,key=are21a.firm_id$+are21a.ar_type$+are21a.reserved_key_01$+are21a.receipt_date$+are21a.customer_id$+
:		are21a.cash_rec_cd$+are21a.ar_check_no$+are21a.reserved_key_02$,dom=*next)
	more_dtl=1
	while more_dtl
		readrecord(are_cashgl_dev)are21a$
		if are21a.firm_id$=firm_id$ and are21a.receipt_date$=fnget_rec$("ARE_CASHHDR.RECEIPT_DATE") and
:										are21a.customer_id$=fnget_rec$("ARE_CASHHDR.CUSTOMER_ID") and 
:										are21a.cash_rec_cd$=fnget_rec$("ARE_CASHHDR.CASH_REC_CD") and
:										are21a.ar_check_no$=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")

			remove(are_cashgl_dev,key=are21a.firm_id$+are21a.ar_type$+are21a.reserved_key_01$+are21a.receipt_date$+
:				are21a.customer_id$+are21a.cash_rec_cd$+are21a.ar_check_no$+are21a.reserved_key_02$+are21a.gl_account$)
		else
			more_dtl=0
		endif

	wend

return

get_open_invoices:

rem --- use this routine both for new checks, and existing (already present in are-01/11)
rem --- diff is, for existing, will set applied/discount amounts according to are-11 (using AONObj! item containing existing dtl)
rem --- also uses AONObj! item containing current pay/disc amts to restore what you've currently paid if re-executing this routine
	inv_key$=firm_id$+"  "+fnget_rec$("ARE_CASHHDR.CUSTOMER_ID")
	art_invhdr_dev=fnget_dev("ART_INVHDR")
	art_invdet_dev=fnget_dev("ART_INVDET")
	dim art01a$:fnget_tpl$("ART_INVHDR")
	dim art11a$:fnget_tpl$("ART_INVDET")


 	vectInvoice!=rdSysGUI!.makeVector()

 	vectInvSel!=rdSysGUI!.makeVector()

	OA_chkbox!=rdForm!.getControl(num(aon_tpl.OA_chkbox_id$))
	zbal_chkbox!=rdForm!.getControl(num(aon_tpl.zbal_chkbox_id$))
	other_avail=0
	chk_applied=0

	read(art_invhdr_dev,key=inv_key$,dom=*next)
	more_hdrs=1
	while more_hdrs
		read record(art_invhdr_dev,end=*break)art01a$
		if art01a.firm_id$+art01a.ar_type$+art01a.customer_id$=inv_key$
			inv_amt=num(art01a.invoice_amt$),orig_inv_amt=inv_amt
			if aon_tpl.disc_flag$="Y" and fnget_rec$("ARE_CASHHDR.RECEIPT_DATE")<= pad(art01a.disc_date$,8) 
				disc_amt=num(art01a.disc_allowed$)
			else
				disc_amt=0
			endif

			read(art_invdet_dev,key=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$,dom=*next)
			more_dtl=1
			while more_dtl
				read record(art_invdet_dev,end=*break)art11a$
				if art11a.firm_id$+art11a.ar_type$+art11a.customer_id$+art11a.ar_inv_no$=
:					art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
					if art11a.trans_type$<>" "
						inv_amt=inv_amt+num(art11a.trans_amt$)+num(art11a.adjdisc_amt$)
						disc_amt=disc_amt+num(art11a.adjdisc_amt$)
					endif
				else
					more_dtl=0
				endif
			wend

			if inv_amt=0 disc_amt=0
			disp_applied=0
			disp_disc_applied=0
			disp_bal=inv_amt
			gosub applied_but_not_posted
			chk_sel$="N"
			if len(currdtl$) gosub include_curr_tran_amts

			rem --- now load invoice vector w/ data to display in grid		
			
				if inv_amt or zbal_chkbox!.isSelected() 
					vectInvoice!.addItem("")
					vectInvoice!.addItem(art01a.ar_inv_no$)
					vectInvoice!.addItem(fnmdy$(art01a.invoice_date$))
					vectInvoice!.addItem(fnmdy$(art01a.inv_due_date$))
					vectInvoice!.addItem(str(orig_inv_amt))
					vectInvoice!.addItem(str(inv_amt))
					vectInvoice!.addItem(str(disc_amt))
					vectInvoice!.addItem(fnmdy$(pad(art01a.disc_date$,8)))
					vectInvoice!.addItem(str(disp_applied))
					vectInvoice!.addItem(str(disp_disc_applied))
					vectInvoice!.addItem(str(disp_bal))
					vectInvoice!.addItem("")
					if chk_sel$="Y" vectInvSel!.addItem("Y") else vectInvSel!.addItem("N")
				endif
						
		else
			more_hdrs=0
		endif
	wend
		

 	AONObj!.setItem(num(aon_tpl.inv_vect$),vectInvoice!)

	AONObj!.setItem(num(aon_tpl.inv_sel_vect$),vectInvSel!)

return

applied_but_not_posted:

	are_cashbal_dev=fnget_dev("ARE_CASHBAL")
	dim are31a$:fnget_tpl$("ARE_CASHBAL")
	read record(are_cashbal_dev,key=art01a.firm_id$+art01a.ar_type$+are31a.reserved_str$+
:				art01a.customer_id$+art01a.ar_inv_no$,dom=*next)are31a$
	inv_amt=inv_amt-num(are31a.apply_amt$)-num(are31a.discount_amt$)	
	if aon_tpl.disc_flag$="Y" disc_amt=disc_amt-num(are31a.discount_amt$)
	disp_bal=disp_bal-num(are31a.apply_amt$)-num(are31a.discount_amt$)
return

include_curr_tran_amts:

	existing_dtl$=AONObj!.getItem(num(aon_tpl.existing_dtl$))
	existing_dtl=0
	if len(existing_dtl$)<>0 existing_dtl=pos(art01a.ar_inv_no$=existing_dtl$(11),40)
	rem --- existing_dtl$ contains info already in are-11
	if existing_dtl<>0
		exist_applied=num(existing_dtl$(existing_dtl+20,10))
		exist_disc=num(existing_dtl$(existing_dtl+30,10))
	else
		exist_applied=0
		exist_disc=0
	endif
	
	rem --- currdtl$ contains applied/discount amounts in vectInvoice, but not necessarily in are-11
	curr_dtl=pos(art01a.ar_inv_no$=currdtl$(11),40)
	if curr_dtl<>0
		inv_amt=inv_amt+exist_applied+exist_disc
		disc_amt=disc_amt+exist_disc
		disp_applied=num(currdtl$(curr_dtl+20,10))
		disp_disc_applied=num(currdtl$(curr_dtl+30,10))
 		disp_bal=inv_amt-disp_applied-disp_disc_applied
		chk_applied=chk_applied+disp_applied
		if disp_applied<>0 or disp_disc<>0 then chk_sel$="Y"
		currdtl$=currdtl$(1,curr_dtl-1)+currdtl$(curr_dtl+40)
	else
		disp_applied=0
		disp_disc_applied=0
	endif

return

fill_bottom_grid:

	rdSysGUI!.setRepaintEnabled(0)
	gridInvoice!=AONObj!.getItem(num(aon_tpl.inv_grid$))
	minrows=num(aon_tpl.gridInvoice_rows$)
	if vectInvoice!.size()
		numrow=vectInvoice!.size()/gridInvoice!.getNumColumns()
rem --- 		if numrow<=minrows numrow=minrows
		gridInvoice!.clearMainGrid()
		gridInvoice!.setColumnStyle(0,rdSysGUI!.GRID_STYLE_UNCHECKED)
		gridInvoice!.setNumRows(numrow)
		gridInvoice!.setCellText(0,0,vectInvoice!)
		if vectInvSel!.size()
			for wk=0 to vectInvSel!.size()-1
				if vectInvSel!.getItem(wk)="Y"
					gridInvoice!.setCellStyle(wk,0,rdSysGUI!.GRID_STYLE_CHECKED)
				endif
			next wk
		endif
		gridInvoice!.resort()
		gridInvoice!.setSelectedRow(0)
		gridInvoice!.setSelectedColumn(1)
	endif
	rdSysGUI!.setRepaintEnabled(1)
return

process_OA_chkbox:

	rem --- if checked off, remove any OA/CM's from grid (unless that's all there is), preserving actual check entry
	rem --- if checked on, read art-01/11 to build vectCheck! with OA/CM's, and add after actual check, if there is one

	on_off=dec(rd_gui_event.flags$)
	pymt_dist$=AONObj!.getItem(num(aon_tpl.pymt_dist$))

	if on_off=0		
		vectInvoice!=AONObj!.getItem(num(aon_tpl.inv_vect$))
		vectInvSel!=AONObj!.getItem(num(aon_tpl.inv_sel_vect$))
		cols=num(aon_tpl.gridInvoice_cols$)
		if vectInvoice!.size()
			voffset=0

			while voffset < vectInvoice!.size()
				rem --- test to see if this is an OA/CM line - not sure, given just test data, if I need to check both amts
				orig_inv_amt=num(vectInvoice!.getItem(voffset+4))
				cur_inv_amt=num(vectInvoice!.getItem(voffset+num(aon_tpl.cur_bal_ofst$)))
				if orig_inv_amt<0 or cur_inv_amt<0
					remove_amt=num(vectInvoice!.getItem(voffset+num(aon_tpl.applied_amt_ofst$)))
					remove_disc=num(vectInvoice!.getItem(voffset+num(aon_tpl.disc_taken_ofst$)))
					remove_inv$=vectInvoice!.getItem(voffset+1)
					for wk=1 to cols
						vectInvoice!.removeItem(voffset)						
					next wk
					dim wk$(20)
					wk$(1)=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
					wk$(11)=remove_inv$
					wk=pos(wk$=pymt_dist$,40)
					if wk<>0
						pymt_dist$(wk+20,10)=str(num(pymt_dist$(wk+20,10))-remove_amt)
						pymt_dist$(wk+30,10)=str(num(pymt_dist$(wk+30,10))-remove_disc)
					endif
					vectInvSel!.removeItem(voffset/cols)
					rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:						str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])+remove_amt)					
				else
					voffset=voffset+cols
				endif
			wend
			AONObj!.setItem(num(aon_tpl.pymt_dist$),pymt_dist$)
		endif
	else
		
		currdtl$=pymt_dist$

		gosub get_open_invoices

	endif

	gosub fill_bottom_grid	
	gosub refresh_asel_amounts
	

return

process_zbal_chkbox:

	pymt_dist$=AONObj!.getItem(num(aon_tpl.pymt_dist$))
	currdtl$=pymt_dist$
	gosub get_open_invoices

	gosub fill_bottom_grid
	gosub refresh_asel_amounts

return

process_asel_chkbox:
rem --- escape;rem --- follow	
	if on_off=0
		gosub auto_select_off		
		AONObj!.setItem(num(aon_tpl.pymt_dist$),"")
	else
		gosub auto_select_off;rem --- turn off/reset amts before turning on
		pymt_dist$=""
		pay_id$=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
		to_pay=num(fnget_rec$("<<DISPLAY>>.DISP_BAL"))
rem --- 		to_pay=num(fnget_rec$("ARE_CASHHDR.PAYMENT_AMT"))
		gosub auto_select_on
					
					
	endif
return

auto_select_on:

	vectInvoice!=AONObj!.getItem(num(aon_tpl.inv_vect$))
	vectInvSel!=AONObj!.getItem(num(aon_tpl.inv_sel_vect$))
	gridInvoice_cols=num(aon_tpl.gridInvoice_cols$)
	if vectInvoice!.size()
		for payloop=0 to vectInvoice!.size()-1  step gridInvoice_cols
				inv_bal=num(vectInvoice!.getItem(payloop+num(aon_tpl.new_bal_ofst$)))
:					-num(vectInvoice!.getItem(payloop+num(aon_tpl.avail_disc_ofst$)))
:					+num(vectInvoice!.getItem(payloop+num(aon_tpl.disc_taken_ofst$)))
				disc_amt=num(vectInvoice!.getItem(payloop+num(aon_tpl.avail_disc_ofst$)))-
:					num(vectInvoice!.getItem(payloop+num(aon_tpl.disc_taken_ofst$)))
				if inv_bal>0
					if inv_bal<=to_pay
						pd_amt=inv_bal
						vectInvoice!.setItem(payloop+num(aon_tpl.applied_amt_ofst$),
:							str(num(vectInvoice!.getItem(payloop+num(aon_tpl.applied_amt_ofst$)))+inv_bal))
						vectInvoice!.setItem(payloop+num(aon_tpl.disc_taken_ofst$),
:							str(num(vectInvoice!.getItem(payloop+num(aon_tpl.disc_taken_ofst$)))+disc_amt))
						vectInvoice!.setItem(payloop+num(aon_tpl.new_bal_ofst$),"0")
						to_pay=to_pay-inv_bal
						vectInvSel!.setItem(int(payloop/gridInvoice_cols),"Y")
					else
						pd_amt=to_pay
						vectInvoice!.setItem(payloop+num(aon_tpl.applied_amt_ofst$),
:							str(num(vectInvoice!.getItem(payloop+num(aon_tpl.applied_amt_ofst$)))+to_pay))
						vectInvoice!.setItem(payloop+num(aon_tpl.disc_taken_ofst$),
:							str(num(vectInvoice!.getItem(payloop+num(aon_tpl.disc_taken_ofst$)))+disc_amt))
						vectInvoice!.setItem(payloop+num(aon_tpl.new_bal_ofst$),str(inv_bal-to_pay))
						to_pay=0
						vectInvSel!.setItem(int(payloop/gridInvoice_cols),"Y")
					endif
					rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0]=
:						str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0])+pd_amt)
					rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:						str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])-pd_amt)
					dim wk$(40)
					wk$(1)=pay_id$
					wk$(11)=vectInvoice!.getItem(payloop+1)
					wk=pos(wk$(1,20)=pymt_dist$)
					if wk<>0
						pymt_dist$(wk+20,10)=str(num(pymt_dist$(wk+20,10))+pd_amt)
						pymt_dist$(wk+30,10)=str(num(pymt_dist$(wk+30,10))+disc_amt)
					else
						wk$(21)=str(pd_amt)
						wk$(31)=str(disc_amt)
						pymt_dist$=pymt_dist$+wk$
					endif
				endif
				if to_pay=0 then break
		next payloop
		gosub fill_bottom_grid
		AONObj!.setItem(num(aon_tpl.inv_vect$),vectInvoice!)
		AONObj!.setItem(num(aon_tpl.inv_sel_vect$),vectInvSel!)
		AONObj!.setItem(num(aon_tpl.pymt_dist$),pymt_dist$)
	endif
return

auto_select_off:

	vectInvoice!=AONObj!.getItem(num(aon_tpl.inv_vect$))
	vectInvSel!=AONObj!.getItem(num(aon_tpl.inv_sel_vect$))
	gridInvoice_cols=num(aon_tpl.gridInvoice_cols$)
	if vectInvoice!.size()
		for payloop=0 to vectInvoice!.size()-1  step gridInvoice_cols		
					vectInvoice!.setItem(payloop+num(aon_tpl.applied_amt_ofst$),"0")
					vectInvoice!.setItem(payloop+num(aon_tpl.disc_taken_ofst$),"0")
					vectInvoice!.setItem(payloop+num(aon_tpl.new_bal_ofst$),
:						str(num(vectInvoice!.getItem(payloop+num(aon_tpl.cur_bal_ofst$)))))				
					vectInvSel!.setItem(int(payloop/gridInvoice_cols),"N")		
		next payloop
		gosub fill_bottom_grid
		rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0]=str(0)
		rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=fnget_rec$("ARE_CASHHDR.PAYMENT_AMT")
		AONObj!.setItem(num(aon_tpl.inv_vect$),vectInvoice!)
		AONObj!.setItem(num(aon_tpl.inv_sel_vect$),vectInvSel!)
	endif
return


refresh_asel_amounts:

	asel_chkbox!=rdForm!.getControl(num(aon_tpl.asel_chkbox_id$))
	if asel_chkbox!.isSelected()
		for on_off=0 to 1
			gosub process_asel_chkbox
		next on_off
	endif

return


process_gridInvoice_event:

	vectInvoice!=AONObj!.getItem(num(aon_tpl.inv_vect$))
	vectInvSel!=AONObj!.getItem(num(aon_tpl.inv_sel_vect$))
	gridInvoice!=AONObj!.getItem(num(aon_tpl.inv_grid$))
	clicked_row=gridInvoice!.getSelectedRow()
	cols=num(aon_tpl.gridInvoice_cols$)

	pymt_dist$=AONObj!.getItem(num(aon_tpl.pymt_dist$))

	if vectInvoice!.size()=0 then return

	switch dec(rd_notice.code$)

		case 7;rem --- edit stop
			clicked_row=num(aon_tpl.sv_row$)
			rem --- only column 8 and 9 are enabled (except for checkbox at 0); 8=pay, 9=discount
			rem --- don't allow discount if not paying anything

			old_pay=num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$)))
			old_disc=num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))

			new_pay=0
			new_disc=0
			if dec(rd_notice.col$)=8
				new_pay=num(rd_notice.buf$)
				new_disc=old_disc
				if new_pay=0 new_disc=0
			else
				new_disc=num(rd_notice.buf$)
				new_pay=old_pay
				if new_pay=0 new_disc=0
			endif
			vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$),str(new_pay))
			vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$),str(new_disc))
			vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$),
:					str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$)))+old_pay-new_pay+old_disc-new_disc))
			gridInvoice!.setCellText(clicked_row,num(aon_tpl.applied_amt_ofst$),str(new_pay))
			gridInvoice!.setCellText(clicked_row,num(aon_tpl.disc_taken_ofst$),str(new_disc))
			gridInvoice!.setCellText(clicked_row,num(aon_tpl.new_bal_ofst$),
:					vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$)))

			rem --- if this is an OA/CM line (test inv amt, curr amt), then applied amt just increases total to apply
			if num(vectInvoice!.getItem(clicked_row*cols+4))<0
:				or num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.cur_bal_ofst$))) <0
				rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:					str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])+old_pay-new_pay)
			else
				rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0]=
:					str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0])-old_pay+new_pay)
				rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:					str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])+old_pay-new_pay)
			endif

			if new_pay=0
				vectInvSel!.setItem(clicked_row,"N")
				gridInvoice!.setCellStyle(clicked_row,0,rdSysGUI!.GRID_STYLE_UNCHECKED)
			endif
			dim wk$(40)
			wk$(1)=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
			wk$(11)=vectInvoice!.getItem(clicked_row*cols+1)
			wk=pos(wk$(1,20)=pymt_dist$)
			if wk<>0
				pymt_dist$(wk+20,10)=str(num(pymt_dist$(wk+20,10))+(new_pay-old_pay))
				pymt_dist$(wk+30,10)=str(num(pymt_dist$(wk+30,10))+(new_disc-old_disc))
			else
				wk$(21)=str(new_pay-old_pay)
				wk$(31)=str(new_disc-old_disc)
				pymt_dist$=pymt_dist$+wk$
			endif
			AONObj!.setItem(num(aon_tpl.pymt_dist$),pymt_dist$)
			callpoint.callpoint_stat$="REFRESH"
			
		break

		case 8;rem --- edit start

			if dec(rd_notice.col$)<>0
				vectInvSel!.setItem(clicked_row,"Y")
				gridInvoice!.setCellStyle(clicked_row,0,rdSysGUI!.GRID_STYLE_CHECKED)
				aon_tpl.sv_row$=str(gridInvoice!.getSelectedRow())
			endif
		break

		case 19; rem --- select row

			clicked_inv$=vectInvoice!.getItem(clicked_row*cols+1)

			if gridInvoice!.getSelectedColumn()=0
				inv_onoff=gridInvoice!.getCellState(clicked_row,0)
				if inv_onoff=0 inv_onoff=1 else inv_onoff=0;rem --- toggle
				gosub invoice_chk_onoff
				gridInvoice!.setSelectedColumn(1)
			endif

		break

		case 2;rem --- selected column

			if gridInvoice!.getSelectedColumn()=0
				inv_onoff=gridInvoice!.getCellState(clicked_row,0)
				if inv_onoff=0 inv_onoff=1 else inv_onoff=0;rem --- toggle
				gosub invoice_chk_onoff
				gridInvoice!.setSelectedColumn(1)
			endif

		break

		case 30;rem --- checkbox on/off
		rem --- being handled manually from select row event; gosubs invoice_chk_onoff
		break

		case default
		break

		
	swend

return

invoice_chk_onoff:

			switch inv_onoff
				case 0;rem --- de-select line; reverse applied and remaining amts (unless OA, then just reverse remaining)

                    dim wk$(20)
					wk$(1)=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
					wk$(11)=vectInvoice!.getItem(clicked_row*cols+1)
                    pd_pos=pos(wk$=pymt_dist$,40)
                    inv_applied=0
                    if pd_pos<>0
                        inv_applied=num(pymt_dist$(pd_pos+20,10))
						disc_taken=num(pymt_dist$(pd_pos+30,10))
                        vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$),
:                           str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$)))-inv_applied))
                        vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$),
:                           str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))-disc_taken))
                        if num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$)))=0
                            vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$),"0")
                            vectInvSel!.setItem(clicked_row,"N")
                            gridInvoice!.setCellStyle(clicked_row,0,rdSysGUI!.GRID_STYLE_UNCHECKED)
                        endif
                        vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$),
:                           str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.cur_bal_ofst$)))-
:                           num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$)))-
:                           num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))))	
                        gridInvoice!.setCellText(clicked_row,num(aon_tpl.applied_amt_ofst$),
:                           str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$)))))
                        gridInvoice!.setCellText(clicked_row,num(aon_tpl.disc_taken_ofst$),
:                           str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))))
                        gridInvoice!.setCellText(clicked_row,num(aon_tpl.new_bal_ofst$),
:                           str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$)))))
                        
						pymt_dist$(pd_pos+20,10)=str(num(pymt_dist$(pd_pos+20,10))-inv_applied)
						pymt_dist$(pd_pos+30,10)=str(num(pymt_dist$(pd_pos+30,10))-disc_taken)

                    endif

					AONObj!.setItem(num(aon_tpl.pymt_dist$),pymt_dist$)

                    new_pay=0
					old_pay=inv_applied
					
					rem --- if this is an OA/CM line (test inv amt, curr amt), then applied amt just increases total to apply
					if num(vectInvoice!.getItem(clicked_row*cols+4))<0
:						or num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.cur_bal_ofst$))) <0
							rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:								str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])+old_pay-new_pay)
					else
						rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0]=
:							str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0])-old_pay+new_pay)
						rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:							str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])+old_pay-new_pay)
					endif



				break

				case 1; rem --- look at amt left to apply, and apply to selected line

					to_pay=num(fnget_rec$("<<DISPLAY>>.DISP_BAL"))

						vectInvSel!.setItem(clicked_row,"Y")
						gridInvoice!.setCellStyle(clicked_row,0,rdSysGUI!.GRID_STYLE_CHECKED)
						inv_bal=num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$)))-
:							num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.avail_disc_ofst$)))+
:							num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))
						disc_amt=num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.avail_disc_ofst$)))-
:							num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))

							if (inv_bal>0 and inv_bal<=to_pay) or inv_bal<0 or to_pay<=0
								pd_amt=inv_bal
								vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$),
:									str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$)))+inv_bal))
								vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$),
:									str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))+disc_amt))
								vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$),"0")
								to_pay=to_pay-inv_bal					
							else
								pd_amt=to_pay
								vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$),
:									str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$)))+to_pay))
								vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$),
:									str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))+disc_amt))
								vectInvoice!.setItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$),str(inv_bal-to_pay))
								to_pay=0
							endif

							gridInvoice!.setCellText(clicked_row,num(aon_tpl.applied_amt_ofst$),
:								str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.applied_amt_ofst$)))))
							gridInvoice!.setCellText(clicked_row,num(aon_tpl.disc_taken_ofst$),
:								str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.disc_taken_ofst$)))))
							gridInvoice!.setCellText(clicked_row,num(aon_tpl.new_bal_ofst$),
:								str(num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.new_bal_ofst$)))))

							new_pay=pd_amt
							old_pay=0

							rem --- if this is an OA/CM line (test inv amt, curr amt), then app amt just increases total to apply
							if num(vectInvoice!.getItem(clicked_row*cols+4))<0
:								or num(vectInvoice!.getItem(clicked_row*cols+num(aon_tpl.cur_bal_ofst$))) <0
									rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:										str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])+old_pay-new_pay)
							else
								rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0]=
:									str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_APPLIED",rec_data$[0,0],40),0])-old_pay+new_pay)
								rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0]=
:									str(num(rec_data$[fnstr_pos("<<DISPLAY>>.DISP_BAL",rec_data$[0,0],40),0])+old_pay-new_pay)
							endif

							dim wk$(40)
							wk$(1)=fnget_rec$("ARE_CASHHDR.AR_CHECK_NO")
							wk$(11)=vectInvoice!.getItem(clicked_row*cols+1)
							wk=pos(wk$(1,20)=pymt_dist$)
							if wk<>0
								pymt_dist$(wk+20,10)=str(new_pay)
								pymt_dist$(wk+30,10)=str(disc_amt)
							else
								wk$(21)=str(new_pay)
								wk$(31)=str(disc_amt)
								pymt_dist$=pymt_dist$+wk$
							endif
							AONObj!.setItem(num(aon_tpl.pymt_dist$),pymt_dist$)
				break
			swend
return



format_grids:

	rem --- logic from Sam -- set attributes and use public to build consistent grids, rather
	rem --- than creating manually w/in each callpoint

	rem --- invoice grid
	def_inv_cols=num(aon_tpl.gridInvoice_cols$)
	num_inv_rows=num(aon_tpl.gridInvoice_rows$)
	dim attr_inv_col$[def_inv_cols,len(attr_def_col$[0,0])/5]
	attr_inv_col$[1,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="SELECT"
	attr_inv_col$[1,fnstr_pos("LABS",attr_def_col$[0,0],5)]=""
	attr_inv_col$[1,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="25"
	attr_inv_col$[1,fnstr_pos("MAXL",attr_def_col$[0,0],5)]="1"
	attr_inv_col$[1,fnstr_pos("CTYP",attr_def_col$[0,0],5)]="C"

	attr_inv_col$[2,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="INVOICE"
	attr_inv_col$[2,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Invoice"
	attr_inv_col$[2,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="70"

	attr_inv_col$[3,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="INV_DATE"
	attr_inv_col$[3,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Inv Date"
	attr_inv_col$[3,fnstr_pos("STYP",attr_def_col$[0,0],5)]="1"
	attr_inv_col$[3,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="70"

	attr_inv_col$[4,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="DUE_DATE"
	attr_inv_col$[4,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Due Date"
	attr_inv_col$[4,fnstr_pos("STYP",attr_def_col$[0,0],5)]="1"
	attr_inv_col$[4,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="70"

	attr_inv_col$[5,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="INV_AMOUNT"
	attr_inv_col$[5,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Inv Amount"
	attr_inv_col$[5,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="N"
	attr_inv_col$[5,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="75"
	attr_inv_col$[5,fnstr_pos("MSKI",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$
	attr_inv_col$[5,fnstr_pos("MSKO",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$

	attr_inv_col$[6,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="CURR_BAL"
	attr_inv_col$[6,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Opening Bal"
	attr_inv_col$[6,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="N"
	attr_inv_col$[6,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="75"
	attr_inv_col$[6,fnstr_pos("MSKI",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$
	attr_inv_col$[6,fnstr_pos("MSKO",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$

	attr_inv_col$[7,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="AVAIL_DISC"
	attr_inv_col$[7,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Avail Disc"
	attr_inv_col$[7,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="N"
	attr_inv_col$[7,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="70"
	attr_inv_col$[7,fnstr_pos("MSKI",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$
	attr_inv_col$[7,fnstr_pos("MSKO",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$

	attr_inv_col$[8,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="DISC_DATE"
	attr_inv_col$[8,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Disc Date"
	attr_inv_col$[8,fnstr_pos("STYP",attr_def_col$[0,0],5)]="1"
	attr_inv_col$[8,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="70"

	attr_inv_col$[9,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="APPLY"
	attr_inv_col$[9,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Applied"
	attr_inv_col$[9,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="N"
	attr_inv_col$[9,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="75"
	attr_inv_col$[9,fnstr_pos("MSKI",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$
	attr_inv_col$[9,fnstr_pos("MSKO",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$

	attr_inv_col$[10,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="DISC"
	attr_inv_col$[10,fnstr_pos("LABS",attr_def_col$[0,0],5)]="Disc Amt"
	attr_inv_col$[10,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="N"
	attr_inv_col$[10,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="75"
	attr_inv_col$[10,fnstr_pos("MSKI",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$
	attr_inv_col$[10,fnstr_pos("MSKO",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$

	attr_inv_col$[11,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="BALANCE"
	attr_inv_col$[11,fnstr_pos("LABS",attr_def_col$[0,0],5)]="End Balance"
	attr_inv_col$[11,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="N"
	attr_inv_col$[11,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="75"
	attr_inv_col$[11,fnstr_pos("MSKI",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$
	attr_inv_col$[11,fnstr_pos("MSKO",attr_def_col$[0,0],5)]=aon_tpl.amt_msk$

	attr_inv_col$[12,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="SPACER"
	attr_inv_col$[12,fnstr_pos("LABS",attr_def_col$[0,0],5)]=""
	attr_inv_col$[12,fnstr_pos("CTLW",attr_def_col$[0,0],5)]="25"

	for curr_attr=1 to def_inv_cols

		attr_inv_col$[0,1]=attr_inv_col$[0,1]+pad("CASH_REC_INV."+attr_inv_col$[curr_attr,
:			fnstr_pos("DVAR",attr_def_col$[0,0],5)],40)

	next curr_attr

	attr_disp_col$=attr_inv_col$[0,1]

	call pgmdir$+"rdm_grid_init.aon",gui_dev,gridInvoice!,"COLH-LINES-LIGHT-AUTO-MULTI-SIZEC-DATES-CHECKS",num_inv_rows,
:		attr_def_col$[all],attr_disp_col$,attr_inv_col$[all]


return

open_tables:rem --- Open Tables

	call stbl("+DIR_PGM")+"rdc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_PGM")+"adc_message.aon",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,rd_table_chans$[all]

	return

rem --- Functions

	def fnstr_pos(tmp0$,tmp1$,tmp1)=int((pos(tmp0$=tmp1$,tmp1)+tmp1-1)/tmp1)
	def fngett_attr$(att0$)=attr_tbl$[fnstr_pos(att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(att0,att0$)=attr_col$[att0,fnstr_pos(att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(att0$,att1$)=attr_col$[fnstr_pos(att0$,attr_col$[0,1],40),fnstr_pos(att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(att0$)=rec_data$[fnstr_pos(att0$,rec_data$[0,0],40),0]
	def fndate$(att0$)=date(jul(num(att0$(1,4)),num(att0$(5,2)),num(att0$(7,2))):stbl("+DATE_MASK"))
    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(tmp0$=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[int(pos(tmp0$=table_chans$[0,0],20)/20)+1,0]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5),err=*next)
	call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:           str(err),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
	if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$) retry

std_error_exit:
	
	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ escape
	
std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) exit 
	release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

rem #endinclude std_exit.src

	end
