rem Column Selection Public
rem Proprietary Software. AddonSoftware
rem Program ID: adc_inquiry_cols.aon  <Nov 21, 2005>

rem --- Enter Arguments

	enter
:		rd_gui_dev,
:		rdSysGUI!,
:		rd_alias_id$,
:		rd_curr_inq_col$,
:		rd_inq_col_str$,
:		rd_attr_col$[all],
:		rd_attr_def_col$[all],
:		rd_status$

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp0)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp0)+rd_tmp0-1)/rd_tmp0)
	def fnstrip$(rd_tmp0$,rd_tmp1$)=rd_tmp0$(1,pos(fill(50,rd_tmp1$)=rd_tmp0$+fill(50,rd_tmp1$))-1)
	def fngetc_inq_attr$(rd_att0,rd_att0$)=rd_inq_attr_col$[rd_att0,fnstr_pos(rd_att0$,rd_attr_def_col$[0,0],5)]
	def fngetc_attr$(rd_att0,rd_att0$)=rd_attr_col$[rd_att0,fnstr_pos(rd_att0$,rd_attr_def_col$[0,0],5)]
	def fngetv_attr$(rd_att0$,rd_att1$)=rd_attr_col$[fnstr_pos(rd_att0$,rd_attr_col$[0,1],16),fnstr_pos(rd_att1$,rd_attr_def_col$[0,0],5)]

rem --- Directory STBLs

	rd_dir_pgm$=stbl("+DIR_PGM")
	rd_dir_img$=stbl("+DIR_IMG")
	rd_dir_sys$=stbl("+DIR_SYS")
	rd_file_usr$=stbl("+FILE_USR")
	rd_file_set$=stbl("+FILE_SET")

rem --- Constants

	rd_attr_def_col$=rd_attr_def_col$[0,0]
	rd_hold_inq_col_str$=rd_inq_col_str$

rem --- Setup

	gosub get_row_defs
	gosub get_user_settings
	gosub win_coords
	gosub disp_win
	gosub resize_win
	gosub def_grid
	gosub get_data
	gosub disp_grid

	if rd_curr_inq_col<>-1
		rdColsGrid!.setSelectedCell(rd_curr_inq_col,1)
		else
		rdColsGrid!.setSelectedRow(0)
	endif
	rdColsGrid!.focus()

	gosub set_able_order

	rdColsWin!.setVisible(1)

event_ctl:rem --- Event Control

	rdColsWin!.setCallback(rdColsWin!.ON_CLOSE,"exit_prog")
	rdColsWin!.setCallback(rdColsWin!.ON_RESIZE,"resize_win")

	rdColsGrid!.setCallback(rdColsGrid!.ON_GRID_KEY_PRESS,"grid_keypress")
	rdColsGrid!.setCallback(rdColsGrid!.ON_GRID_MOUSE_UP,"grid_select")
	rdColsGrid!.setCallback(rdColsGrid!.ON_GRID_SELECT_ROW,"grid_select")
	rdColsGrid!.setCallback(rdColsGrid!.ON_GRID_CELL_MODIFY,"grid_select")
	
	rdBtnOK!.setCallback(rdBtnOK!.ON_BUTTON_PUSH,"func_accept")
	rdBtnCancel!.setCallback(rdBtnCancel!.ON_BUTTON_PUSH,"exit_prog")

	rdBtnMoveUp!.setCallback(rdBtnMoveUp!.ON_BUTTON_PUSH,"func_up1")
	rdBtnMoveDn!.setCallback(rdBtnMoveDn!.ON_BUTTON_PUSH,"func_dn1")

	rdBtnCheck!.setCallback(rdBtnCheck!.ON_BUTTON_PUSH,"func_check")
	rdBtnUncheck!.setCallback(rdBtnUncheck!.ON_BUTTON_PUSH,"func_uncheck")
	rdBtnRestore!.setCallback(rdBtnRestore!.ON_BUTTON_PUSH,"func_restore")

	rdSysGUI!.flushEvents()

	process_events,err=*same

grid_select:rem --- Grid Cell Selected

    dim rd_gui_event$:tmpl(rd_gui_dev)
    dim rd_notify_base$:noticetpl(0,0)

    rd_gui_event$=rdSysGUI!.getLastEventString()
    rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
    dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
    rd_notice$=rd_notify_base$

	switch rd_notice.code
        case 5;rem Edited Grid
			rd_inq_modified$="YES"
        break
        case 14;rem LCLICKED
            if rd_notice.col=rd_cols_col
				gosub switch_value
			endif
			gosub set_able_order
        break
        case 19;rem LCLICKED
			gosub set_able_order
        break
        case default
        break
    swend

	return

grid_keypress:rem --- Cols for Specific Pressed Keys

	dim rd_gui_event$:tmpl(rd_gui_dev)
	dim rd_notify_base$:noticetpl(0,0)

	rd_gui_event$=rdSysGUI!.getLastEventString()
	rd_notify_base$=notice(sysgui,rd_gui_event.x%)
	dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
	rd_notice$=rd_notify_base$

	switch rd_notice.wparam
		case 32;rem Space
			gosub switch_value
		break
	swend

	return

switch_value:rem --- Switch Current Cols Value

	rd_select_rows$=str(rdColsGrid!.getSelectedRow():"00000")+";"
	call rd_dir_pgm$+"rdm_grid_disp.aon",rd_gui_dev,"SWITCH",rd_status_col,rd_sort_col,rd_sort_order$,rd_select_rows$,rdColsGrid!,rd_attr_def_col$[all],rd_attr_disp_col$,rd_attr_grid_col$[all],0,rdAllVect!,rdSrtVect!,rdRowVect!

	rd_inq_modified$="REF"

	return

func_check:rem --- Check All Items

	for rd_curr_row=0 to rdRowVect!.size()-1
		rdSrtVect!.setItem(rd_curr_row*4,"1")
		rdAllVect!.setItem(rd_curr_row*4,"1")
	next rd_curr_row

	gosub disp_grid

	rd_inq_modified$="REF"

	return

func_uncheck:rem --- Uncheck All Items

	for rd_curr_row=0 to rdRowVect!.size()-1
		rdSrtVect!.setItem(rd_curr_row*4,"0")
		rdAllVect!.setItem(rd_curr_row*4,"0")
	next rd_curr_row

	gosub disp_grid

	rd_inq_modified$="REF"

	return

func_restore:rem --- Restore Column Settings

	call rd_dir_pgm$+"rdm_attr_def.aon",
:		rd_alias_id$,
:		rd_attr_def_tbl$[all],
:		rd_attr_def_col$[all],
:		rd_inq_attr_tbl$[all],
:		rd_inq_attr_col$[all],
:		"COL",
:		rd_status$

	rd_new_inq_col_str$=""

	for rd_curr_col=1 to len(rd_inq_attr_col$[0,1])/16
		rd_temp_col$=rd_inq_attr_col$[0,1](rd_curr_col*16-15,16)
		rd_col_pos=fnstr_pos(rd_temp_col$,rd_hold_inq_col_str$,16)
		if rd_col_pos<>0
			rd_temp_width=num(rdSrtVect!.getItem((rd_col_pos-1)*4+3))
			rd_new_inq_col_str$=rd_new_inq_col_str$+rd_temp_col$
			rd_new_pos=fnstr_pos(rd_temp_col$,rd_new_inq_col_str$,16)
			rdSrtVect!.setItem((rd_new_pos-1)*4,"1")
			rdAllVect!.setItem((rd_new_pos-1)*4,"1")
			rdSrtVect!.setItem((rd_new_pos-1)*4+1,rd_temp_col$)
			rdAllVect!.setItem((rd_new_pos-1)*4+1,rd_temp_col$)
			rdSrtVect!.setItem((rd_new_pos-1)*4+2,fngetc_inq_attr$(rd_curr_col,"LABS"))
			rdAllVect!.setItem((rd_new_pos-1)*4+2,fngetc_inq_attr$(rd_curr_col,"LABS"))
			rdSrtVect!.setItem((rd_new_pos-1)*4+3,str(rd_temp_width))
			rdAllVect!.setItem((rd_new_pos-1)*4+3,str(rd_temp_width))
		endif
	next rd_curr_col

	rd_hold_inq_col_str$=rd_new_inq_col_str$
	rd_new_inq_col_str$=""
	gosub get_data
	gosub disp_grid
	gosub set_able_order
	rd_inq_modified$="REF"

	return

func_up1:rem --- Move Column Up One Position

	gosub column_remove
	rd_new_col_row=rd_orig_col_row-1
	gosub column_insert
	gosub get_data
	gosub disp_grid
	gosub set_able_order
	rd_inq_modified$="REF"

	return

func_dn1:rem --- Move Column Down One Position

	gosub column_remove
	rd_new_col_row=rd_orig_col_row+1
	gosub column_insert
	gosub get_data
	gosub disp_grid
	gosub set_able_order
	rd_inq_modified$="REF"

	return

column_remove:rem --- Remove Column From List, Vector & Grid

	rdTempVect!=rdSysGUI!.makeVector()
	rd_orig_col_row=rdColsGrid!.getSelectedRow()

	for rd_curr_col=1 to rd_def_cols
		rdTempVect!.addItem(rdColsVect!.getItem(rd_orig_col_row*rd_def_cols))
		rdColsVect!.removeItem(rd_orig_col_row*rd_def_cols)
	next rd_curr_col

	return

column_insert:rem --- Insert Column Back Into List

	for rd_curr_col=1 to rd_def_cols
		if rd_new_col_row=rd_num_rows
			rdColsVect!.addItem(rdTempVect!.getItem(rd_curr_col-1))
			else
			rdColsVect!.insertItem(rd_new_col_row*rd_def_cols+(rd_curr_col-1),rdTempVect!.getItem(rd_curr_col-1))
		endif
	next rd_curr_col

	rdColsGrid!.setSelectedRow(rd_new_col_row)
	
	return

set_able_order:rem --- Enable/Disable Move Buttons

	rd_temp_row=rdColsGrid!.getSelectedRow()
	if rd_temp_row=0
		rdBtnMoveUp!.setEnabled(0)
		else
		rdBtnMoveUp!.setEnabled(1)
	endif

	if rd_temp_row<rd_num_rows-1
		rdBtnMoveDn!.setEnabled(1)
		else
		rdBtnMoveDn!.setEnabled(0)
	endif

	return

get_row_defs:rem --- Get Row Definitions

	rdColsVect!=rdSysGUI!.makeVector()
	rd_curr_inq_col=-1

	for rd_curr_col=1 to len(rd_hold_inq_col_str$)/16
		rd_available$=fngetv_attr$(rd_hold_inq_col_str$(rd_curr_col*16-15,16),"CTLC")
		if rd_curr_inq_col$=rd_hold_inq_col_str$(rd_curr_col*16-15,16) rd_curr_inq_col=rd_curr_col-1
		if rd_available$<>"X"
			rdColsVect!.addItem(rd_available$)
			rdColsVect!.addItem(fngetv_attr$(rd_hold_inq_col_str$(rd_curr_col*16-15,16),"DVAR"))
			rdColsVect!.addItem(fngetv_attr$(rd_hold_inq_col_str$(rd_curr_col*16-15,16),"LABS"))
			rdColsVect!.addItem(fngetv_attr$(rd_hold_inq_col_str$(rd_curr_col*16-15,16),"CTLW"))
		endif
	next rd_curr_col

	rd_num_rows=len(rd_hold_inq_col_str$)/16
	rd_inq_modified$=""

	return

get_data:rem --- Get Data From Attribute Array

	rdAllVect!=rdSysGUI!.makeVector()
	rdSrtVect!=rdSysGUI!.makeVector()
	rdRowVect!=rdSysGUI!.makeVector()
	rd_vector_pos=0

	rdAllVect!=rdColsVect!

	for rd_curr_row=1 to rd_num_rows
		rdRowVect!.addItem(str(rd_vector_pos:"00000"))
		rd_vector_pos=rd_vector_pos+rd_def_cols
	next rd_curr_row

	rdSrtVect!=rdAllVect!

	return

func_accept:rem --- Update Original Array

	if rd_inq_modified$<>""
		rd_status$=rd_inq_modified$
		rd_inq_col_str$=""
		for rd_curr_row=0 to rdRowVect!.size()-1
			rd_row_show$=rdSrtVect!.getItem(rd_curr_row*4)
			rd_row_dvar$=pad(rdSrtVect!.getItem(rd_curr_row*4+1),16)
			rd_row_labs$=rdColsGrid!.getCellText(rd_curr_row,2)
			rd_row_ctlw$=rdColsGrid!.getCellText(rd_curr_row,3)
			rd_attr_col$[fnstr_pos(rd_row_dvar$,rd_attr_col$[0,1],16),fnstr_pos("CTLC",rd_attr_def_col$[0,0],5)]=rd_row_show$
			rd_attr_col$[fnstr_pos(rd_row_dvar$,rd_attr_col$[0,1],16),fnstr_pos("LABS",rd_attr_def_col$[0,0],5)]=rd_row_labs$
			rd_attr_col$[fnstr_pos(rd_row_dvar$,rd_attr_col$[0,1],16),fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=rd_row_ctlw$
			rd_inq_col_str$=rd_inq_col_str$+rd_row_dvar$
		next rd_curr_row
	endif

	goto exit_prog

disp_grid:rem --- Display Grid

	call rd_dir_pgm$+"rdm_grid_disp.aon",rd_gui_dev,"SET-CHECKS",rd_status_col,rd_sort_col,rd_sort_order$,"",rdColsGrid!,rd_attr_def_col$[all],rd_attr_disp_col$,rd_attr_grid_col$[all],0,rdAllVect!,rdSrtVect!,rdRowVect!

	return

disp_msg:rem --- Display Message Dialog

	call rd_dir_pgm$+"rdm_message.aon",rd_gui_dev,rd_msg_title$,rd_msg_text$,rd_msg_defs$,rd_msg_opt$

	return

all_rtns:rem --- All Returns

	return

get_user_settings:rem --- Get User Settings

	rd_save_win_desc$=pad("WIN_[INQ_COL]",20)
	rd_save_col_desc$=pad("WIN_[INQ_COL_COLS]",20)

	rd_attr_desc$=
:		rd_save_win_desc$+
:		rd_save_col_desc$

	dim rd_set_data$[len(rd_attr_desc$)/20]
		rd_set_data$[0]=rd_attr_desc$

	call rd_dir_pgm$+"rdm_config.aon",
:		rd_file_usr$,
:		"USR",
:		"READ",
:		rd_set_data$[all]

	rd_win_coord$=rd_set_data$[fnstr_pos(rd_save_win_desc$,rd_set_data$[0],20)]
	rd_col_coord$=rd_set_data$[fnstr_pos(rd_save_col_desc$,rd_set_data$[0],20)]

	return

win_coords:rem --- Set Window & Column Coordinates

	if rd_win_coord$="" rd_win_coord$="0,0,400,300"
	if pos(","=rd_col_coord$,1,0)<>3 rd_col_coord$="35,100,120,35"

	dim rd_win_coord[1:4]
		for rd_curr_coord=1 to 4
			rd_temp_spos=pos(","=","+rd_win_coord$+",",1,rd_curr_coord)
			rd_temp_epos=pos(","=","+rd_win_coord$+",",1,rd_curr_coord+1)-1
			rd_win_coord[rd_curr_coord]=num(rd_win_coord$(rd_temp_spos,rd_temp_epos-rd_temp_spos))
		next rd_curr_coord
	
	dim rd_col_coord[1:4]
		for rd_curr_coord=1 to 4
			rd_temp_spos=pos(","=","+rd_col_coord$+",",1,rd_curr_coord)
			rd_temp_epos=pos(","=","+rd_col_coord$+",",1,rd_curr_coord+1)-1
			rd_col_coord[rd_curr_coord]=num(rd_col_coord$(rd_temp_spos,rd_temp_epos-rd_temp_spos))
		next rd_curr_coord

	return

save_win_coords:rem --- Save Windows Coordinates

	if rdColsWin!.getWidth()=0 return

	rd_curr_win_coords$=
:		str(rdColsWin!.getX())+","+
:		str(rdColsWin!.getY())+","+
:		str(rdColsWin!.getWidth())+","+
:		str(rdColsWin!.getHeight())

	rdTempGrid!=rdColsGrid!
		gosub get_col_widths
		rd_col_coords$=rd_col_widths$

	rd_attr_desc$=
:		rd_save_win_desc$+
:		rd_save_col_desc$

	dim rd_usr_data$[len(rd_attr_desc$)/20]
		rd_usr_data$[0]=rd_attr_desc$

	rd_usr_data$[fnstr_pos(rd_save_win_desc$,rd_usr_data$[0],20)]=rd_curr_win_coords$
	rd_usr_data$[fnstr_pos(rd_save_col_desc$,rd_usr_data$[0],20)]=rd_col_coords$

	call rd_dir_pgm$+"rdm_config.aon",
:		rd_file_usr$,
:		"USR",
:		"WRITE",
:		rd_usr_data$[all]

	return

get_col_widths:rem --- Get Column Widths

	rd_col_widths$=""

	rd_num_cols=rdTempGrid!.getNumColumns()
	for rd_curr_col=0 to rd_num_cols-1
		if rd_col_widths$<>"" rd_col_widths$=rd_col_widths$+","
		rd_col_widths$=rd_col_widths$+str(rdTempGrid!.getColumnWidth(rd_curr_col))
	next rd_curr_col

	return

disp_win:rem --- Display Window

	rdBaseWin!=rdSysGUI!.getWindow(rdSysGUI!.getContext())
	dim rd_ctl_misc$[20]

	rd_form_id$=rd_dir_sys$+"rdm_inquiry_cols.arc"

	call rd_dir_pgm$+"rdm_controls.aon",
:		rd_gui_dev,
:		rdSysGUI!,
:		rd_form_id$,
:		rd_win_coord[all],
:		rdColsWin!,
:		"DISPLAY",
:		rd_open_chan$[all],
:		rd_ctl_misc$[all]

	rdColsGrid!=rdColsWin!.getControl(9500)
	rdBtnOK!=rdColsWin!.getControl(1)
	rdBtnCancel!=rdColsWin!.getControl(2)
	rdBtnMoveUp!=rdColsWin!.getControl(3001)
	rdBtnMoveDn!=rdColsWin!.getControl(3002)
	rdBtnCheck!=rdColsWin!.getControl(3003)
	rdBtnUncheck!=rdColsWin!.getControl(3004)
	rdBtnRestore!=rdColsWin!.getControl(3005)
	
	rd_win_disp$="YES"

	return

def_grid:rem --- Define Grid

	rd_def_cols=4
	dim rd_attr_grid_col$[rd_def_cols,len(rd_attr_def_col$[0,0])/5]
		rd_attr_grid_col$[1,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)]="ROW_SHOW"
		rd_attr_grid_col$[1,fnstr_pos("LABS",rd_attr_def_col$[0,0],5)]="Show"
		rd_attr_grid_col$[1,fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=str(rd_col_coord[1])
		rd_attr_grid_col$[1,fnstr_pos("CTYP",rd_attr_def_col$[0,0],5)]="C"

		rd_attr_grid_col$[2,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)]="ROW_COL"
		rd_attr_grid_col$[2,fnstr_pos("LABS",rd_attr_def_col$[0,0],5)]="Column"
		rd_attr_grid_col$[2,fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=str(rd_col_coord[2])

		rd_attr_grid_col$[3,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)]="ROW_DESC"
		rd_attr_grid_col$[3,fnstr_pos("LABS",rd_attr_def_col$[0,0],5)]="Description"
		rd_attr_grid_col$[3,fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=str(rd_col_coord[3])

		rd_attr_grid_col$[4,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)]="ROW_WIDTH"
		rd_attr_grid_col$[4,fnstr_pos("LABS",rd_attr_def_col$[0,0],5)]="Width"
		rd_attr_grid_col$[4,fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=str(rd_col_coord[4])
		rd_attr_grid_col$[4,fnstr_pos("DTYP",rd_attr_def_col$[0,0],5)]="N"
		rd_attr_grid_col$[4,fnstr_pos("MSKI",rd_attr_def_col$[0,0],5)]="0000"
		rd_attr_grid_col$[4,fnstr_pos("MSKO",rd_attr_def_col$[0,0],5)]="###0"

		for rd_curr_attr=1 to rd_def_cols
			rd_attr_grid_col$[0,1]=rd_attr_grid_col$[0,1]+pad(rd_attr_grid_col$[rd_curr_attr,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)],16)
		next rd_curr_attr
		rd_attr_disp_col$=rd_attr_grid_col$[0,1]

	call rd_dir_pgm$+"rdm_grid_init.aon",rd_gui_dev,rdColsGrid!,"COLH-CHECKS-LINES-LIGHT",rd_num_rows,rd_attr_def_col$[all],rd_attr_disp_col$,rd_attr_grid_col$[all]

	rdColsGrid!.setEditable(1)
	rdColsGrid!.setColumnEditable(0,0)
	rdColsGrid!.setColumnEditable(1,0)

	return

resize_win:rem --- Resize Window Contents

	rd_temp_wid=rdColsWin!.getWidth()
	rd_temp_hgt=rdColsWin!.getHeight()

	rdColsGrid!.setSize(rd_temp_wid-85,rd_temp_hgt-10)
	rdBtnMoveUp!.setLocation(rd_temp_wid-75,rdBtnMoveUp!.getY())
	rdBtnMoveDn!.setLocation(rd_temp_wid-75,rdBtnMoveDn!.getY())
	
	rdBtnCheck!.setLocation(rd_temp_wid-75,rdBtnCheck!.getY())
	rdBtnUncheck!.setLocation(rd_temp_wid-75,rdBtnUncheck!.getY())
	rdBtnRestore!.setLocation(rd_temp_wid-75,rdBtnRestore!.getY())

	rdBtnOK!.setLocation(rd_temp_wid-75,rd_temp_hgt-50)
	rdBtnCancel!.setLocation(rd_temp_wid-75,rd_temp_hgt-25)

	return

error_proc:rem --- Error Processing Routine
	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))

	call stbl("+DIR_PGM")+"adc_error.aon",pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

	goto exit_prog

exit_prog:rem --- Exit Program

	if rd_win_disp$="YES"
		gosub save_win_coords
		rdColsWin!.destroy()
		rdBaseWin!.focus()
		rdSysGUI!.setContext(rdBaseWin!.getContextID())
	endif

	exit
