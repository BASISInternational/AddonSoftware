rem ==========================================================================
rem --- adx_init_data.aon
rem --- A completing Auto-Launch task that initializes and converts data 
rem --- following an upgrade. 
rem --- 
rem --- AddonSoftware Version 12.00
rem --- Copyrights 1981-2012, BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem ==========================================================================

    use java.util.HashMap

    declare HashMap installMap!
    declare HashMap devMap!
    declare HashMap tplMap!
    
    setesc std_error
    seterr std_error

rem --- Get program aurgements

    if argc>1
        for curr_argv=1 to argc-1
            temp_argv$=argv(curr_argv)
            if pos("-u"=temp_argv$)=1 user_id$=temp_argv$(3);rem User ID
        next curr_argv
    endif

rem --- Initializations

    modules$="ADAPARBMGLIVMPOPPOPRSASF"
    process_complete=0
    pgmdir$=stbl("+DIR_PGM",err=*next)
    installMap!=new HashMap()
    devMap!=new HashMap()
    tplMap!=new HashMap()
    
    rem --- Set needed STBLs if missing
    need_stbls=1
    x$=stbl("+SYSINFO_TPL",err=*next); need_stbls=0
    if need_stbls then call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,rd_table_chans$[all]
    
rem --- Determine which modules are installed

    dim info$[20]
    for i=1 to len(modules$) step 2
        mod$=modules$(i,2)
        call pgmdir$+"adc_application.aon",mod$,info$[all]
        installMap!.put(mod$,info$[20])
        if info$[20]="Y" then process_complete=1
    next i

rem --- If nothing installed, then don't complete this auto-launch process
rem --- Following an upgrade, user may launch Addon before "copying" the data.
    if !process_complete then goto done

rem --- Open File(s)

	num_files=2+len(modules$)/2
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="ADS_AUTOLAUNCH", open_opts$[1]="OTA"
	open_tables$[2]="ADM_MODULES", open_opts$[2]="OTA"
    j=2
    for i=1 to len(modules$) step 2
        j=j+1
        mod$=modules$(i,2)
        rem --- Skip modules where *PS_PARAMS table doesn't exist
        if pos(mod$="ADMP",2) then continue
        
        open_tables$[j]=mod$+"S_PARAMS", open_opts$[j]="OTA"
    next i

	gosub open_tables

    autolaunch_dev=num(open_chans$[1]);dim autolaunch_tpl$:open_tpls$[1]
    modules_dev=num(open_chans$[2]);dim modules_tpl$:open_tpls$[2]
    j=2
    for i=1 to len(modules$) step 2
        j=j+1
        mod$=modules$(i,2)

        devMap!.put(mod$,num(open_chans$[j]))
        tplMap!.put(mod$,open_tpls$[j])
    next i

rem --- Verify modules_tpl still includes post_gl in case it was dropped
    use_post_gl=0
    if pos("post_gl"=cvs(open_tpls$[2],8)) then use_post_gl=1

rem --- For v12.00, adm_modules.post_gl was moved to *s_params.post_to_gl. Following an upgrade,
rem --- *s_params.post_to_gl must be intialized with old adm_modules.post_gl when GL is installed.
	if installMap!.get("GL")="Y" then
        rem --- As necessary, initialize *s_params.post_to_gl for all firms
        for i=1 to len(modules$) step 2
            mod$=modules$(i,2)
            rem --- Skip module if *s_params not found
            dev=devMap!.get(mod$)
            if dev=0 then continue
            rem --- Skip modules that don't post to GL
            if pos(mod$="ADMPSA",2) then continue

            dim tpl$:tplMap!.get(mod$)
            read(dev,key="",dom=*next)
            while 1
                key$=key(dev,end=*break)
                readrecord(dev)tpl$

                if cvs(tpl.post_to_gl$,2)="" then
                    tpl.post_to_gl$="Y"

                    rem --- Override with pre-v12 adm_modules.post_gl if still available
                    if use_post_gl then
                        modules_tpl.post_gl$=""
                        find record (modules_dev,key=stbl("+AON_APPCOMPANY",err=*next)+pad(mod$,3),dom=*next)modules_tpl$
                        if pos(modules_tpl.post_gl$="YN") then
                            tpl.post_to_gl$=modules_tpl.post_gl$
                        endif
                    endif

                    tpl$=field(tpl$)
                    writerecord(dev,key=key$)tpl$
                endif
            wend
        next i
	endif
	
done:rem --- Update AutoLaunch Status

    extractrecord(autolaunch_dev,key="INIT_DATA")autolaunch_tpl$
    if process_complete then autolaunch_tpl.process_status$="C"
    autolaunch_tpl.trans_date$=date(0:"%Yl%Mz%Dz")
    autolaunch_tpl.trans_time$=date(0:"%Hz%mz%sz")
    autolaunch_tpl$ = field(autolaunch_tpl$)
    writerecord(autolaunch_dev)autolaunch_tpl$

	goto std_exit

open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto exit_prog
    endif

    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),err_text$,err_act$
    if pos("EXIT"=err_act$) goto std_error_exit
    if pos("ESCAPE"=err_act$) seterr 0;setesc 0
    if pos("RETRY"=err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release


rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
