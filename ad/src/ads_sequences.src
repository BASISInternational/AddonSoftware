rem Get Next Sequence Number
rem Proprietary Software. AddonSoftware
rem Program ID: ads_sequences.aon  <Nov 16, 2006>

	enter
:		rd_sequence_id$,
:		rd_sequence_no$,
:		rd_table_chans$[all]

	if stbl("+USE_SETERR")="YES" seterr error_proc

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp0)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp0)+rd_tmp0-1)/rd_tmp0)
	def fnstrip$(rd_tmp0$,rd_tmp1$)=rd_tmp0$(1,pos(fill(50,rd_tmp1$)=rd_tmp0$+fill(50,rd_tmp1$))-1)

rem --- Directory STBLs

	rd_dir_pgm$=stbl("+DIR_PGM")

rem --- Retrieve sysinfo data

    rd_sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim rd_sysinfo$:rd_sysinfo_tpl$
    rd_sysinfo$=stbl("+SYSINFO",err=*next)

rem --- Misc Setup

	rd_first_pass$="YES"
	rd_sequence_no$=""

file_opens:rem --- Open File(s)

	rd_num_files=1
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
	rd_open_tables$[1]="ADS_SEQUENCES",rd_open_opts$[1]="OTA"

	gosub open_tables

	rd_ads_sequences=num(rd_open_chans$[1]);dim rd_ads_sequences$:rd_open_tpls$[1]

get_next_seq:rem --- Get Next Sequence Number

	extractrecord(rd_ads_sequences,key=rd_sysinfo.firm_id$+pad(rd_sequence_id$,16))rd_ads_sequences$
	if rd_ads_sequences.active$<>"Y"
		read(rd_ads_sequences,key=rd_sysinfo.firm_id$+pad(rd_sequence_id$,16))
		goto exit_prog
	endif
	if rd_ads_sequences.seq_query_new$="Y" and rd_first_pass$="YES"
		read(rd_ads_sequences,key=rd_sysinfo.firm_id$+pad(rd_sequence_id$,16))
		rd_msg_id$="SEQ_QUERY_NEW"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_ads_sequences.description$
		gosub disp_message
		if rd_msg_opt$="Y"
			rd_first_pass$=""
			goto get_next_seq
			else
			goto exit_prog
		endif
	endif

	rd_ads_sequences.seq_last_used=rd_ads_sequences.seq_last_used+max(rd_ads_sequences.seq_no_increment,1)
	rd_ads_sequences.seq_used_date$=date(0:"%Yd%Mz%Dz")
	rd_ads_sequences$=field(rd_ads_sequences$)
	writerecord(rd_ads_sequences)rd_ads_sequences$

	rd_sequence_no$=str(rd_ads_sequences.seq_last_used)
	rd_sequence_no$=str(rd_ads_sequences.seq_last_used:cvs(rd_ads_sequences.seq_mask$,3),err=*next)
	if cvs(rd_ads_sequences.seq_prefix$,3)<>"" rd_sequence_no$=cvs(rd_ads_sequences.seq_prefix$,3)+rd_sequence_no$

	goto exit_prog

open_tables:rem -----<Open Tables

	call rd_dir_pgm$+"rdc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

disp_message:rem --- Display Message Dialog

	call rd_dir_pgm$+"adc_message.aon",
:		rd_msg_id$,
:		rd_msg_tokens$[all],
:		rd_msg_opt$,
:		rd_table_chans$[all]

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))

	call stbl("+DIR_PGM")+"adc_error.aon",pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	exit
