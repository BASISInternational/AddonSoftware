rem User Log Purge
rem Program ads_userlog_prg v8.0.0 15Jan2007

rem AddonSoftware Version 8.0.0 - 01Oct2006
rem Copyright (c) 1981-2006 AddonSoftware
rem All Rights Reserved

rem	seterr std_error
rem	setesc std_error

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)

rem --- Open Tables

	rd_num_files=1
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
	rd_open_tables$[1]="ADS_USERLOG",rd_open_opts$[1]="OTA"
	gosub open_tables
	rd_ads_userlog=num(rd_open_chans$[1]);dim rd_ads_userlog$:rd_open_tpls$[1]
	rd_ads_userlog_fin$=fin(rd_ads_userlog)

rem --- Assign form input values to local variables

	begvalue$=fnget_fld_data$("ADS_USERLOG_PRG","trans_date_01")
	endvalue$=fnget_fld_data$("ADS_USERLOG_PRG","trans_date_02")
	userid$=fnget_fld_data$("ADS_USERLOG_PRG","user_id")

rem --- Initializations

	more=1
	keynum=1
	milestone=num(stbl("+MILESTONE"))
	tempstbl$=stbl("+METER_FREQUENCY",stbl("+MILESTONE"))

rem --- Start progress meter and position file

	call pgmdir$+"adc_progress.aon","NC","","","","",0,rd_ads_userlog,milestone,0,status
	read (rd_ads_userlog,knum=keynum,key=begvalue$,dom=*next)

rem --- Read next Customer Master (arm-01) record

	while more
		read record (rd_ads_userlog,end=*break)rd_ads_userlog$
		if endvalue$<>"" and rd_ads_userlog.trans_date_start$>endvalue$ break

		if userid$="" or userid$=cvs(rd_ads_userlog.user_id$,3)
			tempkey$=kgen(rd_ads_userlog$,rd_ads_userlog_fin$(86),0)
			remove(rd_ads_userlog,key=tempkey$)
		endif

		count=count+1
		if mod(count,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,0,status

		rem --- Loop back for next record

	wend

rem --- All done

	goto std_exit

open_tables:rem -----<Open Tables

	call rd_dir_pgm$+"rdc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

disp_message:rem --- Display Message Dialog

	call rd_dir_pgm$+"adc_message.aon",
:		rd_msg_id$,
:		rd_msg_tokens$[all],
:		rd_msg_opt$,
:		rd_table_chans$[all]

	return

rem --- Functions

rem --- Functions used to retrieve form values

	def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
	def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
	def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
	def fnget_table$(q0$)=rd_alias_id$

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

	def fnmask$(q1$,q2$)
		if q2$="" q2$=fill(len(q1$),"0")
		return str(-num(q1$,err=*next):q2$,err=*next)
		q=1
		q0=0
		while len(q2$(q))
			  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
			  q=q+1
		wend
		if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
		return str(q1$:q2$)
	fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
	call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$
	if pos("EXIT"=rd_err_act$) goto std_error_exit
	if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$) retry
std_error_exit:
	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
	status=999
	if pgm(-1)<>pgm(-2) exit
	release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
	call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
	master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
	if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
	status=999
	if pgm(-1)<>pgm(-2) exit
	release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	run pgmdir$+"ads_process_end.aon",err=*next
	release

rem #endinclude std_end.src

	end
