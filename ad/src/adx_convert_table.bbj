rem Convert Tables
rem Proprietary Software.  BASIS International Ltd.
rem Program ID: adx_convert_table.bbj  <Nov 01, 2006>

rem created from bax_rebuild_table Jan09.CH
rem intended to convert table from one type to another (e.g., xkeyed to vkeyed)
rem drives off of ddm_tables.dat
rem skips reference, child alias and option entry types, as well as Barista files
rem if physical data file doesn't exist, table def is just updated and re-exported to BASIS DD


rem --- Get Translator Object
    use ::sys/prog/bao_translator.bbj::Translator
    declare Translator Translator!
	Translator! = Translator.getInstance("barista",stbl("+USER_LOCALE"),null(),dsk("")+dir("")+stbl("+DIR_SYR"))

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp1)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp1)+rd_tmp1-1)/rd_tmp1)

rem --- directory stbls

	rd_dir_syp$=stbl("+DIR_SYP")
	rd_dir_frm$=stbl("+DIR_FRM")
	rd_dir_img$=stbl("+DIR_IMG")
	rd_dir_wrk$=stbl("+DIR_WRK")
	
rem --- Misc Constants
	
	call rd_dir_syp$+"bam_attr_init.bbj",rd_attr_def_tbl$[all],rd_attr_def_col$[all],"ALL"
		rd_attr_def_col$=rd_attr_def_col$[0,0]
		rd_attr_def_tbl$=rd_attr_def_tbl$[0,0]

rem --- Init processing

	rd_task_val$="ConvertTables"
	dim hex_zeros$(50,$00$)
	milestone=5
	reccnt=0
	process_cnt=0
	barista_cnt=0
	non_data_cnt=0
	update_cnt=0
	
	rd_num_files=1

	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
	rd_open_tables$[1]="DDM_TABLES",rd_open_opts$[1]="OTA"

	gosub open_tables

	rd_ddm_tables=num(rd_open_chans$[1]);dim rd_ddm_tables$:rd_open_tpls$[1]

	x$=fin(rd_ddm_tables)
	total_recs=dec(x$(77,4))
	
	progress! = bbjAPI().getGroupNamespace()
	progress!.setValue("+process_task",rd_task_val$+"^C^Convert Tables^CNC^"+str(total_recs)+"^")
	
	read(rd_ddm_tables,key="",dom=*next)
	stim=tim

rem --- Processing loop

	while 1

		readrecord(rd_ddm_tables,end=*break)rd_ddm_tables$
		
		reccnt=reccnt+1
		if mod(reccnt,milestone)=0
			progress!.setValue("+process_task",rd_task_val$+"^U^"+str(reccnt)+"^")
		endif
		
		rd_update$=""

		if rd_ddm_tables.asc_comp_id$<>stbl("+AON_APPCOMPANY") then continue
		if pos(rd_ddm_tables.dd_system_rec$="DAE")<>0 or pos(pad(rd_ddm_tables.asc_prod_id$,3)="ADBDDBSQBEXM",3)<>0 then barista_cnt=barista_cnt+1; continue
		if pos(rd_ddm_tables.dd_alias_type$="OPRV")<>0 then non_data_cnt=non_data_cnt+1; continue
		rd_table_id$=rd_ddm_tables.dd_table_alias$
		
		rd_num_files=1
		process_cnt=process_cnt+1

		dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
		rd_open_tables$[1]=rd_table_id$,rd_open_opts$[1]="SNTAC"

		gosub open_tables

		if rd_open_tpls$[1]<>"" rd_update$="YES",update_cnt=update_cnt+1
		
		print rd_table_id$," ",rd_ddm_tables.dd_file_name$," ",rd_update$;rem input "continue? ",*

		rd_ddm_tables.dd_alias_type$="V"
		writerecord(rd_ddm_tables)rd_ddm_tables$		
		if rd_update$="YES" gosub rebuild_table
		if rd_ddm_tables.dd_export_data$="Y" gosub export_to_dd
		call stbl("+DIR_SYP")+"bax_dd_synch_exp.bbj",rd_table_id$,rd_table_chans$[all],xml_status$
		if xml_status$<>"" then escape;rem will make this more elegant if we ever need to run this program again
				
	wend

		goto exit_prog


rebuild_table:rem --- Rebuild Table/Update Table Contents

rem --- Open Source and Target Files

	wrk_table_id$=stbl("+DIR_DAT")+date(0:"%Yd%Mz%Dz_%Hz%mz%sz")+".tmp"

	call stbl("+DIR_SYP")+"bac_create_table.bbj",rd_table_id$,wrk_table_id$,rd_table_chans$[all],"ERASE",rd_status$
	if rd_status$<>"" goto status_error

	rd_num_files=2
	
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
	rd_open_tables$[1]=rd_table_id$,rd_open_opts$[1]="OTA"
	rd_open_tables$[2]=wrk_table_id$,rd_open_opts$[2]="O"
	
	gosub open_tables

	rd_src_chan=num(rd_open_chans$[1]);dim rd_src_data$:rd_open_tpls$[1]
		rd_src_name$=xfid(rd_src_chan)(14)
	rd_trg_chan=num(rd_open_chans$[2])
		rd_trg_name$=xfid(rd_trg_chan)(14)

	read(rd_src_chan,key="",dom=*next)

read_rec:rem --- Transfer Records

	readrecord(rd_src_chan,end=table_renames)rd_src_data$
	rd_src_data$=rd_src_data$(1,pos(hex_zeros$=rd_src_data$+hex_zeros$)-1)
	writerecord(rd_trg_chan)rd_src_data$

	goto read_rec

table_renames:rem --- Rename Production > .old and Work > Production

	rd_num_files=2
	
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
	rd_open_tables$[1]=rd_table_id$,rd_open_opts$[1]="C"
	rd_open_tables$[2]=wrk_table_id$,rd_open_opts$[2]="C"
	
	gosub open_tables

	erase rd_src_name$+".old",err=*next

	rd_status$=Translator!.getTranslation("Table_is_busy_and_cannot_be_renamed")
	rename rd_src_name$,rd_src_name$+".old",err=status_error

	rd_status$=Translator!.getTranslation("Rebuilt_table_is_busy_and_cannot_be_renamed")
	rename rd_trg_name$,rd_src_name$,err=status_error
	erase rd_src_name$+".old",err=*next

	rd_status$=""

	return


export_to_dd:rem --- Export to BASIS DD

	call stbl("+DIR_SYP")+"bam_dd_export_table.bbj",
:		rdSysGUI!,
:		rd_table_id$,
:		rd_attr_def_tbl$[all],
:		rd_attr_def_col$[all],
:		rd_table_chans$[all],
:		rd_export_status$

	return


status_error:rem --- Error On Status Codes

	rd_meter_data$="   "+rd_status$
	rd_meter_action$="LST"
	gosub disp_meter

	goto exit_prog


disp_message:rem --- Display Message Dialog

	call rd_dir_syp$+"bac_message.bbj",
:		rd_msg_id$,
:		rd_msg_tokens$[all],
:		rd_return_opt$,
:		rd_table_chans$[all]

	return

open_tables:rem --- Open Tables
rem --- only diff between this pgm and regular bac_open_tables is that this one
rem --- does not create tables that don't exist, which is what we want for purposes of this conversion

	call stbl("+DIR_PGM")+"adx_cnv_open_tables.bbj",
:		0,
:		0,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)

	call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	etim=tim
	if rd_status$<>"" rd_rebuild_stat$=rd_status$
	print "Processed ",reccnt," entries from ddm_tables."
	print non_data_cnt," were already vkeyed or non-data (options entry, reference, child form)"
	print barista_cnt," were Barista and/or Examples files."
	print "Updated table defs for ",process_cnt," files, and re-built xml's. Also updated BASIS dd."
	print "Of those, actually rebuilt ",update_cnt," data files (i.e. skipped non-existent entry files, work files, etc.)"
	print "Started: ",stim," Ended: ",etim
	print "All done...<enter>: "; input *
	progress!.setValue("+process_task",rd_task_val$+"^D^")


	release
