rem Clear Selected Tables
rem Proprietary Software. AddonSoftware
rem Program ID: adx_cleartable.aon  <Mar 27, 2006>

	begin

	if stbl("+USE_SETERR")="YES" seterr error_proc

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp0)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp0)+rd_tmp0-1)/rd_tmp0)
	def fnstrip$(rd_tmp0$,rd_tmp1$)=rd_tmp0$(1,pos(fill(50,rd_tmp1$)=rd_tmp0$+fill(50,rd_tmp1$))-1)

rem --- Directory STBLs

	rd_gui_dev$=stbl("+GUI_DEVICE")
	rd_dir_pgm$=stbl("+DIR_PGM")
	rd_dir_img$=stbl("+DIR_IMG")
	rd_dir_sys$=stbl("+DIR_SYS")
	rd_file_usr$=stbl("+FILE_USR"),rd_file_usr$=stbl("+DIR_USR",err=*next)+"aon_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
	rd_file_set$=stbl("+FILE_SET")

rem --- Open GUI Device

	rd_num_files=2
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]

	rd_open_tables$[1]=rd_gui_dev$,rd_open_opts$[1]="O"
	rd_open_tables$[2]="DDM_TABLES",rd_open_opts$[2]="OTA"

	gosub open_tables

	rd_gui_dev=num(rd_open_chans$[1])
	rd_ddm_tables=num(rd_open_chans$[2]);dim rd_ddm_tables$:rd_open_tpls$[2]

	rdBBjAPI!=BBjAPI()
    rdSysGUI!=rdBBjAPI!.getSysGui()

rem --- Get Attributes

	call rd_dir_pgm$+"rdm_attr_init.aon",rd_attr_def_tbl$[all],rd_attr_def_col$[all]
		rd_attr_def_col$=rd_attr_def_col$[0,0]
		rd_attr_def_tbl$=rd_attr_def_tbl$[0,0]

rem --- Main Process

	gosub disp_win
	gosub get_win_settings
	gosub def_grid
	gosub resize_win

	rdForm!.setVisible(1)

	gosub get_tables

	rd_last_sort_col=-1
	rdTablesGrid!.sortByColumn(1,rdTablesGrid!.SORT_ASCENDING)
	gosub set_sort_data

	rdTablesGrid!.focus()

event_ctl:rem --- Event Control

	rdForm!.setCallback(rdForm!.ON_CLOSE,"exit_prog")
	rdForm!.setCallback(rdForm!.ON_RESIZE,"resize_win")

	rdTablesGridHdr!.setCallback(rdTablesGridHdr!.ON_GRID_MOUSE_UP,"grid_hdr_select")
	
	rdBtnClear!.setCallback(rdBtnClear!.ON_BUTTON_PUSH,"func_clear")
	rdBtnExit!.setCallback(rdBtnExit!.ON_BUTTON_PUSH,"exit_prog")

	rdTablesGrid!.setCallback(rdTablesGrid!.ON_GRID_KEY_PRESS,"grid_keypress")
	rdTablesGrid!.setCallback(rdTablesGrid!.ON_GRID_MOUSE_UP,"grid_select")

	rdSysGUI!.flushEvents()

    dim rd_gui_event$:tmpl(rd_gui_dev)
    dim rd_notify_base$:noticetpl(0,0)

	process_events,err=*same

grid_hdr_select:rem --- Grid Cell Selected

    rd_gui_event$=rdSysGUI!.getLastEventString()
    rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
    dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
    rd_notice$=rd_notify_base$

    switch rd_notice.code
        case 14;rem LCLICKED
			rd_sort_col=rd_notice.col
			gosub set_sort_data
        break
        case default
        break
    swend

	return

grid_keypress:rem --- Check for Specific Pressed Keys

	rd_gui_event$=rdSysGUI!.getLastEventString()
	rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
	dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
	rd_notice$=rd_notify_base$
	switch rd_notice.wparam
		case 32;rem Space
			gosub switch_value
		break
		case 27;rem Escape
			goto exit_prog
		break
		case 16718;rem Alt+F4
			goto exit_prog
		break
	swend

	return

grid_select:rem --- Grid Cell Selected

    rd_gui_event$=rdSysGUI!.getLastEventString()
    rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
    dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
    rd_notice$=rd_notify_base$

	if rd_notice.col=0 gosub switch_value

	return

switch_value:rem --- Switch Check Values

	rdSysGUI!.setRepaintEnabled(0)

	rdTempRows!=rdTablesGrid!.getSelectedRows()
	if rdTempRows!.size()>0
		for rd_curr_row=1 to rdTempRows!.size()
			if rdTablesGrid!.getCellState(rdTempRows!.getItem(rd_curr_row-1),0)=0
				rdTablesGrid!.setCellState(rdTempRows!.getItem(rd_curr_row-1),0,1)
				else
				rdTablesGrid!.setCellState(num(rdTempRows!.getItem(rd_curr_row-1)),0,0)
			endif
		next rd_curr_row
	endif

	gosub check_status

	rdSysGUI!.setRepaintEnabled(1)

	return

check_status:rem --- Test For Selected Items

	rd_selected_rows=0
	for rd_curr_row=1 to rdTablesGrid!.getNumRows()
		if rdTablesGrid!.getCellState(rd_curr_row-1,0)<>0 rd_selected_rows=rd_selected_rows+1
	next rd_curr_row

	if rd_selected_rows<>0
		rdBtnClear!.setEnabled(1)
		else
		rdBtnClear!.setEnabled(0)
	endif

	return

set_sort_data:rem --- Set Background Color of Sorted Column
			
	if rd_sort_col<>rd_last_sort_col rdTablesGrid!.setColumnBackColor(rd_last_sort_col,rdWindowBackColor!)
	rdTablesGrid!.setColumnBackColor(rd_sort_col,rdSortedBackColor!)
	rd_last_sort_col=rd_sort_col

	return

get_tables:rem --- Get List Of Tables

	rdForm!.setCursor(3)
	rd_total_recs=0

	rdGridVect!=rdSysGUI!.makeVector()
	read (rd_ddm_tables,key="",dom=*next)

	while rd_more=0
		read record (rd_ddm_tables,end=*break)rd_ddm_tables$
			if rd_ddm_tables.dd_system_id$="DD" continue

		if pos(rd_ddm_tables.dd_alias_type$="DKXVMS")<>0
			rdGridVect!.addItem("")
			rdGridVect!.addItem(cvs(rd_ddm_tables.dd_table_alias$,3))
			rdGridVect!.addItem(cvs(rd_ddm_tables.dd_alias_desc$,3))
			rdGridVect!.addItem(cvs(rd_ddm_tables.dd_aon_name$,3))
			rd_total_recs=rd_total_recs+1
		endif
	wend

	rdTablesGrid!.setNumRows(rd_total_recs)
	rdTablesGrid!.setCellText(0,0,rdGridVect!)
	rdGridVect!.clear()

	rdForm!.setCursor(0)

	return

func_clear:rem --- Clear Selected Tables

	rd_msg_id$="ADMIN_CLEAR_TABLES"
	dim rd_msg_tokens$[1]
		rd_msg_tokens$[1]=str(rd_selected_rows)
	gosub disp_message

	if rd_msg_opt$<>"Y" return

	rd_meter_data$=""
	rd_meter_action$="WIN-LST-MTR-OK"
	rd_meter_total_recs=rd_selected_rows
	gosub disp_meter
	rd_meter_proc_recs=0

	for rd_curr_row=1 to rd_total_recs
		if rdTablesGrid!.getCellState(rd_curr_row-1,0)<>0 
			rd_curr_table$=rdTablesGrid!.getCellText(rd_curr_row-1,1)

			rd_meter_proc_recs=rd_meter_proc_recs+1
			rd_meter_data$=cvs(rd_curr_table$,3)
			rd_meter_action$="LST"
			gosub disp_meter

			rd_num_files=1
			dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
			rd_open_tables$[1]=rd_curr_table$,rd_open_opts$[1]="OAS"
			gosub open_tables

			rd_temp_chan=num(rd_open_chans$[1])
			if rd_temp_chan=0
				rd_meter_data$=" ("+rd_disk_table$+") not found"
				rd_meter_action$="MTR-LST"
				gosub disp_meter
				else
				rd_disk_table$=rd_table_chans$[rd_temp_chan,1]+rd_table_chans$[rd_temp_chan,3]
				rd_open_opts$[1]="AC"
				gosub open_tables

				initfile rd_disk_table$,err=*next

				rd_meter_data$=" ("+rd_disk_table$+") cleared"
				rd_meter_action$="MTR-LST"
				gosub disp_meter
			endif
			wait 1
		endif
	next rd_curr_row

	rd_meter_proc_recs=rd_meter_total_recs
	rd_meter_data$=""
	rd_meter_action$="END"
	gosub disp_meter

	return

open_tables:rem -----<Open Tables

	call rd_dir_pgm$+"rdc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

disp_message:rem --- Display Message Dialog

	call rd_dir_pgm$+"adc_message.aon",
:		rd_msg_id$,
:		rd_msg_tokens$[all],
:		rd_msg_opt$,
:		rd_table_chans$[all]

	return

disp_meter:rem --- Display Progress Meter

	call rd_dir_pgm$+"rdm_prog_bar.aon",
:		rdSysGUI!,
:		rdForm!,
:		rdMeterWin!,
:		rd_meter_title$,
:		rd_meter_total_recs,
:		rd_meter_proc_recs,
:		rd_meter_data$,
:		rd_meter_action$

	return

get_win_settings:rem --- Get Window Settings

	rd_save_win_desc$=pad("WIN_[CLEARTABLE]",20)

	call rd_dir_pgm$+"rdc_winsize.aon",rd_save_win_desc$,"W","",rdForm!,"READ",rd_win_coord[all]

	return

save_win_settings:rem --- Save Window Settings

	call rd_dir_pgm$+"rdc_winsize.aon",rd_save_win_desc$,"W","",rdForm!,"SAVE",rd_win_coord[all]

	return

disp_win:rem --- Display Window

	dim rd_ctl_misc$[20]

	rd_form_id$=rd_dir_sys$+"adx_cleartable.arc"

	call rd_dir_pgm$+"rdm_controls.aon",
:		rd_gui_dev,
:		rdSysGUI!,
:		rd_form_id$,
:		rd_win_coord[all],
:		rdForm!,
:		"DISPLAY",
:		rd_open_chan$[all],
:		rd_ctl_misc$[all]

	rd_meter_title$=rdForm!.getTitle()

	rdTablesGrid!=rdForm!.getControl(5000)
	rdBtnClear!=rdForm!.getControl(1)
		rdBtnClear!.setEnabled(0)
	rdBtnExit!=rdForm!.getControl(2)

	rd_win_disp$="YES"

	return

def_grid:rem --- Define Grid

	rd_def_cols=4
	dim rd_attr_col$[rd_def_cols,len(rd_attr_def_col$)/5]
		rd_attr_col$[1,fnstr_pos("DVAR",rd_attr_def_col$,5)]="CLEAR"
		rd_attr_col$[1,fnstr_pos("CTLW",rd_attr_def_col$,5)]="25"
		rd_attr_col$[1,fnstr_pos("MAXL",rd_attr_def_col$,5)]="1"
		rd_attr_col$[1,fnstr_pos("CTYP",rd_attr_def_col$,5)]="C"

		rd_attr_col$[2,fnstr_pos("DVAR",rd_attr_def_col$,5)]="DD_TABLES"
		rd_attr_col$[2,fnstr_pos("CTLW",rd_attr_def_col$,5)]="120"

		rd_attr_col$[3,fnstr_pos("DVAR",rd_attr_def_col$,5)]="DESC"
		rd_attr_col$[3,fnstr_pos("CTLW",rd_attr_def_col$,5)]="200"

		rd_attr_col$[4,fnstr_pos("DVAR",rd_attr_def_col$,5)]="DISK_FILE"
		rd_attr_col$[4,fnstr_pos("CTLW",rd_attr_def_col$,5)]="80"

		for rd_curr_attr=1 to rd_def_cols
			rd_attr_col$[0,1]=rd_attr_col$[0,1]+pad("CLEAR_TABLE."+rd_attr_col$[rd_curr_attr,fnstr_pos("DVAR",rd_attr_def_col$,5)],40)
		next rd_curr_attr
		rd_attr_disp_col$=rd_attr_col$[0,1]

	call rd_dir_pgm$+"rdm_grid_init.aon",rd_gui_dev,rdTablesGrid!,"COLH-MULTI-AUTO-LINES-LIGHT-CHECKS",100,rd_attr_def_col$[all],rd_attr_disp_col$,rd_attr_col$[all]

	rdTablesGridHdr!=rdTablesGrid!.getColumnHeader()
	rdSortedBackColor!=rdSysGUI!.makeColor(250,250,250)
	rdWindowBackColor!=rdTablesGrid!.getBackColor()

	return

resize_win:rem --- Resize Window Contents

	rdTablesGrid!.setSize(rdForm!.getWidth()-(rdTablesGrid!.getX()*2),rdForm!.getHeight()-40)
	rdBtnClear!.setLocation(rdForm!.getWidth()-150,rdForm!.getHeight()-30)
	rdBtnExit!.setLocation(rdForm!.getWidth()-75,rdForm!.getHeight()-30)
	rdTablesGrid!.setFitToGrid(rdTablesGrid!.AUTO_RESIZE_LAST_COLUMN)

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5),err=*next)

	call stbl("+DIR_PGM")+"adc_error.aon",pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	if rd_win_disp$="YES" gosub save_win_settings

	run stbl("+DIR_PGM")+"ads_process_end.aon"
