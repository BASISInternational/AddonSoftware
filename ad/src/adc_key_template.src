rem Create Template For Selected Key
rem Proprietary Software. AddonSoftware Corp.
rem Program ID: rdm_key_tamplate.aon  <Nov 02, 2006>

rem --- Enter Arguments

	enter
:		rd_table_id$,
:		rd_table_key$,
:		rd_key_template$,
:		rd_table_chans$[all],
:		rd_status$

rem --- Constants

	rd_dir_pgm$=stbl("+DIR_PGM")

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp0)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp0)+rd_tmp0-1)/rd_tmp0)
	def fnstrip$(rd_tmp0$,rd_tmp1$)=rd_tmp0$(1,pos(fill(50,rd_tmp1$)=rd_tmp0$+fill(50,rd_tmp1$))-1)

rem --- Open Dictionary Files

	rd_num_files=3
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
	rd_open_tables$[1]="DDM_KEYS",rd_open_opts$[1]="OTA"
	rd_open_tables$[2]="DDM_KEY_SEGS",rd_open_opts$[2]="OTA"
	rd_open_tables$[3]="DDM_ELEMENTS",rd_open_opts$[3]="OTA"

	gosub open_tables

	rd_ddm_keys=num(rd_open_chans$[1]);dim rd_ddm_keys$:rd_open_tpls$[1]
	rd_ddm_key_segs=num(rd_open_chans$[2]);dim rd_ddm_key_segs$:rd_open_tpls$[2]
	rd_ddm_elements=num(rd_open_chans$[3]);dim rd_ddm_elements$:rd_open_tpls$[3]

rem --- Get Key Record Via Key ID

	readrecord(rd_ddm_keys,key=pad(rd_table_id$,16)+pad(rd_table_key$,16),knum=1)rd_ddm_keys$

rem --- Build Template

	rd_key_template$=""
	
	read(rd_ddm_key_segs,key=pad(rd_table_id$,16)+rd_ddm_keys.dd_key_number$,dom=*next)

get_next_col:rem --- Get Next Column Record

	readrecord(rd_ddm_key_segs,end=end_build)rd_ddm_key_segs$
	if rd_ddm_key_segs.dd_table_alias$+rd_ddm_key_segs.dd_key_number$<>pad(rd_table_id$,16)+rd_ddm_keys.dd_key_number$ goto end_build

	readrecord(rd_ddm_elements,key=pad(rd_ddm_key_segs.dd_segment_col$,16))rd_ddm_elements$

		rd_col_length=rd_ddm_elements.dd_data_length
		rd_temp_seg$=
:			cvs(rd_ddm_key_segs.dd_segment_col$,3)+":"+
:			rd_ddm_elements.dd_data_type$+"("+
:			str(rd_col_length)+")"

		if rd_key_template$<>"" rd_key_template$=rd_key_template$+","
		rd_key_template$=rd_key_template$+rd_temp_seg$

	goto get_next_col

end_build:rem --- Wrap Up Template Build

	rd_key_template$=cvs(rd_key_template$,8)

	goto exit_prog

open_tables:rem -----<Open Tables

	call rd_dir_pgm$+"rdc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

disp_message:rem --- Display Message Dialog

	call rd_dir_pgm$+"adc_message.aon",
:		rd_msg_id$,
:		rd_msg_tokens$[all],
:		rd_msg_opt$,
:		rd_table_chans$[all]

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))

	call stbl("+DIR_PGM")+"adc_error.aon",pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	exit
