rem --- Upgrade Conversion Utility For Version 23.00
rem --- Program adc_v2300conversion.aon

rem --- AddonSoftware Version 23.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


rem --- CONVCTRLFILECHAN : Channel number conversion control file data/adx_conversionCtrl is open on (Input)
rem --- CONVCTRL!        : Property object of the conversion control file data/adx_conversionCtrl (Input)
rem --- INSTALLMAP!      : HashMap object of installed modules, keyed by module ID (Input)
rem --- rdForm!          : Window object to hold progress meter
rem --- Translate!       : Translator object translations
rem --- CONV_STATUS      : Status code/0=No error (Returned)

    use java.io.File
    use java.util.HashMap
    use java.util.GregorianCalendar
    use java.util.Properties

    use ::ado_file.src::FileObject
    use ::ado_SyncRecords.aon::SyncRecords

    setesc std_error
    seterr std_error

    enter convCtrlFileChan,convCtrl!,installMap!,rdForm!,Translate!,conv_status

rem --- Initializations

    conv_status=1
    dir_syp$=stbl("+DIR_SYP")
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")

    Calendar! = new GregorianCalendar()
    
rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log
    
rem --- Start progress meter

    meter_title$="adc_v2300conversion.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter

rem --- For version 23.00, initialize new MICR_PRINT and MICR_ACCT fieldS in ADC_BANKACCTCODE, using corresponding STBL values, if present (ER 10043)
    this_module$="AD"
    if installMap!.get(this_module$)="Y" then
        task$="2300_AD_adc_bankacctcode"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="ADC_BANKACCTCODE",   open_opts$[1]="OTA"
    
            gosub open_tables
    
            adcBankacctcode_dev=num(open_chans$[1])
            dim adcBankacctcode$:open_tpls$[1]

            rem --- Open new aon/config/addon.syn
            open_success=0
            new_addonsyn_dev=unt
            open(new_addonsyn_dev,isz=-1,err=*next)aonDir$+"config/addon.syn"; open_success=1

            rem --- Get current +MICR_PRINT+firm+bankacctcode and +MICR_ACCT+firm+bankacctcode STBLs, and don't write them back into addon.syn
            micrGlobals!=new HashMap()
            if open_success then
                rem --- Make copy of new addon.syn without the STBLs 
                counter=1
                while 1
                    rem --- Find a backup file that doesn't exist
                    backup$=aonDir$+"config/addon.syn.bak"+str(counter)
                    backupFile! = new File(backup$)
                    if !backupFile!.exists() then break
                    counter=counter+1
                wend
                string backup$
                backup_dev=unt
                open(backup_dev)backup$
            
                while 1
                    read(new_addonsyn_dev,end=*break)record$
                    if record$="" then continue
                    rem --- Process +MICR_PRINT+firm+bankacctcode and +MICR_ACCT+firm+bankacctcode lines
                    if pos("+MICR_PRINT"=record$)<>0
                        xpos = pos("="=record$,-1)
                        if xpos
                            wval$=cvs(record$(xpos+1),3)
                            wkey$=record$(1,xpos-1)
                            wkey$=wkey$(pos("+"=wkey$))
                            wkey$=wkey$(12)+wkey$(1,11)
                            micrGlobals!.put(wkey$,wval$)
                            continue
                        endif
                    endif
                    if pos("+MICR_ACCT"=record$)<>0
                        xpos = pos("="=record$,-1)
                        if xpos
                            wval$=cvs(record$(xpos+1),3)
                            wkey$=record$(1,xpos-1)
                            wkey$=wkey$(pos("+"=wkey$))
                            wkey$=wkey$(11)+wkey$(1,10)
                            micrGlobals!.put(wkey$,wval$)
                            continue
                        endif
                    endif                    
                    write(backup_dev)record$
                wend
                close(backup_dev,err=*next)
            endif

            rem --- Initialize new MICR_PRINT and MICR_ACCT fields in ADC_BANKACCTCODE with STBL values stored in hashmap
            iter!=micrGlobals!.keySet().iterator()
            while iter!.hasNext()
                wky$=iter!.next()
                redim adcBankacctcode$
                wval$=micrGlobals!.get(wky$)
                reckey$=wky$(1,pos("+"=wky$)-1)
                adcBankacctcode.firm_id$=reckey$(1,2)
                adcBankacctcode.bnk_acct_cd$=reckey$(3)

                readrecord(adcBankacctcode_dev,key=adcBankacctcode.firm_id$+adcBankacctcode.bnk_acct_cd$,dom=*continue)adcBankacctcode$
                if pos("+MICR_PRINT"=wky$) then adcBankacctcode.micr_print$=wval$
                if pos("+MICR_ACCT"=wky$) then adcBankacctcode.micr_acct$=wval$
              
                writerecord(adcBankacctcode_dev)adcBankacctcode$
            wend

            rem --- Save current addon.syn, and replace it with updated addon.syn
            if micrGlobals!.size() then
                close(new_addonsyn_dev,err=*next)
                erase aonDir$+"config/addon.syn.bakMicr", err=*next
                success=0
                rename aonDir$+"config/addon.syn" to aonDir$+"config/addon.syn.bakMicr", err=*next; success=1
                if success then
                    erase aonDir$+"config/addon.syn", err=*next
                    rename backup$ to aonDir$+"config/addon.syn", err=*next
                endif
            endif            
            
            rem --- close files opened for this conversion
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="ADC_BANKACCTCODE", open_opts$[1]="C"
            gosub open_tables

            close(new_addonsyn_dev,err=*next)
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
                
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 23.00, move fields from old APS_PAYAUTH to new APS_PARAMS (ER 9731)
    this_module$="AP"
    if installMap!.get(this_module$)="Y" then
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        task$="2300_AP_aps_params"
        if convCtrl!.getProperty(task$)<>"Completed" then
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": APS_PARAMS "
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Open File(s)
            num_files=2
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="APS_PARAMS",   open_opts$[1]="OTA"
            open_tables$[2]="APS_PAYAUTH",  open_opts$[2]="OTA"
            
            gosub open_tables
            
            apsParams_dev=num(open_chans$[1])
            apsPayAuth_dev=num(open_chans$[2])
            
            dim apsParams$:open_tpls$[1]
            dim apsPayAuth$:open_tpls$[2]

            rem --- Is Payment Authorization currently being used?
            using_PayAuth=0
            read(apsPayAuth_dev,key="",dom=*next)
            while 1
                readrecord(apsPayAuth_dev,end=*break)apsPayAuth$
                if apsPayAuth.use_pay_auth then
                    using_PayAuth=1
                    break
                endif
            wend

            if using_PayAuth then
                rem --- Need SCAN_DOCS_TO, WARN_IN_REGISTER and OK_TO_UPDATE fields from the old APS_PAYAUTH
                oldStbl$="+APDATA"
                oldFile$="aps_payauth"
                gosub get_path_to_old_file
                old_apsPayAuth$=oldPathToFile$
                open_success=0
                old_apsPayAuth_dev=unt
                open(old_apsPayAuth_dev,err=*next)old_apsPayAuth$; open_success=1
                if open_success then
                    rem --- Get record template for old source APS_PAYAUTH file
                    ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                    open_success=0
                    ddm_table_tpls=unt
                    open(ddm_table_tpls,err=*next)ddm_table_tpls$; open_success=1
                    if open_success then
                        dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"
                        tpl_found=0
                        findrecord(ddm_table_tpls,key=pad(cvs(oldFile$,4),16),dom=*next)ddm_table_tpls$;tpl_found=1
                        if tpl_found then
                            dim old_apsPayAuth_tpl$:ddm_table_tpls.template$
                        else
                            rem --- Required template missing
                            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                                   " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                            goto done
                        endif
                    else
                        rem --- Required file missing
                        msg_id$="AD_FILE_MISSING"
                        dim msg_tokens$[1]
                        msg_tokens$[1]=ddm_table_tpls$
                        gosub disp_message
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                               Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+ddm_table_tpls$+" *****"
                        goto done
                    endif
    
                    rem --- Initialize SCAN_DOCS_TO, WARN_IN_REG and OK_TO_UPDATE fields in APS_PARAMS from fields in the old APS_PAYAUTH
                    read(apsParams_dev,key="",dom=*next)
                    while 1
                        readrecord(apsParams_dev,end=*break)apsParams$
                    
                        readrecord(old_apsPayAuth_dev,key=apsParams.firm_id$+"AP00",dom=*continue)old_apsPayAuth_tpl$
                        if !old_apsPayAuth_tpl.use_pay_auth then continue
                        
                        rem --- Update APS_PARAMS record
                        apsParams.scan_docs_to$=old_apsPayAuth_tpl.scan_docs_to$
                        if old_apsPayAuth_tpl.warn_in_register then
                            apsParams.warn_in_reg$="Y"
                        else
                            apsParams.warn_in_reg$="N"
                        endif
                        if old_apsPayAuth_tpl.ok_to_update then
                            apsParams.ok_to_update$="Y"
                        else
                            apsParams.ok_to_update$="N"
                        endif
                        apsParams$=field(apsParams$)
                        writerecord(apsParams_dev)apsParams$
                    wend
                
                    rem --- close files opened for this conversion
                    num_files=2
                    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                    open_tables$[1]="APS_PARAMS",  open_opts$[1]="C"
                    open_tables$[2]="APS_PAYAUTH", open_opts$[2]="C"
                    gosub open_tables
        
                    close(old_apsPayAuth_dev,err=*next)
                   
                    write(convCtrlFileChan)task$+"=Completed"
        
                    rem --- This task$ conversion completed successfully
                    rem --- Increment progress meter
                    meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    gosub disp_meter
                    print(log_dev)meter_text$
                else
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_apsPayAuth$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                           Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_apsPayAuth$+" *****"
                    goto done
                endif
            else
                rem --- Not Using Payment Authorization
                read(apsParams_dev,key="",dom=*next)
                while 1
                    readrecord(apsParams_dev,end=*break)apsParams$
                    if cvs(apsParams.scan_docs_to$,2)="" then
                        apsParams.scan_docs_to$="NOT"
                        apsParams.warn_in_reg$="N"
                        apsParams.ok_to_update$="N"
                        apsParams$=field(apsParams$)
                        writerecord(apsParams_dev)apsParams$
                    endif
                wend
                
                rem --- close files opened for this conversion
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="APS_PARAMS",  open_opts$[1]="C"
                open_tables$[2]="APS_PAYAUTH", open_opts$[2]="C"
                gosub open_tables
               
                write(convCtrlFileChan)task$+"=Completed"
    
                rem --- This task$ conversion completed successfully
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
            endif
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 23.00, correct old v6 GLT_TRANSDETAIL postings for Manual Check JOURNAL_ID (ER 10572)
    this_module$="GL"
    if installMap!.get(this_module$)="Y" then
        task$="2300_GL_glt_transdetail"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=4
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="GLT_TRANSDETAIL",  open_opts$[1]="OTA"
            open_tables$[2]="ADM_AUDITCONTROL", open_opts$[2]="OTA"
            open_tables$[3]="ADM_FIRMS",        open_opts$[3]="OTA"
            open_tables$[4]="APS_PARAMS",       open_opts$[4]="OTA"
    
            gosub open_tables
    
            gltTransDetail_dev=num(open_chans$[1])
            admAuditControl_dev=num(open_chans$[2])
            admFirms_dev=num(open_chans$[3])
            apsParams_dev=num(open_chans$[4])
            dim gltTransDetail$:open_tpls$[1]
            dim admAuditControl$:open_tpls$[2]
            dim admFirms$:open_tpls$[3]
            dim apsParams$:open_tpls$[4]

            rem --- Get JOURNAL_ID used by Manual Checks, which could vary by firm
            firms!=BBjAPI().makeVector()
            read(admFirms_dev,key="",dom=*next)
            while 1
                readrecord(admFirms_dev,end=*break)admFirms$
                firms!.addItem(admFirms.company_id$)
            wend

            rem --- Get the JOURNAL_IDs for each firm.
            processPgm$="apr_manualchecks.aon"
            firmJournal!=new Properties()
            for i=0 to firms!.size()-1
                firm$=firms!.getItem(i)
                read(admAuditControl_dev,key=firm$+processPgm$,knum="AO_PROG_PROCESS",dom=*next)
                while 1
                    admAuditControl_key$=key(admAuditControl_dev,end=*break)
                    if pos(firm$=admAuditControl_key$)<>1 then break
                    readrecord(admAuditControl_dev)admAuditControl$
                    if cvs(admAuditControl.process_program$,2)<>processPgm$ then continue
                    firmJournal!.setProperty(firm$,journalIds$+admAuditControl.journal_id$)
                    break
                wend
            next i

            rem --- Update old v6 GLT_TRANSDETAIL postings for Manual Checks
            for i=0 to firms!.size()-1
                firm$=firms!.getItem(i)
                if firmJournal!.getProperty(firm$)=null() then continue
                
                rem --- Does this firm use multiple AP types?
                redim apsParams$
                readrecord(apsParams_dev,key=firm$+"AP00",dom=*next)apsParams$
                
                journalId$=firmJournal!.getProperty(firm$)
                read(gltTransDetail_dev,key=firm$+journalId$,knum="AO_JOURNAL_REFS",dom=*next)
                while 1
                    gltTransDetail_key$=key(gltTransDetail_dev,end=*break)
                    if pos(firm$+journalId$=gltTransDetail_key$)<>1 then break
                    readrecord(gltTransDetail_dev)gltTransDetail$
            
                    rem --- v6 sets reference_03 to check_no+" "+ap_type.
                    rem --- Barista-Addon sets reference_03=ap_type if multiple AP types and NOT a reversal
                    ref3$=cvs(gltTransDetail.reference_03$,2)
                    if len(ref3$)>3 then
                        check_no$=ref3$(1,pos(" "=ref3$)-1)
                        ap_type$=ref3$(pos(" "=ref3$)+1)
            
                        gltTransDetail.reference_02$=check_no$
                        if apsParams.multi_types$="Y" then
                            gltTransDetail.reference_03$=ap_type$
                        else
                            gltTransDetail.reference_03$=""
                        endif
                        writerecord(gltTransDetail_dev)gltTransDetail$
                    endif
                wend
            next i
                
            rem --- close files opened for this conversion
            num_files=4
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="GLT_TRANSDETAIL",  open_opts$[1]="C"
            open_tables$[2]="ADM_AUDITCONTROL", open_opts$[2]="C"
            open_tables$[3]="ADM_FIRMS",        open_opts$[3]="C"
            open_tables$[4]="APS_PARAMS",       open_opts$[4]="C"
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 23.00, Inventory conversions
    this_module$="IV"
    if installMap!.get(this_module$)="Y" then
        rem --- Split IVE_TRANSFER into IVE_TRANSFERHDR and IVE_TRANSFERDET (ER 10412)
        task$="2300_IV_ive_transfer"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=3
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="IVE_TRANSFER",    open_opts$[1]="OTA"
            open_tables$[2]="IVE_TRANSFERHDR", open_opts$[2]="OTA"
            open_tables$[3]="IVE_TRANSFERDET", open_opts$[3]="OTA"
    
            gosub open_tables
    
            iveTransfer_dev=num(open_chans$[1])
            iveTransferHdr_dev=num(open_chans$[2])
            iveTransferDet_dev=num(open_chans$[3])
            dim iveTransfer$:open_tpls$[1]
            dim iveTransferHdr$:open_tpls$[2]
            dim iveTransferDet$:open_tpls$[3]

            rem --- Split IVE_TRANSFER (ive-02) into IVE_TRANSFERHDR and IVE_TRANSFERDET
            read(iveTransfer_dev,key="",dom=*next)
            while 1
                readrecord(iveTransfer_dev,end=*break)iveTransfer$
                if iveTransferHdr.firm_id$=iveTransfer.firm_id$ and
:                   iveTransferHdr.warehouse_id$=iveTransfer.warehouse_id$ and
:                   iveTransferHdr.warehouse_id_to$=iveTransfer.warehouse_id_to$ and
:                   iveTransferHdr.trans_date$=iveTransfer.trans_date$ and
:                   iveTransferHdr.inv_xfer_no$=iveTransfer.inv_xfer_no$ then

                    rem --- Increment sequence number for the next detail record
                    sequenceNo=sequenceNo+1
                else
                    rem --- Initialize sequence number for first detail record
                    sequenceNo=1
                    
                    rem --- Write IVE_TRANSFERHDR header record
                    iveTransferHdr.firm_id$=iveTransfer.firm_id$    
                    iveTransferHdr.warehouse_id$=iveTransfer.warehouse_id$
                    iveTransferHdr.warehouse_id_to$=iveTransfer.warehouse_id_to$
                    iveTransferHdr.trans_date$=iveTransfer.trans_date$
                    iveTransferHdr.inv_xfer_no$=iveTransfer.inv_xfer_no$
                    iveTransferHdr.batch_no$=iveTransfer.batch_no$
                    writerecord(iveTransferHdr_dev)iveTransferHdr$
                endif
                
                rem --- Write IVE_TRANSFERDET detail record
                iveTransferDet.firm_id$=iveTransfer.firm_id$    
                iveTransferDet.warehouse_id$=iveTransfer.warehouse_id$
                iveTransferDet.warehouse_id_to$=iveTransfer.warehouse_id_to$
                iveTransferDet.trans_date$=iveTransfer.trans_date$
                iveTransferDet.inv_xfer_no$=iveTransfer.inv_xfer_no$
                iveTransferDet.sequence_no$=str(sequenceNo:"000")
                iveTransferDet.item_id$=iveTransfer.item_id$
                iveTransferDet.lotser_no$=iveTransfer.lotser_no$
                iveTransferDet.inv_xfer_no$=iveTransfer.inv_xfer_no$
                iveTransferDet.trans_qty=iveTransfer.trans_qty
                iveTransferDet.ext_cost=iveTransfer.ext_cost
                iveTransferDet.unit_cost=iveTransfer.unit_cost
                iveTransferDet.batch_no$=iveTransfer.batch_no$
                writerecord(iveTransferDet_dev)iveTransferDet$
            wend

            rem --- close files opened for this conversion
            num_files=3
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="IVE_TRANSFER",    open_opts$[1]="C"
            open_tables$[2]="IVE_TRANSFERHDR", open_opts$[2]="C"
            open_tables$[3]="IVE_TRANSFERDET", open_opts$[3]="C"
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif

        rem --- Move IVS_NUMBERS data to ITEM_ID records in ADS_SEQUENCES (ER 10586)
        task$="2300_IV_ivs_numbers"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=2
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="IVS_NUMBERS",    open_opts$[1]="OTA"
            open_tables$[2]="ADS_SEQUENCES",  open_opts$[2]="OTA"
    
            gosub open_tables
    
            ivsNumbers_dev=num(open_chans$[1])
            adsSequences_dev=num(open_chans$[2])
            dim ivsNumbers$:open_tpls$[1]
            dim adsSequences$:open_tpls$[2]

            rem --- Move IVS_NUMBERS data to ITEM_ID records in ADS_SEQUENCES (ER 10586)
            read(ivsNumbers_dev,key="",dom=*next)
            while 1
                readrecord(ivsNumbers_dev,end=*break)ivsNumbers$
                
                readrecord(adsSequences_dev,key=ivsNumbers.firm_id$+pad("ITEM_ID",16," "),dom=*continue)adsSequences$
                adsSequences.seq_last_used=ivsNumbers.nxt_item_id
                writerecord(adsSequences_dev)adsSequences$
            wend

            rem --- close files opened for this conversion
            num_files=2
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="IVS_NUMBERS",    open_opts$[1]="C"
            open_tables$[2]="ADS_SEQUENCES",  open_opts$[2]="C"
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
        
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 23.00, build POT_POHDR_ARC and POT_PODET_ARC, and POT_REQHDR_ARC and POT_REQDET_ARC
    this_module$="PO"
    if installMap!.get(this_module$)="Y" then
        rem --- Build POT_POHDR_ARC and POT_PODET_ARC from POT_RECHDR and POT_RECDET
        task$="2300_PO_pot_pohdr_arc"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=4
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="POT_POHDR_ARC",  open_opts$[1]="OTA"
            open_tables$[2]="POT_PODET_ARC",  open_opts$[2]="OTA"
            open_tables$[3]="POT_RECHDR",     open_opts$[3]="OTA"
            open_tables$[4]="POT_RECDET",     open_opts$[4]="OTA"
    
            gosub open_tables
    
            potPoHdrArc_dev=num(open_chans$[1])
            potPoDetArc_dev=num(open_chans$[2])
            potRecHdr_dev=num(open_chans$[3])
            potRecDet_dev=num(open_chans$[4])
            dim potPoHdrArc$:open_tpls$[1]
            dim potPoDetArc$:open_tpls$[2]
            dim potRecHdr$:open_tpls$[3]
            dim potRecDet$:open_tpls$[4]
                
            rem --- Use POT_RECHDR and POT_RECDET to build POT_POHDR_ARC and POT_PODET_ARC
            thisPO$=""
            read(potRecHdr_dev,key="",dom=*next)
            while 1
                potRecHdr_key$=key(potRecHdr_dev,end=*break)
                readrecord(potRecHdr_dev)potRecHdr$
                if potRecHdr.po_no$=thisPO$ then continue; rem --- Only use the first receipt for a PO
                thisPO$=potRecHdr.po_no$
                
                call pgmdir$+"adc_copyfile.aon",potRecHdr$,potPoHdrArc$,status
                if status<>0 then
                    print(log_dev)"    "+Translate!.getTranslation("AON_SKIPPED")+" POT_RECHDR: "+potRecHdr_key$
                    continue
                endif
                potPoHdrArc.recpt_date$=""
                potPoHdrArc$=field(potPoHdrArc$)
                writerecord(potPoHdrArc_dev)potPoHdrArc$

                read(potRecDet_dev,key=potRecHdr_key$,dom=*next)
                while 1
                    potRecDet_key$=key(potRecDet_dev,end=*break)
                    if pos(potRecHdr_key$=potRecDet_key$)<>1 then break
                    readrecord(potRecDet_dev)potRecDet$
                    
                    call pgmdir$+"adc_copyfile.aon",potRecDet$,potPoDetArc$,status
                    if status<>0 then
                        print(log_dev)"    "+Translate!.getTranslation("AON_SKIPPED")+" POT_RECDET: "+potRecDet_key$
                        continue
                    endif
                    potPoDetArc.internal_seq_no$=potRecDet.po_int_seq_ref$
                    potPoDetArc.req_no$=potPoHdrArc.req_no$
                    potPoDetArc.qa_wip_qty=0
                    potPoDetArc.qa_rec_qty=0
                    potPoDetArc.qa_rej_qty=0
                    potPoDetArc.reserved_num_01=0
                    potPoDetArc$=field(potPoDetArc$)
                    writerecord(potPoDetArc_dev)potPoDetArc$
                wend
            wend

            rem --- close files opened for this conversion
            num_files=4
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="POT_POHDR_ARC",  open_opts$[1]="C"
            open_tables$[2]="POT_PODET_ARC",  open_opts$[2]="C"
            open_tables$[3]="POT_RECHDR",     open_opts$[3]="C"
            open_tables$[4]="POT_RECDETS",    open_opts$[4]="C"
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif

        rem --- Build POT_REQHDR_ARC and POT_REQDET_ARC from POT_POHDR_ARC and POT_PODET_ARC
        task$="2300_PO_pot_reqhdr_arc"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=6
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="POT_POHDR_ARC",  open_opts$[1]="OTA"
            open_tables$[2]="POT_PODET_ARC",  open_opts$[2]="OTA"
            open_tables$[3]="POT_REQHDR_ARC", open_opts$[3]="OTA"
            open_tables$[4]="POT_REQDET_ARC", open_opts$[4]="OTA"
            open_tables$[5]="POE_POHDR",      open_opts$[5]="OTA"
            open_tables$[6]="POE_PODET",      open_opts$[6]="OTA"            
    
            gosub open_tables
    
            potPoHdrArc_dev=num(open_chans$[1])
            potPoDetArc_dev=num(open_chans$[2])
            potReqHdrArc_dev=num(open_chans$[3])
            potReqDetArc_dev=num(open_chans$[4])
            poePoHdr_dev=num(open_chans$[5])
            poePoDet_dev=num(open_chans$[6])
            dim potPoHdrArc$:open_tpls$[1]
            dim potPoDetArc$:open_tpls$[2]
            dim potReqHdrArc$:open_tpls$[3]
            dim potReqDetArc$:open_tpls$[4]
            dim poePoHdr$:open_tpls$[5]
            dim poePoDet$:open_tpls$[6]
                
            rem --- Use POT_POHDR_ARC and POT_PODET_ARC to build POT_REQHDR_ARC and POT_REQDET_ARC
            read(potPoHdrArc_dev,key="",dom=*next)
            while 1
                potPoHdrArc_key$=key(potPoHdrArc_dev,end=*break)
                readrecord(potPoHdrArc_dev)potPoHdrArc$
                if cvs(potPoHdrArc.req_no$,2)="" then continue; rem --- not a requisition
                
                call pgmdir$+"adc_copyfile.aon",potPoHdrArc$,potReqHdrArc$,status
                if status<>0 then
                    print(log_dev)"    "+Translate!.getTranslation("AON_SKIPPED")+" POT_POHDR_ARC: "+potPoHdrArc_key$
                    continue
                endif
                potReqHdrArc$=field(potReqHdrArc$)
                writerecord(potReqHdrArc_dev)potReqHdrArc$

                read(potPoDetArc_dev,key=potPoHdrArc_key$,dom=*next)
                while 1
                    potPoDetArc_key$=key(potPoDetArc_dev,end=*break)
                    if pos(potPoHdrArc_key$=potPoDetArc_key$)<>1 then break
                    readrecord(potPoDetArc_dev)potPoDetArc$
                    
                    call pgmdir$+"adc_copyfile.aon",potPoDetArc$,potReqDetArc$,status
                    if status<>0 then
                        print(log_dev)"    "+Translate!.getTranslation("AON_SKIPPED")+" POT_PODET_ARC: "+potPoDetArc_key$
                        continue
                    endif
                    potReqDetArc.reserved_num_03=0
                    potReqDetArc.reserved_num_04=0
                    potReqDetArc.reserved_num_05=0
                    potReqDetArc.reserved_num_06=0
                    potReqDetArc.reserved_num_07=0
                    potReqDetArc.reserved_num_08=0
                    potReqDetArc$=field(potReqDetArc$)
                    writerecord(potReqDetArc_dev)potReqDetArc$
                wend
            wend

            rem --- For all POs in entry that use a Requisition, make sure the Requisition is captured in POT_REQHDR_ARC and POT_REQDET_ARC
            read(poePoHdr_dev,key="",dom=*next)
            while 1
                poePoHdr_key$=key(poePoHdr_dev,end=*break)
                readrecord(poePoHdr_dev)poePoHdr$
                if cvs(poePoHdr.req_no$,2)="" then continue; rem --- not a requisition
                
                rem --- Skip Requisition if it's already in history
                find(potReqHdrArc_dev,key=poePoHdr.firm_id$+poePoHdr.req_no$,dom=*next); continue

                call pgmdir$+"adc_copyfile.aon",poePoHdr$,potReqHdrArc$,status
                if status<>0 then
                    print(log_dev)"    "+Translate!.getTranslation("AON_SKIPPED")+" POE_POHDR: "+poePoHdr_key$
                    continue
                endif
                potReqHdrArc$=field(potReqHdrArc$)
                writerecord(potReqHdrArc_dev)potReqHdrArc$

                read(poePoDet_dev,key=poePoHdr_key$,dom=*next)
                while 1
                    poePoDet_key$=key(poePoDet_dev,end=*break)
                    if pos(poePoHdr_key$=poePoDet_key$)<>1 then break
                    readrecord(poePoDet_dev)poePoDet$
                    
                    call pgmdir$+"adc_copyfile.aon",poePoDet$,potReqDetArc$,status
                    if status<>0 then
                        print(log_dev)"    "+Translate!.getTranslation("AON_SKIPPED")+" POE_PODET: "+poePoDet_key$
                        continue
                    endif
                    potReqDetArc.reserved_num_03=0
                    potReqDetArc.reserved_num_04=0
                    potReqDetArc.reserved_num_05=0
                    potReqDetArc.reserved_num_06=0
                    potReqDetArc.reserved_num_07=0
                    potReqDetArc.reserved_num_08=0
                    potReqDetArc$=field(potReqDetArc$)
                    writerecord(potReqDetArc_dev)potReqDetArc$
                wend
            wend

            rem --- close files opened for this conversion
            num_files=6
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="POT_POHDR_ARC",  open_opts$[1]="C"
            open_tables$[2]="POT_PODET_ARC",  open_opts$[2]="C"
            open_tables$[3]="POT_RECHDR_ARC", open_opts$[3]="C"
            open_tables$[4]="POT_RECDET_ARC", open_opts$[4]="C"
            open_tables$[5]="POE_POHDR",      open_opts$[5]="C"
            open_tables$[6]="POE_PODET",      open_opts$[6]="C"            
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

done: rem --- Done, close things up

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v2300conversion log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Close opened files
    if ddm_table_tpls then close(ddm_table_tpls,err=*next)

    if completed_successfully then conv_status=0; rem --- no errors encountered
	goto std_exit

get_path_to_old_file: rem --- Locate data directory in old Addon installation
    rem --- IN: oldStbl$ - STBL in old addon.syn that points to the data directory where the old file is located
    rem --- IN: oldFile$ - name of old file to get path for
    rem --- OUT: oldPathToFile$ - full path to requested file, including the file name
    oldPathToFile$=oldFile$

    rem --- Open old aon/config/addon.syn
    open_success=0
    old_addonsyn_dev=unt
    open(old_addonsyn_dev,isz=-1,err=*next)convCtrl!.getProperty("addon_source")+"/aon/config/addon.syn"; open_success=1
    if !open_success then return

    rem --- Get specified data directory from old addon.syn
    key$="=SET "+oldStbl$+"="
    while 1
        read(old_addonsyn_dev,end=*break)record$
        if(pos(key$=record$)) then
            xpos=pos(key$=record$)
            oldPathToFile$=record$(xpos+len(key$))+oldFile$
            break
        endif
    wend
    close(old_addonsyn_dev)

    return

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v2300conversion_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v2300conversion log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    exit

rem #endinclude std_exit.src

    end
