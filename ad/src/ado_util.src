rem --- ado - A set of utility method for use with Barista
rem --- Program ado_util.src v8.0.0 03Dec2008
rem --- Copyright 2008, BASIS International, Ltd.

class public util

	field private static BBjTopLevelWindow Form!
	field private static BBjSysGui SysGUI!
	rem --- width/height for adjusting window
	field public static BBjInt ExtraWidth% = 10
	field public static BBjInt ExtraHeight% = 10
	rem --- width/height for adjusting screen
	field public static BBjInt LessWidth% = 40
	field public static BBjInt LessHeight% = 40
	field private static BBjInt GROUP_BOX% = 21
	field private static BBjInt PUSH_BUTTON% = 11
	field private static BBjInt ENABLE% = 1
	field private static BBjInt DISABLE% = 0
	rem --- These IDs are set by Barista
	field private static BBjInt CHILD_WINDOW_ID% = 1109
	field private static BBjInt GRID_ID% = 5900
	field public static BBjColor EnableColor!
	field public static BBjColor DisableColor!
	
	rem --- Resize a Baritsa window after custom controls have been placed on it.
	rem --- This methods is normally called in a AWIN callpoint just after the last
	rem --- controls has been added.  The method will not make the window smaller so
	rem --- that it would override a user's resize.  The window will be repositioned
	rem --- if after the resize the window won't fit on the screen.
	rem 
	rem --- ExtraWidth, ExtraHeight, LessWidth, and LessHeight are all public and can
	rem --- be set with the automatic setter method setExtraWidth(), etc.
	
	method public static void resizeWindow(BBjTopLevelWindow inForm!, BBjSysGui inSysgui!)
	
		#Form! = inForm!
		#SysGUI! = inSysgui!
		controls! = #Form!.getAllControls()
		ScreenSize! = #SysGUI!.getSystemMetrics().getScreenSize()
		screen_width = ScreenSize!.width - #LessWidth%
		screen_height = ScreenSize!.height - #LessHeight%
		new_width = #Form!.getWidth()
		new_height = #Form!.getHeight()
		no_buttons_yet = 1

		rem --- Roll throught all controls, setting the max width and height
		for i=0 to controls!.size() - 1
			this_ctrl! = controls!.getItem(i)
			type = this_ctrl!.getControlType()

			rem --- Group boxes dimesions can mess up the calculation
			if type = #GROUP_BOX% then continue
			
			rem --- Push Buttons (e.g. "OK", "Cancel") need extra room at the bottom
			if type = #PUSH_BUTTON% then
				if no_buttons_yet then
					#ExtraHeight% = #ExtraHeight% + this_ctrl!.getHeight() + 5
					no_buttons_yet = 0
				endif
			else
			
				rem --- Most controls go here
				new_width  = max( new_width,  this_ctrl!.getX() + this_ctrl!.getWidth() )
				new_height = max( new_height, this_ctrl!.getY() + this_ctrl!.getHeight() )
			endif
			
		next i

		rem --- Set new size, but not bigger than the screen
		new_width = min( screen_width, new_width + #ExtraWidth% )
		new_height = min( screen_height, new_height + #ExtraHeight% )
		#Form!.setSize(new_width, new_height)
		
		rem --- Will the form still fit on the screen?
		new_position = 0
		form_x = #Form!.getX()
		form_y = #Form!.getY()
		
		if form_x + new_width > screen_width then
			form_x = int( (screen_width - new_width) / 2 )
			new_position = 1
		endif
		
		if form_y + new_height > screen_height then
			form_y = int( (screen_height - new_height) / 2 )
			new_position = 1
		endif
		
		if new_position then
			#Form!.setLocation(form_x, form_y)
		endif
	
	methodend

	rem --- Enable/Disable Barista grid column(s)
	rem 
	rem --- Use the background color of cell (0,0) as the enable color.  It's important to get
	rem --- this color before that cell is disabled!  The disable color is the grid line color.
	rem --- Both can be set by the caller using the automatic setter methods setEnableColor() and
	rem --- setDisableColor()
	rem 
	rem --- The other methods are simply shortcuts
	
	method public static void ableGridColumns(BBjTopLevelWindow inForm!, BBjVector cols!, BBjInt able%)
	
		#Form! = inForm!
		grid! = #getGridAbleColors()
		
		for i=0 to cols!.size() - 1
			col = num( cols!.getItem(i),err=*continue )
			
			if able% = #DISABLE% then
				grid!.setColumnEditable(col, #DISABLE%)
				grid!.setColumnBackColor(col, #DisableColor!)
			else
				if able% = #ENABLE% then
					grid!.setColumnEditable(col, #ENABLE%)
					grid!.setColumnBackColor(col, #EnableColor!)
				endif
			endif
		next i
		
	methodend
	
	rem --- One column (no vector)
	method public static void ableGridColumns(BBjTopLevelWindow inForm!, BBjInt col%, BBjInt able%)
		#Form! = inForm!
		cols! = BBjAPI().makeVector()
		cols!.addItem(col%)
		#ableGridColumns(#Form!, cols!, able%)
	methodend

	rem --- Assume Disable
	method public static void ableGridColumns(BBjTopLevelWindow inForm!, BBjInt col%)
		#Form! = inForm!
		#ableGridColumns(#Form!, col%, #DISABLE%)
	methodend

	rem --- Allow number (as opposed to Int)
	method public static void ableGridColumns(BBjTopLevelWindow inForm!, BBjNumber col)
		#Form! = inForm!
		#ableGridColumns(#Form!, int(col), #DISABLE%)
	methodend
	
	rem --- Accessor methods for ENABLE/DISABLE
	method public static BBjInt DISABLE()
		methodret #DISABLE%
	methodend

	method public static BBjInt ENABLE()
		methodret #ENABLE%
	methodend

	rem --- Get the Barista grid and set enable/disable colors
	method protected static BBjStandardGrid getGridAbleColors()

		declare auto BBjStandardGrid grid!
		grid! = #Form!.getChildWindow(#CHILD_WINDOW_ID%).getControl(#GRID_ID%)
		
		if #EnableColor! = null() then
			#EnableColor! = grid!.getCellBackColor(0,0)
		endif
		
		if #DisableColor! = null() then
			#DisableColor! = grid!.getLineColor()
		endif
		
		methodret grid!
		
	methodend
	
	rem --- Disable a cell or cells on a Barista grid
	rem
	rem --- This method should be called within the detail where the row is
	rem --- implied as the current row, as opposed to the above methods which 
	rem --- are typically called in the header to disable an entire column
	
	method public static void ableGridCells(BBjTopLevelWindow inForm!, BBjVector cols!, BBjInt able%)
	
		#Form! = inForm!
		grid! = #getGridAbleColors()
		row = grid!.getSelectedRow()
		
		if row <> -1 then
			for i=0 to cols!.size() - 1
				col = num( cols!.getItem(i),err=*continue )
				
				if able% = #DISABLE% then
					grid!.setCellEditable(row, col, #DISABLE%)
					grid!.setCellBackColor(row, col, #DisableColor!)
				else
					if able% = #ENABLE% then
						grid!.setCellEditable(row, col, #ENABLE%)
						grid!.setCellBackColor(row, col, #EnableColor!)
					endif
				endif
			next i
		endif
	
	methodend

	rem --- One column (no vector)
	method public static void ableGridCells(BBjTopLevelWindow inForm!, BBjInt col%, BBjInt able%)
		#Form! = inForm!
		cols! = BBjAPI().makeVector()
		cols!.addItem(col%)
		#ableGridColumns(#Form!, cols!, able%)
	methodend

	rem --- Assume Disable
	method public static void ableGridCells(BBjTopLevelWindow inForm!, BBjInt col%)
		#Form! = inForm!
		#ableGridColumns(#Form!, col%, #DISABLE%)
	methodend

	rem --- Allow number (as opposed to Int)
	method public static void ableGridCells(BBjTopLevelWindow inForm!, BBjNumber col)
		#Form! = inForm!
		#ableGridColumns(#Form!, int(col), #DISABLE%)
	methodend
	
classend

end
