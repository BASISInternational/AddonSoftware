rem --- Upgrade Conversion Utility For Version 18.00
rem --- Program adc_v1800conversion.aon

rem --- AddonSoftware Version 18.00 - Jul2017
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


rem --- CONVCTRL!   : Property object of the conversion control file data/adx_conversionCtrl (Input)
rem --- INSTALLMAP! : HashMap object of installed modules, keyed by module ID (Input)
rem --- rdForm!     : Window object to hold progress meter
rem --- Translate!  : Translator object translations
rem --- CONV_STATUS : Status code/0=No error (Returned)

    use java.io.File
    use java.util.HashMap
    use java.util.GregorianCalendar

    use ::ado_file.src::FileObject
    use ::ado_SyncRecords.aon::SyncRecords
    
    setesc std_error
    seterr std_error
    
    enter convCtrl!,installMap!,rdForm!,Translate!,conv_status

rem --- Initializations

    conv_status=1
    dir_syp$=stbl("+DIR_SYP")
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")

    Calendar! = new GregorianCalendar()
    
rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log
    
rem --- Start progress meter

    meter_title$="adc_v1800conversion.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter

rem --- Initialize OP data file changes implemented during minor releases of v17

    if num(convCtrl!.getProperty("start_version"))>=17 then
        rem --- If starting version is before v17, then the following conversions are handled in adc_v1700conversion.aon
    
        this_module$="OP"
        if installMap!.get(this_module$)="Y" then 
            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- As of v17.10, DataPort handles initializing OPC_MESSAGE from OPC_MSG_HDR (opm-04) and OPC_MSG_DET (opm-14)
            if convCtrl!.getProperty("data_source")="OCJ" then
    
                rem --- Make sure OPC_MSG_HDR (opm-04) and OPC_MSG_DET (opm-14) are present
                open_success=0
                opm04_dev=unt
                open(opm04_dev,err=*next)dataDir$+"/opm-04"; open_success=1
                if !open_success then
                    rem --- Copy OPC_MSG_HDR (opm-04) and OPC_MSG_DET (opm-14) from old source to the new install
    
                    rem --- Open ddm_tables and ddm_table_tpls in new install
                    num_files=2
                    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                    open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                    open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                    gosub open_tables
                    new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                    new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
        
                    rem --- Open ddm_tables in old source
                    old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                    open_success=0
                    old_ddmTables=unt
                    open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                    if !open_success then
                        rem --- Required file missing
                        msg_id$="AD_FILE_MISSING"
                        dim msg_tokens$[1]
                        msg_tokens$[1]=old_ddm_table$
                        gosub disp_message
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                           Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                        goto done
                    endif
    
                    rem --- Open ddm_table_tpls in old source
                    old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                    open_success=0
                    old_ddmTableTpls=unt
                    open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                    if !open_success then
                        rem --- Required file missing
                        msg_id$="AD_FILE_MISSING"
                        dim msg_tokens$[1]
                        msg_tokens$[1]=old_ddm_table_tpls$
                        gosub disp_message
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                           Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                        goto done
                    endif
        
                    rem --- Get table definition for old source OPC_MSG_HDR file, and add it to new install
                    oldFile$="OPC_MSG_HDR"
                    table_found=0
                    findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                    if table_found then
                        writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                    else
                        rem --- Required table missing
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                           " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                        meter_proc_recs=meter_proc_recs+1
                        meter_action$="MTR-LST"
                        meter_text$=err_msg$
                        gosub disp_meter
                        print(log_dev)meter_text$
                        goto done
                    endif
                        
                    rem --- Get table definition for old source OPC_MSG_DET file, and add it to new install
                    oldFile$="OPC_MSG_DET"
                    table_found=0
                    findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                    if table_found then
                        writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                    else
                        rem --- Required table missing
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                           " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                        meter_proc_recs=meter_proc_recs+1
                        meter_action$="MTR-LST"
                        meter_text$=err_msg$
                        gosub disp_meter
                        print(log_dev)meter_text$
                        goto done
                    endif
        
                    rem --- Get record template for old source OPC_MSG_HDR file, and add it to new install
                    oldFile$="OPC_MSG_HDR"
                    tpl_found=0
                    findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                    if tpl_found then
                        writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                    else
                        rem --- Required template missing
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                           " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                        meter_proc_recs=meter_proc_recs+1
                        meter_action$="MTR-LST"
                        meter_text$=err_msg$
                        gosub disp_meter
                        print(log_dev)meter_text$
                        goto done
                    endif
    
                    rem --- Get record template for old source OPC_MSG_DET file, and add it to new install
                    oldFile$="OPC_MSG_DET"
                    tpl_found=0
                    findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                    if tpl_found then
                        writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                    else
                        rem --- Required template missing
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                           " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                        meter_proc_recs=meter_proc_recs+1
                        meter_action$="MTR-LST"
                        meter_text$=err_msg$
                        gosub disp_meter
                        print(log_dev)meter_text$
                        goto done
                    endif
    
                    sourceFileVec!=BBjAPI().makeVector()
                    tablealiasVec!=BBjAPI().makeVector()
                    sourceFileVec!.addItem("opm-04");tableAliasVec!.addItem("OPC_MSG_HDR")
                    sourceFileVec!.addItem("opm-14");tableAliasVec!.addItem("OPC_MSG_DET")
                    for source=0 to sourcefileVec!.size()-1
                        rem --- Does source file exist?
                        oldStbl$="+OPDATA"
                        oldFile$=sourceFileVec!.get(source)
                        tableAlias$=tableAliasVec!.get(source)
                        gosub get_path_to_old_file
                        source_file$=oldPathToFile$
                        open_success=0
                        source_dev=unt
                        open(source_dev,err=*next)source_file$; open_success=1
                        if open_success then
                    
                            rem --- Open file in new data dictionary
                            num_files=1
                            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                            open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                            gosub open_tables
                            target_dev=num(open_chans$[1])
                            
                            rem --- Copy source records to target
                            read(source_dev,key="",dom=*next)
                            while 1
                                readrecord(source_dev,end=*break)record$
                                writerecord(target_dev)record$
                            wend
                        endif
                    next source
                endif
            endif
    
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": OPC_MESSAGE "+
:               Translate!.getTranslation("AON_FROM_","From ")+"OPC_MSG_HDR "+
:               Translate!.getTranslation("AON_AND","and")+" OPC_MSG_DET"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Execute OP upgrade conversion utility for minor releases of v17
            theFirm$=""
            call pgmdir$+"opc_v17initMinorRev.aon",theFirm$,rdForm!,status
            if status=0 then
                rem --- Conversion completed successfully
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                   Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": OPC_MESSAGE"
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
            else
                rem --- Conversion did NOT complete successfully, exit with error message
                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                   Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:                   Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": OPC_MESSAGE"+" *****"
                goto done
            endif
        else
            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    endif
	
done: rem --- Done, close things up

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v1800conversion log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Close opened files
    if ddm_table_tpls then close(ddm_table_tpls,err=*next)
    if old_glsParams_dev then close(old_glsParams_dev,err=*next)
    if old_glm02_dev then close(old_glm02_dev,err=*next)
    if old_ddmTables then close(old_ddmTables,err=*next)
    if old_ddmTableTpls then close(old_ddmTableTpls,err=*next)

    if completed_successfully then conv_status=0; rem --- no errors encountered
	goto std_exit

get_path_to_old_file: rem --- Locate data directory in old Addon installation
escape; rem wgh ... 9090 ... testing
    rem --- IN: oldStbl$ - STBL in old addon.syn that points to the data directory where the old file is located
    rem --- IN: oldFile$ - name of old file to get path for
    rem --- OUT: oldPathToFile$ - full path to requested file, including the file name
    oldPathToFile$=oldFile$

    rem --- Open old aon/config/addon.syn
    open_success=0
    old_addonsyn_dev=unt
    open(old_addonsyn_dev,isz=-1,err=*next)convCtrl!.getProperty("addon_source")+"/aon/config/addon.syn"; open_success=1
    if !open_success then return

    rem --- Get specified data directory from old addon.syn
    key$="=SET "+oldStbl$+"="
    while 1
        read(old_addonsyn_dev,end=*break)record$
        if(pos(key$=record$)) then
            xpos=pos(key$=record$)
            oldPathToFile$=record$(xpos+len(key$))+oldFile$
            break
        endif
    wend
    close(old_addonsyn_dev)

    return

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v1800conversion_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v1800conversion log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    exit

rem #endinclude std_exit.src

    end
