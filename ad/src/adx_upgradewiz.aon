rem ==========================================================================
rem --- adx_upgradewiz.aon
rem --- Utility to automate Addon ugrade.
rem ---
rem --- AddonSoftware Version 11.11
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use java.io.File
    use java.lang.reflect.Array
    use java.nio.file.Files
    use java.nio.file.FileSystem
    use java.nio.file.Paths
    use java.nio.file.StandardCopyOption
    use java.util.ArrayList
    use java.util.Comparator
    use java.util.HashMap
    use java.util.stream.Collectors
    use java.util.Vector
    use java.nio.file.FileSystems
    use java.nio.file.attribute.PosixFilePermissions 

    use ::adc_updatexmlfiles.aon::UpdateSyncXmlFiles
    use ::ado_CdfMassager.aon::CdfMassager
    use ::ado_file.src::FileObject
    use ::ado_GitRepoInterface.aon::GitRepoInterface
    use ::ado_ModMerger.aon::ModMerger
    use ::ado_util.src::util

    setesc std_error
    seterr std_error

rem --- Initializations

    osIsWindows!=(new String(info(0,0)).indexOf("Win"))>=0

    pgmdir$=stbl("+DIR_PGM",err=*next)
    dir_syp$=stbl("+DIR_SYP")
    sysGUI! = BBjAPI().getSysGui()
    BLOCKSIZE = 2^20
    aonStblMap!=new HashMap()
    failures!=BBjAPI().makeVector()
    localCommitsList!=BBjAPI().makeVector()
    remainingCommits!=BBjAPI().makeVector()
    moveModifiedCoreError=0

rem --- Get user inputs

    gitAuthID$=cvs(Option!.getOptionData("GIT_AUTH_ID"),3)
    dbName$=Option!.getOptionData("DB_NAME")
    appDesc$=Option!.getOptionData("APP_DESC")
    version_neutral=num(Option!.getOptionData("VERSION_NEUTRAL"))
    baseDir$=Option!.getOptionData("BASE_DIR")
    newAonLoc$=Option!.getOptionData("NEW_AON_LOC")
    oldAonLoc$=Option!.getOptionData("OLD_AON_LOC")
    oldBarLoc$=Option!.getOptionData("OLD_BAR_LOC")
    syncBackupDir$=Option!.getOptionData("SYNC_BACKUP_DIR")
    doSyncBackup%=cast(BBjInt, callpoint!.getDevObject("do_sync_backup"))
    declare Vector appVect!
    appVect!=cast(Vector, callpoint!.getDevObject("appVect"))
    declare HashMap appStblMap!
    appStblMap!=cast(HashMap, callpoint!.getDevObject("appStblMap"))
    rdAdmin!=cast(BBjAdminBase, callpoint!.getDevObject("rdAdmin"))
rem    useOldMenu%=int(num(Option!.getOptionData("USE_OLD_MENU"))) --- Git-based will always incorporate menu changes so no need for separate, optional routine
    minor_ver$=callpoint!.getDevObject("minor_ver")

	rem --- Flip directory path separators
    baseDir$=FileObject.fixPath(baseDir$, "/")
	newAonLoc$=FileObject.fixPath(newAonLoc$, "/")
	oldAonLoc$=FileObject.fixPath(oldAonLoc$, "/")
	oldBarLoc$=FileObject.fixPath(oldBarLoc$, "/")
	syncBackupDir$=FileObject.fixPath(syncBackupDir$, "/")

    newAonDir$=newAonLoc$ + "/aon"
    newBarDir$=newAonLoc$ + "/barista"
    oldAonDir$=oldAonLoc$ + "/aon"
    oldBarDir$=oldBarLoc$ + "/barista"
    appName$="ADDON"

rem --- Determine if upgrading from a Git based installation, or a non-Git based installation
    gitBasedUpgrade=0
    oldGitDir! = new File(oldAonDir$+"/.git")
    if oldGitDir!.exists() and oldGitDir!.isDirectory() then gitBasedUpgrade=1

rem --- Get version for repository branch. Use version of Barista in download.
    newVersion$=minor_ver$(2)

rem --- Start progress meter
    meter_title$=Translate!.getTranslation("AON_UPDATE_WIZ")
    if gitBasedUpgrade then
        meter_total_recs=20
    else
        meter_total_recs=26
    endif
    if doSyncBackup% then meter_total_recs=meter_total_recs+1
    if useOldMenu% then meter_total_recs=meter_total_recs+1
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST-OK"
    gosub disp_meter

rem --- Open log file
    gosub open_log

rem --- Is this a restart after resolving Git conflicts?
    restartFile$=newAonDir$+"/logs/restartUpgradeWizard.txt"
    restartFlag=0
    restart_dev=unt
    open(restart_dev,err=*next)restartFile$; restart=1
    if restart then
        rem --- Before going further, verify addon.syn wasn't committed with 
        rem --- with unmerged changes. This can cause a situation that overwrites 
        rem --- the previous installation
        repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
        meter_text$=Translate!.getTranslation("AON_UPGRADE_UNRESOLVED_CONFLICTS","Checking for unresolved conflicts.",1)
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        filesWithEmbeddedConflicts!=repoInterface!.getCommittedConflicts()
        if  filesWithEmbeddedConflicts!.size()>0 then 
            rem --- There are files with embedded conflicts in the directory (Git might have them marked as resolved.) 
            msg_id$="AD_RESOLVE_CONFLICTS"
            gosub disp_message
            print(log_dev)"***** ERROR: Please resolve conflicts in the following files before proceeding: *****"
            fileIterator!=filesWithEmbeddedConflicts!.iterator()
            
            while (fileIterator!.hasNext()) 
                print (log_dev) fileIterator!.next() 
            wend 
            release
        endif 
        
    
        rem --- Verify correct restart file
        read(restart_dev,end=*endif)text$
        if pos(restartFile$=text$) then
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_UPGRADE_WIZ_RESTART")
            meter_proc_recs=meter_total_recs-5
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)"Upgrade Wizard re-started"
            print(log_dev)

            rem --- Get from restart log the starting version for this upgrade
            label$="Start version: "
            lenLabel=len(label$)
            while 1
                read(restart_dev,end=*break)text$
                if pos(label$=text$)=1 then
                    start_version$=text$(1+lenLabel)
                    break
                endif
            wend

            rem --- Get from restart log where to restart this upgrade
            label$="Re-Start At: "
            lenLabel=len(label$)
            while 1
                read(restart_dev,end=*break)text$
                if pos(label$=text$)=1 then
                    restartAt$=text$(1+lenLabel)
                    break
                endif
            wend

            rem --- Get from restart log list of remaining commits that still need to be cherry picked
            label$="Remaining commit: "
            lenLabel=len(label$)
            while 1
                read(restart_dev,end=*break)text$
                if pos(label$=text$)=1 then
                    repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
                    commit!=repoInterface!.getRevCommit(text$(1+lenLabel))
                    repoInterface!.closeInterface()

                    remainingCommits!.addItem(commit!)
                endif
            wend

            close(restart_dev,err=*next)

            rem --- Build aonStblMap! for restart
            app$=appName$
            gosub build_stblMap_pfxList
            aonStblMap!=stblMap!

            rem --- Goto restart location Label
            switch (BBjAPI().TRUE)
                case restartAt$="restartUpgrade1"
                    goto restartUpgrade1;rem --- cherry picking
                    break
                case restartAt$="restartUpgrade2"
                    goto restartUpgrade2;rem --- auto-sync (not expected)
                    break
                case restartAt$="restartUpgrade3"
                    goto restartUpgrade3;rem --- install app wizard (not expected)
                    break
                case restartAt$="restartUpgrade4"
                    goto restartUpgrade4;rem --- dirty WD, or can't switch/checkout to new version (the latter shouldn't happen for non-Git)
                    break
                case restartAt$="restartUpgrade5"
                    goto restartUpgrade5;rem --- can't switch/checkout to new version when doing non-Git (can happen if file added to old non-Git version has since been added to newer version)
                    break
                case default
                    goto restartUpgrade1
                    break
            swend
        else
            close(restart_dev,err=*next)
        endif
    endif
    close(restart_dev,err=*next)

rem --- Skip Barista's Create Sync File Backup bax_sync_backup.bbj unless upgrading from a pre-v18 version.
    if doSyncBackup% then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_SYNC_BACKUP")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Pass bax_sync_backup.bbj the full path to the pre-v18 applicationï¿½s Barista instance
        call stbl("+DIR_SYP")+"bax_sync_backup.bbj","AUTO",oldBarDir$,sysGUI!,rdForm!,null(),rd_table_chans$[all]
    endif

rem --- Process upgrade from either a Git based installation or a non-Git based installation
    if gitBasedUpgrade then
        rem --- Process upgrades from a Git based installation
        status=0

        rem --- Copy old instance of aon from old location to new location
        requiredFiles%=0
        copyData%=1
        help%=0
        gosub copyAon

        rem --- Get version of old install
        print (log_dev) "Cloning from ",gitAuthID$
        repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
        branch$=repoInterface!.getBranch(); rem --- BBJnnnnGA
        oldVersion$=branch$(4,4)
        repoInterface!.closeInterface()

restartUpgrade4:
        rem --- Build delta XMLs for modified bar/*.xml files that have been committed.
        gosub buildDeltaXmls
        rem --- Need to restart if working directory is dirty
        if restartFlag then
            rem --- Create restart file
            restartAt$="restartUpgrade4"
            gosub createRestartFile
            goto done
        endif

		rem --- Refresh Git repository to get the most current branch
		gosub refreshGitRepo

        rem --- Switch/checkout to branch for new version
        branchName$="BBJ"+newVersion$+"GA"
        gosub checkoutGitBranch
        if restartFlag
            restartAt$="restartUpgrade4"
            gosub createRestartFile        
            goto done
        endif
        rem --- Update new addon.syn file
        gosub updateAddonSyn

    else

        rem --- Process upgrades from a non-Git based installation
        status=0

        rem --- Clone Git repository and switch/checkout to old branch/tag
        gosub cloneGitRepo
        if status then goto done

        rem --- Get version of old install
        repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
        branch$=repoInterface!.getBranch(); rem --- BBJnnnnGA
        oldVersion$=branch$(4,4)

        rem --- Reorder CDF files in old version to match the order of the CDFs in the new version
        declare CdfMassager cdfMassager!
        cdfMassager!=new CdfMassager()
        rem --- --- retrieve our commit from the remote branch because we have not checked out the new branch yet.
        branchName$="BBJ"+newVersion$+"GA"
        cdfMassager!.reorderAndCommitCDFs(newAonDir$+"/data/cdf/",repoInterface!,"refs/remotes/origin/"+branchName$)
        repoInterface!.closeInterface()

        rem --- We don't want to overwrite the CDFs that we just reordered to match the upgraded version,
        rem --- so rename the CDF directory
        declare BBjString cdfDirName!
        declare BBjString newCdfDirName!
        declare BBjString oldCdfDirName!
        declare java.io.File cdfDir!
        declare java.io.File newCdfDir!
        declare java.io.File oldCdfDir!
        declare CdfMassager cm!

        rem -- rename the existing CDF directory to cdf_reordered
        cdfDirName!=newAonDir$+"/data/cdf"
        newCdfDirName!=newAonDir$+"/data/cdf_reordered"
        cdfDir!=new java.io.File(cdfDirName!)
        newCdfDir!=new java.io.File(newCdfDirName!)
        cdfDir!.renameTo(newCdfDir!)

        rem --- Copy old instance of aon from old location to new location
        requiredFiles%=0
        copyData%=0
        help%=0
        gosub copyAon

        rem --- use the CDFMassager to copy user's changes into the reordered CDFs
        cm!=new CdfMassager()
        cm!.setMakeAnnotations(0)
        cm!.setCopyingFromMods(0)
        cm!.importModChanges(cdfDirName!,newCdfDirName!)

        rem --- rename cdf to cdf_old and cdf_reordered to cdf
        oldCdfDirName!=newAonDir$+"/data/cdf_old"
        oldCdfDir!=new java.io.File(oldCdfDirName!)
        cdfDir!.renameTo(oldCdfDir!)
        newCdfDir!.renameTo(cdfDir!)

        rem --- Run Copy Application utility for applications being copied
        gosub copyApps

        rem --- Move mods/data/bar/delta XMLs to Addon location
        gosub moveModsDataBarDelta

        rem --- Merge mods before/after callpoints into standard Addon callpoints
        gosub mergeCallpoints

        rem --- Move any core Addon files customized by a mods project back into core Addon
        gosub moveModifiedCore

        rem --- Check for, and resolve, line ending issues
		gosub checkLineEndings

        rem --- Commit ALL of the above changes to the old Git branch
        gosub doInterimCommit
restartUpgrade5:
        localCommitsList!.addItem(commit!)

        rem --- Switch/checkout to branch for new version
        branchName$="BBJ"+newVersion$+"GA"
        gosub checkoutGitBranch
        if restartFlag
            restartAt$="restartUpgrade5"
			remainingCommits!=BBjAPI().makeVector()
			remainingCommits!.addItem(commit!)
            gosub createRestartFile
            goto done
        endif

        rem --- Save copy of standard Addon cdf files in UpgradeCdfDiffs directory where they can be alphabetized for diff'ing with merged mods cdfs
        gosub doUpgradeCdfDiffs

        rem --- Update new addon.syn file
        gosub updateAddonSyn
    endif

rem --- If using addonhelp.jar, update it from the download installation, BBjHome
    helpJar!=new File(newAonLoc$+"/help/addonhelp.jar")
    if helpJar!.isFile() then    
        bbjHome$=java.lang.System.getProperty("basis.BBjHome")
        
        call pgmdir$+"adc_copydir.aon",bbjHome$+"/apps/aon/help",newAonLoc$+"/help",rdForm!,0,status
        helpDir!=new File(newAonLoc$+"/help")
        if helpDir!.isDirectory() then    
            helpDir!.setExecutable(1,0)
            helpDir!.setReadable(1,0)
            helpDir!.setWritable(1,0)
        endif
        helpJar!=new File(newAonLoc$+"/help/addonhelp.jar")
        if helpJar!.isFile() then    
            helpJar!.setReadable(1,0)
            helpJar!.setWritable(1,0)
        endif
    endif

rem --- Create new session specific classpath (SSCP) in Enterprise Manager
    gosub createSSCP

rem --- Run Copy Application utility for applications being copied
    if gitBasedUpgrade then gosub copyApps

rem --- BIM Barista to the new location.
    gosub bimBarista

rem --- Update new sync XML files (and copy old barista/settings dir)
    start_version$=""
    gosub updateSyncXml

rem --- Remove adm_module_tbls*.xml from admin_backup dir, if it exists
    gosub deleteAdmModuleTbls

rem --- Use old modified menus instead of new standard menus.
    if useOldMenu% then gosub useOldMenu

rem --- Check for, and resolve, line ending issues
    gosub checkLineEndings

rem --- Commit sync xml and syn file changes made during updateAddonSyn and updateSyncXml routines
rem --- Assures work tree is clean prior to cherry picking
    gosub doInterimCommit

restartUpgrade1:
rem --- Cherry pick local commits from old installation
    if remainingCommits!.size()>0
        localCommitsList!=remainingCommits!
        remainingCommits!=BBjAPI().makeVector()
    endif
    gosub cherryPickLocalCommits

rem --- Check for Git conflicts
    gosub checkForGitConflicts

rem --- Check for delta XML RESERVED_STR and RESERVED_NUM issues (pre-v19)
    if !restartFlag then gosub checkForReservedStr

rem --- Need to restart if there were Git conflicts, or a Git cherry pick failure
    if restartFlag then
        rem --- Create restart file
        restartAt$="restartUpgrade1"
        gosub createRestartFile
        goto done
    endif

rem --- Build addonprop.jar and put it in the aon/prop directory
    gosub buildAddonJar

restartUpgrade2:
rem --- Launch auto-sync in new barista for the new addon.syn
rem --- Run auto-sync bax_dd_synch_auto.bbj program via bax_launch_task.bbj to bypass bar_login.bbj in the new barista

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_AUTO_SYNC")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Launch bax_dd_synch_auto.bbj
	bar_dir$=newBarDir$
	if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
	run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:	+" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:	+" "+$22$+bar_dir$+"/sys/prog/bax_launch_task.bbj"+$22$

    newSynFile$=newAonDir$+"/config/"+cvs(appName$,8)+".syn"
    user_arg$=" - "
:       +" -u"+rdAdmin!.getUser()
:       +" -p"+rdAdmin!.getPassword()
:       +" -t"+"DDM_TABLES"
:       +" -y"+"A"
:       +" -a" +"bax_dd_synch_auto.bbj"+$22$+" - "+" -f"+newSynFile$+" -b"+$22$
:       +" -w"
    success=0
    scall_result=scall(run_arg$+user_arg$,err=*next); success=1
    if !success or scall_result<>0 then
        rem --- Create restart file
        restartAt$="restartUpgrade2"
        gosub createRestartFile
        goto done
    endif

rem --- Copy OPV_SHIPTRACK_nn views from old database to new database

    rem --- Get name of old database
    old_dbname$=callpoint!.getDevObject("old_dbname")
    if old_dbname$<>"" then
        rem --- Get views in old database
        if pos("="=old_dbname$) then old_dbname$=old_dbname$(1+pos("="=old_dbname$))
        call stbl("+DIR_SYP")+"bac_em_login.bbj",SysGUI!,Form!,admin!,rd_status$
        oldDB!=admin!.getDatabase(old_dbname$)
        views!=oldDB!.getViews()

        rem --- Any old OPV_SHIPTRACK_nn views?
        if views!.size()>0 then
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_COPY_DB_VIEWS")
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            viewsIter!=views!.iterator()
            while viewsIter!.hasNext()
                oldView!=viewsIter!.next()
                viewProps!=oldView!.getProperties()
                viewName!=viewProps!.get(BBjAdminView.NAME)
                if viewName!=null() then continue
                if viewName!.startsWith("OPV_SHIPTRACK_") then
                    rem --- Copy view to new database
                    viewDesc$=""
                    viewDesc!=viewProps!.get(BBjAdminView.DESCRIPTION)
                    if viewDesc!<>null() then viewDesc$=viewDesc!
                    viewSelect$=""
                    viewSelect!=viewProps!.get(BBjAdminView.SELECT)
                    if viewSelect!<>null() then viewSelect$=viewSelect!

                    newDB!=admin!.getDatabase(dbName$)
                    newDB!.dropView(viewName!)
                    newView!=newDB!.createView(viewName!)
                    newView!.setString(BBjAdminView.DESCRIPTION,viewDesc$)
                    newView!.setString(BBjAdminView.SELECT,viewSelect$)
                    newView!.commit()
                    print(log_dev)"    View ",viewName!
                endif
            wend
        endif
    endif

restartUpgrade3:
rem --- Run Install Application Wizard for applications being installed

    rem --- Increment progress meter
    trans_text$=Translate!.getTranslation("AON_INSTALL_APP")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"

    rem --- Insert Addon as the first application to be installed unless bar/data/delta/ dir is empty (i.e., no forms customized)
	deltaDir!=new File(newAonDir$+"/data/bar/delta")
    if deltaDir!.exists()
        deltaVector! = new Vector(java.util.Arrays.asList(deltaDir!.listFiles()))
        deltaIter!=deltaVector!.iterator()
        if deltaIter!.hasNext()
            aList!=new ArrayList()
            aList!.add("ADDON"); rem Application
            aList!.add(""); rem App Parent
            aList!.add("y"); rem Install
            aList!.add(""); rem Copy
            aList!.add(newAonDir$+"/"); rem Source
            aList!.add(""); rem Target
            appVect!.add(aList!)
        endif
    endif

    rem --- Install applications
	iter!=appVect!.iterator()
	while iter!.hasNext()
		appList! = cast(ArrayList, iter!.next())

        rem --- Skip application if it's not being installed
		install$=appList!.get(2)
        if install$<>"y" then continue

        rem --- Get syn file for application
        app$=appList!.get(0); rem --- application
        if appList!.get(3)="y" then
            rem --- App was copied, so use target syn file
            sourceSyn$=appList!.get(5)+"config/"+cvs(app$,8)+".syn"
        else
            rem --- App was not copied, so use source syn file
            sourceSyn$=appList!.get(4)+"config/"+cvs(app$,8)+".syn"
        endif
        synFound=0
        sourceChan=unt
        open(sourceChan,isz=-1,err=*next)sourceSyn$; synFound=1
        close(sourceChan,err=*next)
        if !synFound then
            rem --- Log this app skipped
            meter_text$=trans_text$+": ***skipped*** "+app$
            gosub disp_meter
            print(log_dev)meter_text$+" -- cannot find "+sourceSyn$
            continue
        endif

        rem --- Log this app being installed
        meter_text$=trans_text$+": "+app$
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Launch baw_install_app.bbj
        bar_dir$=newBarDir$
        if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
        if app$="ADDON" then aongitarg$="-aongitY" else aongitarg$=""
        run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:	    +" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:	    +" "+$22$+bar_dir$+"/sys/prog/bax_launch_task.bbj"+$22$
        user_arg$=" - "
:	    +" -u"+rdAdmin!.getUser()
:	    +" -p"+rdAdmin!.getPassword()
:	    +" -t"+"DDM_TABLES"
:	    +" -y"+"A"
:       +" -a" +"baw_install_app.bbj"+$22$+" - "+" -pu"+rdAdmin!.getPassword()+"::"+rdAdmin!.getUser()+" -f"+sourceSyn$+" "+aongitarg$+$22$
:	    +" -w"
        scall_result=scall(run_arg$+user_arg$,err=*next)
        if !success or scall_result<>0 then
            rem --- Create restart file
            restartAt$="restartUpgrade3"
            gosub createRestartFile
            exitto done
        endif

        rem --- Clear ddm_systems.parent_sys_id for apps with ADDON parent in the new mods installation
        parent$=appList!.get(1); rem --- parent app
        copy$=appList!.get(3); rem --- copy
        if parent$="ADDON" and copy$="y" then
            ddm_table_tpls$=newBarDir$+"/sys/data/ddm_table_tpls.dat"
            open_success=0
            ddmTableTpls=unt
            open(ddmTableTpls,err=*next)ddm_table_tpls$; open_success=1
            if open_success then
                rem --- Get record template for ddm_systems
                dim ddmTableTpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"
                tpl_found=0
                findrecord(ddmTableTpls,key=pad("DDM_SYSTEMS",16),dom=*next)ddmTableTpls$;tpl_found=1
                if tpl_found then
                    rem --- Update ddm_systems record for mods app
                    open_success=0
                    ddmSystems=unt
                    open(ddmSystems,err=*next)newBarDir$+"/sys/data/ddm_systems.dat"; open_success=1
                    if open_success then
                        dim ddmSystems$:ddmTableTpls.template$
                        record_found=0
                        findrecord(ddmSystems,key=pad(app$,16),dom=*next)ddmSystems$; record_found=1
                        if record_found then
                            ddmSystems.parent_sys_id$=""
                            writerecord(ddmSystems)ddmSystems$
                        endif

                        close(ddmSystems,err=*next)
                    endif
                endif

                close(ddmTableTpls,err=*next)
            endif
        endif
    wend

rem --- Commit Addon changes made during baw_install_app.bbj
    gosub doInterimCommit

rem --- On successful complete, initialize conversion control file data/adx_conversionCtrl

    convCtrlIniFileName$=newAonDir$+"/config/adx_conversionCtrl.ini"
    convCtrlIniFile!=new File(convCtrlIniFileName$,err=*next)
    if convCtrlIniFile!.exists() then
        convCtrlIniFileChan=unt
        open(convCtrlIniFileChan,isz=-1)convCtrlIniFileName$

        rem --- Put initialized conversion control file in +DIR_DAT new target data directory
        convCtrlFilePath$=newAonDir$+"/data"
        if aonStblMap!.containsKey("+DIR_DAT") then
            aList! = cast(ArrayList, aonStblMap!.get("+DIR_DAT"))
            target$ = cast(BBjString, aList!.get(1))
            convCtrlFilePath$=FileObject.fixPath(target$, "/")
            FileObject.removeEndSlash(convCtrlFilePath$, "/")
        endif
        convCtrlFileName$=convCtrlFilePath$+"/adx_conversionCtrl"
        convCtrlFile!=new File(convCtrlFileName$)
        rem --- Create path/file if doesn't exist
        if !convCtrlFile!.exists() then
            convCtrlPath!=new File(convCtrlFilePath$)
            if !convCtrlPath!.exists() then 
                convCtrlPath!.mkdirs()
            endif
            
            rem --- Set read-write permissions for everyone
            convCtrlPath!.setReadable(1,0)
            convCtrlPath!.setWritable(1,0)
            
            convCtrlFile!.createNewFile()
            convCtrlFile!.setReadable(1,0)
            convCtrlFile!.setWritable(1,0)
        endif
        convCtrlFileChan=unt
        open(convCtrlFileChan,isz=-1,mode="O_CREATE,O_TRUNC")convCtrlFileName$

        while 1
            readrecord(convCtrlIniFileChan,siz=BLOCKSIZE,end=*break)line$
            if pos("addon_source="=line$) then
                xpos=pos("addon_source="=line$)
                line$=line$(1,xpos+len("addon_source=")-1)+oldAonLoc$+line$(xpos+len("addon_source="))
            endif
            if pos("barista_source="=line$) then
                xpos=pos("barista_source="=line$)
                line$=line$(1,xpos+len("barista_source=")-1)+oldBarLoc$+line$(xpos+len("barista_source="))
            endif
            if pos("data_source="=line$) then
                xpos=pos("data_source="=line$)
                line$=line$(1,xpos+len("data_source=")-1)+"AIUW"+line$(xpos+len("data_source="))
            endif
            if pos("end_version="=line$) then
                rem --- Get version of this Addon installation
                end_version$=str(num(newVersion$(1,2)):"00.0")

                xpos=pos("end_version="=line$)
                line$=line$(1,xpos+len("end_version=")-1)+end_version$+line$(xpos+len("end_version="))
            endif
            if pos("start_version="=line$) then
                rem --- Get version of source Addon installation from source data/sync/adm_modules~01007514ad.xml
                start_version$=iff(start_version$<>"",start_version$,end_version$)

                xpos=pos("start_version="=line$)
                line$=line$(1,xpos+len("start_version=")-1)+start_version$+line$(xpos+len("start_version="))
            endif
            if pos("modules="=line$) then
                xpos=pos("modules="=line$)
                line$=line$(1,xpos+len("modules=")-1)+upgradedModules$+line$(xpos+len("modules="))
            endif
            if pos("git_auth_id="=line$) then
                xpos=pos("git_auth_id="=line$)
                line$=line$(1,xpos+len("git_auth_id=")-1)+gitAuthID$+line$(xpos+len("git_auth_id="))
            endif
            writerecord(convCtrlFileChan)line$
        wend

        close(convCtrlIniFileChan,err=*next)
        close(convCtrlFileChan,err=*next)

        print(log_dev)"Initialized ",convCtrlFileName$
    else
        rem --- Report can't find the required config/adx_conversionCtrl.ini initialization file
        msg_id$="AD_FILE_MISSING"
        dim msg_tokens$[1]
        msg_tokens$[1]=convCtrlIniFileName$
        gosub disp_message
        print(log_dev)"***** ERROR: Required file not found, "+convCtrlIniFileName$+" *****"
   endif
   
   rem --- Copy adx_git_auth table from the download area to the new instance data
   adx_git_auth_table$=stbl("+ADDATA")+"adx_git_auth"
   adx_git_auth_copy$=convCtrlFilePath$+"adx_git_auth"
   
   rem --- --- close the table we're about to copy over
   call stbl("+DIR_SYP")+"/bac_open_table.bbj","ADX_GIT_AUTH","C",rd_table_chans$[all],chan,template$,msg$
   
   rem --- --- Create an array of copy options and go ahead and copy over if exists
   rem --- --- Created copyOptionsArray to avoid getting an Object array that that can't be cast to a
   rem --- --- StandardCopyOptions array. 
   copyOptions!=BBjAPI().makeVector() 
   copyOptions!.add(StandardCopyOption.REPLACE_EXISTING)
   copyOptionsArray!=Array.newInstance(StandardCopyOption.class,1)
   copyOptions!.toArray(CopyOptionsArray!)   
   Files.copy(new File(adx_git_auth_table$).toPath(),new File(adx_git_auth_copy$).toPath(),copyOptionsArray!) 
   

done: rem --- All done

    rem --- Report errors encountered while moving core Addon files customized by a mods project back into core Addon
    if moveModifiedCoreError then
        msg_id$="AD_MOVE_MODS_ERR"
        dim msg_tokens$[1]
        msg_tokens$[1]=newAonDir$ + "/logs"+logName$
        gosub disp_message
        print(log_dev)
        print(log_dev)"***** Could not move Mods customized Addon files *****"
    endif

    rem --- Report cherry pick failure
    if !failures!.isEmpty() then
        msg_id$="AD_CHERRYPICK_ERR"
        dim msg_tokens$[1]
        msg_tokens$[1]=newAonDir$ + "/logs"+logName$
        gosub disp_message
        print(log_dev)
        print(log_dev)"***** Cherry pick failed *****"
    endif

    meter_proc_recs=meter_total_recs
    if restartFlag then
        rem --- Not successful, need to restart

        rem --- Stop progress meter
        meter_text$="***** "+Translate!.getTranslation("AON_TERMINATED")+" *****"
        meter_action$="MTR-LST-END"
        print(log_dev)
        print(log_dev)meter_text$
    else
        rem --- Upgrade completed successfully

        rem --- Stop progress meter
        meter_text$=""
        meter_action$="LST-END"

        rem --- Rename restartUpgradeWizard.txt file
        restartFile!=new File(restartFile$)
        if restartFile!.exists() then
            restartBakFile!=new File(restartFile$ + ".bak")
            restartFile!.renameTo(restartBakFile!)
        endif

        rem --- Remove aon/data/cdf_old directory
        oldCdfDir!=new File(newAonDir$+"/data/cdf_old")
        if oldCdfDir!.exists() then
            oldCdfVector! = new Vector(java.util.Arrays.asList(oldCdfDir!.listFiles()))
            oldCdfIter!=oldCdfVector!.iterator()
            while oldCdfIter!.hasNext()
                oldCdfFile!=oldCdfIter!.next()
                oldCdfFile!.delete()
            wend
            oldCdfDir!.delete()
        endif
    endif
    gosub disp_meter
    print(log_dev)
    print(log_dev)"Upgradewiz log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Move log file to aon/logs directory
    logFile!=new File(log$)
    aonLogFile!=new File(newAonDir$ + "/logs"+logName$)
    logFile!.renameTo(aonLogFile!)
    logDir!=new File(logDir$)
    logDir!.delete()

    goto std_exit

copyAon: rem --- Recursively copy aon from oldLocation to newAonDir

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_COPY_AON")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    print(log_dev)"    Copy "+oldAonDir$

    rem --- requiredFiles%,copyData%,help% are incoming; for git-based (i.e., version-neutral), copy data (demo data), for non-git, do NOT copy data.
    call pgmdir$+"adc_copyaon.aon",oldAonDir$,newAonDir$,requiredFiles%,copyData%,help%,rdForm!,0,status

    rem --- Clear logs directory
    logsDir!=new File(newAonDir$ + "/logs")
    if logsDir!.exists() then
        logsVector! = new Vector(java.util.Arrays.asList(logsDir!.listFiles()))
        logsIter!=logsVector!.iterator()
        while logsIter!.hasNext()
            logFile!=logsIter!.next()
            logFile!.delete()
        wend
    endif
    return

moveModsDataBarDelta: rem --- Move mods/data/bar/delta XMLs to Addon location

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_MOVE_DELTA_XML")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    print(log_dev)"    For "+newAonDir$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    appIter!=appVect!.iterator()
    while appIter!.hasNext()
        aList! = cast(ArrayList, appIter!.next())
        parent$=cast(BBjString, aList!.get(1))
        if parent$<>"ADDON" then continue

        modsAppName$=cvs(cast(BBjString, aList!.get(0)),8)
        newModsDir$=cast(BBjString, aList!.get(5))
        newModsDir$=FileObject.fixPath(newModsDir$, "/")
        modsDataBarDelta!=new File(newModsDir$+"data/bar/delta",err=*next)
        if modsDataBarDelta!.exists() and modsDataBarDelta!.isDirectory() then

            rem --- Ceate new aon/data/bar/delta directory if it doesn't exist
            aonDataBarDelta$=newAonDir$+"/data/bar/delta"
            FileObject.makeDirs(aonDataBarDelta$)

            rem --- Move mods/data/bar/delta XMLs to new aon/data/bar/delta directory
            options!=Array.newInstance(StandardCopyOption.class,1)
            Array.set(options!,0,StandardCopyOption.REPLACE_EXISTING)
            sourceVector! = new Vector(java.util.Arrays.asList(modsDataBarDelta!.listFiles()))
            sourceIter!=sourceVector!.iterator()
            while sourceIter!.hasNext()
                sourceFile!=sourceIter!.next()
                sourceName!=sourceFile!.getName()
                if sourceName!.endsWith(".xml") then
                    rem --- Move mods data/bar/delta/*.xml file
                    targetFile!=new File(aonDataBarDelta$+"/"+sourceName!)
                    Files.move(sourceFile!.toPath(),targetFile!.toPath(),options!)

                    rem --- Remove mods data/bar/*.xml file and data/arc/*/*.arc files corresponding to given sourceName!
                    sourceName$=sourceName!
                    gosub removeModsArcBarFile
                else
                    rem --- Delete files that aren't *.xml
                    sourceFile!.delete()
                endif
            wend

            rem --- Remove mods/data/bar/delta directory
            modsDataBarDelta!.delete()
        endif
    wend

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

mergeCallpoints: rem --- Merge mods before/after callpoints into standard Addon callpoints

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_MERGE_CDFS")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    if newModsDir$<>""
        rem --- Import mods callpoint into Addon
        massager!=new CdfMassager()
        massager!.importModChanges(newModsDir$+"data/cdf",newAonDir$+"/data/cdf")

        rem --- Make/clear UpgradeCdfDiffs directory for merged cdf files
        cdfDiffsDir$=baseDir$+"/UpgradeCdfDiffs"
        cdfDiffsDir!=new File(cdfDiffsDir$)
        if cdfDiffsDir!.exists() and cdfDiffsDir!.isDirectory() then
            rem --- Clear existing directory
            cdfVector! = new Vector(java.util.Arrays.asList(cdfDiffsDir!.listFiles()))
            cdfIter!=cdfVector!.iterator()
            while cdfIter!.hasNext()
                cdfFile!=cdfIter!.next()
                cdfFile!.delete()
            wend
        else
            rem --- Make new directory
            cdfDiffsDir!.mkdirs()
            cdfDiffsDir!.setReadable(1,0)
            cdfDiffsDir!.setWritable(1,0)
        endif

        rem --- Copy merged cdf files into UpgradeCdfDiffs directory where they can be alphabetized for diff'ing with standard Addon cdfs
        modsCdfDir$=newModsDir$+"data/cdf"
        modsCdfDir!=new File(modsCdfDir$)
        modsCdfDirVector! = new Vector(java.util.Arrays.asList(modsCdfDir!.listFiles()))
        modsCdfDirIter!=modsCdfDirVector!.iterator()
        while modsCdfDirIter!.hasNext()
            modsCdfDirFile!=modsCdfDirIter!.next()
            fileName!=modsCdfDirFile!.getName()
            if !fileName!.endsWith(".cdf") then continue

            rem --- Get copy of merged cdf file
            sourceChan=unt
            open(sourceChan,isz=-1,err=*continue)newAonDir$+"/data/cdf/"+fileName!
            targetChan=unt
            open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")cdfDiffsDir$+"/"+fileName!
            while 1
                readrecord(sourceChan,siz=BLOCKSIZE,end=*break)record$
                writerecord(targetChan)record$
            wend
            close(sourceChan)
            close(targetChan)

            rem --- Remove mods cdf files after they've been merged into standard Addon
            modsCdfDirFile!.delete()

            rem --- Remove mods data/bar/*.xml file and data/arc/*/*.arc files corresponding to given sourceName!
            sourceName$=fileName!
            gosub removeModsArcBarFile
        wend
    endif

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

doUpgradeCdfDiffs: rem --- Save copy of standard Addon cdf files in UpgradeCdfDiffs directory where they can be alphabetized for diff'ing with merged mods cdfs

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPGRADE_CDF_DIFFS")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    cdfDiffsDir$=baseDir$+"/UpgradeCdfDiffs"
    cdfDiffsDir!=new File(cdfDiffsDir$)
    cdfDiffsVector! = new Vector(java.util.Arrays.asList(cdfDiffsDir!.listFiles()))
    cdfDiffsIter!=cdfDiffsVector!.iterator()
    while cdfDiffsIter!.hasNext()
        cdfDiffsFile!=cdfDiffsIter!.next()
        fileName$=cdfDiffsFile!.getName()

        rem --- Get copy of standard Addon cdf file, and identify version
        fileFound=0
        sourceChan=unt
        open(sourceChan,isz=-1,err=*next)newAonDir$+"/data/cdf/"+fileName$; fileFound=1
        if !fileFound then
            rem --- cdf file not in standard Addon, so remove it from UpgradeCdfDiffs directory
            cdfDiffsFile!.delete()
        else
            targetChan=unt
            open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")cdfDiffsDir$+"/"+fileName$+"_"+newVersion$
            while 1
                readrecord(sourceChan,siz=BLOCKSIZE,end=*break)record$
                writerecord(targetChan)record$
            wend
            close(sourceChan)
            close(targetChan)

            rem --- Identify mods version of diff cdf file
            modsDiffFile!=new File(cdfDiffsDir$+"/"+fileName$+"_"+oldVersion$)
            cdfDiffsFile!.renameTo(modsDiffFile!)
        endif
    wend

    rem --- Alphabetize all cdf files in UpgradeCdfDiffs directory
    massager!=new CdfMassager()

    cdfDiffsVector! = new Vector(java.util.Arrays.asList(cdfDiffsDir!.listFiles()))
    cdfDiffsIter!=cdfDiffsVector!.iterator()
    while cdfDiffsIter!.hasNext()
        cdfDiffsFile!=cdfDiffsIter!.next()
        cdfPath$=cdfDiffsFile!.getPath()
        cdfMap!=massager!.readAndOrderCdfFile(cdfPath$)
        if cdfMap!.size() then massager!.writeCdfFile(cdfMap!,cdfPath$)
    wend

        rem --- Remove busy/working image from progress meter
        busyImage!.destroy(err=*next)
    return

moveModifiedCore: rem --- Move any core Addon files customized by a mods project back into core Addon

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_MOVE_MODS_PGMS")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    print(log_dev)"    For "+newModsDir$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    if newModsDir$<>""
        rem --- Verify directories exist
        newModsDir!=new File(newModsDir$)
        if !newModsDir!.exists() or !newModsDir!.isDirectory() then newModsDir!.mkdirs()
        newAonDir!=new File(newAonDir$)
        if !newAonDir!.exists() or !newAonDir!.isDirectory() then newAonDir!.mkdirs()

        rem --- Move mods customized Addon files back into Addon
        merger!=new ModMerger(newModsDir$, newAonDir$, modsAppName$)
        status!=merger!.moveProgFilesFromModProject()
        messagesIter!=status!.getMessages().iterator()
        while messagesIter!.hasNext()
            print(log_dev)"    ",messagesIter!.next()
        wend
        if status!.getNumErrorsEncountered()>0 then moveModifiedCoreError=1
    endif
    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

cloneGitRepo: rem --- Clone Git repository and switch/checkout to old branch/tag

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CLONE_GIT_REPO")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    print(log_dev)"    For "+newAonDir$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    rem --- Clone Git repository and checkout branch
    cloneDir$=newAonDir$
    cloneDir!=new File(cloneDir$)
    base_dir!=Paths.get(baseDir$)
    addon_dir!=Paths.get(cloneDir$)
    if (addon_dir!.startsWith(base_dir!)) then 
        Files.createDirectories(addon_dir!)
        if (! osIsWindows!) then 
           	current_dir!=addon_dir!
           	permissions!=PosixFilePermissions.fromString("rwxrwxrwx")
            userPrincipal!=FileSystems.getDefault().getUserPrincipalLookupService().lookupPrincipalByName(java.lang.System.getProperty("user.name"))
           	while (current_dir!<>base_dir!.getParent()) 
               	    Files.setPosixFilePermissions(current_dir!,permissions!)
               	    Files.setOwner(current_dir!,userPrincipal!)
               	    current_dir!=current_dir!.getParent()
           	wend
        endif
    endif 

    rem --- Clone Git repository
    print (log_dev)"    Git Auth ID: ",gitAuthID$
    repoInterface!=new GitRepoInterface(gitAuthID$,cloneDir$)
    if (repoInterface!=null()) then
        msg_id$="AD_FAILED_BAD_CLONE"
        dim msg_tokens$[1]
        msg_tokens$[1]=cloneDir$
        gosub disp_message
        print(log_dev)"    ***** "+cloneDir$+" CLONE FAILED *****"
        status=1
    endif
    print (log_dev)"    Git Repo URL: ",repoInterface!.getRepoURL()

    rem --- Switch/checkout to old branch/tag
    if !status then
        success=repoInterface!.determineAndSwitchToVersion(oldAonDir$)
        if !success then
            msg_id$="AD_FAILED_BAD_CHKOUT"
            dim msg_tokens$[1]
            msg_tokens$[1]="OLD"
            gosub disp_message
            print(log_dev)"    ***** OLD BRANCH/TAG CHECKOUT FAILED *****"
            status=1
        endif
    endif

    rem --- Set permissions on all directories under cloneDir! for non-Windows OS
    if (! osIsWindows!) then 
        repoInterface!.setPermsRecursive(cloneDir$)
    endif

    rem --- Remove busy/working image from progress meter
    repoInterface!.closeInterface()
    busyImage!.destroy(err=*next)
    return

checkoutGitBranch: rem --- Switch/checkout branch

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CHECKOUT_GIT_BRANCH")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    print(log_dev)"    For "+newAonDir$
    print (log_dev) "    Checkout "+branchName$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    rem --- Checkout repository branch
    cloneDir$=newAonDir$
    repoInterface!=new GitRepoInterface(gitAuthID$,cloneDir$)
    checkoutStatus$=repoInterface!.checkoutBranch(branchName$)
    repoInterface!.closeInterface()
    if (checkoutStatus$<>"OK") then
        rem --- Failure, warn and terminate
        msg_id$="AD_FAILED_BAD_CHKOUT"
        dim msg_tokens$[1]
        msg_tokens$[1]=branchName$
        gosub disp_message
        print(log_dev)"    ***** "+branchName$+" CHECKOUT FAILED ("+checkoutStatus$+") *****"
        restartFlag=1
    endif

    rem --- Set permissions on all directories under cloneDir! for non-Windows OS
    if (! osIsWindows!) then 
        repoInterface!.setPermsRecursive(cloneDir$)
    endif

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

refreshGitRepo: rem --- Refresh Git repository to get the most current branch

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_PULL_GIT_REPO")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    rem --- Pull Git repository
    repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
    repoInterface!.pullRepository()
    repoInterface!.closeInterface()

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

buildDeltaXmls: rem --- Build delta XMLs for modified bar/*.xml files that have been committed.

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_BUILD_DELTA_XMLS")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    print(log_dev)"    For "+newAonDir$

    rem --- Get JGit interface to repository
    repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
    LocalBranch$=repoInterface!.getLocalBranch()
    ReleaseTag$=repoInterface!.getReleaseTag()

    rem --- Do not allow upgrade if Git repository has uncommitted changes, either unstaged or staged
    unstaged!=repoInterface!.getUnstagedChanges()
    if unstaged!.size()>0 then
        msg_id$="AD_UNCOMMITTED_CHGS"
        dim msg_tokens$[1]
        msg_tokens$[1]="unstaged"
        gosub disp_message
        print(log_dev)"    ***** Uncommitted unstaged changes *****"
        print(log_dev)"    ",unstaged!
        restartFlag=1
        return
    endif
    staged!=repoInterface!.getStagedChanges()
    if staged!.size()>0 then
        msg_id$="AD_UNCOMMITTED_CHGS"
        dim msg_tokens$[1]
        msg_tokens$[1]="staged"
        gosub disp_message
        print(log_dev)"    ***** Uncommitted staged changes *****"
        print(log_dev)"    ",staged!
        restartFlag=1
        return
    endif

    rem --- Get Vector of all local commits.
    localCommitsList!=repoInterface!.getLocalCommits(LocalBranch$,ReleaseTag$)

    mkdir newAonDir$+"/tmp",err=*next

    rem --- Clear aon/data/bar/delta directory
    deltaDir!=new File(newAonDir$+"/data/bar/delta")
    if deltaDir!.exists() then
        deltaVector! = new Vector(java.util.Arrays.asList(deltaDir!.listFiles()))
        deltaIter!=deltaVector!.iterator()
        while deltaIter!.hasNext()
            deltaFile!=deltaIter!.next()
            deltaFile!.delete()
        wend
    endif

    rem --- Get modified bar/*.xml files that have been committed.
    localCommittedXmls!=repoInterface!.getLocalCommittedXmls(localCommitsList!)
    modifiedXmlIter!=localCommittedXmls!.iterator()
    while modifiedXmlIter!.hasNext()
        modifiedXml$=modifiedXmlIter!.next()

        rem --- Get original version of modified bar/*.xml files in list.
        fileContent$=repoInterface!.getRemoteFileContent(modifiedXml$)
        if fileContent$<>""
            outfile$=newAonDir$+"/tmp/"+modifiedXml$(1+pos("/"=modifiedXml$,-1))
            erase outfile$,err=*next
            string outfile$
            out_dev=unt
            open(out_dev)outfile$
            print(out_dev)fileContent$
            close(out_dev)

            rem --- Build delta XMLs using Barista's bax_dd_sync_delta.bbj.
            rd_action$=""
            rd_status$=""
            rd_base_file$=outfile$
            rd_proj_file$=newAonDir$+"/"+modifiedXml$
            rd_delta_file$=newAonDir$+"/data/bar/delta/"+modifiedXml$(1+pos("/"=modifiedXml$,-1))
            call stbl("+DIR_SYP")+"bax_dd_synch_delta.bbj",rd_base_file$,rd_proj_file$,rd_delta_file$,rd_action$,rd_status$

            erase rd_base_file$,err=*next
        endif
    wend

    repoInterface!.closeInterface()
    rmdir newAonDir$+"/tmp",err=*next
    return

updateAddonSyn: rem --- Update addon.syn file

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE_SYN")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Set newSynFile to addon.syn at the new aon location
    newSynFile$=newAonDir$+"/config/"+cvs(appName$,8)+".syn"

    rem --- Setup for upgrade
    upgrade%=1
    oldSynFile$=oldAonDir$+"/config/"+cvs(appName$,8)+".syn"

    rem --- If oldSynFile does not exist, skip.
    oldSynFile! = new File(oldSynFile$)
    if oldSynFile!.exists() then
        rem --- Build stblMap! and pfxList! for adc_updatesynfile.aon
        app$=appName$
        gosub build_stblMap_pfxList
        if app$="ADDON" then aonStblMap!=stblMap!

        rem --- Launch adc_updatesynfile.aon
        call pgmdir$+"adc_updatesynfile.aon",newSynFile$,oldSynFile$,upgrade%,stblMap!,pfxList!,rdForm!,0,status
    endif
    return

doInterimCommit: rem --- Commit all modified and deleted tracked files

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_INTERIM_COMMIT")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    rem --- Get JGit interface to repository, and call commitAll()
    repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
    commit!=repoInterface!.commitAll(1,Translate!.getTranslation("AON_INTERIM_COMMIT"))
    repoInterface!.closeInterface()

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

build_stblMap_pfxList: rem --- Build stblMap! and pfxList! for a app$

    stblMap! = new HashMap()
    pfxList! = new ArrayList()

    if appStblMap!.containsKey(app$) then
        stblVect! = cast(Vector, appStblMap!.get(app$))
        stblIter!=stblVect!.iterator()
        while stblIter!.hasNext()
            stblList! = cast(ArrayList, stblIter!.next())
            stbl$=stblList!.get(1); rem --- STBL or <prefix>
            if stbl$="<prefix>" then
                aList!=new ArrayList()
                aList!.add(stblList!.get(2)); rem --- source
                aList!.add(stblList!.get(3)); rem --- target
                pfxList!.add(aList!)
            else
                aList!=new ArrayList()
                aList!.add(stblList!.get(2)); rem --- source
                aList!.add(stblList!.get(3)); rem --- target
                stblMap!.put(stbl$, aList!)
            endif
        wend
    endif
    return

createSSCP: rem --- Create new session specific classpath (SSCP) in Enterprise Manager

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CREATE_SSCP","Creating new classpath",1)
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    sscpName$=cvs(dbName$,8)
    copyData%=0
    status=0
    call pgmdir$+"adc_createsscp.aon",sscpName$,newAonLoc$,"",copyData%,rdAdmin!,status
    if status
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_CREATE_SSCP_ERROR","Unable to create new classpath",1)
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif
    return

copyApps: rem --- Run Copy Application utility for applications being copied

    rem --- Increment progress meter
    trans_text$=Translate!.getTranslation("AON_COPY_APP")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"

    appIter!=appVect!.iterator()
    while appIter!.hasNext()
        appList! = cast(ArrayList, appIter!.next())

        rem --- Skip application if it's not being copied
        copy$=appList!.get(3)
        if copy$<>"y" then continue

        rem --- Get source syn file
        app$=appList!.get(0); rem --- application
        sourceDir$=FileObject.removeEndSlash(appList!.get(4))
        sourceSyn$=sourceDir$+"/config/"+cvs(app$,8)+".syn"
        synFound=0
        sourceChan=unt
        open(sourceChan,isz=-1,err=*next)sourceSyn$; synFound=1
        close(sourceChan,err=*next)
        if !synFound then
            rem --- Log this app skipped
            meter_text$=trans_text$+": ***skipped*** "+app$
            gosub disp_meter
            print(log_dev)meter_text$+" -- cannot find "+sourceSyn$
            continue
        endif

        rem --- Log this app being copied
        meter_text$=trans_text$+": "+app$
        gosub disp_meter
        print(log_dev)meter_text$
        print(log_dev)"    Copy "+sourceDir$

        rem --- Remove trailing slashes (/ and \) from targetDir$
        targetDir$=FileObject.removeEndSlash(appList!.get(5))

        rem --- Build stblMap! and pfxList! for adc_copymods.aon
        gosub build_stblMap_pfxList

        rem --- Launch adc_copymods.aon
        call pgmdir$+"adc_copymods.aon",sourceSyn$,targetDir$,stblMap!,pfxList!,rdForm!,0,status

        rem --- Delete mods data/def directory
        parent$=appList!.get(1); rem --- parent app
        if parent$="ADDON" then FileObject.deleteDirectory(targetDir$+"/data/def")

        rem --- Remove SYSPAR=ADDON line from app *.syn files
        appNewSyn$=targetDir$+"/config/"+cvs(app$,8)+".syn"
        erase appNewSyn$ + ".bak", err=*next
        rename appNewSyn$ to appNewSyn$ + ".bak", err=*next
        sourceChan=unt
        open(sourceChan,isz=-1,err=*next)appNewSyn$ + ".bak"
        targetChan=unt
        open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")appNewSyn$
        while 1
            read(sourceChan,end=*break)record$
            if cvs(record$,3)="SYSPAR=ADDON" then continue
            write(targetChan)record$
        wend
        close(sourceChan)
        close(targetChan)
    wend
    return

bimBarista: rem --- Add new application to Barista Installation Manager
            rem --- Run BIM bai_install_manager.bbj program via synchronous system call because of its terminating release

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_BIM_CREATE")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Launch bai_install_manager.bbj
    bar_dir$=dir("")
    if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
    run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:   +" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:   +" "+$22$+bar_dir$+"/sys/prog/bai_install_manager.bbj"+$22$
    user_arg$=" - "
:   +" -u"+rdAdmin!.getUser()
:   +" -id"+dbName$
:   +" -desc"+$22$+appDesc$+$22$
:   +" -loc"+$22$+newAonLoc$+$22$
:   +" -cp"+$22$+sscpName$+$22$
    scall_result=scall(run_arg$+user_arg$,err=*next)

    newDB!=rdAdmin!.getDatabase(dbName$)
    if newDB!.getType()=BBjAdminDatabase.DatabaseType.BARISTA
        rem --- rename bbdict, if it exists/came up from bbj-home so it doesn't cause DBType confusion later
        erase newBarDir$+"/bbdictOLD", err=*next
        rename newBarDir$+"/bbdict", newBarDir$+"/bbdictOLD", err=*next
    endif
    return

updateSyncXml: rem --- Update new sync XML files (and copy old barista/settings dir)
               rem --- BIM clears barista/settings dir, so must do this step after BIMing and before auto-sync

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE_XML")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Set newSyncLoc to sync directory at the new aon location
    newSyncLoc$=newAonDir$+"/data/sync"

    rem --- Setup for upgrade
    upgrade%=1
    oldSyncLoc$=oldAonDir$+"/data/sync"

    rem --- If oldSynLoc does not exist for ADDON, skip.
    oldSynLoc! = new File(oldSyncLoc$)
    if !oldSynLoc!.exists() then continue

    rem --- Launch adc_updatexmlfiles.aon
    call pgmdir$+"adc_updatexmlfiles.aon",newSyncLoc$,oldSyncLoc$,syncBackupDir$,upgrade%,rdForm!,0,status

    rem --- Get version of source Addon installation from source data/sync/adm_modules~01007514ad.xml
    if start_version$="" then
        utility! = new UpdateSyncXmlFiles(rdForm!,0)
        oldVers! = utility!.getModuleVersion(new File(oldSyncLoc$))
        if oldVers!.get("AD")<>null() then
            start_version$=oldVers!.get("AD")
        endif
    endif
    return

deleteAdmModuleTbls: rem --- Remove adm_module_tbls*.xml from new admin_backup directory (not used with git-based mods)

    adminBackupDir!=new File(newAonDir$+"/data/admin_backup")
    adminBackupVector! = new Vector(java.util.Arrays.asList(adminBackupDir!.listFiles()))
    adminBackupIter!=adminBackupVector!.iterator()
    while adminBackupIter!.hasNext()
        adminBackupFile!=adminBackupIter!.next()
        if adminBackupFile!.getName().startsWith("adm_module_tbls~[") and adminBackupFile!.getName().endsWith("].xml") then adminBackupFile!.delete()
    wend
    return

buildAddonJar: rem --- Build addonprop.jar and put it in the aon/prop directory

    meter_text$=Translate!.getTranslation("AON_BUILD_JAR")+": addonprop.jar"
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")
    
    cmd$=java.lang.System.getProperty("java.home")+"/bin/jar cf "+newAonDir$+"/addonprop.jar -C "+newAonDir$+"/prop ."
    x=scall(cmd$,err=*next)
    if x
        print (log_dev) "***** WARNING: Unable to build addonprop.jar. Return code was "+str(x)+". *****"
    else
        print (log_dev) "Created addonprop.jar from addon*.properties files."
    endif
    aonJar!=new File(newAonDir$+"/addonprop.jar")
    propJar!=new File(newAonDir$+"/prop/addonprop.jar")
    aonJar!.renameTo(propJar!)

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

useOldMenu: rem --- Use old modified menus instead of new standard menus.
            rem --- Temporary "fix" until Barista enhancement 5658 can be implemented to preserve customizations
            rem --- to standard menus, thus no logging or progress meter.

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_COPY_MENUS")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    availableLangs$="deuenuespfraitanldsve"
    for i=1 to len(availableLangs$)-1 step 3
        lang$=availableLangs$(i,3)

        rem --- If oldMenuFile exists, overwrite newMenuFile with it
        oldMenuFile! = new File(oldAonDir$+"/config/"+lang$+"/"+cvs(appName$,8)+".men")
        if oldMenuFile!.exists()

            rem --- Create new directories as necessary for newMenuFile
            newMenuDir! = new File(newAonDir$+"/config/"+lang$)
            FileObject.makeDirs(newMenuDir!)

            rem --- Rename newMenuFile as a backup before overwriting it
            newMenuFile! = new File(newMenuDir!.getPath()+"/"+cvs(appName$,8)+".men")
            rename newMenuFile!.getPath() to newMenuDir!.getPath()+"/"+cvs(appName$,8)+".men.bak", err=*next

            rem --- Copy oldMenuFile to newMenuFile
            sourceChan=unt
            open(sourceChan,isz=-1,err=*endif)oldMenuFile!.getPath()
            targetChan=unt
            open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")newMenuFile!.getPath()
            while 1
                readrecord(sourceChan,siz=BLOCKSIZE,end=*break)record$
                writerecord(targetChan)record$
            wend
            close(sourceChan)
            close(targetChan)
        endif
    next i
    return

checkLineEndings: rem --- Check for, and resolve, line ending issues

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_RESOLVE_LINE_ENDINGS")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
    repoInterface!.checkoutFilesWithDifferentLineEndings()
    repoInterface!.closeInterface()

    rem --- Set permissions on all directories under cloneDir! for non-Windows OS
    if (! osIsWindows!) then 
        repoInterface!.setPermsRecursive(newAonDir$)
    endif

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

cherryPickLocalCommits: rem --- Cherry pick local commits from old installation

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CHERRY_PICK_LOCAL_COMMITS")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Track commits that still need to be cherry picked in case there is a failure
    if localCommitsList!.size()
        for wk=0 to localCommitsList!.size()-1
            remainingCommits!.add(localCommitsList!.get(wk))
        next wk
    endif

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    rem --- Cherry pick local commits
    repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
    commitIter!=localCommitsList!.iterator()
    while commitIter!.hasNext()
        commit!=commitIter!.next()
        failures!=repoInterface!.cherryPick(commit!)
        print(log_dev)"    commit: ",commit!

        rem --- Log and report cherry pick failure
        if !failures!.isEmpty() then
            restartFlag=1
            print(log_dev)"    ***** CHERRY PICK FAILED *****"
            failurePaths!=failures!.keySet()
            pathsIter!=failurePaths!.iterator()
            while pathsIter!.hasNext()
                path$=pathsIter!.next()
                reason!=failures!.get(path$)
                print(log_dev)"    ",path$,": ",reason!
            wend
            break
        endif

        rem --- Do NOT cherry pick this commit again in a restart
        remainingCommits!.removeItem(0)
    wend
    repoInterface!.closeInterface()

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

checkForGitConflicts: rem --- Check for Git conflicts, and resolve bar/*.xml conflicts

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CHECK_GIT_CONFLICTS")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    rem --- Get Git conflicts
    repoInterface!=new GitRepoInterface(gitAuthID$,newAonDir$)
    conflicts!=repoInterface!.getConflicts()
    repoInterface!.closeInterface()

    rem --- Warn about, and log, un-resolved conflicts
    if conflicts!.size()>0 then
        restartFlag=1
        msg_id$="AD_GIT_CONFLICTS"
        dim msg_tokens$[1]
        msg_tokens$[1]=newAonDir$ + "/logs"+logName$
        gosub disp_message

        conflictIter!=conflicts!.iterator()
        while conflictIter!.hasNext()
            print(log_dev)"    conflict: "+conflictIter!.next()
        wend
    endif

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)
    return

checkForReservedStr: rem --- For pre-v19 upgrades, check for delta XML RESERVED_STR and RESERVED_NUM issues
    if num(start_version$)<19 then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_CHECK_DELTA_XML")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$+": "+newAonDir$+"/data/bar/delta"

        rem --- Show busy/working image while cloning and pulling from repository
        nxt_ctlID=util.getNextControlID()
        busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

        rem --- Check XMLs in aon/data/bar/delta directory
        aonDataBarDelta!=new File(newAonDir$+"/data/bar/delta",err=*next)
        if aonDataBarDelta!.exists() and aonDataBarDelta!.isDirectory() then
            deltaXmlVector! = new Vector(java.util.Arrays.asList(aonDataBarDelta!.listFiles()))
            deltaXmlIter!=deltaXmlVector!.iterator()
            while deltaXmlIter!.hasNext()
                deltaXmlFile!=deltaXmlIter!.next()
                deltaXmlName!=deltaXmlFile!.getName()
                if deltaXmlName!.endsWith(".xml") then
                    baseName$=deltaXmlName!
                    baseName$=baseName$(1,pos(".xml"=baseName$)-1)
                    reservedStrs!=new Vector()
                    reservedNums!=new Vector()
                    dealerStrs!=new Vector()
                    dealerNums!=new Vector()

                    rem --- Does this delta XML have RESERVED_STR and RESERVED_NUM issues?
                    deltaXml_dev=unt
                    open(deltaXml_dev)deltaXMlFile!.getAbsolutePath()
                    while 1
                        read(deltaXml_dev,end=*break)text$
                        if pos("<RECORD id=""ddm_table_cols."+baseName$=text$) then
                            if pos("RESERVED_STR "=text$) then reservedStrs!.add(text$)
                            if pos("RESERVED_NUM "=text$) then reservedNums!.add(text$)
                            if pos("DEALER_STR "=text$) then dealerStrs!.add(text$)
                            if pos("DEALER_NUM "=text$) then dealerNums!.add(text$)
                        endif
                    wend

                    rem --- Log RESERVED_STR and RESERVED_NUM issues, and set restartFlag
                    if reservedStrs!.size()>1 or reservedNums!.size()>1 or dealerStrs!.size()>1 or dealerNums!.size()>1 then
                        restartFlag=1
                        print(log_dev) "    "+deltaXmlName!
                        if reservedStrs!.size()>1 then
                            for i=0 to reservedStrs!.size()-1
                                print(log_dev) "        "+reservedStrs!.elementAt(i)
                            next i
                        endif
                        if reservedNums!.size()>1 then
                            for i=0 to reservedNums!.size()-1
                                print(log_dev) "        "+reservedNums!.elementAt(i)
                            next i
                        endif
                        if dealerStrs!.size()>1 then
                            for i=0 to dealerStrs!.size()-1
                                print(log_dev) "        "+dealerStrs!.elementAt(i)
                            next i
                        endif
                        if dealerNums!.size()>1 then
                            for i=0 to dealerNums!.size()-1
                                print(log_dev) "        "+dealerNums!.elementAt(i)
                            next i
                        endif
                    endif

                    close(deltaXml_dev,err=*next)
                endif
            wend
        endif

        rem --- Warn about, and log, un-resolved conflicts
        if restartFlag then
        rem ... AD_DELTA_XML_ISSUES: There are aon/data/bar/delta XML issues that must be resolved before completing this upgrade.\nSee the log file for details\: %1\n
            msg_id$="AD_DELTA_XML_ISSUES"
            dim msg_tokens$[1]
            msg_tokens$[1]=newAonDir$ + "/logs"+logName$
            gosub disp_message
        endif

        rem --- Remove busy/working image from progress meter
        busyImage!.destroy(err=*next)
    endif
    return

createRestartFile: rem --- Create restart file
    FileObject.makeDirs(new File(newAonDir$ + "/logs"))
    restartFile$=newAonDir$+"/logs/restartUpgradeWizard.txt"
    erase restartFile$,err=*next
    string restartFile$
    restart_dev=unt
    open(restart_dev)restartFile$

    print(restart_dev)"Restart file: "+restartFile$
    print(restart_dev)"Created: "+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")
    print(restart_dev)
    print(restart_dev)"Previous log file: " + newAonDir$ + "/logs"+logName$
    print(restart_dev)"New aon Location: " + newAonLoc$
    print(restart_dev)"Old aon Location: " + oldAonLoc$
    print(restart_dev)"Start version: " + start_version$
    print(restart_dev)"Re-Start At: " + restartAt$
    print(restart_dev)

    rem --- Capture remaining commits that still need to be cherry picked
    remainingIter!=remainingCommits!.iterator()
    while remainingIter!.hasNext()
        remaining!=remainingIter!.next()
        print(restart_dev)"Remaining commit: ",remaining!
    wend

    print(restart_dev)
    close(restart_dev,err=*next)
    return


removeModsArcBarFile: rem --- Remove mods data/bar/*.xml file and data/arc/*/*.arc files corresponding to given sourceName$
    rem --- Get source basename and extension
    sourceName$=sourceName!
    baseName$=""
    extension$=""
    if sourceName!.endsWith(".xml") then
        extension$=".xml"
        baseName$=sourceName$(1,pos(extension$=sourceName$,-1)-1)
    endif
    if sourceName!.endsWith(".cdf") then
        extension$=".cdf"
        baseName$=sourceName$(1,pos(extension$=sourceName$,-1)-1)
    endif
    if baseName$="" or extension$="" then return

    rem --- Remove corresponding mods data/bar/*.xml file
    modsBarXml!=new File(newModsDir$+"data/bar/"+baseName$+extension$)
    modsBarXml!.delete()

    rem --- Remove corresponding mods data/arc/*/*.arc files
    if arcLangDirs!=null() then
        rem --- Get language directory that are under the mods data/arc directory
        arcLangDirs!= new Vector()
        modsDataArcDir!=new File(newModsDir$+"data/arc")
        modsDataArcVector! = new Vector(java.util.Arrays.asList(modsDataArcDir!.listFiles()))
        modsDataArcIter!=modsDataArcVector!.iterator()
        while modsDataArcIter!.hasNext()
            modsDataArcFile!=modsDataArcIter!.next()
            if modsDataArcFile!.isDirectory() then arcLangDirs!.add(modsDataArcFile!)
        wend
    endif
    arcLangIter!=arcLangDirs!.iterator()
    while arcLangIter!.hasNext()
        langDir!=arcLangIter!.next()
        modsArcFile!=new File(newModsDir$+"data/arc/"+langDir!.getName()+"/"+baseName$+".arc")
        modsArcFile!.delete()
    wend
    return

search_replace: rem --- Search record$ for search$, and replace with replace$
	rem --- Assumes only one occurrence of search$ per line so don't have
	rem --- to deal with situation where pos(search$=replace$)>0
	pos = pos(search$=record$)
	if(pos) then
		record$ = record$(1, pos - 1) + replace$ + record$(pos + len(search$))
	endif
    return

disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log:rem --- Open log file

    rem --- create logs directory at location
    logDir$ = FileObject.fixPath(newAonLoc$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    logName$="/upgradewiz_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".txt"
    log$ = logDir$+logName$
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$

    rem --- write log header info
    print(log_dev)"Upgradewiz log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)
    print(log_dev)"New Database Name: " + dbName$
    print(log_dev)"New Description: " + appDesc$
    print(log_dev)"New aon Location: " + newAonLoc$
    print(log_dev)"Old aon Location: " + oldAonLoc$
    print(log_dev)"Old barista Location: " + oldBarLoc$
    print(log_dev)"Old sync Backup Dir: " + syncBackupDir$
    if useOldMenu% then
        print(log_dev)"Use old modified menus."
    else
        print(log_dev)"Do not use old menus."
    endif
    print(log_dev)

	rem --- write application grid info
    print(log_dev)"Application grid info:"
	iter!=appVect!.iterator()
	while iter!.hasNext()
		aList! = cast(ArrayList, iter!.next())
		app$=cast(BBjString, aList!.get(0))
		parent$=cast(BBjString, aList!.get(1))
		install$=cast(BBjString, aList!.get(2))
		copy$=cast(BBjString, aList!.get(3))
		source$=cast(BBjString, aList!.get(4))
		target$=cast(BBjString, aList!.get(5))
		print(log_dev)"app="+app$+"  parent="+parent$+"  install="+install$+"  copy="+copy$+"  source="+source$+"  target="+target$
	wend
    print(log_dev)

	rem --- write STBL grid info
    print(log_dev)"STBL grid info:"
    keys! = appStblMap!.keySet()
    iter! = keys!.iterator()
    while iter!.hasNext()
        key$ = cast(BBjString, iter!.next())
 		stblVect! = cast(Vector, appStblMap!.get(key$))
        vectIter! = stblVect!.iterator()
        while vectIter!.hasNext()
            aList! = cast(ArrayList, vectIter!.next())
            app$=cast(BBjString, aList!.get(0))
            stbl_prefix$=cast(BBjString, aList!.get(1))
            source$=cast(BBjString, aList!.get(2))
            target$=cast(BBjString, aList!.get(3))
		print(log_dev)"app="+app$+"  stbl="+stbl_prefix$+"  source="+source$+"  target="+target$
        wend
    wend
    print(log_dev)

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

rem /**
rem  * Utility Class for getting all descendent applications for a given parent application.
rem  */
    class public AppHeritage
        rem --- The appMap! HashMap is keyed by the parent app, and holds a Vector of all the child apps for that parent.
        field private HashMap appMap! = new HashMap()
        field private Vector descendentVect! = new Vector()

        rem /**
        rem  * Constructor.
        rem  *
        rem  * @param HashMap appMap! - keyed by the parent app, and holds a Vector of all the child apps for that parent
        rem  */
        method public AppHeritage(HashMap map!)
            #appMap! = map!
        methodend

        rem /**
        rem  * Get all descendents of given parent.
        rem  *
        rem  * @param BBjString parent$
        rem  * @return Vector of all descendents of parent$
        rem  */
        method public Vector getDescendents(BBjString parent$)
            seterr method_error
            declare Vector childVect!

            if #appMap!.containsKey(parent$) then
                childVect! = cast(Vector, #appMap!.get(parent$))
                if childVect!<>null() and childVect!.size()>0 then
                    for i=0 to childVect!.size()-1
                        #descendentVect!.add(childVect!.get(i))
                        propertyMap! = cast(HashMap, childVect!.get(i))
                        #getDescendents(cast(BBjString, propertyMap!.get("mount_sys_id")))
                    next i
                endif
            endif
            methodret #descendentVect!

method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    classend

    end
