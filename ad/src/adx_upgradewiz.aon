rem ==========================================================================
rem --- adx_upgradewiz.aon 
rem --- Utility to automate Addon ugrade.
rem --- 
rem --- AddonSoftware Version 11.11
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use java.io.File
    use java.nio.file.Files
    use java.nio.file.Path
    use java.nio.file.Paths
    use java.util.ArrayList
    use java.util.Comparator
    use java.util.HashMap
    use java.util.stream.Collectors
    use java.util.Vector

    use ::adc_updatexmlfiles.aon::UpdateSyncXmlFiles
    use ::ado_file.src::FileObject
    use ::ado_GitRepoInterface.aon::GitRepoInterface
    use ::ado_util.src::util    

    setesc std_error
    seterr std_error

rem --- Initializations

    pgmdir$=stbl("+DIR_PGM",err=*next)
    dir_syp$=stbl("+DIR_SYP")
    sysGUI! = BBjAPI().getSysGui()
    localCommitsList!=BBjAPI().makeVector()
    BLOCKSIZE = 2^20

rem --- Get user inputs

    dbName$=Option!.getOptionData("DB_NAME")
    appDesc$=Option!.getOptionData("APP_DESC")
    version_neutral=num(Option!.getOptionData("VERSION_NEUTRAL"))
    baseDir$=Option!.getOptionData("BASE_DIR")
    newAonLoc$=Option!.getOptionData("NEW_AON_LOC")
    oldAonLoc$=Option!.getOptionData("OLD_AON_LOC")
    oldBarLoc$=Option!.getOptionData("OLD_BAR_LOC")
    syncBackupDir$=Option!.getOptionData("SYNC_BACKUP_DIR")
    doSyncBackup%=cast(BBjInt, callpoint!.getDevObject("do_sync_backup"))
    declare Vector appVect!
    appVect!=cast(Vector, callpoint!.getDevObject("appVect"))
    declare HashMap appStblMap!
    appStblMap!=cast(HashMap, callpoint!.getDevObject("appStblMap"))
    rdAdmin!=cast(BBjAdminBase, callpoint!.getDevObject("rdAdmin"))
    useOldMenu%=int(num(Option!.getOptionData("USE_OLD_MENU")))

	rem --- Flip directory path separators
    baseDir$=FileObject.fixPath(baseDir$, "/")
	newAonLoc$=FileObject.fixPath(newAonLoc$, "/")
	oldAonLoc$=FileObject.fixPath(oldAonLoc$, "/")
	oldBarLoc$=FileObject.fixPath(oldBarLoc$, "/")
	syncBackupDir$=FileObject.fixPath(syncBackupDir$, "/")

    newAonDir$=newAonLoc$ + "/aon"
    newBarDir$=newAonLoc$ + "/barista"
    oldAonDir$=oldAonLoc$ + "/aon"
    oldBarDir$=oldBarLoc$ + "/barista"

rem --- Currently only installing Addon from a Git repository
    appName!=BBjAPI().makeVector()
    newAonDir!=BBjAPI().makeVector()
    oldAonDir!=BBjAPI().makeVector()
    appName!.add("ADDON")
    newAonDir!.add(newAonDir$)
    oldAonDir!.add(oldAonDir$)

rem --- Get version for repository branch
rem wgh ... 9809 ... Is there a better, more accurate, way of doing this ?????
rem wgh ... 9809 ... Addon currently only tracks to the major release level.
    call stbl("+DIR_SYP")+"bax_version.bbj",app_version_id$,lic_version_id$
    branchVersion$=str(num(app_version_id$)*100:"0000")
    
rem --- Start progress meter
    meter_title$=Translate!.getTranslation("AON_UPDATE_WIZ")
    meter_total_recs=8
    if doSyncBackup% then meter_total_recs=meter_total_recs+1
    if useOldMenu% then meter_total_recs=meter_total_recs+1
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST-OK"
    gosub disp_meter

rem --- Open log file
    gosub open_log

rem --- Skip Barista’s Create Sync File Backup bax_sync_backup.bbj unless upgrading from a pre-v18 version.
    if doSyncBackup% then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_SYNC_BACKUP")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Pass bax_sync_backup.bbj the full path to the pre-v18 application’s Barista instance
        call stbl("+DIR_SYP")+"bax_sync_backup.bbj","AUTO",oldBarDir$,sysGUI!,rdForm!,null(),rd_table_chans$[all]
    endif
    
rem --- Recursively copy oldLocation to newAonDir

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_COPY_AON")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Do not copy data or help file
    requiredFiles%=2
    copyData%=1
    help%=0

rem wgh ... 9809 ... #1 Git and #1 Non-Git ... DONE ... Copy old instance of aon from old location to new location
    rem --- Launch adc_copyaon.aon
    oldUsedGit!=BBjAPI().makeVector()
    oldUsedMods!=BBjAPI().makeVector()
    for syscnt=0 to oldAonDir!.size()-1
        print(log_dev)"    Copy "+oldAonDir!.getItem(syscnt)
        call pgmdir$+"adc_copyaon.aon",oldAonDir!.getItem(syscnt),newAonDir!.getItem(syscnt),requiredFiles%,copyData%,help%,rdForm!,0,status

        rem --- Does old copied installation use Git repository or MODS project for customizations?
        oldGitDir! = new File(newAonDir!.getItem(syscnt)+"/.git")
        if oldGitDir!.exists() and oldGitDir!.isDirectory() then
            oldUsedGit!.add(newAonDir!.getItem(syscnt))
        else
            oldUsedMods!.add(newAonDir!.getItem(syscnt))
        endif
    next syscnt

rem --- Does the old copied installation use Git repository?
    if oldUsedGit!.size()>0 then

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_BUILD_DELTA_XMLS")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Build delta XMLs for modified bar/*.xml files that have been committed.
        for gitcnt=0 to oldUsedGit!.size()-1
            print(log_dev)"    For "+oldUsedGit!.getItem(gitcnt)

            rem --- Get JGit interface to repository
            aonDir$=oldUsedGit!.getItem(gitcnt)
            repoInterface!=new GitRepoInterface(aonDir$)
            LocalBranch$=repoInterface!.getLocalBranch()
            ReleaseTag$=repoInterface!.getReleaseTag()

            rem --- Do not allow upgrade if Git repository has uncommitted changes, either unstaged or staged
            unstaged!=repoInterface!.getUnstagedChanges()
            if unstaged!.size()>0 then
                msg_id$="AD_UNCOMMITTED_CHGS"
                dim msg_tokens$[1]
                msg_tokens$[1]="unstaged"
                gosub disp_message
                print(log_dev)"    ***** Uncommitted unstaged changes *****"
                print(log_dev)"    ",unstaged!
                goto done
            endif
            staged!=repoInterface!.getUnstagedChanges()
            if staged!.size()>0 then
                msg_id$="AD_UNCOMMITTED_CHGS"
                dim msg_tokens$[1]
                msg_tokens$[1]="staged"
                gosub disp_message
                print(log_dev)"    ***** Uncommitted staged changes *****"
                print(log_dev)"    ",staged!
                goto done
            endif

            mkdir aonDir$+"/tmp",err=*next

rem wgh ... 9809 ... #2 Git ... DONE ... Get list of commits since the tagged commit
            rem --- Get Vector of all local commits.
            localCommitsList!=repoInterface!.getLocalCommits(LocalBranch$,ReleaseTag$)

            rem --- Get modified bar/*.xml files that have been committed.
            localCommittedXmls!=repoInterface!.getLocalCommittedXmls(localCommitsList!)
            modifiedXmlIter!=localCommittedXmls!.iterator()
            while modifiedXmlIter!.hasNext()
                modifiedXml$=modifiedXmlIter!.next()
            
                rem --- Get original version of modified bar/*.xml files in list.
                fileContent$=repoInterface!.getRemoteFileContent(modifiedXml$)
            
                outfile$=aonDir$+"/tmp/"+modifiedXml$(1+pos("/"=modifiedXml$,-1))
                erase outfile$,err=*next
                string outfile$
                out_dev=unt
                open(out_dev)outfile$
                print(out_dev)fileContent$
                close(out_dev)
            
rem wgh ... 9809 ... #3 Git ... DONE ... Call the Barista utility to create delta XMLs
                rem --- Build delta XMLs using Barista's bax_dd_sync_delta.bbj.
                rd_action$=""
                rd_status$=""
                rd_base_file$=outfile$
                rd_proj_file$=aonDir$+"/"+modifiedXml$
                rd_delta_file$=aonDir$+"/data/bar/delta/"+modifiedXml$(1+pos("/"=modifiedXml$,-1))
                call stbl("+DIR_SYP")+"bax_dd_synch_delta.bbj",rd_base_file$,rd_proj_file$,rd_delta_file$,rd_action$,rd_status$
            
                erase rd_base_file$,err=*next
            wend

            repoInterface!.closeInterface()
            rmdir aonDir$+"/tmp",err=*next
        next gitcnt
    endif

rem --- Does the old copied installation use MODS project for customizations?
    if oldUsedMods!.size()>0 then

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_CLONE_GIT_REPO")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Show busy/working image while cloning and pulling from repository
        nxt_ctlID=util.getNextControlID()
        busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

        rem --- Clone Git repository to newAonLoc, and check out branch
        for modscnt=0 to oldUsedMods!.size()-1
            print(log_dev)"    For "+oldUsedMods!.getItem(modscnt)

rem wgh ... 9809 ... For pre-v15.02 upgrades, warn that they must run Barista's Build Delta XMLs for Mods Project utility.
rem wgh ... 9809 ... Should ddm_systems.parent_sys_id be cleared for ADDON mods ????? For v21+ too ?????

            rem --- Clone and pull branch from Git repository
            gitURI$="https://git.basis.com/Addon/Addon.git"
            branchName$="BBJ"+branchVersion$+"GA"
            remoteBranch$="origin/"+branchName$
            cloneDir$=oldUsedMods!.getItem(modscnt)
            cloneDir!=new File(cloneDir$)
            userName$="username"
            userPassword$="password"

rem wgh ... 9809 ... #2 Non-Git ... wip ... Get a "scratch" clone of Addon in a work directory, harvest the .git directory and drop it in v22/v2200/aon, then get rid of the scratch clone 
            rem --- Clone Git repository to a temporary work directory. (Pre-built download doesn't have a .git directory that can be copied.)
            mkdir cloneDir$+"/tmp",err=*next
            repoInterface!=new GitRepoInterface(cloneDir$+"/tmp")
            if (repoInterface!=null()) then 
                msg_id$="AD_FAILED_BAD_CLONE"
                dim msg_tokens$[1]
                msg_tokens$[1]=branchName$
                gosub disp_message
                print(log_dev)"    ***** "+branchName$+" CLONE FAILED *****"   
                goto done
            endif 
            repoInterface!.closeInterface()
            
            rem --- Move .git directory from temporary work directory to clone install location
            tmpGitDir!=new File(cloneDir$+"/tmp/.git")
            cloneGitDir!=new File(cloneDir$+"/.git")
rem wgh ... 9809 ... Something has something in .git open, so can't rename/move it
            tmpGitDir!.renameTo(cloneGitDir!)

            rem --- Remove the temporary work directory
            tmpDirPath!=Paths.get(cloneDir$+"/tmp")
rem wgh ... 9809 ... Haven't been able to get Files.walk(...) to work   
            pathsToDelete!=Files.walk(cast(Path,tmpDirPath!)).sorted(Comparator.reverseOrder()).collect(Collectors.toList())
            deleteIter!=pathsToDelete.iterator()
            while deleteIter!.hasNext()
                Files!.deleteIfExists(deleteIter!.next())
            wend
rem wgh ... 9809 ... stopped here ... test above changes
        
rem wgh ... 9809 ... stopped here
rem wgh ... 9809 ... #3 Non-Git ... wip ... Switch/checkout to the commit associated with the "old" version - WE HAVE YET TO FIGURE OUT HOW TO DO THIS PART. Remember or perhaps tag this commit once identified.
rem wgh ... 9809 ... #3 Non-Git ... wip ... Also may need to handle line ending issues at this point?
            rem --- Check out the current branch
rem --- Clone Git repository and get a JGit interface to it
            print (log_dev) "    Checkout "+branchName$
            checkoutStatus$=repoInterface!.checkoutBranch(branchName$)
            repoInterface!.closeInterface()
            if checkoutStatus$<>"OK" then
                rem --- Failure, warn and terminate
                msg_id$="AD_FAILED_BAD_CHKOUT"
                dim msg_tokens$[1]
                msg_tokens$[1]=branchName$
                gosub disp_message
                print(log_dev)"    ***** "+branchName$+" CHECKOUT FAILED ("+checkoutStatus$+") *****"
                goto done
            endif
        next modscnt

rem wgh ... 9809 ... #4 Non-Git ... none, missing
rem wgh ... 9809 ... #5 Non-Git ... to do ... Copy the old existing mods/data/bar/delta XMLs to new location 
rem wgh ... 9809 ... #6 Non-Git ... to do ... Incorporate the mods/data/cdf's: put 'before'/'after' callpoints in, or replace the Addon code if it's a 'before' w/ skip. 
rem wgh ... 9809 ... #6 Non-Git ... to do ... While we're massaging callpoints, alphabetize them. Have Git commit these altered cdf's.
rem wgh ... 9809 ... #7 Non-Git ... to do ... Bring over any prog/ files from the mods project (and what if they have more than the prog folder?) and put them in the corresponding src folder based on our naming conventions.
rem wgh ... 9809 ... #7 Non-Git ... to do ... This should result in new or changed files in ar/src/, gl/src/, etc. Have Git commit these new/changed files. 
    
        rem --- Remove busy/working image from progress meter
        busyImage!.destroy(err=*next)
    endif

rem wgh ... 9809 ... #4 Git and #8 Non-Git ... to do ... Switch/checkout to branch for new version 

    rem --- Build addonprop.jar and put it in the aon/prop directory
    meter_text$=Translate!.getTranslation("AON_BUILD_JAR")+": addonprop.jar"
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    x=scall("jar cf "+newAonDir$+"/addonprop.jar -C "+newAonDir$+"/prop .",err=*next)
    aonJar!=new File(newAonDir$+"/addonprop.jar")
    propJar!=new File(newAonDir$+"/prop/addonprop.jar")
    aonJar!.renameTo(propJar!)

rem wgh ... 9809 ... #5 Git and #9 Non-Git ... to do ... Alter addon.syn and adm_modules*.xml's for new location, and let's assume these are set for skip-worktree, so no commit expected/needed

rem wgh ... 9809 ... addon.syn and adm_modules~*.xml files can't be updated until AFTER branch is switched, otherwise changes get overwritten
rem --- Update new addon.syn file

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE_SYN")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    for syscnt=0 to appName!.size()-1
    	rem --- Set newSynFile to addon.syn at the new aon location
        newSynFile$=newAonDir!.getItem(syscnt)+"/config/"+cvs(appName!.getItem(syscnt),8)+".syn"
    
    	rem --- Setup for upgrade
        upgrade%=1
        oldSynFile$=oldAonDir!.getItem(syscnt)+"/config/"+cvs(appName!.getItem(syscnt),8)+".syn"

        rem --- If oldSynFile does not exist, skip.
        oldSynFile! = new File(oldSynFile$)
        if !oldSynFile!.exists() then continue
     
        rem --- Build stblMap! and pfxList! for adc_updatesynfile.aon
        app$=appName!.getItem(syscnt)
        gosub build_stblMap_pfxList

        if app$="ADDON"
            aonStblMap!=new HashMap()
            aonStblMap!=stblMap!
        endif

        rem --- Launch adc_updatesynfile.aon
        call pgmdir$+"adc_updatesynfile.aon",newSynFile$,oldSynFile$,upgrade%,stblMap!,pfxList!,rdForm!,0,status
    next syscnt
    
rem --- Add new application to Barista Installation Manager
rem --- Run BIM bai_install_manager.bbj program via synchronous system call because of its terminating release

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_BIM_CREATE")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Create new session specific classpath (SSCP) in Enterprise Manager
    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CREATE_SSCP","Creating new classpath",1)
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    sscpName$=cvs(dbName$,8)
    copyData%=0
    status=0
    call pgmdir$+"adc_createsscp.aon",sscpName$,newAonLoc$,"",copyData%,rdAdmin!,status
    if status 
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_CREATE_SSCP_ERROR","Unable to create new classpath",1)
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$    
    endif

rem wgh ... 9809 ... #5.5 Git ... to do ... BIM Barista to the new location
rem wgh ... 9809 ... #5.5 Git ... originally #9 Git
    rem --- Launch bai_install_manager.bbj
	bar_dir$=dir("")
	if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
	run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:	+" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:	+" "+$22$+bar_dir$+"/sys/prog/bai_install_manager.bbj"+$22$
	user_arg$=" - "
:	+" -u"+rdAdmin!.getUser()
:	+" -id"+dbName$
:	+" -desc"+$22$+appDesc$+$22$
:	+" -loc"+$22$+newAonLoc$+$22$
:   +" -cp"+$22$+sscpName$+$22$
	scall_result=scall(run_arg$+user_arg$,err=*next)
    
rem --- Update new sync XML files (and copy old barista/settings dir)
rem --- BIM clears barista/settings dir, so must do this step after BIMing and before auto-sync
rem wgh ... 9809 ... NOTE: after v?? Barista no longer uses settings dir

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE_XML")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    start_version$=""

    for syscnt=0 to appName!.size()-1
    	rem --- Set newSyncLoc to sync directory at the new aon location
        newSyncLoc$=newAonDir!.getItem(syscnt)+"/data/sync"
    
    	rem --- Setup for upgrade
        upgrade%=1
        oldSyncLoc$=oldAonDir!.getItem(syscnt)+"/data/sync"

        rem --- If oldSynLoc does not exist for ADDON, skip.
        oldSynLoc! = new File(oldSyncLoc$)
        if !oldSynLoc!.exists() then continue
    
        rem --- Launch adc_updatexmlfiles.aon
        call pgmdir$+"adc_updatexmlfiles.aon",newSyncLoc$,oldSyncLoc$,syncBackupDir$,upgrade%,rdForm!,0,status

        rem --- Get version of source Addon installation from source data/sync/adm_modules~01007514ad.xml
        if start_version$=""
            utility! = new UpdateSyncXmlFiles(rdForm!,0)
            oldVers! = utility!.getModuleVersion(new File(oldSyncLoc$))
            if oldVers!.get("AD")<>null() then
                start_version$=oldVers!.get("AD")
            endif
        endif
    next syscnt

rem --- Use old modified menus instead of new standard menus.
rem --- Temporary "fix" until Barista enhancement 5658 can be implemented to preserve customizations
rem --- to standard menus, thus no logging or progress meter.
    if useOldMenu% then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_COPY_MENUS")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        availableLangs$="deuenuespfraitanldsve"
        for syscnt=0 to appName!.size()-1
            for i=1 to len(availableLangs$)-1 step 3
                lang$=availableLangs$(i,3)
                
                rem --- If oldMenuFile exists, overwrite newMenuFile with it
                oldMenuFile! = new File(oldAonDir!.getItem(syscnt)+"/config/"+lang$+"/"+cvs(appName!.getItem(syscnt),8)+".men")
                if oldMenuFile!.exists()
                
                    rem --- Create new directories as necessary for newMenuFile
                    newMenuDir! = new File(newAonDir!.getItem(syscnt)+"/config/"+lang$)
                    FileObject.makeDirs(newMenuDir!)
    
                    rem --- Rename newMenuFile as a backup before overwriting it
                    newMenuFile! = new File(newMenuDir!.getPath()+"/"+cvs(appName!.getItem(syscnt),8)+".men")
                    rename newMenuFile!.getPath() to newMenuDir!.getPath()+"/"+cvs(appName!.getItem(syscnt),8)+".men.bak", err=*next
                    
                    rem --- Copy oldMenuFile to newMenuFile
                    sourceChan=unt
                    open(sourceChan,isz=-1,err=*endif)oldMenuFile!.getPath()
                    targetChan=unt
                    open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")newMenuFile!.getPath()
                    while 1
                        readrecord(sourceChan,siz=BLOCKSIZE,end=*break)record$
                        writerecord(targetChan)record$
                    wend
                    close(sourceChan)
                    close(targetChan)
                endif
            next i
        next syscnt
    endif

rem wgh ... 9809 ... #6 Git ... to do ... Driving off the list of local commits (#2 Git), cherry pick the commits
rem wgh ... 9809 ... #7 Git ... to do ... If there are conflicts, we have no choice at this point but to stop and have the VAR resolve them
rem wgh ... 9809 ... #10 Non-Git ... to do ... Ask Git to cherry pick our cdf and back-end prog commits, and work conflicts if/as needed

rem wgh ... 9809 ... Need to resolve Git conflicts before proceeding. Jump here on restart of wizard if previously aborted due to conflicts.

rem wgh ... 9809 ... #8 Git and #11 Non-Git ... to do ... If no conflicts, or once all are resolved, copy over any verticals.
rem wgh ... 9809 ... #9 Git ... to do ... BIM Barista to the new location
rem wgh ... 9809 ... #9 Git ... moved to #5.5 Git

rem --- Launch auto-sync in new barista for the new addon.syn
rem --- Run auto-sync bax_dd_synch_auto.bbj program via bax_launch_task.bbj to bypass bar_login.bbj in the new barista

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_AUTO_SYNC")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

rem wgh ... 9809 ... #10 Git ... to do ... Launch the Install Application Wizard (where previously we would've launched the auto-sync) to sync in Addon.
    rem --- Launch bax_dd_synch_auto.bbj
	bar_dir$=newBarDir$
	if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
	run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:	+" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:	+" "+$22$+bar_dir$+"/sys/prog/bax_launch_task.bbj"+$22$

    for syscnt=0 to appName!.size()-1
        newSynFile$=newAonDir!.getItem(syscnt)+"/config/"+cvs(appName!.getItem(syscnt),8)+".syn"
        user_arg$=" - "
:       +" -u"+rdAdmin!.getUser()
:       +" -p"+rdAdmin!.getPassword()
:       +" -t"+"DDM_TABLES"
:       +" -y"+"A"
:       +" -a" +"bax_dd_synch_auto.bbj"+$22$+" - "+" -f"+newSynFile$+" -b"+$22$
:       +" -w"
	    scall_result=scall(run_arg$+user_arg$,err=*next)
    next syscnt

rem --- Copy OPV_SHIPTRACK_nn views from old database to new database

    rem --- Get name of old database
    old_dbname$=callpoint!.getDevObject("old_dbname")
    if old_dbname$<>"" then
        rem --- Get views in old database
        if pos("="=old_dbname$) then old_dbname$=old_dbname$(1+pos("="=old_dbname$))
        call stbl("+DIR_SYP")+"bac_em_login.bbj",SysGUI!,Form!,admin!,rd_status$
        oldDB!=admin!.getDatabase(old_dbname$)
        views!=oldDB!.getViews()

        rem --- Any old OPV_SHIPTRACK_nn views?
        viewsIter!=views!.iterator()
        while viewsIter!.hasNext()
            oldView!=viewsIter!.next()
            viewProps!=oldView!.getProperties()
            viewName!=viewProps!.get(BBjAdminView.NAME)
            if viewName!=null() then continue
            if viewName!.startsWith("OPV_SHIPTRACK_") then
                rem --- Copy view to new database
                viewDesc$=""
                viewDesc!=viewProps!.get(BBjAdminView.DESCRIPTION)
                if viewDesc!<>null() then viewDesc$=viewDesc!
                viewSelect$=""
                viewSelect!=viewProps!.get(BBjAdminView.SELECT)
                if viewSelect!<>null() then viewSelect$=viewSelect!

                newDB!=admin!.getDatabase(dbName$)
                newDB!.dropView(viewName!)
                newView!=newDB!.createView(viewName!)
                newView!.setString(BBjAdminView.DESCRIPTION,viewDesc$)
                newView!.setString(BBjAdminView.SELECT,viewSelect$)
                newView!.commit()
            endif
        wend
    endif

rem wgh ... 9809 ... #11 Git ... to do ... If there are any verticals, after installing Addon, install them.

rem --- Run Copy Application utility for applications being copied

    rem --- Increment progress meter
    trans_text$=Translate!.getTranslation("AON_COPY_APP")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"

	appIter!=appVect!.iterator()
	while appIter!.hasNext()
		appList! = cast(ArrayList, appIter!.next())
        
        rem --- Skip application if it's not being copied
		copy$=appList!.get(3)
        if copy$<>"y" then continue

        rem --- Get source syn file
        app$=appList!.get(0); rem --- application
        sourceSyn$=appList!.get(4)+"config/"+cvs(app$,8)+".syn"
        synFound=0
        sourceChan=unt
        open(sourceChan,isz=-1,err=*next)sourceSyn$; synFound=1
        close(sourceChan,err=*next)
        if !synFound then
            rem --- Log this app skipped
            meter_text$=trans_text$+": ***skipped*** "+app$
            gosub disp_meter
            print(log_dev)meter_text$+" -- cannot find "+sourceSyn$
            continue
        endif

        rem --- Log this app being copied
        meter_text$=trans_text$+": "+app$
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Remove trailing slashes (/ and \) from targetDir$
        targetDir$=FileObject.removeEndSlash(appList!.get(5))

        rem --- Build stblMap! and pfxList! for adc_copymods.aon
        gosub build_stblMap_pfxList
        
        rem --- Launch adc_copymods.aon
        call pgmdir$+"adc_copymods.aon",sourceSyn$,targetDir$,stblMap!,pfxList!,rdForm!,0,status
    wend

rem --- Run Install Application Wizard for applications being installed

    rem --- Increment progress meter
    trans_text$=Translate!.getTranslation("AON_INSTALL_APP")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"

	iter!=appVect!.iterator()
	while iter!.hasNext()
		appList! = cast(ArrayList, iter!.next())
        
        rem --- Skip application if it's not being installed
		install$=appList!.get(2)
        if install$<>"y" then continue

        rem --- Get syn file for application
        app$=appList!.get(0); rem --- application
        if appList!.get(3)="y" then
            rem --- App was copied, so use target syn file
            sourceSyn$=appList!.get(5)+"config/"+cvs(app$,8)+".syn"
        else
            rem --- App was not copied, so use source syn file
            sourceSyn$=appList!.get(4)+"config/"+cvs(app$,8)+".syn"
        endif
        synFound=0
        sourceChan=unt
        open(sourceChan,isz=-1,err=*next)sourceSyn$; synFound=1
        close(sourceChan,err=*next)
        if !synFound then
            rem --- Log this app skipped
            meter_text$=trans_text$+": ***skipped*** "+app$
            gosub disp_meter
            print(log_dev)meter_text$+" -- cannot find "+sourceSyn$
            continue
        endif

        rem --- Log this app being installed
        meter_text$=trans_text$+": "+app$
        gosub disp_meter
        print(log_dev)meter_text$
        
        rem --- Launch baw_install_app.bbj
        bar_dir$=newBarDir$
        if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
        run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:	    +" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:	    +" "+$22$+bar_dir$+"/sys/prog/bax_launch_task.bbj"+$22$
        user_arg$=" - "
:	    +" -u"+rdAdmin!.getUser()
:	    +" -p"+rdAdmin!.getPassword()
:	    +" -t"+"DDM_TABLES"
:	    +" -y"+"A"
:       +" -a" +"baw_install_app.bbj"+$22$+" - "+" -f"+sourceSyn$+$22$
:	    +" -w"
        scall_result=scall(run_arg$+user_arg$,err=*next)
    wend

rem --- On successful complete, initialize conversion control file data/adx_conversionCtrl

    convCtrlIniFileName$=newAonDir$+"/config/adx_conversionCtrl.ini"
    convCtrlIniFile!=new File(convCtrlIniFileName$,err=*next)
    if convCtrlIniFile!.exists() then
        convCtrlIniFileChan=unt
        open(convCtrlIniFileChan,isz=-1)convCtrlIniFileName$

        rem --- Put initialized conversion control file in +DIR_DAT new target data directory
        convCtrlFilePath$=newAonDir$+"/data"
        if aonStblMap!.containsKey("+DIR_DAT") then
            aList! = cast(ArrayList, aonStblMap!.get("+DIR_DAT"))
            target$ = cast(BBjString, aList!.get(1))
            convCtrlFilePath$=FileObject.fixPath(target$, "/")
            FileObject.removeEndSlash(convCtrlFilePath$)
        endif
        convCtrlFileName$=convCtrlFilePath$+"/adx_conversionCtrl"
        convCtrlFile!=new File(convCtrlFileName$)
        rem --- Create path/file if doesn't exist
        if !convCtrlFile!.exists() then
            convCtrlPath!=new File(convCtrlFilePath$)
            if !convCtrlPath!.exists() then
                convCtrlPath!.mkdirs()
            endif
            convCtrlFile!.createNewFile()
            rem --- Set read-write permissions for everyone
            convCtrlFile!.setReadable(1,0)
            convCtrlFile!.setWritable(1,0)
        endif
        convCtrlFileChan=unt
        open(convCtrlFileChan,isz=-1,mode="O_CREATE,O_TRUNC")convCtrlFileName$

        while 1
            readrecord(convCtrlIniFileChan,siz=BLOCKSIZE,end=*break)line$
            if pos("addon_source="=line$) then
                xpos=pos("addon_source="=line$)
                line$=line$(1,xpos+len("addon_source=")-1)+oldAonLoc$+line$(xpos+len("addon_source="))
            endif
            if pos("barista_source="=line$) then
                xpos=pos("barista_source="=line$)
                line$=line$(1,xpos+len("barista_source=")-1)+oldBarLoc$+line$(xpos+len("barista_source="))
            endif
            if pos("data_source="=line$) then
                xpos=pos("data_source="=line$)
                line$=line$(1,xpos+len("data_source=")-1)+"AIUW"+line$(xpos+len("data_source="))
            endif
            if pos("end_version="=line$) then
                rem --- Get version of this Addon installation
                end_version$=str(num(branchVersion$(1,3))/10:"00.0")
        
                xpos=pos("end_version="=line$)
                line$=line$(1,xpos+len("end_version=")-1)+end_version$+line$(xpos+len("end_version="))
            endif
            if pos("start_version="=line$) then
                rem --- Get version of source Addon installation from source data/sync/adm_modules~01007514ad.xml
                start_version$=iff(start_version$<>"",start_version$,end_version$)
    
                xpos=pos("start_version="=line$)
                line$=line$(1,xpos+len("start_version=")-1)+start_version$+line$(xpos+len("start_version="))
            endif
            if pos("modules="=line$) then
                xpos=pos("modules="=line$)
                line$=line$(1,xpos+len("modules=")-1)+upgradedModules$+line$(xpos+len("modules="))
            endif
            writerecord(convCtrlFileChan)line$
        wend
    
        close(convCtrlIniFileChan,err=*next)
        close(convCtrlFileChan,err=*next)
        
        print(log_dev)"Initialized ",convCtrlFileName$
    else
        rem --- Report can't find the required config/adx_conversionCtrl.ini initialization file
        msg_id$="AD_FILE_MISSING"
        dim msg_tokens$[1]
        msg_tokens$[1]=convCtrlIniFileName$
        gosub disp_message
        print(log_dev)"***** ERROR: Required file not found, "+convCtrlIniFileName$+" *****"
   endif

rem wgh ... 9809 ... #12 Git ... to do ... At this point, we should have the upgraded application in place, and can run the EM Update Wizard to bring over data and begin sanity checking and testing.

rem wgh ... 9809 ... Have adx_init_data.aon check to see if .git is in the correct directory. Since the Install and Upgrade Wizards will only do version-neutral installs now,
rem wgh ... 9809 ... except for quick copies, for branch BBJxxyzGA the .git directory should be located under vxx/vxxyz/aon. The adx_init_data.aon can get a Git object for the correct path,
rem wgh ... 9809 ... then use Git.getRepository().getBranch() to get the branch name. If .git isn't found, it won't be for quick copies since it's not in the pre-build download,
rem wgh ... 9809 ... skip the test. Shortcoming for both is that a VAR can alter the auto-launch data conversion program, adx_init_data.aon, to skip the test. Add a REM the adx_init_data.aon
rem wgh ... 9809 ... that explains why one shouldn't alter or remove the test ... that relieves us of the obligation of supporting people who use novel twists on the upgrade process.
    
done: rem --- All done
    
    rem --- Stop progress meter
    meter_text$=""
    meter_proc_recs=meter_total_recs
    meter_action$="LST-END"
    gosub disp_meter
    print(log_dev)
    print(log_dev)"Upgradewiz log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Move log file to aon/logs directory
    logFile!=new File(log$)
    aonLogFile!=new File(newAonDir$ + "/logs"+logName$)
    logFile!.renameTo(aonLogFile!)
    logDir!=new File(logDir$)
    logDir!.delete()

    goto std_exit

build_stblMap_pfxList: rem --- Build stblMap! and pfxList! for adc_copymods.aon for a app$

    stblMap! = new HashMap()
    pfxList! = new ArrayList()

    if appStblMap!.containsKey(app$) then
        stblVect! = cast(Vector, appStblMap!.get(app$))
        stblIter!=stblVect!.iterator()
        while stblIter!.hasNext()
            stblList! = cast(ArrayList, stblIter!.next())
            stbl$=stblList!.get(1); rem --- STBL or <prefix>
            if stbl$="<prefix>" then
                aList!=new ArrayList()
                aList!.add(stblList!.get(2)); rem --- source
                aList!.add(stblList!.get(3)); rem --- target
                pfxList!.add(aList!)
            else
                aList!=new ArrayList()
                aList!.add(stblList!.get(2)); rem --- source
                aList!.add(stblList!.get(3)); rem --- target
                stblMap!.put(stbl$, aList!)
            endif
        wend
    endif
    return
    
search_replace: rem --- Search record$ for search$, and replace with replace$
	rem --- Assumes only one occurrence of search$ per line so don't have 
	rem --- to deal with situation where pos(search$=replace$)>0
	pos = pos(search$=record$)
	if(pos) then
		record$ = record$(1, pos - 1) + replace$ + record$(pos + len(search$))
	endif
    return
	
disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log:rem --- Open log file
            
    rem --- create logs directory at location
    logDir$ = FileObject.fixPath(newAonLoc$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    logName$="/upgradewiz_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".txt"
    log$ = logDir$+logName$
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
    
    rem --- write log header info
    print(log_dev)"Upgradewiz log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)
    print(log_dev)"New Database Name: " + dbName$
    print(log_dev)"New Description: " + appDesc$
    print(log_dev)"New aon Locatoin: " + newAonLoc$
    print(log_dev)"Old aon Location: " + oldAonLoc$
    print(log_dev)"Old barista Location: " + oldBarLoc$
    print(log_dev)"Old sync Backup Dir: " + syncBackupDir$
    if useOldMenu% then
        print(log_dev)"Use old modified menus."
    else
        print(log_dev)"Do not use old menus."
    endif
    print(log_dev)

	rem --- write application grid info
    print(log_dev)"Application grid info:"
	iter!=appVect!.iterator()
	while iter!.hasNext()
		aList! = cast(ArrayList, iter!.next())
		app$=cast(BBjString, aList!.get(0))
		parent$=cast(BBjString, aList!.get(1))
		install$=cast(BBjString, aList!.get(2))
		copy$=cast(BBjString, aList!.get(3))
		source$=cast(BBjString, aList!.get(4))
		target$=cast(BBjString, aList!.get(5))
		print(log_dev)"app="+app$+"  parent="+parent$+"  install="+install$+"  copy="+copy$+"  source="+source$+"  target="+target$
	wend
    print(log_dev)

	rem --- write STBL grid info
    print(log_dev)"STBL grid info:"
    keys! = appStblMap!.keySet()
    iter! = keys!.iterator()
    while iter!.hasNext()
        key$ = cast(BBjString, iter!.next())
 		stblVect! = cast(Vector, appStblMap!.get(key$))
        vectIter! = stblVect!.iterator()
        while vectIter!.hasNext()
            aList! = cast(ArrayList, vectIter!.next())
            app$=cast(BBjString, aList!.get(0))
            stbl_prefix$=cast(BBjString, aList!.get(1))
            source$=cast(BBjString, aList!.get(2))
            target$=cast(BBjString, aList!.get(3))
		print(log_dev)"app="+app$+"  stbl="+stbl_prefix$+"  source="+source$+"  target="+target$
        wend
    wend
    print(log_dev)

    return
    
open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

rem /**
rem  * Utility Class for getting all descendent applications for a given parent application.
rem  */
    class public AppHeritage
        rem --- The appMap! HashMap is keyed by the parent app, and holds a Vector of all the child apps for that parent.
        field private HashMap appMap! = new HashMap()
        field private Vector descendentVect! = new Vector()

        rem /**
        rem  * Constructor.
        rem  *
        rem  * @param HashMap appMap! - keyed by the parent app, and holds a Vector of all the child apps for that parent
        rem  */
        method public AppHeritage(HashMap map!)
            #appMap! = map!
        methodend

        rem /**
        rem  * Get all descendents of given parent.
        rem  *
        rem  * @param BBjString parent$
        rem  * @return Vector of all descendents of parent$
        rem  */
        method public Vector getDescendents(BBjString parent$)
            seterr method_error
            declare Vector childVect!
            
            if #appMap!.containsKey(parent$) then
                childVect! = cast(Vector, #appMap!.get(parent$))
                if childVect!<>null() and childVect!.size()>0 then
                    for i=0 to childVect!.size()-1
                        #descendentVect!.add(childVect!.get(i))
                        propertyMap! = cast(HashMap, childVect!.get(i))
                        #getDescendents(cast(BBjString, propertyMap!.get("mount_sys_id")))
                    next i
                endif
            endif
            methodret #descendentVect!
            
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
    classend
    
    end
