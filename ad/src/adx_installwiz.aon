rem ==========================================================================
rem --- adx_installwiz.aon 
rem --- Utility to automate new Addon installation.
rem --- 
rem --- AddonSoftware Version 11.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem ==========================================================================

    use java.io.File
    use java.nio.file.Files
    use java.nio.file.Paths
    use java.nio.file.FileSystems
    use java.nio.file.attribute.PosixFilePermissions 
    use java.util.stream.Collectors
    use java.util.Arrays
    use java.util.HashSet
    use java.util.Vector

    use ::adc_copyaon.aon::CopyAonDir
    use ::ado_file.src::FileObject
    use ::ado_GitRepoInterface.aon::GitRepoInterface
    use ::ado_util.src::util    

    setesc std_error
    seterr std_error

rem --- Initializations

    osIsWindows!=(new String(info(0,0)).indexOf("Win"))>=0
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dir_syp$=stbl("+DIR_SYP")
    sysGUI! = BBjAPI().getSysGui()
    mountedSys!=BBjAPI().makeVector()
    synFile!=BBjAPI().makeVector()
    blocksize = 2^20

rem --- Get user inputs

    git_auth_id$=Option!.getOptionData("GIT_AUTH_ID")
    version_neutral=num(Option!.getOptionData("VERSION_NEUTRAL"))
    base_dir$=Option!.getOptionData("BASE_DIR")
    dbName$=Option!.getOptionData("DB_NAME")
    appDesc$=Option!.getOptionData("APP_DESC")
    newAonLoc$=Option!.getOptionData("NEW_INSTALL_LOC")
    newFirm$=Option!.getOptionData("NEW_FIRM_ID")
    installType$=Option!.getOptionData("INSTALL_TYPE")
    help%=int(num(Option!.getOptionData("APP_HELP")))
    rdAdmin!=cast(BBjAdminBase, callpoint!.getDevObject("rdAdmin"))
    major_ver$=callpoint!.getDevObject("major_ver")
    minor_ver$=callpoint!.getDevObject("minor_ver")
	
	copyData%=iff(installType$="Q",1,0)
rem --- if installType is "Q", then run program that does 'quick copy'
rem --- that program copies pre-sync'd barista and addon, plus examples and/or default if they're sync'd into barista
rem --- it will copy demo data as well; used for demo/training

	if copyData% then run stbl("+DIR_PGM")+"adx_quickcopywiz.aon"

    rem --- Flip directory path separators for bbjHome
    filepath$=java.lang.System.getProperty("basis.BBjHome")
    gosub fix_path
    bbjHome$=filepath$
	
	rem --- Flip directory path separators for newAonLoc
	filePath$=newAonLoc$
	gosub fix_path
	newAonLoc$=filePath$
    
    rem --- Set directory for newBarDir
    newBarDir$=newAonLoc$ + "/barista"

rem --- Open/Lock files

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ADM_MODULES",open_opts$[1]="OTA"

    gosub open_tables

    adm_modules_dev=num(open_chans$[1])
    dim adm_modules$:open_tpls$[1]

rem --- Is Addon being installed, or is it already installed?
    install_aon=1
    testChan=unt
    open(testChan,err=*next)newAonLoc$ + "/aon/data"; install_aon=0
    close(testChan,err=*next)
    if install_aon then
        mountedSys!.add(newAonLoc$+"/aon")
        synFile!.add(newAonLoc$+"/aon/config/addon.syn")
    endif
    
rem --- Start progress meter
    meter_title$=Translate!.getTranslation("AON_INSTALL_WIZ")
    if version_neutral then
        meter_total_recs=9
    else
        meter_total_recs=7
    endif
    if cvs(newFirm$,2)<>"" then meter_total_recs=meter_total_recs+1
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST-OK"
    gosub disp_meter

rem --- Open log file
    gosub open_log
    
rem --- Clone and pull branch(s) from Git repository to newAonLoc

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CLONE_GIT_REPO")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$ 

    rem --- Show busy/working image while cloning and pulling from repository
    nxt_ctlID=util.getNextControlID()
    busyImage!=meterWin!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    if installType$="X" then
        rem --- Without data
        requiredFiles%=1; rem --- Only required files listed in readme.htm
    else
        rem --- With default parameters and codes
        requiredFiles%=3; rem --- Required files listed in readme.htm plus files with firm ZZ default data
    endif
    
    for syscnt=0 to mountedSys!.size()-1
        print(log_dev)"    For "+mountedSys!.getItem(syscnt)   
           
        rem --- Clone and pull branch from Git repository
	    branchName$="BBJ"+minor_ver$(2)+"GA"
        cloneDir$=mountedSys!.getItem(syscnt)

        rem --- Clone Git repository and get a JGit interface to it
    	base_dir!=Paths.get(base_dir$)
	    addon_dir!=Paths.get(cloneDir$)
	    if (addon_dir!.startsWith(base_dir!)) then 
		    Files.createDirectories(addon_dir!)
		    if (! osIsWindows!) then  
			    current_dir!=addon_dir!
			    permissions!=PosixFilePermissions.fromString("rwxrwxrwx")
				userPrincipal!=FileSystems.getDefault().getUserPrincipalLookupService().lookupPrincipalByName(java.lang.System.getProperty("user.name"))
			    while (current_dir!<>base_dir!.getParent()) 
				    Files.setPosixFilePermissions(current_dir!,permissions!)
				    Files.setOwner(current_dir!,userPrincipal!)
				    current_dir!=current_dir!.getParent()
			    wend
		    endif
	    endif 
        repoInterface!=new GitRepoInterface(git_auth_id$,cloneDir$)
        print(log_dev) "    Git Repo URL="+repoInterface!.getRepoURL()
		if (repoInterface!=null()) then 
            msg_id$="AD_FAILED_BAD_CLONE"
			dim msg_tokens$[1]
            msg_tokens$[1]=branchName$
            gosub disp_message
            print(log_dev)"    ***** "+branchName$+" CLONE FAILED *****"   
            goto done
		endif

		rem --- Check out the current branch
		print (log_dev) "    Checkout "+branchName$
        checkoutStatus$=repoInterface!.checkoutBranch(branchName$)
        repoInterface!.closeInterface()
        if checkoutStatus$<>"OK" then
			rem --- Failure, warn and terminate
			msg_id$="AD_FAILED_BAD_CHKOUT"
            dim msg_tokens$[1]
            msg_tokens$[1]=branchName$
            gosub disp_message
            print(log_dev)"    ***** "+branchName$+" CHECKOUT FAILED ("+checkoutStatus$+") *****"
            goto done
        endif

        rem --- Set permissions on all directories under cloneDir$ for non-Windows OS
        if (! osIsWindows!) then 
            repoInterface!.setPermsRecursive(cloneDir$)
        endif
    next syscnt

    rem --- Build addonprop.jar and put it in the aon/prop directory
    cmd$=java.lang.System.getProperty("java.home")+"/bin/jar cf "+newAonLoc$+"/aon/addonprop.jar -C "+newAonLoc$+"/aon/prop ."
    x=scall(cmd$,err=*next)
    if x
        print (log_dev) "***** WARNING: Unable to build addonprop.jar. Return code was "+str(x)+". *****"
    else
        print (log_dev) "Created addonprop.jar from addon*.properties files."
    endif
    aonJar!=new File(newAonLoc$+"/aon/addonprop.jar")
    propJar!=new File(newAonLoc$+"/aon/prop/addonprop.jar")
    aonJar!.renameTo(propJar!)

    rem --- Remove busy/working image from progress meter
    busyImage!.destroy(err=*next)

rem --- Update new addon.syn file

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE_SYN")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Set upgrade off
    upgrade%=0
    oldSynFile$=""

    for syscnt=0 to mountedSys!.size()-1
        newAppDir$=mountedSys!.getItem(syscnt)
        updateSynFile$=synFile!.getItem(syscnt)
        gosub update_addon_syn
    next syscnt
    
rem --- Create new session specific classpath (SSCP) in Enterprise Manager

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CREATE_SSCP","Creating new classpath",1)
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
 
    sscpName$=cvs(dbName$,8)
    status=0
    call pgmdir$+"adc_createsscp.aon",sscpName$,newAonLoc$,"",copyData%,rdAdmin!,status
    if status 
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_CREATE_SSCP_ERROR","Unable to create new classpath",1)
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$    
    endif
    
rem --- Add new application to Barista Installation Manager
rem --- Run BIM bai_install_manager.bbj program via synchronous system call because of its terminating release

    if install_aon then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_BIM_CREATE")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    
        rem --- Launch bai_install_manager.bbj if installing Addon
    	bar_dir$=dir("")
    	if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
    	run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:       +" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:       +" "+$22$+bar_dir$+"/sys/prog/bai_install_manager.bbj"+$22$
	    user_arg$=" - "
:       +" -u"+rdAdmin!.getUser()
:       +" -id"+dbName$
:       +" -desc"+$22$+appDesc$+$22$
:       +" -loc"+$22$+newAonLoc$+$22$
:       +" -cp"+$22$+sscpName$+$22$
	    scall_result=scall(run_arg$+user_arg$,err=*next)

		newDB!=rdAdmin!.getDatabase(dbName$)
		if newDB!.getType()=BBjAdminDatabase.DatabaseType.BARISTA
			rem --- rename bbdict, if it exists/came up from bbj-home so it doesn't cause DBType confusion later
            erase newBarDir$+"/bbdictOLD", err=*next
			rename newBarDir$+"/bbdict", newBarDir$+"/bbdictOLD", err=*next
		endif
	endif
    
rem --- Update new sync XML files
rem --- BIM clears barista/settings dir, so must do this step after BIMing and before auto-sync

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE_XML")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

	rem --- Set upgrade off
    upgrade%=0
    oldSyncLoc$=""
    syncBackupDir$=""

    for syscnt=0 to mountedSys!.size()-1
        newSyncLoc$=mountedSys!.getItem(syscnt)+"/data/sync"
        call pgmdir$+"adc_updatexmlfiles.aon",newSyncLoc$,oldSyncLoc$,syncBackupDir$,upgrade%,rdForm!,0,status
    next syscnt

rem --- For version-neutral installs, copy files and update paths
    if version_neutral then

        rem --- Open addon.syn file, and temporary work file
        aonSynFile$=newAonLoc$+"/aon/config/addon.syn"
        aonSyn_dev=unt
        open(aonSyn_dev,isz=-1)aonSynFile$; rem --- Error if not found, something is wrong.
        tmpWorkFile$=newAonLoc$+"/aon/config/workfile.tmp"
        erase tmpWorkFile$, err=*next
        tmpWork_dev=unt
        open(tmpWork_dev,isz=-1,mode="O_CREATE,O_TRUNC")tmpWorkFile$

        rem --- Get current aon path from SYSDIR/DIR line
        currentAonDir$=newAonLoc$+"/"
        while 1
            read(aonSyn_dev,end=*break)record$
            
            rem --- process SYSDIR/DIR lines
            if(pos("DIR="=record$) = 1 or pos("SYSDIR="=record$) = 1) then
                xpos = pos("="=record$)
                currentAonDir$ = cvs(record$(xpos+1),3)
                break
            endif
        wend
        read(aonSyn_dev,ind=0,err=*next); rem --- reset to beginning of file

        rem --- Make HashMap of source and version-neutral directories
        sourceMap!=new java.util.HashMap()
        sourceMap!.put(currentAonDir$+"cust_images",base_dir$+"/cust_images")
        sourceMap!.put(currentAonDir$+"data",base_dir$+"/"+major_ver$+"/app_data")
        sourceMap!.put(currentAonDir$+"documents",base_dir$+"/documents")
        sourceMap!.put(currentAonDir$+"documents/archive",base_dir$+"/documents/archive")
        sourceMap!.put(currentAonDir$+"images",base_dir$+"/images")

        rem --- Wanted demo data files
        wantedDataFiles!= new HashSet(CopyAonDir.getRequiredFiles(requiredFiles%))
        
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_COPY_FILES_TO")+" "+Translate!.getTranslation("AON_VER_NEUTRAL_DIR")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Copy files to version-neutral directories
        sourceIter!=sourceMap!.keySet().iterator()
        while sourceIter!.hasNext()
            sourceDir$=sourceIter!.next()
            targetDir$=sourceMap!.get(sourceDir$)

            rem --- Make sure target directory exists
            mkdir targetDir$,err=*next
            
            rem --- Skip documents directory as it should start empty
            if targetDir$=base_dir$+"/documents" then continue
            if targetDir$=base_dir$+"/documents/archive" then continue

            rem --- Copy wanted files in source directory to target directory
            dir!=new File(sourceDir$)
            if dir! <> null() and dir!.exists() and dir!.isDirectory() and dir!.list() <> null()
                fileVector! = new java.util.Vector(java.util.Arrays.asList(dir!.listFiles()))
                
                if fileVector!<>null() and fileVector!.size()>0 then
                    for j=0 to fileVector!.size()-1
                        sourceFile!=fileVector!.get(j)
                        if sourceFile!.isDirectory() then continue

                        targetFile!=new File(targetDir$, sourceFile!.getName())
                        rem --- Do NOT overwrite existing target files
                        if targetFile!.exists() then continue

                        rem --- Filter demo data files
                        if targetDir$=base_dir$+"/"+major_ver$+"/app_data" then
                            if !wantedDataFiles!.contains(sourceFile!.getName()) then continue
                        endif
                        
                        rem --- Filter image files
                        if targetDir$=base_dir$+"/images" then
                            if sourceFile!.getName()<>"addon_logo32.png" then continue
                        endif
                        
                        rem --- Copy file to target directory
                        rem --- Can't use java.nio.files.Files::copy() method because of err 252 on Win machines when BBj has the source file open.
                        sourceModTime!=sourceFile!.lastModified()
                        sourceChan=unt
                        open(sourceChan,isz=-1)sourceFile!.getPath()
                        targetChan=unt
                        open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")targetFile!.getPath()
                        while 1
                            readrecord(sourceChan,siz=blocksize,end=*break)record$
                            writerecord(targetChan)record$
                        wend
                        close(sourceChan)
                        close(targetChan)
                        targetFile!.setLastModified(sourceModTime!)
                    next j
                endif
            endif
        wend

        rem --- Update addon.syn file with version-neutral paths

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATE_SYN")+" "+Translate!.getTranslation("AON_FOR_")+Translate!.getTranslation("AON_VER_NEUTRAL_DIR")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Update paths in addon.syn file
        while 1
            read(aonSyn_dev,end=*break)record$
            if cvs(record$,2)="" then continue

            rem --- Check for version-neutral paths
            sourceIter!=sourceMap!.keySet().iterator()
            while sourceIter!.hasNext()
                sourceDir$=sourceIter!.next()
                xpos=pos(sourceDir$=record$)
                if xpos=0 then continue
                print(log_dev)"  <<< "+record$
                
                rem --- Replace path with version-neutral path
                targetDir$=sourceMap!.get(sourceDir$)
                record$=record$(1,xpos-1)+targetDir$+record$(xpos+len(sourceDir$))
                print(log_dev)"  >>> "+record$
                print(log_dev)
                break
            wend

            write(tmpWork_dev)record$
        wend
        close(aonSyn_dev,err=*next)
        close(tmpWork_dev,err=*next)
        erase aonSynFile$, err=*next
        rename tmpWorkFile$ to aonSynFile$, err=*next
    endif

rem --- Launch auto-sync in new barista for the new addon.syn
rem --- Run auto-sync bax_dd_synch_auto.bbj program via bax_launch_task.bbj to bypass bar_login.bbj in the new barista

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_AUTO_SYNC")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Launch bax_dd_synch_auto.bbj in the new installation
	bar_dir$=newBarDir$
	if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
	run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:   +" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:   +" "+$22$+bar_dir$+"/sys/prog/bax_launch_task.bbj"+$22$

    for syscnt=0 to mountedSys!.size()-1
        user_arg$=" - "
:       +" -u"+rdAdmin!.getUser()
:       +" -p"+rdAdmin!.getPassword()
:       +" -t"+"DDM_TABLES"
:       +" -y"+"A"
:       +" -a" +"bax_dd_synch_auto.bbj"+$22$+" - "+" -f"+synFile!.getItem(syscnt)+" -b"+$22$
:       +" -w"
    scall_result=scall(run_arg$+user_arg$,err=*next)
    next syscnt

rem --- Setup new firm AFTER auto-sync so new firm's masks and sequences can be copied from firm ZZ
rem --- NOTE: newFirm$="" for Quick Copy installs

    if cvs(newFirm$,2)<>"" then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_SETUP_FIRM")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        formData!=callpoint!.getDevObject("formData"); rem --- Use formData! created in adx_firmsetup.aon
        for syscnt=0 to mountedSys!.size()-1
            mountSys$=mountedSys!.getItem(syscnt)
            if mountSys$(len(mountSys$)-3,4)="/aon"
                if version_neutral then
                    formData!.setProperty("DATA_LOCATION",base_dir$+"/"+major_ver$+"/app_data")
                else
                    formData!.setProperty("DATA_LOCATION",mountSys$+"/data")
                endif
                call pgmdir$+"adc_firmsetup.aon",formData!,newAonLoc$+"/aon",copyData%,rdForm!,0,status
            endif
        next syscnt
    endif

rem --- After the install, do a final commit to start with a clean repo that has all installation changes
    repoInterface!.commitAll(1,"Post install commit")

done: rem --- All done
    
    rem --- Stop progress meter
    meter_text$=""
    meter_proc_recs=meter_total_recs
    meter_action$="LST-END"
    gosub disp_meter
    print(log_dev)
    print(log_dev)"Installwiz log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Move log file to aon/logs directory
    logFile!=new File(log$)
    aonLogFile!=new File(newAonLoc$ + "/aon/logs"+logName$)
    logFile!.renameTo(aonLogFile!)
    logDir!=new File(logDir$)
    logDir!.delete()

    goto std_exit

update_addon_syn: rem --- Update new addon.syn file

    rem --- Get old aon path from SYSDIR/DIR line
    oldAonDir$=""
    synDev=unt, more=0
    open(synDev,isz=-1,err=*next)updateSynFile$; more=1
    while more
        read(synDev,end=*break)record$
        
        rem --- process SYSDIR/DIR lines
        if(pos("DIR="=record$) = 1 or pos("SYSDIR="=record$) = 1) then
            xpos = pos("="=record$)
            oldAonDir$ = cvs(record$(xpos+1),3)
            break
        endif
    wend
    close(synDev)
   
    rem --- Build stblMap HashMap of SYSSTBL/STBL data paths, keyed by STBL
    rem --- Build pfxList ArrayList of SYSPFX/PREFIX data paths
    filePath$=oldAonDir$
    gosub fix_path
    oldAonDir$=filePath$
    search$=oldAonDir$
    replace$=newAppDir$
    use java.util.HashMap
    declare HashMap stblMap!
    stblMap!=new HashMap()
    use java.util.ArrayList
    declare ArrayList pfxList!
    pfxList!=new ArrayList()
    synDev=unt, more=0
    open(synDev,isz=-1,err=*next)updateSynFile$; more=1
    while more
        read(synDev,end=*break)record$

        key$ = record$(1, pos("="=record$) - 1)
        switch (BBjAPI().TRUE)
            case key$ = "STBL"
            case key$ = "SYSSTBL"
                xpos=pos(" "=record$)
                stbl$=record$(xpos+1, pos("="=record$(xpos+1))-1)
                record$=cvs(record$(pos("="=record$,1,2)+1),3)
                aList!=new ArrayList()
                aList!.add(record$)
                if cvs(stbl$,3)="+MDI_TITLE" then
                    rem --- Set +MDI_TITLE to appDesc$
                    record$=appDesc$
                else
                    rem --- Do search and replace to update aon path
                    gosub search_replace
                endif
                aList!.add(record$)
                stblMap!.put(stbl$, aList!)
                break
            case key$ = "PREFIX"
            case key$ = "SYSPFX"
                record$=cvs(record$(pos("="=record$)+1),3)
                aList!=new ArrayList()
                aList!.add(record$)
                gosub search_replace
                aList!.add(record$)
                pfxList!.add(aList!)
                break
            case default
                rem --- other lines ... skip
                break
        swend
    wend
    close(synDev)

    call pgmdir$+"adc_updatesynfile.aon",updateSynFile$,oldSynFile$,upgrade%,stblMap!,pfxList!,rdForm!,0,status
    
    return

fix_path: rem --- Flip directory path separators

    pos=pos("\"=filePath$)
    while pos
        filePath$=filePath$(1, pos-1)+"/"+filePath$(pos+1)
        pos=pos("\"=filePath$)
    wend
    
    rem --- Remove trailing slash
    if filePath$(len(filePath$))="/" then filePath$=filePath$(1,len(filePath$)-1)
	return
    
search_replace: rem --- Search record$ for search$, and replace with replace$
	rem --- Assumes only one occurrence of search$ per line so don't have 
	rem --- to deal with situation where pos(search$=replace$)>0
	pos = pos(search$=record$)
	if(pos) then
		record$ = record$(1, pos - 1) + replace$ + record$(pos + len(search$))
	endif
    return
	
disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log:rem --- Open log file
            
    rem --- create logs directory at location
    logDir$ = FileObject.fixPath(base_dir$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    logName$="/installwiz_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".txt"
    log$ = logDir$+logName$
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
    
    rem --- write log header info
    print(log_dev)"Installwiz log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)
    ver_neut_structure$=iff(version_neutral,"Yes","No")
    print(log_dev)"Version-Neutral Directory Structure: " + ver_neut_structure$
    print(log_dev)"Installation Base Directory: " + base_dir$
    print(log_dev)"New Database Name: " + dbName$
    print(log_dev)"New Description: " + appDesc$
    print(log_dev)"New aon Location: " + newAonLoc$
    print(log_dev)"New Firm ID: " + newFirm$
    if copyData% then
        print(log_dev)"Quick Copy (includes demo data)"
    else
        if installType$="D" then
            print(log_dev)"Production With Default Data"
        else
            print(log_dev)"Production Without Data"
        endif
    endif
    if help% then
        print(log_dev)"Install Addon help file."
    else
        print(log_dev)"Do not install Addon help file."
    endif
    print(log_dev)

    return

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src
    
    end
