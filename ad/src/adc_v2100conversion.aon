rem --- Upgrade Conversion Utility For Version 21.00
rem --- Program adc_v2100conversion.aon

rem --- AddonSoftware Version 21.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


rem --- CONVCTRLFILECHAN : Channel number conversion control file data/adx_conversionCtrl is open on (Input)
rem --- CONVCTRL!        : Property object of the conversion control file data/adx_conversionCtrl (Input)
rem --- INSTALLMAP!      : HashMap object of installed modules, keyed by module ID (Input)
rem --- rdForm!          : Window object to hold progress meter
rem --- Translate!       : Translator object translations
rem --- CONV_STATUS      : Status code/0=No error (Returned)

    use java.io.File
    use java.util.HashMap
    use java.util.GregorianCalendar

    use ::ado_file.src::FileObject
    use ::ado_SyncRecords.aon::SyncRecords
    
    use ::sys/prog/bao_valid_card.bbj::CreditCard
	use ::sys/prog/bao_encryptor.bbj::Encryptor

    setesc std_error
    seterr std_error
    
    enter convCtrlFileChan,convCtrl!,installMap!,rdForm!,Translate!,conv_status

rem --- Initializations

    conv_status=1
    dir_syp$=stbl("+DIR_SYP")
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")

    Calendar! = new GregorianCalendar()

rem --- Set up Encryptor
    encryptor! = new Encryptor()
    config_id$ = "BANK_ACCT_AUTH"
    encryptor!.setConfiguration(config_id$)
    
rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log
    
rem --- Start progress meter

    meter_title$="adc_v2100conversion.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter

rem --- For version 21.00, encrypt bank account number in ADC_BANKACCTCODE
    this_module$="AD"
    if installMap!.get(this_module$)="Y" then
        task$="2100_AD_adc_bankacctcode"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="ADC_BANKACCTCODE",   open_opts$[1]="OTA"
    
            gosub open_tables
    
            adcBankAcctCode_dev=num(open_chans$[1])
            dim adcBankAcctCode$:open_tpls$[1]

            rem --- Encrypt the bank account number
            read(adcBankAcctCode_dev,key="",dom=*next)
            while 1
                readrecord(adcBankAcctCode_dev,end=*break)adcBankAcctCode$
                if cvs(adcBankAcctCode.bnk_acct_no$,3)<>"" and len(cvs(adcBankAcctCode.bnk_acct_no$,2))<=15
                    adcBankAcctCode.bnk_acct_no$=encryptor!.encryptData(cvs(adcBankAcctCode.bnk_acct_no$,3))
                    writerecord(adcBankAcctCode_dev)adcBankAcctCode$
                endif
            wend
            
            rem --- close files opened for this conversion
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="ADC_BANKACCTCODE",   open_opts$[1]="C"
    
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
                
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 21.00, encrypt bank account number in APM_VENDMAST (apm-01)
rem --- For version 21.00, initialize new paramaters in APS_PARAMS

    this_module$="AP"
    if installMap!.get(this_module$)="Y" then    
        task$="2100_AP_apm_vendmast"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:              Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Open File(s)
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="APM_VENDMAST",   open_opts$[1]="OTA"
    
            gosub open_tables
    
            apmVendMast_dev=num(open_chans$[1])
            dim apmVendMast$:open_tpls$[1]

            rem --- Encrypt the bank account number
            read(apmVendMast_dev,key="",dom=*next)
            while 1
                readrecord(apmVendMast_dev,end=*break)apmVendMast$
                if cvs(apmVendMast.bnk_acct_no$,3)<>"" and len(cvs(apmVendMast.bnk_acct_no$,2))<=15
                    apmVendMast.bnk_acct_no$=encryptor!.encryptData(cvs(apmVendMast.bnk_acct_no$,3))
                    writerecord(apmVendMast_dev)apmVendMast$
                endif
            wend

            rem --- close files opened for this conversion
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="APM_VENDMAST",   open_opts$[1]="C"
    
            gosub open_tables

            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif

        task$="2100_AP_aps_params"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:              Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Open File(s)
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="APS_PARAMS",   open_opts$[1]="OTA"
    
            gosub open_tables
    
            apsParams_dev=num(open_chans$[1])
            dim apsParams$:open_tpls$[1]

            rem --- Initialize new parameters
            read(apsParams_dev,key="",dom=*next)
            while 1
                readrecord(apsParams_dev,end=*break)apsParams$
                apsParams.prnt_aba_no$="N"
                apsParams.prnt_bnk_acct_no$="N"
                apsParams.scan_docs_to$="NOT"
                apsParams.warn_in_reg$="N"
                apsParams.ok_to_update$="N"
                apsParams.prnt_signature$="N"
                writerecord(apsParams_dev)apsParams$
            wend

            rem --- close files opened for this conversion
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="APS_PARAMS",   open_opts$[1]="C"
    
            gosub open_tables

            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 21.00, set default value for new AR dflt_age_by param to 'I'
    this_module$="AR"
    if installMap!.get(this_module$)="Y" then
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        task$="2100_AR_ars_params"
        if convCtrl!.getProperty(task$)<>"Completed" then
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_INITIALIZING","Initializing")+" ARS_PARAMS"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="ARS_PARAMS",   open_opts$[1]="OTA"
    
            gosub open_tables
    
            arsParams_dev=num(open_chans$[1])
            dim arsParams$:open_tpls$[1]

            rem --- Set the dflt_age_by param to 'I'
            rem --- Set age_per_days_? params to 30
            read(arsParams_dev,key="",dom=*next)
            while 1
                readrecord(arsParams_dev,end=*break)arsParams$
                arsParams.dflt_age_by$="I"
                arsParams.age_per_days_1=30
                arsParams.age_per_days_2=60
                arsParams.age_per_days_3=90
                arsParams.age_per_days_4=120
                writerecord(arsParams_dev)arsParams$
            wend
            
            rem --- close files opened for this conversion
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="ARS_PARAMS",   open_opts$[1]="C"
    
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
                
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 21.00, set new IVC_PRICCODE pricing_basis to 'P' (since Percent is what has always been used in the past)
    this_module$="IV"
    if installMap!.get(this_module$)="Y" then
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        task$="2100_IV_ivc_priccode"
        if convCtrl!.getProperty(task$)<>"Completed" then
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_INITIALIZING","Initializing")+" IVC_PRICCODE"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="IVC_PRICCODE",   open_opts$[1]="OTA"
    
            gosub open_tables
    
            ivcPriccode_dev=num(open_chans$[1])
            dim ivcPriccode$:open_tpls$[1]

            rem --- Set the pricing_basis to 'P'
            read(ivcPriccode_dev,key="",dom=*next)
            while 1
                readrecord(ivcPriccode_dev,end=*break)ivcPriccode$
                ivcPriccode.pricing_basis$="P"
                writerecord(ivcPriccode_dev)ivcPriccode$
            wend
            
            rem --- close files opened for this conversion
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="IVC_PRICCODE",   open_opts$[1]="C"
    
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
                
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif

        rem --- For version 21.00, initialize IVC_UMCODES with existing UNIT_MEASURE, UNIT_OF_SALE, PURCHASE_UM and UM_SOLD codes
        task$="2100_IV_ivc_umcodes"
        if convCtrl!.getProperty(task$)<>"Completed" then
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_INITIALIZING","Initializing")+" IVC_UMCODES"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Get existing UNIT_MEASURE, UNIT_OF_SALE, PURCHASE_UM and UM_SOLD codes to update IVC_UMCODES with
            umElementsTables! = new HashMap()
            
            umTbls!=BBjAPI().makeVector()
            umTbls!.addItem("BMM_BILLMAST")
            umTbls!.addItem("BMM_BILLMAT")
            umTbls!.addItem("BMM_BILLSUB")
            umTbls!.addItem("POE_PODET")
            umTbls!.addItem("POE_RECDET")
            umTbls!.addItem("POE_REQDET")
            umTbls!.addItem("POT_RECDET")
            umTbls!.addItem("SFE_WOMASTR")
            umTbls!.addItem("SFE_WOMATL")
            umTbls!.addItem("SFE_WOSUBCNT")
            umTbls!.addItem("SFT_CLSMATTR")
            umTbls!.addItem("SFT_OPNMATTR")
            umElementsTables!.put("UNIT_MEASURE",umTbls!)

            uosTbls!=BBjAPI().makeVector()
            uosTbls!.addItem("IVM_ITEMMAST")
            uosTbls!.addItem("IVS_DEFAULTS")
            umElementsTables!.put("UNIT_OF_SALE",uosTbls!)

            pumTbls!=BBjAPI().makeVector()
            pumTbls!.addItem("IVM_ITEMMAST")
            pumTbls!.addItem("IVS_DEFAULTS")
            umElementsTables!.put("PURCHASE_UM",pumTbls!)

            umsTbls!=BBjAPI().makeVector()
            umsTbls!.addItem("OPT_INVDET")
            umElementsTables!.put("UM_SOLD",umsTbls!)

            rem --- Populate IVC_UMCODES with existing UNIT_MEASURE, UNIT_OF_SALE, PURCHASE_UM and UM_SOLD codes
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="IVC_UMCODES",open_opts$[1]="OTA"
            gosub open_tables
            ivcUmCodes_dev=num(open_chans$[1]); dim ivcUmCodes$:open_tpls$[1]

            iter!=umElementsTables!.keySet().iterator()
            while iter!.hasNext()
                element$=iter!.next()
                srcTbl!=umElementsTables!.get(element$)

                for i=0 to srcTbl!.size()-1
                    rem --- Open source file
                    num_files=1
                    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                    open_tables$[1]=srcTbl!.getItem(i),open_opts$[1]="OTA"
                    gosub open_tables
                    srcTbl_dev=num(open_chans$[1]);dim srcTbl$:open_tpls$[1]
                
                    read(srcTbl_dev,key="",dom=*next)
                    while 1
                        readrecord(srcTbl_dev,end=*break)srcTbl$
                        uom$=field(srcTbl$,element$,err=*endif)
                        if cvs(uom$,2)<>"" then
                            redim ivcUmCodes$
                            ivcUmCodes.firm_id$=srcTbl.firm_id$
                            ivcUmCodes.unit_measure$=uom$
                            ivcUmCodes.description$=uom$
                            writerecord(ivcUmCodes_dev,dom=*next)ivcUmCodes$
                        endif
                    wend
            
                    rem --- Close 
                    num_files=1
                    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                    open_tables$[1]=srcTbl!.getItem(i),open_opts$[1]="C"
                    gosub open_tables
                next i
            wend
            
            rem --- Close 
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="IVC_UMCODES",open_opts$[1]="C"
            gosub open_tables

            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif
    
done: rem --- Done, close things up

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v2100conversion log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Close opened files
    if ddm_table_tpls then close(ddm_table_tpls,err=*next)

    if completed_successfully then conv_status=0; rem --- no errors encountered
	goto std_exit

get_path_to_old_file: rem --- Locate data directory in old Addon installation
    rem --- IN: oldStbl$ - STBL in old addon.syn that points to the data directory where the old file is located
    rem --- IN: oldFile$ - name of old file to get path for
    rem --- OUT: oldPathToFile$ - full path to requested file, including the file name
    oldPathToFile$=oldFile$

    rem --- Open old aon/config/addon.syn
    open_success=0
    old_addonsyn_dev=unt
    open(old_addonsyn_dev,isz=-1,err=*next)convCtrl!.getProperty("addon_source")+"/aon/config/addon.syn"; open_success=1
    if !open_success then return

    rem --- Get specified data directory from old addon.syn
    key$="=SET "+oldStbl$+"="
    while 1
        read(old_addonsyn_dev,end=*break)record$
        if(pos(key$=record$)) then
            xpos=pos(key$=record$)
            oldPathToFile$=record$(xpos+len(key$))+oldFile$
            break
        endif
    wend
    close(old_addonsyn_dev)

    return

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v2100conversion_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v2100conversion log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    exit

rem #endinclude std_exit.src

    end
