rem Document Output - Printer
rem Proprietary Software. AddonSoftware
rem Program ID: adx_doc_prt.aon  <Feb 27, 2007>

rem	if stbl("+USE_SETERR")="YES" seterr error_proc

	enter
:		rdSysGUI!,
:		rdOutGrid!,
:		rdOutVect!,
:		rdBrkVect!,
:		rdHdrVect!,
:		rd_doc_id$,
:		rd_doc_settings$,
:		rep_date$,
:		rep_date_stamp$,
:		rep_time$,
:		rep_time_stamp$,
:		rd_rep_headings$[all],
:		rd_rep_columns$[all],
:		rd_attr_def_col$[all],
:		rd_attr_col$[all],
:		rd_out_options$[all],
:		rd_opt_action$,
:		rd_out_status$

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp0)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp0)+rd_tmp0-1)/rd_tmp0)
	def fnstrip$(rd_tmp0$,rd_tmp1$)=rd_tmp0$(1,pos(fill(50,rd_tmp1$)=rd_tmp0$+fill(50,rd_tmp1$))-1)
	def fngetv_attr$(rd_att0$,rd_att1$)=rd_attr_col$[fnstr_pos(rd_att0$,rd_attr_col$[0,1],40),fnstr_pos(rd_att1$,rd_attr_def_col$[0,0],5)]
	def fngetc_attr$(rd_att0,rd_att0$)=rd_attr_col$[rd_att0,fnstr_pos(rd_att0$,rd_attr_def_col$[0,0],5)]

rem --- Directory STBLs

	rd_gui_dev$=stbl("+GUI_DEVICE")
	rd_dir_pgm$=stbl("+DIR_PGM")
	rd_dir_img$=stbl("+DIR_IMG")
	rd_dir_sys$=stbl("+DIR_SYS")
	rd_file_set$=stbl("+FILE_SET")

rem --- Constants

	rd_milestone=20
	rd_milestone=num(stbl("+MILESTONE",err=*next),err=*next)

	rdGroupSpace!=bbjAPI().getGroupNamespace()
	rd_task_id$=rd_doc_id$+"PRT"+str(dec(info(3,0)):"0000")

	if rd_doc_settings.doc_out_fixed$="Y"
		rd_text_font$="Courier New"
		rd_text_font$=stbl("+DOC_FONT_FIXED",err=*next)
		else
		rd_text_font$="Arial"
		rd_text_font$=stbl("+DOC_FONT_PROP",err=*next)
	endif

	rdFont!=rdOutGrid!.getCellFont(0,0)
	rdFont!=new java.awt.Font(rd_text_font$,java.awt.Font.PLAIN,num(rd_doc_settings.doc_font_size$))
	rdFontHdr!=new java.awt.Font(rd_text_font$,java.awt.Font.BOLD,num(rd_doc_settings.doc_font_size$))

	rd_font_adj=.75
	rd_curr_page=0
	rd_header_space=num(rd_doc_settings.doc_font_size$)+7
	rd_row_height=num(rd_doc_settings.doc_font_size$)+2
	rd_total_cols=len(rd_attr_col$[0,1])/40
	rd_total_rows=rdOutGrid!.getNumRows()

rem --- Get Array Sizes

	rd_dims_tpl$="dimen:i(1),d0elem:i(4),d0base:i(4),d1elem:i(4),d1base:i(4),d2elem:i(4),d2base:i(4)"

	dim rd_headings_array$:rd_dims_tpl$
	rd_headings_array$=dims(rd_rep_headings$[all])
	rd_rep_headings=rd_headings_array.d0elem

	rd_rep_replace=0
	for rd_curr_header=1 to rd_rep_headings
		if pos("[HEADER]"=rd_rep_headings$[rd_curr_header-1])<>0 rd_rep_replace=rd_curr_header
	next rd_curr_header

rem --- Retrieve sysinfo data

    rd_sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim rd_sysinfo$:rd_sysinfo_tpl$
    rd_sysinfo$=stbl("+SYSINFO",err=*next)
	rd_user_id$=rd_sysinfo.user_id$
	rd_proc_date$=date(jul(num(rd_sysinfo.system_date$(1,4)),num(rd_sysinfo.system_date$(5,2)),num(rd_sysinfo.system_date$(7,2))):stbl("+DATE_MASK"))

rem --- Main Process

	rdGroupSpace!.setValue("+process_task",rd_task_id$+"^C^"+rd_doc_id$+"-PRT"+"^CNC^"+str(rd_total_rows)+"^")
	gosub get_ini_settings
	if rdBrkVect!<>null() and rdBrkVect!.size()<>0 gosub row_vectors
	gosub batch_audit
	gosub def_headings
	gosub get_output_opts
	gosub get_print_width
	gosub setup_form

	rd_page_width=rdPage!.getPrintableAreaWidth()
	rd_page_height=rdPage!.getPrintableAreaHeight()
	rd_header_total=max(rd_doc_headings*rd_row_height,rd_rep_headings*rd_row_height)+rd_header_space
	rd_page_rows=int((rd_page_height-rd_header_total)/rd_row_height)-2
	rd_total_pages=int(.99+rd_total_rows/rd_page_rows)

	if pos("0000001"=rd_row_vector$,8)<>1 gosub setup_headers
	gosub print_data
	gosub wrap_up_form
	if rd_doc_archive$="Y" gosub doc_archive

	goto exit_prog

get_output_opts:rem --- Get Output Options

	rd_out_option=fnstr_pos("PRT",rd_out_options$[0,0],3)
	if rd_out_option=0 goto exit_prog
	rd_doc_path$=rd_out_options$[rd_out_option,2]
	rd_doc_archive$=rd_out_options$[rd_out_option,3]

	return

get_print_width:rem --- Get Width Of Printed Report

	rd_print_width=0
	for rd_curr_header=1 to rd_total_cols
		rd_print_width=rd_print_width+int(num(fngetc_attr$(rd_curr_header,"CTLW"))*rd_font_adj)
	next rd_curr_header

	return

setup_form:rem --- Setup Blank Form

	rdAttributes!=new javax.print.attribute.HashPrintRequestAttributeSet()

	rdLetter!=javax.print.attribute.standard.MediaSizeName.NA_LETTER
	rd_form_units=javax.print.attribute.standard.MediaPrintableArea.INCH
	rd_form_x!=new java.lang.Float(.25).floatValue()
	rd_form_y!=new java.lang.Float(.25).floatValue()
	rd_form_w!=new java.lang.Float(8.0).floatValue()
	rd_form_h!=new java.lang.Float(10.5).floatValue()
	rdPrintArea!=new javax.print.attribute.standard.MediaPrintableArea(rd_form_x!,rd_form_y!,rd_form_w!,rd_form_h!,rd_form_units)
	rdAttributes!.add(rdPrintArea!)

	if rd_print_width>576
		rdAttributes!.add(javax.print.attribute.standard.OrientationRequested.LANDSCAPE)
	endif

	rdPrinter!=BBjAPI().getBBjPrinter(0)
	rdPrinter!.setAttributes(rdAttributes!)

	rdDoc!=rdPrinter!.getForm(1,err=exit_prog)

	rdPage!=rdDoc!.createPage()
		rdPage!.setTopMargin(0)
		rdPage!.setBottomMargin(0)
		rdPage!.setLeftMargin(0)
		rdPage!.setRightMargin(0)

	return

print_data:rem --- Print Report Data

	for rd_curr_row=1 to rd_total_rows

		if fnstr_pos(str(rd_curr_row:"0000000"),rd_row_vector$,8)<>0 or mod(rd_curr_row,rd_page_rows)=0 gosub setup_headers

		rd_curr_line=rd_curr_line+1
		rd_col_pos=0

		for rd_curr_col=1 to rd_total_cols
			rd_temp_data$=rdOutVect!.getItem(((rd_curr_row-1)*rd_total_cols)+(rd_curr_col-1))
			rd_temp_dtyp$=fngetc_attr$(rd_curr_col,"DTYP")
			rd_temp_maxl=num(fngetc_attr$(rd_curr_col,"MAXL"))
			rd_temp_ctlw=int(num(fngetc_attr$(rd_curr_col,"CTLW"))*rd_font_adj)
			rd_temp_msko$=fngetc_attr$(rd_curr_col,"MSKO")

			rdColPar!=rdPage!.newParagraph(rd_col_pos,rd_header_top+(rd_curr_line*rd_row_height),rd_temp_ctlw,rd_row_height)

			if rd_temp_dtyp$="N"
				rdColPar!.setHorizontalAlignment(rdColPar!.RIGHT_JUSTIFIED)
				if cvs(rd_temp_data$,2)<>"" and rd_temp_msko$<>"" rd_temp_data$=str(num(rd_temp_data$,err=*next):rd_temp_msko$,err=*next)
			endif

			if rd_temp_dtyp$="C"
				if rd_temp_maxl=1
					rdColPar!.setHorizontalAlignment(rdColPar!.CENTER_JUSTIFIED)
					else
					rdColPar!.setHorizontalAlignment(rdColPar!.LEFT_JUSTIFIED)
				endif
				if cvs(rd_temp_data$,2)<>"" and rd_temp_msko$<>"" rd_temp_data$=str(rd_temp_data$:rd_temp_msko$,err=*next)
			endif

			rdColPar!.setText(rd_temp_data$)
			rdColPar!.setFont(rdFont!)
			rdPage!.add(rdColPar!)

			rd_col_pos=rd_col_pos+rd_temp_ctlw

		next rd_curr_col

		if mod(rd_curr_row,rd_milestone)=0 rdGroupSpace!.setValue("+process_task",rd_task_id$+"^U^"+str(rd_curr_row)+"^")

	next rd_curr_row

	return

setup_headers:rem --- Document Headings

	if rd_curr_page>0
		rdPage!=rdDoc!.createPage()
		rdPage!.setTopMargin(0)
		rdPage!.setBottomMargin(0)
		rdPage!.setLeftMargin(0)
		rdPage!.setRightMargin(0)
	endif
	rd_curr_page=rd_curr_page+1
	rd_curr_line=0

	if rdBrkVect!=null()
		gosub add_tokens
		rd_doc_headings$[3]=rd_page_text$
	endif

	for rd_curr_header=1 to rd_doc_headings
		rdDocHdr!=rdPage!.newParagraph(rd_page_width-170,(rd_curr_header-1)*rd_row_height,170,rd_row_height)
		rdDocHdr!.setHorizontalAlignment(rdDocHdr!.RIGHT_JUSTIFIED)
		rdDocHdr!.setText(rd_doc_headings$[rd_curr_header-1])
		rdDocHdr!.setFont(rdFont!)
		rdPage!.add(rdDocHdr!)
	next rd_curr_header

	rd_header_top=rd_doc_headings*rd_row_height

rem --- Report Headings	

	if rd_rep_replace<>0
		rd_vector_id=fnstr_pos(str(rd_curr_row:"0000000"),rd_row_vector$,8)
		if rd_vector_id<>0 rd_rep_headings$[rd_rep_replace-1]=rdHdrVect!.getItem(rd_vector_id-1)
	endif

	for rd_curr_header=1 to rd_rep_headings
		rdRepHdr!=rdPage!.newParagraph(0,(rd_curr_header-1)*rd_row_height,400,rd_row_height)
		rd_temp_heading$=rd_rep_headings$[rd_curr_header-1]
		if pos(">>"=rd_temp_heading$)<>0 gosub parse_heading
		rdRepHdr!.setText(rd_temp_heading$)
		rdRepHdr!.setFont(rdFont!)
		rdPage!.add(rdRepHdr!)
	next rd_curr_header

	rd_header_top=max(rd_header_top,rd_rep_headings*rd_row_height)

rem --- Column Headings

	rd_col_pos=0

	for rd_curr_header=1 to rd_total_cols
		rd_temp_labs$=fngetc_attr$(rd_curr_header,"LABS")
		rd_temp_dtyp$=fngetc_attr$(rd_curr_header,"DTYP")
		rd_temp_maxl=num(fngetc_attr$(rd_curr_header,"MAXL"))
		rd_temp_ctlw=int(num(fngetc_attr$(rd_curr_header,"CTLW"))*rd_font_adj)

		rdColHdr!=rdPage!.newParagraph(rd_col_pos,rd_header_top+rd_row_height,rd_temp_ctlw,rd_row_height)
		
		if rd_temp_dtyp$="N" rdColHdr!.setHorizontalAlignment(rdColHdr!.RIGHT_JUSTIFIED)
		if rd_temp_dtyp$="C"
			if rd_temp_maxl=1
				rdColHdr!.setHorizontalAlignment(rdColHdr!.CENTER_JUSTIFIED)
				else
				rdColHdr!.setHorizontalAlignment(rdColHdr!.LEFT_JUSTIFIED)
			endif
		endif

		rdColHdr!.setText(rd_temp_labs$)
		rdColHdr!.setFont(rdFontHdr!)
		rdPage!.add(rdColHdr!)

		rd_col_pos=rd_col_pos+rd_temp_ctlw

	next rd_curr_header

	rd_header_top=rd_header_top+rd_header_space

	return

wrap_up_form:rem --- Wrap Up Form Printing

	rdDoc!.print()

	return

parse_heading:rem --- Parse Heading and Get Message

	rd_temp_msg_opt$="<<TEXT>>"
	rd_temp_msg_id$=rd_temp_heading$(1,pos(">>"=rd_temp_heading$)-1)
	dim rd_temp_tokens$[1]
		rd_temp_tokens$[1]=rd_temp_heading$(pos(">>"=rd_temp_heading$)+2)

	call rd_dir_pgm$+"adc_message.aon",rd_temp_msg_id$,rd_temp_tokens$[all],rd_temp_msg_opt$,rd_table_chans$[all]
	rd_temp_heading$=rd_temp_msg_opt$

	return

doc_archive:rem --- Send To Document Archive

	rd_doc_source$="I"
	rd_doc_ext$="PRT"
	rd_archive_action$=rd_out_status$

	call rd_dir_pgm$+"adc_documents.aon",
:		rd_doc_id$,
:		rep_date_stamp$,
:		rep_time_stamp$,
:		rd_doc_source$,
:		rd_doc_ext$,
:		rd_doc_path$,
:		rd_table_chans$[all],
:		rd_archive_action$

	return

row_vectors:rem --- Assemble Row Vectors & Headings

	rd_row_vector$=""

	for rd_curr_row_vector=1 to rdBrkVect!.size()
		rd_row_vector$=rd_row_vector$+str(num(rdBrkVect!.getItem(rd_curr_row_vector-1))+1:"0000000")+"-"
	next rd_curr_row_vector

	return

batch_audit:rem --- Get Batch & Audit Data

	rd_process$=pad(stbl("+PROCESS",err=*next),15)
	if cvs(rd_process$,2)<>"" rd_process_hdr$=rd_output_batch$+" "+str(num(rd_process$(13,3)):"000")

	rd_audit$=""
	rd_glcontrol_tpl$=stbl("+GLCONTROL_TPL",err=*return)
	dim rd_glcontrol$:rd_glcontrol_tpl$
	rd_glcontrol$=stbl("+GLCONTROL",err=*return)
	rd_audit$=cvs(rd_glcontrol.gl_adt_no$,2)
	if rd_audit$<>"" rd_audit_hdr$=rd_output_audit$+" "+rd_audit$

	return

def_headings:rem --- Define Report Headings

	rd_doc_headings=3

	dim rd_doc_headings$[10]

		rd_doc_headings$[0]=rd_output_doc$+" "+rd_doc_id$
		rd_doc_headings$[1]=rd_output_date$+" "+rep_date$+" "+rep_time$
		rd_doc_headings$[2]=rd_output_asof$+" "+rd_proc_date$

		if rd_process_hdr$<>""
			rd_doc_headings=rd_doc_headings+1
			rd_doc_headings$[rd_doc_headings-1]=rd_process_hdr$
		endif

		if rd_audit_hdr$<>""
			rd_doc_headings=rd_doc_headings+1
			rd_doc_headings$[rd_doc_headings-1]=rd_audit_hdr$
		endif

		if rdBrkVect!=null()
			gosub add_tokens
			rd_doc_headings=rd_doc_headings+1
			rd_doc_headings$[rd_doc_headings-1]=rd_page_text$
		endif

	return

add_tokens:rem --- Add Tokens Into Message String

	rd_page_text$=rd_output_page$
	dim rd_page_tokens$[2]
		rd_page_tokens$[1]=str(rd_curr_page)
		rd_page_tokens$[2]=str(rd_total_pages)

	while pos("%"=rd_page_text$)<>0
		rd_temp_pos=pos("%"=rd_page_text$)
		rd_temp_len=len(rd_page_text$)
		rd_temp_char=rd_temp_pos+1
		while rd_temp_char<=rd_temp_len and pos(rd_page_text$(rd_temp_char,1)="0123456789")
			rd_temp_char=rd_temp_char+1
		wend
		rd_valid_char=rd_temp_char-1
		rd_replace_no=num(rd_page_text$(rd_temp_pos+1,rd_valid_char-rd_temp_pos))

		switch rd_valid_char
			case len(rd_page_text$)
				rd_page_text$=rd_page_text$(1,rd_temp_pos-1)+rd_page_tokens$[rd_replace_no]
			break
			case default
				rd_page_text$=rd_page_text$(1,rd_temp_pos-1)+rd_page_tokens$[rd_replace_no]+rd_page_text$(rd_valid_char+1)
			break
		swend

	wend

	return

get_ini_settings:rem --- Create Attribute Description String

	rd_attr_desc$=
:		"DEBUG_MODE          "+
:		"OUTPUT_DOC          "+
:		"OUTPUT_DATE         "+
:		"OUTPUT_ASOF         "+
:		"OUTPUT_PAGE         "+
:		"OUTPUT_BATCH        "+
:		"OUTPUT_AUDIT        "

	dim rd_set_data$[len(rd_attr_desc$)/20]
		rd_set_data$[0]=rd_attr_desc$

	call rd_dir_pgm$+"rdm_config.aon",rd_file_set$,"INI","READ",rd_set_data$[all]

	rd_debug_mode$=rd_set_data$[fnstr_pos("DEBUG_MODE",rd_set_data$[0],20)]
	rd_output_doc$=rd_set_data$[fnstr_pos("OUTPUT_DOC",rd_set_data$[0],20)]
	rd_output_date$=rd_set_data$[fnstr_pos("OUTPUT_DATE",rd_set_data$[0],20)]
	rd_output_asof$=rd_set_data$[fnstr_pos("OUTPUT_ASOF",rd_set_data$[0],20)]
	rd_output_page$=rd_set_data$[fnstr_pos("OUTPUT_PAGE",rd_set_data$[0],20)]
	rd_output_batch$=rd_set_data$[fnstr_pos("OUTPUT_BATCH",rd_set_data$[0],20)]
	rd_output_audit$=rd_set_data$[fnstr_pos("OUTPUT_AUDIT",rd_set_data$[0],20)]

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))

	call stbl("+DIR_PGM")+"adc_error.aon",pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	rdGroupSpace!.setValue("+process_task",rd_task_id$+"^D^")

	exit

