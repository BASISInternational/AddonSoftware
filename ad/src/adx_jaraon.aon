rem ==========================================================================
rem --- adx_jaraon.aon 
rem --- Utility to package (jar) complete specified Barista installation, including
rem --- all installed Barista applications and their child applications.
rem --- 
rem --- AddonSoftware Version 19.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use java.io.File
    use java.util.Properties
    use java.util.Vector

    use ::ado_util.src::util    

    setesc std_error
    seterr std_error

rem --- Initializations
    copyPath!=new Vector()
    firmsVect!=new Vector()
    prefixVect!=new Vector()
    sourcePaths!=new Properties()
    stblPaths!=new Properties()
    stblValues!=new Properties()
    sysGUI! = BBjAPI().getSysGui()
    systems!=new Properties()
    savedDir$=dir("")
    skipped=0

rem --- Get user inputs
    baseDir$=Option!.getOptionData("BASE_DIR")
    barDir$=Option!.getOptionData("BAR_DIR")
    jarFile$=Option!.getOptionData("JAR_FILE")
    baseDirLen=len(baseDir$)

rem --- Open DDM_TABLE_TPLS in source Barista installation
    ddmTableTpls_dev=unt
    open(ddmTableTpls_dev)barDir$+"/sys/data/ddm_table_tpls.dat"; rem --- Error if not found, something is wrong.
    dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"

rem --- Open DDM_TABLES in source Barista installation
    ddmTables_dev=unt
    open(ddmTables_dev)barDir$+"/sys/data/ddm_tables.dat"; rem --- Error if not found, something is wrong.
    findrecord(ddmTableTpls_dev,key=pad("DDM_TABLES",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
    dim ddmTables$:ddm_table_tpls.template$

rem --- Open DDM_TABLE_COLS in source Barista installation
    ddmTableCols_dev=unt
    open(ddmTableCols_dev)barDir$+"/sys/data/ddm_table_cols.dat"; rem --- Error if not found, something is wrong.
    findrecord(ddmTableTpls_dev,key=pad("DDM_TABLE_COLS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
    dim ddmTableCols$:ddm_table_tpls.template$

rem --- Open DDM_SYSTEMS in source Barista installation
    ddmSystems_dev=unt
    open(ddmSystems_dev)barDir$+"/sys/data/ddm_systems.dat"; rem --- Error if not found, something is wrong.
    findrecord(ddmTableTpls_dev,key=pad("DDM_SYSTEMS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
    dim ddmSystems$:ddm_table_tpls.template$

rem --- Get Mounted Directory for system (application) installed in source Barista
    read(ddmSystems_dev,key="",dom=*next)
    while 1
        readrecord(ddmSystems_dev,end=*break)ddmSystems$
        systems!.setProperty(cvs(ddmSystems.mount_sys_id$,2),cvs(ddmSystems.mount_dir$,2))
    wend

rem --- Open ADM_FIRMS in source Barista installation, and initialize firmsVect! vector
    adm_firms_dev=unt
    open(adm_firms_dev)barDir$+"/sys/data/adm_firms.dat"; rem --- Error if not found, something is wrong.
    findrecord(ddmTableTpls_dev,key=pad("ADM_FIRMS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
    dim adm_firms$:ddm_table_tpls.template$
    
    read(adm_firms_dev,key="",dom=*next)
    while 1
        readrecord(adm_firms_dev,end=*break)adm_firms$
        firmsVect!.add(adm_firms.company_id$)
    wend
    close(adm_firms_dev,err=*next)

rem --- Initialize stblValues! with Barista STBLs
    stblValues!.setProperty("+DIR_BRA",barDir$+"/sys/data/")
    stblValues!.setProperty("+DIR_BRD",barDir$+"/sys/data/")
    stblValues!.setProperty("+DIR_SYP",barDir$+"/sys/prog/")
    stblValues!.setProperty("+DIR_SYR",barDir$+"/sys/prop/")
    
rem --- Start main progress meter
    meter_title$=rdForm!.getTitle()
    meter_total_recs=2*systems!.size()+2
    meter_text$=""
    meter_action$="WIN-LST-OK"
    gosub disp_meter
    mainMeter!=meterWin!
    mainMeterProcRecs=meter_proc_recs
    mainMeterTotalRecs=meter_total_recs

rem --- Open log file
    location$ = baseDir$
    gosub open_log

rem --- Build sourcePaths! Properties object of directories and files used by each system (application) installed in source Barista
    systemsIter!=systems!.keySet().iterator()
    while systemsIter!.hasNext()
        system$=systemsIter!.next()
        mount_path$=systems!.getProperty(system$)
        mountDir!=new java.io.File(mount_path$)
        mount_dir$=mountDir!.getCanonicalPath()
        if pos(baseDir$=canonicalPath$)=1 then
            rem --- Good path
            sourcePaths!.setProperty(mount_path$,mount_dir$)
        endif

        rem --- Increment main progress meter
        meterWin!=mainMeter!
        meter_total_recs=mainMeterTotalRecs
        mainMeterProcRecs=mainMeterProcRecs+1
        meter_text$=system$+": verify paths in syn file"
        meter_proc_recs=mainMeterProcRecs
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)
        print(log_dev)meter_text$

        rem --- Get STBLs in system (application) syn file
        lines=0
        appSyn_dev=unt
        open(appSyn_dev,isz=-1)mount_dir$+"/config/"+cvs(system$,8)+".syn"; rem --- Error if not found, something is wrong.
        while 1
            read(appSyn_dev,end=*break)record$
            lines=lines+1

            key$ = record$(1, pos("="=record$) - 1)
            switch (BBjAPI().TRUE)
                case key$ = "STBL"
                case key$ = "SYSSTBL"
                    xpos = pos(" "=record$)
                    ypos = pos("="=record$,1,2)
                    stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    path$ = cvs(record$(ypos+1),3)
                    stblValues!.setProperty(stbl$,path$)
                    break
                case default
                    rem --- skip other lines
                    break
            swend
        wend
        close(appSyn_dev,err=*next)
        
        rem --- Start secondary progress meter
        meter_title$=mount_dir$+"/config/"+cvs(system$,8)+".syn"
        meter_total_recs=lines
        meter_proc_recs=0
        meter_text$=""
        meter_action$="WIN-LST"
        gosub disp_meter
        detailMeter!=meterWin!

        rem --- Verify paths in system (application) syn file
        appSyn_dev=unt
        open(appSyn_dev,isz=-1)mount_dir$+"/config/"+cvs(system$,8)+".syn"; rem --- Error if not found, something is wrong.
        while 1
            read(appSyn_dev,end=*break)record$

            meter_text$=""
            key$ = record$(1, pos("="=record$) - 1)
            switch (BBjAPI().TRUE)
                case key$ = "DIR"
                case key$ = "SYSDIR"
                    xpos = pos("="=record$)
                    path$ = cvs(record$(xpos+1),3)
                    gosub verify_path
                    meter_text$=key$
                    if skip_path then
                        meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                    endif
                    stblPaths!.setProperty(key$,canonicalPath$)
                    break
                case key$ = "APROD"
                case key$ = "SYSAPP"
                    xpos = pos("="=record$)
                    ypos = pos(";"=record$)
                    app$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    xpos = pos(";"=record$,1,5)
                    ypos = pos(";"=record$,1,6)
                    path$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    gosub verify_path
                    meter_text$=key$+": "+app$
                    if skip_path then
                        meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                    endif
                    break
                case key$ = "STBL"
                case key$ = "SYSSTBL"
                    xpos = pos(" "=record$)
                    ypos = pos("="=record$,1,2)
                    stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    path$ = cvs(record$(ypos+1),3)
                    rem --- Sanity check if this looks like a path
                    if ((pos("/"=path$) or pos("\"=path$)) and (pos("http:"=path$)=0 and pos("https:"=path$)=0)) or
:                   ((pos("["=path$) and pos("]"=path$))) then
                        gosub verify_path
                        meter_text$=key$+": "+stbl$
                        if skip_path then
                            if stbl$="+DIR_INV_IMAGES" then
                                skipped=skipped-1
                            else
                                meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                            endif
                        endif
                        stblPaths!.setProperty(stbl$,canonicalPath$)
                    endif
                    break
                case key$ = "PREFIX"
                case key$ = "SYSPFX"
                    rem --- replace SYSPFX/PREFIX path with new path
                    xpos = pos("="=record$)
                    path$ = cvs(record$(xpos+1),3)
                    gosub verify_path
                    meter_text$=key$+" "+path$
                    if skip_path then
                        meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                    endif
                    prefixVect!.add(path$)
                    break
                case key$ = "CFG"
                case key$ = "SYSCFG"
                    rem --- replace SYSCFG/CFG path with new path for corresponding STBL
                    xpos = pos("="=record$)
                    ypos = pos("="=record$,1,2)
                    stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    path$ = cvs(record$(ypos+1),3)
                    gosub verify_path
                    meter_text$=key$+": "+stbl$
                    if skip_path then
                        meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                    endif
                    break
                case default
                    rem --- skip other lines
                    break
            swend

            rem --- Increment secondary progress meter
            if meter_text$<>"" then
                meterWin!=detailMeter!
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)"    "+meter_text$
            endif
        wend
        close(appSyn_dev,err=*next)

        rem --- Stop secondary progress meter
        meterWin!=detailMeter!
        meter_text$=""
        meter_proc_recs=meter_total_recs
        meter_action$="LST-END"
        gosub disp_meter

        rem --- Verify paths in system (application) adm_modules~*.xml files
        pathsToAdmModules!=new Vector()
        pathsToAdmModules!.add("data/sync")
        pathsToAdmModules!.add("data/admin_backup")
        for i=0 to pathsToAdmModules!.size()-1
            admModulePath$=pathsToAdmModules!.get(i)

            rem --- Increment main progress meter
            meterWin!=mainMeter!
            meter_total_recs=mainMeterTotalRecs
            mainMeterProcRecs=mainMeterProcRecs+1
            meter_text$=system$+": verify paths in "+admModulePath$+"/adm_modules~*.xml files"
            meter_proc_recs=mainMeterProcRecs
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Verify paths in adm_modules~*.xml files
            dir!=new File(mount_dir$ + File.separator + admModulePath$)
            rem --- Validate directory
            if dir! <> null() and dir!.exists() and dir!.isDirectory() and dir!.list() <> null()
                fileVector! = new Vector(java.util.Arrays.asList(dir!.list(new AdmModulesFilter())))
                
                if(fileVector!.size()>0) then
                    rem --- Start secondary progress meter
                    meter_title$=system$+" adm_modules~*.xml files"
                    meter_total_recs=14*2
                    meter_proc_recs=0
                    meter_text$=""
                    meter_action$="WIN-LST"
                    gosub disp_meter
                    detailMeter!=meterWin!

                    rem --- Verify paths in LOCALE_PATH and DD_MOUNT_DIR tags
                    startLocalePath$ = "<LOCALE_PATH>"
                    startLocalePathLen = len(startLocalePath$)
                    endLocalePath$ = "</LOCALE_PATH>"
                    startDdMountDir$ = "<DD_MOUNT_DIR>"
                    startDdMountDirLen = len(startDdMountDir$)
                    endDdMountDir$ = "</DD_MOUNT_DIR>"
                    
                    for j=0 to fileVector!.size()-1
                        admModuleFile$=fileVector!.get(j)
                        admModule_dev=unt
                        open(admModule_dev,isz=-1)dir!.getCanonicalPath()+File.separator+admModuleFile$; rem --- Error if not found, something is wrong.
                        while 1
                            read(admModule_dev,end=*break)record$
                            meter_text$=""
                        
                            rem --- Verify path in <LOCALE_PATH> lines
                            startLocalePath = pos(startLocalePath$=cvs(record$,4))
                            if startLocalePath then
                                path$ = record$(startLocalePath + startLocalePathLen)
                                path$ = path$(1,pos(endLocalePath$=cvs(path$,4))-1)
                                gosub verify_path
                                meter_text$=admModuleFile$+": "+startLocalePath$
                                if skip_path then
                                    meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                                endif
                            endif
                            
                            rem --- Verify path in <DD_MOUNT_DIR> lines
                            startDdMountDir = pos(startDdMountDir$=cvs(record$,4))
                            if startDdMountDir then
                                path$ = record$(startDdMountDir + startDdMountDirLen)
                                path$ = path$(1,pos(endDdMountDir$=cvs(path$,4))-1)
                                gosub verify_path
                                meter_text$=admModuleFile$+": "+startDdMountDir$
                                if skip_path then
                                    meter_text$="***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "+meter_text$
                                endif
                            endif

                            rem --- Increment secondary progress meter
                            if meter_text$<>"" then
                                meterWin!=detailMeter!
                                meter_proc_recs=meter_proc_recs+1
                                meter_action$="MTR-LST"
                                gosub disp_meter
                                print(log_dev)"    "+meter_text$
                            endif
                        wend
                        close(admModule_dev,err=*next)
                    next j

                    rem --- Stop secondary progress meter
                    meterWin!=detailMeter!
                    meter_text$=""
                    meter_proc_recs=meter_total_recs
                    meter_action$="LST-END"
                    gosub disp_meter
                endif
            endif
        next i
    wend

rem --- Verify paths referenced in data files and add to sourcePaths! Properties object

    rem --- Increment main progress meter
    meterWin!=mainMeter!
    meter_total_recs=mainMeterTotalRecs
    mainMeterProcRecs=mainMeterProcRecs+1
    meter_text$="Verify paths referenced in data files"
    meter_proc_recs=mainMeterProcRecs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

    rem --- Check these Element Types for directory and file paths
    elementTypes!=new Vector()
    elementTypes!.add("ADM_CONFIG_FILE")
    elementTypes!.add("DATA_PATH")
    elementTypes!.add("DD_MOUNT_DIR")
    elementTypes!.add("DD_MOUNT_MENU")
    elementTypes!.add("DD_TABLE_PATH")
    elementTypes!.add("DIR_BROWSE")
    elementTypes!.add("DOC_PATH")
    elementTypes!.add("EMAIL_FILES")
    elementTypes!.add("GENERIC_FILE_80")
    elementTypes!.add("IMAGE_PATH")
    elementTypes!.add("LOCALE_PATH")
    elementTypes!.add("LOGO_FILE")
    elementTypes!.add("PROGRAM_PATH")
        
    rem --- Start secondary progress meter
    meter_title$="Verify Element Type data paths"
    meter_total_recs=elementTypes!.size()
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter
    detailMeter!=meterWin!

    rem --- Check tables using Element Type, and verify paths
    for i=0 to elementTypes!.size()-1
        elementType$=elementTypes!.get(i)

        rem --- Increment secondary progress meter
        meter_text$=elementType$
        meterWin!=detailMeter!
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)"    "+elementType$

        rem --- Search tables using this Element Type
        read(ddmTableCols_dev,key=elementType$,knum="COLUMN_ID",dom=*next)
        while 1
            readrecord(ddmTableCols_dev,end=*break)ddmTableCols$
            if cvs(ddmTableCols.dd_data_name$,2)<>elementType$ then break

            rem --- Get disk file name for this table
            findrecord(ddmTables_dev,key=ddmTableCols.dd_table_alias$,dom=*continue)ddmTables$
            if pos(ddmTables.dd_alias_type$="OPQRT") then continue; rem --- Skip if not a BBj data file
            if cvs(ddmTables.dd_table_alias$,2)="ADS_AUTOLAUNCH" and cvs(ddmTableCols.dd_dvar_name$,2)="PROGRAM_ARGS" then continue; rem --- Does not hold paths
            filename$=cvs(ddmTables.dd_file_name$,2)
            if filename$="" then filename$=cvs(ddmTables.dd_table_alias$,10)

            rem --- Log table.column being verified for this Element Type
            print(log_dev)"    "+"    "+cvs(ddmTables.dd_table_alias$,2)+"."+ddmTableCols.dd_dvar_name$

            rem --- Get path to this file in source installation
            if pos(ddmTables.asc_prod_id$="ADBDDBSQB",3) then
                rem --- It is a Barista system file
                filePath$=barDir$+"/sys/data"
            else
                rem --- It is an installed application's file
                filePath$=ddmTables.dd_table_path$
                if cvs(filePath$,2)="" then filePath$=barDir$+"/sys/data"

                rem --- Resolve embedded STBLs, except not [+FIRM_ID].
                pathName$=filePath$
                gosub resolvePathStbls
                filePath$=resolvedPath$
            endif
            filePath!=new java.io.File(filePath$)
            filePath$=filePath!.getCanonicalPath()

            rem --- If path includes [+FIRM_ID], then replace with actual COMPANY_IDs
            for j=0 to firmsVect!.size()-1
                thisPath$=filePath$
                xpos=pos("[+FIRM_ID]"=thisPath$)
                if xpos then
                    thisPath$=thisPath$(1,xpos-1)+firmsVect!.get(j)+thisPath$(xpos+10)
                endif
            
                rem --- Open file and verify paths for this Element Type
                table_dev=unt
                open(table_dev,err=*continue)thisPath$+File.separator+filename$; rem --- If error, assume file not created yet.
                findrecord(ddmTableTpls_dev,key=pad(ddmTables.dd_table_alias$,16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
                dim table$:ddm_table_tpls.template$
                read(table_dev,key="",dom=*next)
                while 1
                    key$=key(table_dev,end=*break)
                    readrecord(table_dev)table$
                    path$ = field(table$,cvs(ddmTableCols.dd_dvar_name$,2))
                    if cvs(path$,2)="" continue
                
                    rem --- Resolve STBLs embedded in path
                    pathName$=path$
                    gosub resolvePathStbls
                    path$=resolvedPath$
                
                    if pos("/"=path$)+pos("\"=path$)=0 then
                        rem --- Filename only. Look for it under the Prefix paths
                        if prefixVect!.size() then
                            found_it=0
                            for j=0 to prefixVect!.size()-1
                                prefixDir$=prefixVect!.get(j)
                                prefixDir!=new File(prefixDir$)
                                fileList!=new Vector(java.util.Arrays.asList(prefixDir!.listFiles()))
                                if fileList!<>null() and fileList!.size()>0 then
                                    for k=0 to fileList!.size()-1
                                        nextFile!=fileList!.get(k)
                                        tempFile!=nextFile!.getCanonicalPath()
                                        if tempFile!.endsWith(File.separator+path$)
                                            path$=tempFile!
                                            found_it=1
                                            break
                                        endif
                                    next k
                                endif
                                if found_it then break
                            next j
                        endif
                    else
                    if cvs(ddmTables.dd_table_alias$,2)="ADM_MODULES" and 
:                       (cvs(ddmTableCols.dd_dvar_name$,2)="DD_MOUNT_DIR" or cvs(ddmTableCols.dd_dvar_name$,2)="LOCALE_PATH") and 
:                       (pos("sys/"=path$)=1 or pos("./sys/"=path$)=1) then
                            path$=barDir$+"/sys/"
                        endif
                    endif
            
                    gosub verify_path
                    if skip_path then
                        print(log_dev)"    "+"    "+"    "+"***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "
                        print(log_dev)"    "+"    "+"    "+"    "+"key="+key$
                        print(log_dev)"    "+"    "+"    "+"    "+"path="+path$
                    endif
                wend
                close(table_dev,err=*next)
                                
                if pos("[+FIRM_ID]"=filePath$)=0 then break
            next j
        wend
    next i

    rem --- Stop secondary progress meter
    meterWin!=detailMeter!
    meter_text$=""
    meter_proc_recs=meter_total_recs
    meter_action$="LST-END"
    gosub disp_meter

rem --- Verify paths in barista.syn file
        
    rem --- Increment main progress meter
    meterWin!=mainMeter!
    meter_total_recs=mainMeterTotalRecs
    mainMeterProcRecs=mainMeterProcRecs+1
    meter_text$="Verify paths in barista.syn file"
    meter_proc_recs=mainMeterProcRecs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

    barSyn_found=0
    barSyn_dev=unt
    open(barSyn_dev,isz=-1,err=*next)barDir$+"/sys/config/barista.syn"; barSyn_found=1
    if barSyn_found then
        while 1
            read(barSyn_dev,end=*break)record$
    
            key$ = record$(1, pos("="=record$) - 1)
            switch (BBjAPI().TRUE)
                case key$ = "SYN"
                    xpos = pos("="=record$)
                    path$ = cvs(record$(xpos+1),3)
                    gosub verify_path
                    meter_text$=path$
                    if skip_path then
                        print(log_dev)"    "+"***"+Translate!.getTranslation("AON_SKIP","SKIP")+"*** "
                        print(log_dev)"    "+"    "+key$+": "+path$
                    else
                        print(log_dev)"    "+key$+": "+path$
                    endif
                    break
                case default
                    rem --- skip other lines
                    break
            swend
        wend
        close(barSyn_dev,err=*next)
    endif

rem --- Log canonical paths of key paths in sourcePaths!
    print(log_dev)
    pathIter!=sourcePaths!.keySet().iterator()
    while pathIter!.hasNext()
        keyPath$=pathIter!.next()
        keyPath!=new java.io.File(keyPath$)
        canonicalKeyPath$=keyPath!.getCanonicalPath()

        rem --- Use keyPath$ if canonicalKeyPath$ does not start with baseDir$
        if len(canonicalKeyPath$)<baseDirLen or pos("["=canonicalKeyPath$(1,baseDirLen)) then canonicalKeyPath$=keyPath$

        rem --- As needed add ending file separator to directory paths
        if pos(keyPath$(len(keyPath$),1)="/\") and canonicalKeyPath$(len(canonicalKeyPath$),1)<>File.separator then
            canonicalKeyPath$=canonicalKeyPath$+File.separator
        endif

        print(log_dev) "Canonical Key Path: "+cvs(keyPath$,3)+"::::"+cvs(canonicalKeyPath$,3)
    wend
    
rem --- Build copyPath! Vector from sourcePaths! Properties, eliminating redundant canonical paths
    copyPath!.add(barDir$)
    pathIter!=sourcePaths!.keySet().iterator()
    while pathIter!.hasNext()
        path$=pathIter!.next()
        canonicalPath$=sourcePaths!.getProperty(path$)
        
        rem --- Is this canonical path redundant (i.e. begins with canoncial path already in copyPath!)?
        redundant=0
        for i=0 to copyPath!.size()-1
            existingCopyPath$=copyPath!.get(i)
            if pos(existingCopyPath$+File.separator=canonicalPath$)=1 then
                redundant=1
                break
            endif
        next i
            
        rem --- Add non-redundant canonical paths to copyPath!
        if !redundant then
            rem --- Remove all existing copyPath! <canonical_path>s that begin with the new canonical path being added
            removePaths!=new Vector()
            for i=0 to copyPath!.size()-1
                existingCopyPath$=copyPath!.get(i)
                if pos(canonicalPath$+File.separator=existingCopyPath$)=1 then removePaths!.add(existingCopyPath$)
            next i
            if removePaths!.size() then copyPath!.removeAll(removePaths!)

            rem --- Add new canonical path
            copyPath!.add(canonicalPath$)
        endif
    wend

rem --- Build jar file

    rem --- Increment main progress meter
    meterWin!=mainMeter!
    meter_total_recs=mainMeterTotalRecs
    mainMeterProcRecs=mainMeterProcRecs+1
    meter_text$="Build jar file"
    meter_proc_recs=mainMeterProcRecs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$
    
    rem --- Jar canonical paths in copyPath! Vector
    if copyPath!.size() then

        rem --- Can't jar open files, so close them
        close(ddmTableTpls_dev,err=*next)
        close(ddmTables_dev,err=*next)
        close(ddmTableCols_dev,err=*next)
        close(ddmSystems_dev,err=*next)

        rem --- Start secondary progress meter
        meter_title$="Build "+jarFile$
        meter_total_recs=copyPath!.size()
        meter_proc_recs=0
        meter_text$=""
        meter_action$="WIN-LST"
        gosub disp_meter
        detailMeter!=meterWin!

        rem --- Show busy/working image while building jar
        nxt_ctlID=util.getNextControlID()
        busyImage!=detailMeter!.addImageCtrl(nxt_ctlID,150,75,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")
        
        rem --- Make sure jarFile$ doesn't already exist in baseDir$
        erase baseDir$+File.separator+jarFile$,err=*next

        rem --- Remove baseDir$ from copyPath! canonical path before adding it to the jar
        jarList$=""
        for i=0 to copyPath!.size()-1
            canonicalPath$=copyPath!.get(i)
            shortPath$=canonicalPath$(baseDirLen+2)

            rem --- Increment secondary progress meter
            meter_text$=shortpath$
            meterWin!=detailMeter!
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)"    "+meter_text$

            rem --- If path includes [+FIRM_ID], then replace with actual COMPANY_IDs
            for j=0 to firmsVect!.size()-1
                thisPath$=shortPath$
                xpos=pos("[+FIRM_ID]"=thisPath$)
                if xpos then
                    thisPath$=thisPath$(1,xpos-1)+firmsVect!.get(j)+thisPath$(xpos+10)
                endif

                rem --- Jar the path
                jarFile!=new File(baseDir$ + File.separator + jarFile$)
                if jarFile!.exists() then
                    if pos("WIN"=cvs(info(0,0),4)) then
                        rem --- Windows OS
                        command$="cmd /c chdir "+baseDir$+" && "+"jar -ufM "+jarFile$+" "+thisPath$
                    else
                        rem --- Non-Windows OS
                        command$="chdir "+baseDir$+" ; "+"jar -ufM "+jarFile$+" "+thisPath$
                    endif
                else
                    if pos("WIN"=cvs(info(0,0),4)) then
                        rem --- Windows OS
                        command$="cmd /c chdir "+baseDir$+" && "+"jar -cfM "+jarFile$+" "+thisPath$
                    else
                        rem --- Non-Windows OS
                        command$="chdir "+baseDir$+" ; "+"jar -cfM "+jarFile$+" "+thisPath$
                    endif
                endif
                command!=cast(java.lang.String,command$)
                process!=java.lang.Runtime.getRuntime().exec(command!)
                process!.waitFor()
    
                rem --- Check for error and report any
                exitValue=process!.exitValue()
                if exitValue then
                    errorReader! = new java.io.BufferedReader(new java.io.InputStreamReader(process!.getErrorStream()))
                    while 1
                        line! = errorReader!.readLine()
                        if line!=null() then
                            msg_id$="AD_JAR_ERROR"
                            dim msg_tokens$[3]
                            msg_tokens$[1]=thisPath$
                            msg_tokens$[2]=jarFile$
                            msg_tokens$[3]=log$
                            gosub disp_message
                            break
                        else
                            print(log_dev)"    "+"    "+line!
                        endif
                    wend
                    errorReader!.close()
                else
                    print(log_dev)"    "+"    "+thisPath$
                endif
                    
                if pos("[+FIRM_ID]"=shortPath$)=0 then break
            next j
        next i

        rem --- Remove busy/working image from progress meter
        busyImage!.destroy(err=*next)
    
        rem --- Stop secondary progress meter
        meterWin!=detailMeter!
        meter_text$=""
        meter_proc_recs=meter_total_recs
        meter_action$="LST-END"
        gosub disp_meter
    endif

    rem --- Log adding log file to jar
    print(log_dev)"    adx_jaraon.log"
    
    rem --- Stop main progress meter
    meterWin!=mainMeter!
    meter_total_recs=mainMeterTotalRecs
    meter_text$=""
    meter_proc_recs=mainMeterTotalRecs
    meter_action$="LST-END"
    gosub disp_meter
    print(log_dev)
    print(log_dev)"Copy Addon Installation Utility log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Show busy/working image while finishing things up
    nxt_ctlID=util.getNextControlID()
    busyImage!=rdForm!.addImageCtrl(nxt_ctlID,250,20,33,33,System.getProperty("basis.BBjHome")+"/utils/reporting/bbjasper/images/CreatingReport.gif")

    rem --- Add log file to jar
    jarFile!=new File(baseDir$ + File.separator + jarFile$)
    if jarFile!.exists() then
        if pos("WIN"=cvs(info(0,0),4)) then
            rem --- Windows OS
            command$="cmd /c chdir "+baseDir$+" && "+"jar -ufM "+jarFile$+" adx_jaraon.log"
        else
            rem --- Non-Windows OS
            command$="chdir "+baseDir$+" ; "+"jar -ufM "+jarFile$+" adx_jaraon.log"
        endif
    else
        if pos("WIN"=cvs(info(0,0),4)) then
            rem --- Windows OS
            command$="cmd /c chdir "+baseDir$+" && "+"jar -cfM "+jarFile$+" adx_jaraon.log"
        else
            rem --- Non-Windows OS
            command$="chdir "+baseDir$+" ; "+"jar -cfM "+jarFile$+" adx_jaraon.log"
        endif
    endif
    command!=cast(java.lang.String,command$)
    process!=java.lang.Runtime.getRuntime().exec(command!)
    process!.waitFor()
    
done: rem --- All done

    rem --- Close open files
    if copyPath!.size()=0 then
        close(ddmTableTpls_dev,err=*next)
        close(ddmTables_dev,err=*next)
        close(ddmTableCols_dev,err=*next)
        close(ddmSystems_dev,err=*next)
    endif

    rem --- Warn if paths were skipped, i.e. skipped>0
    if skipped then
        msg_id$="AD_SKIPPED_PATHS"
        dim msg_tokens$[2]
        msg_tokens$[1]=str(skipped)
        msg_tokens$[2]=log$
        gosub disp_message
    endif

    rem --- Remove busy/working image from form
    busyImage!.destroy(err=*next)

    goto std_exit

verify_path: rem --- Verify path is located under installation base directory
    skip_path=0

    rem --- Resolve embedded STBLs, except not [+FIRM_ID]
    pathName$=path$
    gosub resolvePathStbls

    resolvedPath!=new java.io.File(resolvedPath$)
    canonicalPath$=resolvedPath!.getCanonicalPath()
    if pos(baseDir$=canonicalPath$)=1 then
        rem --- Good path
        sourcePaths!.setProperty(path$,canonicalPath$)
    else
        rem --- Bad path
        skip_path=1
        skipped=skipped+1
    endif

    return

resolvePathStbls: rem --- Resolve embedded STBLs, except not [+FIRM_ID]. (Based on ado_util.src resolvePathStbls(BBjString pathName$) method)
    resolvedPath$=pathName$

    occurrence=1
    while pos("["=resolvedPath$,1,occurrence)
        startPos=pos("["=resolvedPath$,1,occurrence)+1
        endPos=pos("]"=resolvedPath$,1,occurrence)
        tmpStbl$=resolvedPath$(startPos,endPos-startPos)
        if tmpStbl$="+FIRM_ID" then
            occurrence=occurrence+1
            continue
        endif
        rem --- Must get STBL from packaged installation's *.syn, not from installation running the utility
        tmpPath!=stblValues!.getProperty(tmpStbl$,err=*break)
        if tmpPath!=null() then break
        tmpPath$=tmpPath!
        if pos(" "=tmpPath$) then tmpPath$=$22$+tmpPath$+$22$
        resolvedPath$=resolvedPath$(1,startPos-2)+tmpPath$+resolvedPath$(endPos+1)
    wend

    return
    
disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log:rem --- Open log file

    rem --- create and open log file
    log$ = baseDir$+File.separator+"adx_jaraon.log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
    
    rem --- write log header info
    print(log_dev)"Copy Addon Installation Utility log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)
    print(log_dev)"Source Operating System: " + info(0,0)
    print(log_dev)"Source Installation Base Directory: " + baseDir$
    print(log_dev)"Source Barista Installation Location: " + barDir$
    print(log_dev)"Jar Filename: " + jarFile$

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src
    
rem /**
rem  * FilenameFilter Class to filter adm_modules~*.xml files.
rem  */

    class public AdmModulesFilter implements java.io.FilenameFilter

        method public boolean accept(File dir!, String file!)
            if file!.startsWith("adm_modules~") and file!.endsWith(".xml")
                methodret Boolean.valueOf("true")
            else
                methodret Boolean.valueOf("false")
            endif
        methodend
        
    classend
    
    end