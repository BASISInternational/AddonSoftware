rem --- Upgrade Conversion Utility For Version 24.00
rem --- Program adc_v2400conversion.aon

rem --- AddonSoftware Version 24.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


rem --- CONVCTRLFILECHAN : Channel number conversion control file data/adx_conversionCtrl is open on (Input)
rem --- CONVCTRL!        : Property object of the conversion control file data/adx_conversionCtrl (Input)
rem --- INSTALLMAP!      : HashMap object of installed modules, keyed by module ID (Input)
rem --- rdForm!          : Window object to hold progress meter
rem --- Translate!       : Translator object translations
rem --- CONV_STATUS      : Status code/0=No error (Returned)

    use java.io.File
    use java.util.HashMap
    use java.util.GregorianCalendar
    use java.util.Properties

    use ::ado_file.src::FileObject
    use ::ado_SyncRecords.aon::SyncRecords

    setesc std_error
    seterr std_error

    enter convCtrlFileChan,convCtrl!,installMap!,rdForm!,Translate!,conv_status

rem --- Initializations

    conv_status=1
    dir_syp$=stbl("+DIR_SYP")
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")

    Calendar! = new GregorianCalendar()
    
rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log
    
rem --- Start progress meter

    meter_title$="adc_v2400conversion.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter

rem --- For version 24.00, Add "GL Adjustments" ZZ records in Process Maintenance and GL Posting Control to records for all firms (ER 10627)
    this_module$="AD"
    if installMap!.get(this_module$)="Y" then
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    
        task$="2400_AD_glx_clsdyradj"
        if convCtrl!.getProperty(task$)<>"Completed" then
            rem --- Open File(s)
            num_files=5
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="ADM_FIRMS",        open_opts$[1]="OTA"
            open_tables$[2]="ADM_PROCMASTER",   open_opts$[2]="OTA"
            open_tables$[3]="ADM_PROCDETAIL",   open_opts$[3]="OTA"
            open_tables$[4]="ADM_PROCTABLES",   open_opts$[4]="OTA"
            open_tables$[5]="ADM_AUDITCONTROL", open_opts$[5]="OTA"
    
            gosub open_tables
    
            admFirms_dev=num(open_chans$[1]); dim admFirms$:open_tpls$[1]
            admProcMaster_dev=num(open_chans$[2]); dim admProcMaster$:open_tpls$[2]
            admProcDetail_dev=num(open_chans$[3]); dim admProcDetail$:open_tpls$[3]
            admProcTables_dev=num(open_chans$[4]); dim admProcTables$:open_tpls$[4]
            admAuditControl_dev=num(open_chans$[5]); dim admAuditControl$:open_tpls$[5]
 
            rem --- Get firm IDs used in this installation
            firms!=BBjAPI().makeVector()
            read(admFirms_dev,key="",dom=*next)
            while 1
                readrecord(admFirms_dev,end=*break)admFirms$
                firms!.addItem(admFirms.company_id$)
            wend

            rem --- Add firm "GL Adjustments" records to ADM_PROCMASTER
            read(admProcMaster_dev,key="ZZ"+"GL Adjustments",dom=*next)
            while 1
                k$=key(admProcMaster_dev,end=*break)
                if pos("ZZ"+"GL Adjustments"=k$)<>1 then break
                readrecord(admProcMaster_dev)admProcMaster$
                for i=0 to firms!.size()-1
                    thisFirm$=firms!.getItem(i)
                    if thisFirm$="99" then continue
                    admProcMaster.firm_id$=thisFirm$
                    writerecord(admProcMaster_dev)admProcMaster$
                next i
                read(admProcMaster_dev,key=k$,dom=*next)
            wend
                
            rem --- Add firm "GL Adjustments" records to ADM_PROCDETAIL
            read(admProcDetail_dev,key="ZZ"+"GL Adjustments",dom=*next)
            while 1
                k$=key(admProcDetail_dev,end=*break)
                if pos("ZZ"+"GL Adjustments"=k$)<>1 then break
                readrecord(admProcDetail_dev)admProcDetail$
                for i=0 to firms!.size()-1
                    thisFirm$=firms!.getItem(i)
                    if thisFirm$="99" then continue
                    admProcDetail.firm_id$=thisFirm$
                    writerecord(admProcDetail_dev)admProcDetail$
                next i
                read(admProcDetail_dev,key=k$,dom=*next)
            wend
                
            rem --- Add firm "GL Adjustments" records to ADM_PROCTABLES
            read(admProcTables_dev,key="ZZ"+"GL Adjustments",dom=*next)
            while 1
                k$=key(admProcTables_dev,end=*break)
                if pos("ZZ"+"GL Adjustments"=k$)<>1 then break
                readrecord(admProcTables_dev)admProcTables$
                for i=0 to firms!.size()-1
                    thisFirm$=firms!.getItem(i)
                    if thisFirm$="99" then continue
                    admProcTables.firm_id$=thisFirm$
                    writerecord(admProcTables_dev)admProcTables$
                next i
                read(admProcTables_dev,key=k$,dom=*next)
            wend
                
            rem --- Add firm "GL Adjustments" records to ADM_AUDITCONTROLR
            read(admAuditControl_dev,key="ZZ"+"GL Adjustments",dom=*next)
            while 1
                k$=key(admAuditControl_dev,end=*break)
                if pos("ZZ"+"GL Adjustments"=k$)<>1 then break
                readrecord(admAuditControl_dev)admAuditControl$
                for i=0 to firms!.size()-1
                    thisFirm$=firms!.getItem(i)
                    if thisFirm$="99" then continue
                    admAuditControl.firm_id$=thisFirm$
                    writerecord(admAuditControl_dev)admAuditControl$
                next i
                read(admAuditControl_dev,key=k$,dom=*next)
            wend
                
            rem --- close files opened for this conversion
            num_files=5
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="ADM_FIRMS",        open_opts$[1]="C"
            open_tables$[2]="ADM_PROCMASTER",   open_opts$[2]="C"
            open_tables$[3]="ADM_PROCDETAIL",   open_opts$[3]="C"
            open_tables$[4]="ADM_PROCTABLES",   open_opts$[4]="C"
            open_tables$[5]="ADM_AUDITCONTROL", open_opts$[5]="C"
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif

		rem --- Initialize AD data file changes implemented during minor releases of v24
        task$="2400_AD_v24initMinorRev"
        if convCtrl!.getProperty(task$)<>"Completed" then
            rem --- Execute AP upgrade conversion utility for minor releases of v17
            theFirm$=""
            call pgmdir$+"adc_v24initMinorRev.aon",theFirm$,rdForm!,status
            if status=0 then
                rem --- Conversion completed successfully
                write(convCtrlFileChan)task$+"=Completed"
                
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                   Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": APM_VENDCMTS"
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
            else
                rem --- Conversion did NOT complete successfully, exit with error message
                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                   Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:                   Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": ADC_STATECODE"+" *****"
                goto done
            endif
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 24.00, set the Lotted/Serialized flag at the item level (ER 10627)
    this_module$="IV"
    if installMap!.get(this_module$)="Y" then
        task$="2400_IV_lot_serial_flag"
        if convCtrl!.getProperty(task$)<>"Completed" then
            if convCtrl!.getProperty("data_source")="OCJ" then
                rem --- Data upgraded via EM Update Wizard (OCJ)

                rem --- Increment progress meter
                meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
        
                rem --- Open File(s)
                num_files=3
                if installMap!.get("SF")="Y" then num_files=4
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="IVM_ITEMMAST", open_opts$[1]="OTA"
                open_tables$[2]="IVE_PHYSICAL",   open_opts$[2]="OTA"
                open_tables$[3]="IVS_DEFAULTS",   open_opts$[3]="OTA"
                if installMap!.get("SF")="Y" then open_tables$[4]="SFE_WOMASTR",   open_opts$[4]="OTA"
        
                gosub open_tables

                rem --- Need to get the LOTSER_FLAG from the old IVS_PARAMS
                oldStbl$="+IVDATA"
                oldFile$="ivs_params"
                gosub get_path_to_old_file
                old_ivsParams$=oldPathToFile$
                open_success=0
                old_ivsParams_dev=unt
                open(old_ivsParams_dev,err=*next)old_ivsParams$; open_success=1
                if open_success then
                    rem --- Get record template for old source IVS_PARAMS file
                    ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                    open_success=0
                    ddm_table_tpls=unt
                    open(ddm_table_tpls,err=*next)ddm_table_tpls$; open_success=1
                    if open_success then
                        dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"
                        tpl_found=0
                        findrecord(ddm_table_tpls,key=pad(cvs(oldFile$,4),16),dom=*next)ddm_table_tpls$;tpl_found=1
                        if tpl_found then
                            dim old_ivsParams_tpl$:ddm_table_tpls.template$
                        else
                            rem --- Required template missing
                            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                                   " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                            goto done
                        endif
                    else
                        rem --- Required file missing
                        msg_id$="AD_FILE_MISSING"
                        dim msg_tokens$[1]
                        msg_tokens$[1]=ddm_table_tpls$
                        gosub disp_message
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                               Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+ddm_table_tpls$+" *****"
                        goto done
                    endif
           
                    rem --- Build lotserMap! HashMap from old_ivsParams_dev
                    lotserMap!=new HashMap()
                    read(old_ivsParams_dev,key="",dom=*next)
                    while 1
                        readrecord(old_ivsParams_dev,end=*break)old_ivsParams_tpl$
                        lotserMap!.put(old_ivsParams_tpl.firm_id$,old_ivsParams_tpl.lotser_flag$)
                    wend

                    rem --- Must get LOTSER_ITEM from the old files
                    oldFileMap!=new HashMap()
                    fileVec!=BBjAPI().makeVector()
                    fileVec!.addItem("IVM_ITEMMAST")
                    fileVec!.addItem("+IVDATA")
                    fileVec!.addItem("ivm-01")
                    oldFileMap!.put(num(open_chans$[1]),fileVec!)
                    fileVec!=BBjAPI().makeVector()
                    fileVec!.addItem("IVE_PHYSICAL")
                    fileVec!.addItem("+IVDATA")
                    fileVec!.addItem("ive-03")
                    oldFileMap!.put(num(open_chans$[2]),fileVec!)
                    fileVec!=BBjAPI().makeVector()
                    fileVec!.addItem("IVS_DEFAULTS")
                    fileVec!.addItem("+IVDATA")
                    fileVec!.addItem("ivs_defaults")
                    oldFileMap!.put(num(open_chans$[3]),fileVec!)
                    if installMap!.get("SF")="Y" then 
                        fileVec!=BBjAPI().makeVector()
                        fileVec!.addItem("SFE_WOMASTR")
                        fileVec!.addItem("+SFDATA")
                        fileVec!.addItem("sfe-01")
                        oldFileMap!.put(num(open_chans$[4]),fileVec!)
                    endif

                    rem --- Initialize new LOTSER_FLAG in tables
                    this_firm$=""
                    for i=1 to num_files
                        newTable_dev=num(open_chans$[i])
                        dim newTable_tpl$:open_tpls$[i]

                        rem --- Open old file
                        fileVec!=oldFileMap!.get(newTable_dev)
                        newTable_name$=fileVec!.getItem(0)
                        oldStbl$=fileVec!.getItem(1)
                        oldFile$=fileVec!.getItem(2)
                        gosub get_path_to_old_file
                        open_success=0
                        oldTable_dev=unt
                        open(oldTable_dev,err=*next)oldPathToFile$; open_success=1
                        if open_success then
                            dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"
                            tpl_found=0
                            findrecord(ddm_table_tpls,key=pad(cvs(newTable_name$,4),16),dom=*next)ddm_table_tpls$;tpl_found=1
                            if tpl_found then
                                dim oldTable_tpl$:ddm_table_tpls.template$
                            else
                                rem --- Required template missing
                                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+newTable_name$+" *****"
                                print(log_dev)err_msg$
                                continue
                            endif
                        else
                            rem --- Old file doesn't exist
                            continue
                        endif

                        read(newTable_dev,key="",dom=*next)
                        while 1
                            this_key$=key(newTable_dev,end=*break)
                            readrecord(newTable_dev)newTable_tpl$
                            if newTable_tpl.firm_id$<>this_firm$ then
                                this_firm$=newTable_tpl.firm_id$
                                this_lotser$=lotserMap!.get(this_firm$)
                                if this_lotser$="N" then
                                    read(newTable_dev,key=this_firm$+$FF$,dom=*next)
                                    continue
                                endif
                            endif

                            rem --- lotser_item is NOT in the new files, must get it from the old files
                            redim oldTable_tpl$
                            readrecord(oldTable_dev,key=this_key$,dom=*next)oldTable_tpl$
                            if oldTable_tpl.lotser_item$="Y" then
                                newTable_tpl.lotser_flag$=this_lotser$
                            else
                                newTable_tpl.lotser_flag$="N"
                            endif
                            writerecord(newTable_dev)newTable_tpl$
                        wend
                    next i
                else
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_glsParams$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                           Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+oldPathToFile$+" *****"
                    goto done
                endif
                    
                rem --- close files opened for this conversion
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="IVM_ITEMMAST", open_opts$[1]="C"
                open_tables$[2]="IVE_PHYSICAL",   open_opts$[2]="C"
                open_tables$[3]="IVS_DEFAULTS",   open_opts$[3]="C"
                if installMap!.get("SF")="Y" then open_tables$[4]="SFE_WOMASTR",   open_opts$[4]="C"
                gosub open_tables
    
                rem --- This task$ conversion completed successfully
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
            else
                rem --- Data upgraded via DataPort
            endif
            write(convCtrlFileChan)task$+"=Completed"
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 24.00, initialize new BARCODE_SOURCE field in OPS_PARAMS
    this_module$="OP"
    if installMap!.get(this_module$)="Y" then
        task$="2300_OP_ops_params"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="OPS_PARAMS",   open_opts$[1]="OTA"
    
            gosub open_tables
    
            opsParams_dev=num(open_chans$[1])
            dim opsParams$:open_tpls$[1]

            rem --- Open new aon/config/addon.syn
            open_success=0
            new_addonsyn_dev=unt
            open(new_addonsyn_dev,isz=-1,err=*next)aonDir$+"config/addon.syn"; open_success=1

            rem --- Get current +ORDER_PICK_LIST_BARCODES STBL, and remove it if it exists
            barcode$=""
            if open_success then
                rem --- Make copy of new addon.syn without the +ORDER_PICK_LIST_BARCODES STBL line
                counter=1
                while 1
                    rem --- Find a backup file that doesn't exist
                    backup$=aonDir$+"config/addon.syn.bak"+str(counter)
                    backupFile! = new File(backup$)
                    if !backupFile!.exists() then break
                    counter=counter+1
                wend
                string backup$
                backup_dev=unt
                open(backup_dev)backup$
            
                while 1
                    read(new_addonsyn_dev,end=*break)record$
                    
                    rem --- Process +ORDER_PICK_LIST_BARCODES line
                    if pos("+ORDER_PICK_LIST_BARCODES="=record$) then
                        xpos = pos("="=record$,-1)
                        barcode$ = cvs(record$(xpos+1),3)
                        continue
                    endif
                    
                    write(backup_dev)record$
                wend
                close(backup_dev,err=*next)
            endif

            rem --- Initialize new BARCODE_SOURCE field with current +ORDER_PICK_LIST_BARCODES STBL
            read(opsParams_dev,key="",dom=*next)
            while 1
                readrecord(opsParams_dev,end=*break)opsParams$
                switch (BBjAPI().TRUE)
                    case barcode$ = "BAR"
                        opsParams.barcode_source$="B"
                        break
                    case barcode$ = "UPC"
                        opsParams.barcode_source$="U"
                        break
                    case default
                        opsParams.barcode_source$="X"
                        break
                swend
                writerecord(opsParams_dev)opsParams$
            wend
            
            rem --- Save current addon.syn, and replace it with updated addon.syn
            if barcode$<>"" then
                close(new_addonsyn_dev,err=*next)
                erase aonDir$+"config/addon.syn.bak0", err=*next
                success=0
                rename aonDir$+"config/addon.syn" to aonDir$+"config/addon.syn.bak0", err=*next; success=1
                if success then
                    erase aonDir$+"config/addon.syn", err=*next
                    rename backup$ to aonDir$+"config/addon.syn", err=*next
                endif
            endif            
            
            rem --- close files opened for this conversion
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="OPS_PARAMS", open_opts$[1]="C"
            gosub open_tables

            close(new_addonsyn_dev,err=*next)
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
                
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

done: rem --- Done, close things up

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v2400conversion log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Close opened files
    if ddm_table_tpls then close(ddm_table_tpls,err=*next)

    if completed_successfully then conv_status=0; rem --- no errors encountered
	goto std_exit

get_path_to_old_file: rem --- Locate data directory in old Addon installation
    rem --- IN: oldStbl$ - STBL in old addon.syn that points to the data directory where the old file is located
    rem --- IN: oldFile$ - name of old file to get path for
    rem --- OUT: oldPathToFile$ - full path to requested file, including the file name
    oldPathToFile$=oldFile$

    rem --- Open old aon/config/addon.syn
    open_success=0
    old_addonsyn_dev=unt
    open(old_addonsyn_dev,isz=-1,err=*next)convCtrl!.getProperty("addon_source")+"/aon/config/addon.syn"; open_success=1
    if !open_success then return

    rem --- Get specified data directory from old addon.syn
    key$="=SET "+oldStbl$+"="
    while 1
        read(old_addonsyn_dev,end=*break)record$
        if(pos(key$=record$)) then
            xpos=pos(key$=record$)
            oldPathToFile$=record$(xpos+len(key$))+oldFile$
            break
        endif
    wend
    close(old_addonsyn_dev)

    return

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v2400conversion_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v2400conversion log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    exit

rem #endinclude std_exit.src

    end
