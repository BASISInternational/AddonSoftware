rem Open Multiple Tables/Templates
rem Proprietary Software.  BASIS International Ltd.
rem Program ID: bac_open_tables.bbj  <Mar 07, 2006>

rem --- this program is identical to bac_open_tables EXCEPT
rem --- that the rd_restrict_create$ flag is forced to "Y" (see open_errs: routine),
rem --- so a table that does not already exist is not created.
rem --- this program is called from adx_convert_table.bbj, a one-time utility
rem --- to convert Addon tables to vkeyed.

	if stbl("+USE_SETERR")="YES" seterr error_proc

rem --- Enter Arguments

	enter
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

rem	rd_open_opts$[] - May contain one or more of the following:
rem		F - Find existing channel for file if open
rem		A - Get actual disk file name based on alias
rem		O - Open file
rem		N - Force open on new channel
rem		T - Retreive template record
rem		L - Lock file
rem		C - Close_file
rem		S - Skip error messages if file open unsuccessful
rem		I - Initialize file
rem		D - Define file if not found

rem	rd_table_chans$[512,6]
rem		[0,0]=Open Alias/Channel String
rem		[0,1]=Checked out features string. (20 byte segment for each feature)
rem		[<channel>,0] = String template for the file opened on the channel.
rem		[<channel>,1] = Table path for the file opened on the channel.
rem		[<channel>,2] = Table type for the file opened on the channel.
rem		[<channel>,3] = Disk file name for the file opened on the channel.
rem		[<channel>,4] = Process ID for the file opened on the channel, if checked out.
rem		[<channel>,5] = Feature ID for the file opened on the channel, if checked out.
rem		[<channel>,6] = License handle for the file opened on the channel, if checked out.

rem --- Get Translator Object

	use ::sys/prog/bao_translator.bbj::Translator
	declare Translator Translator!
	Translator! = Translator.getInstance("barista",stbl("+USER_LOCALE"),null(),dsk("")+dir("")+stbl("+DIR_SYR"))

rem --- Declare JDBC Database object variable
        use ::sys/prog/bsq_bbjdbo.bbj::BBjdbo
        declare BBjdbo            rd_dbo!
        declare java.util.HashMap rd_sql_dbo_map!

rem --- Get Group Namespace object variable
        declare BBjNamespace rdGroupSpace!
        rdGroupSpace! = BBjAPI().getGroupNamespace()

rem --- Constants

	rd_text_mode$=stbl("+TEXT_MODE",err=*next)
	rd_dir_dat$=stbl("+DIR_BRD")
	rd_dims_tpl$="dimen:i(1),d0elem:i(4),d0base:i(4),d1elem:i(4),d1base:i(4),d2elem:i(4),d2base:i(4)"

        rd_allow_sql$="NO",rd_allow_sql$=stbl("+ALLOW_SQL",err=*next)
        rd_sql_dbo_map! = cast(java.util.HashMap,rdGroupSpace!.getValue("+SQL_DBO_MAP",err=*next))
        if rd_sql_dbo_map! = null() rd_sql_dbo_map! = new java.util.HashMap()

	rd_lic_override$=stbl("+LIC_OVERRIDE",err=*next);goto open_array
	rd_dev_license$=rdGroupSpace!.getValue("+dev_license",err=*next)
	if rd_dev_license$="" rd_process_id$=rdGroupSpace!.getValue("+active_process",err=*next)

	rd_stbl_err$=Translator!.getTranslation("Undefined_global_directory_value:_")

open_array:rem --- Open Table Array

	dim rd_open_array$:rd_dims_tpl$
	rd_open_array$=dims(rd_open_tables$[all])

	rd_no_tables=rd_open_array.d0elem
	if rd_open_beg=0 rd_open_beg=1
	if rd_open_end=0 rd_open_end=rd_no_tables

get_array:rem --- Get File Channel Array Data

	dim rd_temp_array$:rd_dims_tpl$
	rd_temp_array$=dims(rd_table_chans$[all],err=set_array)

	goto table_open_loop

set_array:rem --- Set File Channel Array

	dim rd_table_chans$[512,6]
        rdGroupSpace!.setValue("+SQL_DBO_MAP",rd_sql_dbo_map!)

table_open_loop:rem --- Loop Through Table Opens

	for rd_curr_table=rd_open_beg to rd_open_end
		rd_open_table$=rd_open_tables$[rd_curr_table]
		rd_open_opts$=rd_open_opts$[rd_curr_table]
		rd_table_tpl$=""
		rd_open_status$=""
		rd_tmplfile=0
		rd_table_path$=""
		rd_alias_type$=""
		rd_create_try$=""
                rd_sql_db_alias$=""

		rd_tmplid$=rd_open_table$
		rd_fileid$=rd_open_table$
		rd_table_id$=rd_open_table$

		if pos("F"=rd_open_opts$)=0 rd_open_chan=0

		rd_file_found$=""
		if pos("O"=rd_open_opts$)<>0 and pos("N"=rd_open_opts$)=0
			rd_file_pos=pos(pad(cvs(rd_tmplid$,4),17," ")=rd_table_chans$[0,0],20)
			if rd_file_pos<>0
				rd_open_chan=num(rd_table_chans$[0,0](rd_file_pos+17,3))
				rd_table_tpl$=rd_table_chans$[rd_open_chan,0]
				if rd_table_tpl$="" and pos("T"=rd_open_opts$)<>0 gosub get_template
				rd_file_found$="YES"
			endif
		endif

		if rd_file_found$=""
			rd_pathpos=max(pos("/"=rd_open_table$,-1),pos("\"=rd_open_table$,-1))
			if rd_pathpos<>0 rd_filepath$=rd_open_table$(1,rd_pathpos),rd_open_table$=rd_open_table$(rd_pathpos+1)
			if pos("F"=rd_open_opts$)<>0 gosub get_chan
			if pos("A"=rd_open_opts$)<>0 gosub get_actual_file
			if pos("I"=rd_open_opts$)<>0 gosub init_file
			if pos("O"=rd_open_opts$)<>0 gosub channel_open
			if pos("N"=rd_open_opts$)<>0 gosub force_path
			if pos("T"=rd_open_opts$)<>0 gosub get_template
		endif
		if pos("L"=rd_open_opts$)<>0 gosub lock_file
		if pos("C"=rd_open_opts$)<>0 gosub close_file

		rd_open_chans$[rd_curr_table]=str(rd_open_chan)
		rd_open_tpls$[rd_curr_table]=rd_table_tpl$
		if pos("A"=rd_open_opts$)<>0 rd_open_tables$[rd_curr_table]=rd_act_fileid$

	next rd_curr_table

	goto exit_prog

get_chan:rem --- Get Channel For Opened File

	rd_temppos=pos(pad(cvs(rd_tmplid$,4),17," ")=rd_table_chans$[0,0],20)
	if rd_temppos<>0 rd_open_chan=num(rd_table_chans$[0,0](rd_temppos+17,3))

	return

channel_open:rem --- Open File On Existing Channel

	rd_temppos=pos(pad(cvs(rd_tmplid$,4),17," ")=rd_table_chans$[0,0],20)
	if rd_temppos=0 goto force_path

	rd_open_chan=num(rd_table_chans$[0,0](rd_temppos+17,3))

	return

force_path:rem --- Force Open File With Path

	gosub get_unt

        if rd_alias_type$<>"Q" then
            if rd_fileid$=stbl("+GUI_DEVICE")
                    open (rd_open_chan,err=force_open,mode=rd_text_mode$)rd_fileid$
            else
                    open (rd_open_chan,err=force_open)rd_filepath$+rd_fileid$
            endif
        else
            gosub open_sql_table
        endif

	goto addto_farr

force_open:rem --- Open File Without Path

	if pos("A"=rd_open_opts$)<>0 goto open_errs

        open (rd_open_chan,err=open_errs)rd_fileid$
        rd_filepath$=""

	goto addto_farr

open_sql_table:rem --- Connect to SQL table

        rd_dbo! = null()
        if cvs(rd_sql_db_alias$,2)="" then return
        if rd_allow_sql$<>"YES" then
            rd_msg_id$="SQL_NOT_ALLOWED"
            rd_msg_opts$=""
            dim rd_msg_tokens$[0]
            gosub disp_message
            rd_open_chan=0
            rd_proc_mssg$="[TABLE_OPEN_ERR]:"+rd_fileid$
            goto exit_prog
        endif

        open (rd_open_chan)"X0";rem reserve channel
        gosub open_sql_db_file
        gosub open_sql_db_users_file
        gosub open_sql_db_tables_file

        dim rd_sql_db$:rd_sql_db$
        rd_sql_db.db_alias$ = rd_sql_db_alias$
        readrecord(rd_sql_db_file,key=rd_sql_db.db_alias$)rd_sql_db$

        dim rd_sql_db_users$:rd_sql_db_users$
        rd_sql_db_users.user_id$ = stbl("+USER_ID")
        rd_sql_db_users.db_alias$ = rd_sql_db_alias$
        readrecord(rd_sql_db_users_file,key=rd_sql_db_users.user_id$+rd_sql_db_users.db_alias$)rd_sql_db_users$

        if rd_dbo!=null() rd_dbo!=new BBjdbo()

        rd_dbo!.setDBConnectClass(rd_sql_db.driver_class$)
        rd_dbo!.setDBConnectUrl(rd_sql_db.connect_url$)
        rd_dbo!.setDBConnectUsr(rd_sql_db_users.db_user$)
        rd_dbo!.setDBConnectPwd(rd_sql_db_users.db_password$)
        if !(rd_dbo!.connect(rd_sql_db_alias$)) then
            rd_msg_id$="SQL_DB_CONN_NOK"
            dim rd_msg_tokens$[1]
            rd_msg_tokens$[1]=BBjAPI().getLastException().toString()
            gosub disp_message
            close(rd_open_chan);rd_open_chan=0
            rd_proc_mssg$="[TABLE_OPEN_ERR]:"+rd_fileid$
            exitto exit_prog
        endif  

        dim rd_sql_db_tables$:rd_sql_db_tables$
        rd_sql_db_tables.dd_table_alias$ = rd_table_id$
        readrecord(rd_sql_db_tables_file,key=rd_sql_db_tables.dd_table_alias$)rd_sql_db_tables$

        rd_dbo!.setDBCatalog(rd_sql_db_tables.sql_catalog$)
        if rd_sql_db_tables.sql_schema$="<dbuser>" rd_sql_db_tables.sql_schema$=rd_sql_db_users.db_user$
        rd_dbo!.setDBSchema(rd_sql_db_tables.sql_schema$)
        rd_dbo!.setDBTable(rd_sql_db_tables.sql_table$)

        if !(rd_dbo!.buildSetByPrimaryKey(1000)) then 
            rd_msg_id$="SQL_DB_QUERY_ERR"
            dim rd_msg_tokens$[1]
            rd_msg_tokens$[1]=BBjAPI().getLastException().toString()
            gosub disp_message
            close(rd_open_chan);rd_open_chan=0
            rd_proc_mssg$="[TABLE_OPEN_ERR]:"+rd_fileid$
            exitto exit_prog
        endif

return

open_errs:rem --- File Open Errors

	rd_err=err
	rd_restrict_create$="Y";rem temp for running adx_convert_table.bbj

	if err=12 and rd_restrict_create$<>"Y" and rd_create_try$=""
		rd_create_try$="YES"
		call stbl("+DIR_SYP")+"bac_create_table.bbj",rd_open_table_id$,"",rd_table_chans$[all],"",rd_create_status$
		rd_open_chan=unt
		if rd_create_status$=""
			rd_open_chan=unt
			retry
		endif
	endif

	switch rd_err
		case 0
			rd_open_status$="[TABLE_OPEN_BUSY]:"+rd_table_id$+" ("+rd_fileid$+")"
		break
		case 12
			rd_open_status$="[TABLE_OPEN_NF]:"+rd_table_id$+" ("+rd_fileid$+")"
		break
		case default
			rd_open_status$="[TABLE_OPEN_ERR]:"+rd_fileid$
		break
	swend

	if pos("[TABLE_OPEN_BUSY]:"=rd_open_status$)<>0
		rd_msg_id$="TABLE_OPEN_LOCKED"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_table_id$+" ("+rd_fileid$+")"
		gosub disp_message
		if rd_msg_opt$="R"
			gosub get_unt
			retry
		endif
	endif

	if pos("S"=rd_open_opts$)<>0 rd_open_status$="",rd_open_chan=0

	goto exit_prog

get_actual_file:rem --- Get Actual File Name

	gosub open_table_file

	dim rd_alias_rec$:rd_ddm_tables$
	readrecord(rd_table_file,key=pad(cvs(rd_table_id$,4),16," "),dom=*return)rd_alias_rec$
		rd_file_name$=rd_alias_rec.dd_file_name$
		rd_table_path$=cvs(rd_alias_rec.dd_table_path$,3)
		rd_alias_type$=rd_alias_rec.dd_alias_type$
		rd_attr_atab$=rd_alias_rec.dd_attr_atab$
		rd_open_table_id$=rd_alias_rec.dd_table_alias$
		rd_restrict_create$=rd_alias_rec.restrict_create$
		rd_feature_id$=cvs(rd_alias_rec.asc_comp_id$,2)+cvs(rd_alias_rec.asc_prod_id$,2)
		if pos(rd_alias_rec.dd_system_rec$="ADE")<>0 rd_feature_id$="BARISTA_RUNTIME"
                if rd_alias_type$="Q" then
                    rd_sql_db_alias$=rd_alias_rec.sql_db_alias$
                    rd_table_path$=""
                endif

	if cvs(rd_attr_atab$,3)<>""
		dim rd_atab_rec$:rd_ddm_tables$
		readrecord(rd_table_file,key=pad(rd_attr_atab$,16),dom=*return)rd_atab_rec$
		rd_file_name$=rd_atab_rec.dd_file_name$
		rd_table_path$=cvs(rd_atab_rec.dd_table_path$,3)
		rd_alias_type$=rd_atab_rec.dd_alias_type$
		rd_open_table_id$=rd_atab_rec.dd_table_alias$
		rd_restrict_create$=rd_atab_rec.restrict_create$
		rd_feature_id$=cvs(rd_atab_rec.asc_comp_id$,2)+cvs(rd_atab_rec.asc_prod_id$,2)
		if pos(rd_alias_rec.dd_system_rec$="ADE")<>0 rd_feature_id$="BARISTA_RUNTIME"
                if rd_alias_type$="Q" then
                    rd_sql_db_alias$=rd_atab_rec.sql_db_alias$
                    rd_table_path$=""
                endif
	endif

	if cvs(rd_file_name$,3)="" rd_file_name$=cvs(rd_open_table_id$,11)

	rd_stbl_str$=rd_table_path$
	gosub resolve_stbls
	rd_table_path$=rd_stbl_str$

	rd_stbl_str$=rd_file_name$
	gosub resolve_stbls
	rd_file_name$=rd_stbl_str$

	rd_filepath$=""
	rd_fileid$=rd_table_path$+rd_file_name$
	rd_act_fileid$=rd_fileid$

	return

resolve_stbls:rem --- Resolve Embedded STBLs

	while pos("["=rd_stbl_str$)<>0
		rd_stbl_from=pos("["=rd_stbl_str$)+1
		rd_stbl_thru=pos("]"=rd_stbl_str$)
		rd_open_status$=rd_stbl_err$+rd_stbl_str$(rd_stbl_from,rd_stbl_thru-rd_stbl_from)
		rd_temp_stbl$=stbl(rd_stbl_str$(rd_stbl_from,rd_stbl_thru-rd_stbl_from),err=exit_prog)
		rd_open_status$=""
		if rd_stbl_thru=len(rd_stbl_str$)
			rd_stbl_str$=rd_stbl_str$(1,rd_stbl_from-2)+rd_temp_stbl$
		else
			rd_stbl_str$=rd_stbl_str$(1,rd_stbl_from-2)+rd_temp_stbl$+rd_stbl_str$(rd_stbl_thru+1)
		endif
	wend

	return

init_file:rem --- Initialize File

	initfile rd_fileid$,err=init_file_err

	return

init_file_err:rem --- Initialize File Error

	rd_msg_id$="TABLE_OPEN_INIT"
	dim rd_msg_tokens$[2]
		rd_msg_tokens$[1]=rd_table_id$
		rd_msg_tokens$[2]="("+rd_fileid$+")"
	gosub disp_message

	if rd_msg_opt$="R" retry

	rd_open_chan=0
	rd_proc_mssg$="[TABLE_OPEN_ERR]:"+rd_fileid$

	return

addto_farr:rem --- Add To File Channel Array

	rd_table_chans$[0,0]=rd_table_chans$[0,0]+cvs(pad(rd_tmplid$,17," "),4)+str(rd_open_chan:"000")
	rd_table_chans$[rd_open_chan,1]=rd_table_path$
	rd_table_chans$[rd_open_chan,2]=rd_alias_type$
	rd_table_chans$[rd_open_chan,3]=rd_file_name$

        if rd_alias_type$="Q" then
            rd_sql_dbo_map!.put(str(rd_open_chan:"000"),rd_dbo!)
            rdGroupSpace!.setValue("+SQL_DBO_MAP",rd_sql_dbo_map!)
        endif

	if rd_process_id$<>"" and rd_fileid$<>stbl("+GUI_DEVICE") and pos(pad(rd_feature_id$,16)=rd_table_chans$[0,1],16)=0
		rd_check_feature_id$=rd_feature_id$
		rd_check_version_id$="8.0"
		gosub license_check
		if rd_feature_id$<>""
			rd_table_chans$[0,1]=rd_table_chans$[0,1]+pad(rd_feature_id$,16)
			rd_table_chans$[rd_open_chan,4]=rd_process_id$
			rd_table_chans$[rd_open_chan,5]=rd_feature_id$
			rd_table_chans$[rd_open_chan,6]=str(rd_check_handle)
		endif
	endif

	return

license_check:rem --- Check License Features

	call stbl("+DIR_SYP")+"bax_lcheckout.bbj",
:		rd_check_feature_id$,
:		rd_check_version_id$,
:		rd_check_handle,
:		rd_lic_type$,
:		rd_lic_status$,
:		rd_table_chans$[all]

	if rd_lic_status$<>"INVALID" return

rem --- License Error

	rdGroupSpace!.setValue("+build_task","OFF")

	release

get_unt:rem --- Get Next Channel

	if pos("F"=rd_open_opts$)=0 rd_open_chan=unt

	return

get_template:rem --- Template Retrieval

	gosub open_tmpl_file
	
	if pos("O"=rd_open_opts$)
		rd_table_tpl$=rd_table_chans$[rd_open_chan,0]
		if rd_table_tpl$>"" return
	endif

	read (rd_tmpl_file,key=cvs(pad(rd_tmplid$,16," "),4),dom=tmpl_errs)*,*,rd_table_tpl$

	goto addto_tarr

tmpl_errs:rem --- Template Retrieval Errors

	rd_open_status$=Translator!.getTranslation("Template_record_")+rd_tmplid$+" "+Translator!.getTranslation("not_found.")

	if pos("S"=rd_open_opts$) rd_open_status$=""

	goto exit_prog

addto_tarr:rem --- Add To Template Array

	if rd_open_chan>0 rd_table_chans$[rd_open_chan,0]=rd_table_tpl$

	return

lock_file:rem --- Lock Opened File

	rd_open_status$=Translator!.getTranslation("Cannot_lock_file:")+$0A$+rd_fileid$+"."
        if rd_alias_type$<>"Q" lock (rd_open_chan,err=exit_prog)
	rd_open_status$=""

	return

close_file:rem --- Close File & Remove Template Info

	rd_devtmp$=fill(20)+rd_table_chans$[0,0]+fill(20)
	rd_temppos=pos(pad(cvs(rd_table_id$,4),17," ")=rd_devtmp$,20)
	if rd_temppos=0 return

	rd_open_chan=num(rd_devtmp$(rd_temppos+17,3))
        close (rd_open_chan)
	rd_table_chans$[rd_open_chan,0]=""

	rd_devtmp$=rd_devtmp$(1,rd_temppos-1)+rd_devtmp$(rd_temppos+20)
	rd_devtmp$=rd_devtmp$(21)
	rd_devtmp$=rd_devtmp$(1,len(rd_devtmp$)-20)

	rd_table_chans$[0,0]=rd_devtmp$

        if rd_alias_type$="Q" then
            rd_dbo! = rd_sql_dbo_map!.get(str(rd_open_chan:"000"),err=*next)
            if rd_dbo!<>null() rd_dbo!.close(err=*next)
            rd_dbo! = null()
            rd_sql_dbo_map!.remove(str(rd_open_chan:"000"),err=*next)
            rdGroupSpace!.setLock("+SQL_DBO_MAP",500,err=*next)
            rdGroupSpace!.setValue("+SQL_DBO_MAP",rd_sql_dbo_map!,500,err=*next)
            rdGroupSpace!.removeLock("+SQL_DBO_MAP",err=*next)
        endif

	return

open_tmpl_file:rem --- Open Template File If Not So

	rd_ddm_table_tpls_alias$="DDM_TABLE_TPLS"
	rd_tmpl_file$=cvs(rd_ddm_table_tpls_alias$,8)+".dat"

	rd_temppos=pos(pad(cvs(rd_ddm_table_tpls_alias$,4),17," ")=rd_table_chans$[0,0],20)
	if rd_temppos<>0
		rd_tmpl_file=num(rd_table_chans$[0,0](rd_temppos+17,3))
		rd_ddm_table_tpls$=rd_table_chans$[rd_tmpl_file,0]
		return
	endif

	rd_tmpl_file=unt
	open (rd_tmpl_file)rd_dir_dat$+rd_tmpl_file$
	read(rd_tmpl_file,key=pad(rd_ddm_table_tpls_alias$,16))*,*,rd_ddm_table_tpls$

	rd_table_chans$[0,0]=rd_table_chans$[0,0]+pad(cvs(rd_ddm_table_tpls_alias$,4),17," ")+str(rd_tmpl_file:"000")
	rd_table_chans$[rd_tmpl_file,0]=rd_ddm_table_tpls$

	return

open_table_file:rem --- Open Table File If Not So

	rd_ddm_tables_alias$="DDM_TABLES"
	rd_table_file$=cvs(rd_ddm_tables_alias$,8)+".dat"
	rd_temppos=pos(pad(cvs(rd_ddm_tables_alias$,4),17," ")=rd_table_chans$[0,0],20)
	if rd_temppos<>0
		rd_table_file=num(rd_table_chans$[0,0](rd_temppos+17,3))
		rd_ddm_tables$=rd_table_chans$[rd_table_file,0]
		return
	endif

	gosub open_tmpl_file
	
	rd_table_file=unt
	open (rd_table_file)rd_dir_dat$+rd_table_file$
	read(rd_tmpl_file,key=pad(rd_ddm_tables_alias$,16))*,*,rd_ddm_tables$
	rd_table_chans$[0,0]=rd_table_chans$[0,0]+pad(cvs(rd_ddm_tables_alias$,4),17," ")+str(rd_table_file:"000")
	rd_table_chans$[rd_table_file,0]=rd_ddm_tables$

	return

open_sql_db_file:rem --- Open SQL DB file, if not already open

	rd_sql_db_file_alias$="SQL_DB"
	rd_sql_db_file$=cvs(rd_sql_db_file_alias$,8)+".dat"
	rd_temppos=pos(pad(cvs(rd_sql_db_file_alias$,4),17," ")=rd_table_chans$[0,0],20)
	if rd_temppos<>0
		rd_sql_db_file=num(rd_table_chans$[0,0](rd_temppos+17,3))
		rd_sql_db$=rd_table_chans$[rd_sql_db_file,0]
		return
	endif

	gosub open_tmpl_file
	
	rd_sql_db_file=unt
	open (rd_sql_db_file)rd_dir_dat$+rd_sql_db_file$
	read(rd_tmpl_file,key=pad(rd_sql_db_file_alias$,16))*,*,rd_sql_db$
	rd_table_chans$[0,0]=rd_table_chans$[0,0]+pad(cvs(rd_sql_db_file_alias$,4),17," ")+str(rd_sql_db_file:"000")
	rd_table_chans$[rd_sql_db_file,0]=rd_sql_db$

	return

open_sql_db_users_file:rem --- Open SQL DB users file, if not already open

	rd_sql_db_users_alias$="SQL_DB_USERS"
	rd_sql_db_users_file$=cvs(rd_sql_db_users_alias$,8)+".dat"
	rd_temppos=pos(pad(cvs(rd_sql_db_users_alias$,4),17," ")=rd_table_chans$[0,0],20)
	if rd_temppos<>0
		rd_sql_db_users_file=num(rd_table_chans$[0,0](rd_temppos+17,3))
		rd_sql_db_users$=rd_table_chans$[rd_sql_db_users_file,0]
		return
	endif

	gosub open_tmpl_file
	
	rd_sql_db_users_file=unt
	open (rd_sql_db_users_file)rd_dir_dat$+rd_sql_db_users_file$
	read(rd_tmpl_file,key=pad(rd_sql_db_users_alias$,16))*,*,rd_sql_db_users$
	rd_table_chans$[0,0]=rd_table_chans$[0,0]+pad(cvs(rd_sql_db_users_alias$,4),17," ")+str(rd_sql_db_users_file:"000")
	rd_table_chans$[rd_sql_db_users_file,0]=rd_sql_db_users$

	return

open_sql_db_tables_file:rem --- Open SQL DB tables file, if not already open

	rd_sql_db_tables_alias$="SQL_DB_TABLES"
	rd_sql_db_tables_file$=cvs(rd_sql_db_tables_alias$,8)+".dat"
	rd_temppos=pos(pad(cvs(rd_sql_db_tables_alias$,4),17," ")=rd_table_chans$[0,0],20)
	if rd_temppos<>0
		rd_sql_db_tables_file=num(rd_table_chans$[0,0](rd_temppos+17,3))
		rd_sql_db_tables$=rd_table_chans$[rd_sql_db_tables_file,0]
		return
	endif

	gosub open_tmpl_file
	
	rd_sql_db_tables_file=unt
	open (rd_sql_db_tables_file)rd_dir_dat$+rd_sql_db_tables_file$
	read(rd_tmpl_file,key=pad(rd_sql_db_tables_alias$,16))*,*,rd_sql_db_tables$
	rd_table_chans$[0,0]=rd_table_chans$[0,0]+pad(cvs(rd_sql_db_tables_alias$,4),17," ")+str(rd_sql_db_tables_file:"000")
	rd_table_chans$[rd_sql_db_tables_file,0]=rd_sql_db_tables$

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",
:		rd_msg_id$,
:		rd_msg_tokens$[all],
:		rd_msg_opt$,
:		rd_table_chans$[all]

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)

	call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	rd_open_beg=0
	rd_open_end=0

	exit

