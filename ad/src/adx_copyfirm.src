rem Copy Data From Firm To Firm
rem Proprietary Software. AddonSoftware
rem Program ID: adx_copyfirm.aon  <Mar 27, 2006>

	begin

	if stbl("+USE_SETERR")="YES" seterr error_proc

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp0)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp0)+rd_tmp0-1)/rd_tmp0)
	def fnstrip$(rd_tmp0$,rd_tmp1$)=rd_tmp0$(1,pos(fill(50,rd_tmp1$)=rd_tmp0$+fill(50,rd_tmp1$))-1)
	def fngetc_attr$(rd_getc_attr_att0,rd_getc_attr_att0$)=rd_attr_col$[rd_getc_attr_att0,fnstr_pos(rd_getc_attr_att0$,rd_attr_def_col$,5)]
	def fngetv_attr$(rd_getv_attr_att0$,rd_getv_attr_att1$)=rd_attr_col$[fnstr_pos(rd_getv_attr_att0$,rd_attr_col$[0,1],40),fnstr_pos(rd_getv_attr_att1$,rd_attr_def_col$,5)]

rem --- Directory STBLs

	rd_gui_dev$=stbl("+GUI_DEVICE")
	rd_dir_pgm$=stbl("+DIR_PGM")
	rd_dir_img$=stbl("+DIR_IMG")
	rd_dir_sys$=stbl("+DIR_SYS")
	rd_file_usr$=stbl("+FILE_USR"),rd_file_usr$=stbl("+DIR_USR",err=*next)+"aon_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
	rd_file_set$=stbl("+FILE_SET")

rem --- Misc Setup

	rd_milestone=50
	rd_milestone=num(stbl("+MILESTONE",err=*next),err=*next)

	call rd_dir_pgm$+"rdm_attr_init.aon",rd_attr_def_tbl$[all],rd_attr_def_col$[all]
		rd_attr_def_tbl$=rd_attr_def_tbl$[0,0]
		rd_attr_def_col$=rd_attr_def_col$[0,0]

rem --- Open GUI Device

	rd_num_files=5
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]

	rd_open_tables$[1]=rd_gui_dev$,rd_open_opts$[1]="O"
	rd_open_tables$[2]="DDM_TABLES",rd_open_opts$[2]="OTA"
	rd_open_tables$[3]="DDM_TABLE_TPLS",rd_open_opts$[3]="OTA"
	rd_open_tables$[4]="ADM_FIRMS",rd_open_opts$[4]="OTA"
	rd_open_tables$[5]="ADM_MODULES",rd_open_opts$[5]="OTA"

	gosub open_tables

	rd_gui_dev=num(rd_open_chans$[1])
	rd_ddm_tables=num(rd_open_chans$[2]);dim rd_ddm_tables$:rd_open_tpls$[2]
	rd_ddm_table_tpls=num(rd_open_chans$[3]);dim rd_ddm_table_tpls$:rd_open_tpls$[3]
	rd_adm_firms=num(rd_open_chans$[4]);dim rd_adm_firms$:rd_open_tpls$[4]
	rd_adm_modules=num(rd_open_chans$[5]);dim rd_adm_modules$:rd_open_tpls$[5]

	rdBBjAPI!=BBjAPI()
    rdSysGUI!=rdBBjAPI!.getSysGui()

rem --- Get Attributes

	call rd_dir_pgm$+"rdm_attr_init.aon",rd_attr_def_tbl$[all],rd_attr_def_col$[all]
		rd_attr_def_col$=rd_attr_def_col$[0,0]
		rd_attr_def_tbl$=rd_attr_def_tbl$[0,0]

rem --- Main Process

	gosub disp_win
	gosub get_win_settings
	gosub def_grid

	rdForm!.setCursor(3)

	gosub get_firms
	gosub get_modules
	gosub resize_win

	rdForm!.setVisible(1)
	rdForm!.setCursor(0)

	rd_last_sort_col=-1
	rdAppsGrid!.sortByColumn(1,rdAppsGrid!.SORT_ASCENDING)
	gosub set_sort_data

	rdFirmFromList!.focus()

event_ctl:rem --- Event Control

	rdForm!.setCallback(rdForm!.ON_CLOSE,"exit_prog")
	rdForm!.setCallback(rdForm!.ON_RESIZE,"resize_win")

	rdTablesGridHdr!.setCallback(rdTablesGridHdr!.ON_GRID_MOUSE_UP,"grid_hdr_select")
	
	rdBtnCopy!.setCallback(rdBtnCopy!.ON_BUTTON_PUSH,"func_copy")
	rdBtnExit!.setCallback(rdBtnExit!.ON_BUTTON_PUSH,"exit_prog")

	rdAppsGrid!.setCallback(rdAppsGrid!.ON_GRID_KEY_PRESS,"grid_keypress")
	rdAppsGrid!.setCallback(rdAppsGrid!.ON_GRID_MOUSE_UP,"grid_select")

	rdSysGUI!.flushEvents()

    dim rd_gui_event$:tmpl(rd_gui_dev)
    dim rd_notify_base$:noticetpl(0,0)

	process_events,err=*same

grid_hdr_select:rem --- Grid Cell Selected

    rd_gui_event$=rdSysGUI!.getLastEventString()
    rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
    dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
    rd_notice$=rd_notify_base$

    switch rd_notice.code
        case 14;rem LCLICKED
			rd_sort_col=rd_notice.col
			gosub set_sort_data
        break
        case default
        break
    swend

	return

grid_keypress:rem --- Check for Specific Pressed Keys

	rd_gui_event$=rdSysGUI!.getLastEventString()
	rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
	dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
	rd_notice$=rd_notify_base$
	switch rd_notice.wparam
		case 32;rem Space
			gosub switch_value
		break
		case 27;rem Escape
			goto exit_prog
		break
		case 16718;rem Alt+F4
			goto exit_prog
		break
	swend

	return

grid_select:rem --- Grid Cell Selected

    rd_gui_event$=rdSysGUI!.getLastEventString()
    rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
    dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
    rd_notice$=rd_notify_base$

	if rd_notice.col=0 gosub switch_value

	return

switch_value:rem --- Switch Check Values

	rdSysGUI!.setRepaintEnabled(0)

	rdTempRows!=rdAppsGrid!.getSelectedRows()
	if rdTempRows!.size()>0
		for rd_curr_row=1 to rdTempRows!.size()
			if rdAppsGrid!.getCellState(rdTempRows!.getItem(rd_curr_row-1),0)=0
				rdAppsGrid!.setCellState(rdTempRows!.getItem(rd_curr_row-1),0,1)
				else
				rdAppsGrid!.setCellState(num(rdTempRows!.getItem(rd_curr_row-1)),0,0)
			endif
		next rd_curr_row
	endif

	gosub check_status

	rdSysGUI!.setRepaintEnabled(1)

	return

check_status:rem --- Test For Selected Items

	rd_selected_rows=0
	for rd_curr_row=1 to rdAppsGrid!.getNumRows()
		if rdAppsGrid!.getCellState(rd_curr_row-1,0)<>0 rd_selected_rows=rd_selected_rows+1
	next rd_curr_row

	if rd_selected_rows<>0
		rdBtnCopy!.setEnabled(1)
		else
		rdBtnCopy!.setEnabled(0)
	endif

	return

set_sort_data:rem --- Set Background Color of Sorted Column
			
	if rd_sort_col<>rd_last_sort_col rdAppsGrid!.setColumnBackColor(rd_last_sort_col,rdWindowBackColor!)
	rdAppsGrid!.setColumnBackColor(rd_sort_col,rdSortedBackColor!)
	rd_last_sort_col=rd_sort_col

	return

get_firms:rem --- Get List Of Firms

	rdListVect!=rdSysGUI!.makeVector()
	read (rd_adm_firms,key="",dom=*next)

	while more=0
		read record (rd_adm_firms,end=*break)rd_adm_firms$
		rdListVect!.addItem(rd_adm_firms.company_id$+"  "+rd_adm_firms.firm_name$)
	wend

	rdFirmFromList!.insertItems(0,rdListVect!)
	rdFirmFromList!.selectIndex(0)
	rdFirmToList!.insertItems(0,rdListVect!)
	rdFirmToList!.selectIndex(0)
	rdListVect!.clear()

	return

get_modules:rem --- Get List Of Application Modules

	rdGridVect!=rdSysGUI!.makeVector()
	read (rd_adm_modules,key="",dom=*next)

	while more=0
		read record (rd_adm_modules,end=*break)rd_adm_modules$
		if rd_adm_modules.system_id$<>"DD"
			rdGridVect!.addItem("")
			rdGridVect!.addItem(rd_adm_modules.system_id$)
			rdGridVect!.addItem(rd_adm_modules.sys_desc$)
		endif
	wend

	rdAppsGrid!.setNumRows(rdGridVect!.size()/3)
	rdAppsGrid!.setCellText(0,0,rdGridVect!)
	rdGridVect!.clear()

	return

func_copy:rem --- Copy Selected Firms

	rd_firm_from$=rdFirmFromList!.getItemAt(rdFirmFromList!.getSelectedIndex())
	rd_firm_to$=rdFirmToList!.getItemAt(rdFirmToList!.getSelectedIndex())

	rd_firm_from_id$=rd_firm_from$(1,2)
	rd_firm_to_id$=rd_firm_to$(1,2)

	if rd_firm_from_id$=rd_firm_to_id$
		rd_msg_id$="ADMIN_COPY_FIRM_SAME"
		dim rd_msg_tokens$[2]
			rd_msg_tokens$[1]=rd_firm_from$
			rd_msg_tokens$[2]=rd_firm_to$
		gosub disp_message
		return
	endif

	rd_msg_id$="ADMIN_COPY_FIRM"
	dim rd_msg_tokens$[2]
		rd_msg_tokens$[1]=rd_firm_from$
		rd_msg_tokens$[2]=rd_firm_to$
	gosub disp_message

	if rd_msg_opt$<>"Y" return

	rd_selected_apps$=""
	for rd_curr_row=1 to rdAppsGrid!.getNumRows()
		if rdAppsGrid!.getCellState(rd_curr_row-1,0)<>0 rd_selected_apps$=rd_selected_apps$+rdAppsGrid!.getCellText(rd_curr_row-1,1)+";"
	next rd_curr_row

	rd_meter_data$=""
	rd_meter_action$="WIN-LST-MTR-OK"
	rd_meter_total_recs=dec(fin(rd_ddm_tables)(77,4))
	gosub disp_meter
	rd_meter_proc_recs=0

	read(rd_ddm_tables,key="",dom=*next)

	while rd_more=0
		readrecord(rd_ddm_tables,end=*break)rd_ddm_tables$
		rd_meter_proc_recs=rd_meter_proc_recs+1
		if mod(rd_meter_proc_recs,rd_milestone)=0
			rd_meter_action$="MTR"
			gosub disp_meter
		endif
		if pos(rd_ddm_tables.dd_system_id$=rd_selected_apps$,3)=0 or pos(rd_ddm_tables.dd_alias_type$="KXVMD")=0 continue
		readrecord(rd_ddm_table_tpls,key=rd_ddm_tables.dd_table_alias$)rd_ddm_table_tpls$
		if pos("firm_id"=cvs(rd_ddm_table_tpls.dd_table_tpl$,8))<>1 continue
		dim rd_curr_tpl$:rd_ddm_table_tpls.dd_table_tpl$
		rd_curr_table$=rd_ddm_tables.dd_table_alias$
		gosub get_table_keys
		if len(rd_pri_key_str$)>40 gosub copy_table_recs
	wend

	rd_meter_proc_recs=rd_meter_total_recs
	rd_meter_data$=""
	rd_meter_action$="END"
	gosub disp_meter

	return

get_table_keys:rem --- Get Table Keystring

	call rd_dir_pgm$+"rdm_attr_def.aon",
:		rd_curr_table$,
:		rd_attr_def_tbl$[all],
:		rd_attr_def_col$[all],
:		rd_attr_tbl$[all],
:		rd_attr_col$[all],
:		rd_attr_key$[all],
:		"",
:		rd_status$

	rd_pri_key_str$=rd_attr_key$[1,3]
	if len(rd_pri_key_str$)<=40 return

	rd_key_pfx$=rd_firm_from_id$
	rd_key_pfx_add$="YES"

	for rd_curr_key=2 to len(rd_pri_key_str$)/40
		rd_key_pfx_rkey$=fngetv_attr$(rd_pri_key_str$(rd_curr_key*40-39,40),"RKEY")
		rd_key_pfx_pval$=fngetv_attr$(rd_pri_key_str$(rd_curr_key*40-39,40),"PVAL")
		rd_key_pfx_maxl$=fngetv_attr$(rd_pri_key_str$(rd_curr_key*40-39,40),"MAXL")

		if rd_key_pfx_add$="YES" and rd_key_pfx_rkey$="Y" and rd_key_pfx_pval$<>""
			rd_key_pfx$=rd_key_pfx$+pad(seval(rd_key_pfx_pval$),num(rd_key_pfx_maxl$))
			else
			rd_key_pfx_add$=""
		endif

	next rd_curr_key

	return

copy_table_recs:rem --- Copy Records in Selected Table

	rd_num_files=1
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
	rd_open_tables$[1]=rd_curr_table$,rd_open_opts$[1]="OATS"
	gosub open_tables
	rd_source_chan=num(rd_open_chans$[1])

	if rd_source_chan=0
		rd_meter_data$=" ("+rd_curr_table$+") not found"
		rd_meter_action$="LST"
		gosub disp_meter
		return
	endif

	rd_disk_table$=rd_table_chans$[rd_source_chan,1]+rd_table_chans$[rd_source_chan,3]
	rd_target_chan=unt
	open(rd_target_chan)rd_disk_table$

	rd_meter_data$="Processing "+rd_curr_table$
	rd_meter_action$="MTR-LST"
	gosub disp_meter

	rd_recs_copied=0
	
	read(rd_source_chan,key=rd_key_pfx$,dom=*next)

	while rd_more=0
		rd_curr_key$=key(rd_source_chan,end=*break)
		if rd_curr_key$(1,len(rd_key_pfx$))<>rd_key_pfx$ break
		readrecord(rd_source_chan)rd_curr_tpl$
		rd_curr_tpl.firm_id$=rd_firm_to_id$
		switch pos(rd_ddm_tables.dd_alias_type$="MDKXV")
			case 1;rem Single MKEYED
			case 2;rem Direct
				rd_curr_key$(1,2)=rd_firm_to_id$
				writerecord(rd_target_chan,key=rd_curr_key$)rd_curr_tpl$
			break
			case 3;rem MKEYED
			case 4;rem XKEYED
			case 5;rem VKEYED
				writerecord(rd_target_chan)rd_curr_tpl$
			break
			case default
			break
		swend

		rd_recs_copied=rd_recs_copied+1
	wend

	rd_meter_data$="Processed "+rd_curr_table$+" ("+str(rd_recs_copied)+" records)"
	rd_meter_action$="MTR-LSR"
	gosub disp_meter

	close(rd_target_chan)
	rd_open_tables$[1]=rd_curr_table$,rd_open_opts$[1]="AC"
	gosub open_tables

	return

open_tables:rem -----<Open Tables

	call rd_dir_pgm$+"rdc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

disp_message:rem --- Display Message Dialog

	call rd_dir_pgm$+"adc_message.aon",
:		rd_msg_id$,
:		rd_msg_tokens$[all],
:		rd_msg_opt$,
:		rd_table_chans$[all]

	return

disp_meter:rem --- Display Progress Meter

	call rd_dir_pgm$+"rdm_prog_bar.aon",
:		rdSysGUI!,
:		rdForm!,
:		rdMeterWin!,
:		rd_meter_title$,
:		rd_meter_total_recs,
:		rd_meter_proc_recs,
:		rd_meter_data$,
:		rd_meter_action$

	return

get_win_settings:rem --- Get Window Settings

	rd_save_win_desc$=pad("WIN_[COPYFIRM]",20)

	call rd_dir_pgm$+"rdc_winsize.aon",rd_save_win_desc$,"W","",rdForm!,"READ",rd_win_coord[all]

	return

save_win_settings:rem --- Save Window Settings

	call rd_dir_pgm$+"rdc_winsize.aon",rd_save_win_desc$,"W","",rdForm!,"SAVE",rd_win_coord[all]

	return

disp_win:rem --- Display Window

	dim rd_ctl_misc$[20]

	rd_form_id$=rd_dir_sys$+"adx_copyfirm.arc"

	call rd_dir_pgm$+"rdm_controls.aon",
:		rd_gui_dev,
:		rdSysGUI!,
:		rd_form_id$,
:		rd_win_coord[all],
:		rdForm!,
:		"DISPLAY",
:		rd_open_chan$[all],
:		rd_ctl_misc$[all]

	rd_meter_title$=rdForm!.getTitle()

	rdFirmFromList!=rdForm!.getControl(3001)
	rdFirmToList!=rdForm!.getControl(3002)
	rdAppsGrid!=rdForm!.getControl(5000)
	rdBtnCopy!=rdForm!.getControl(1)
		rdBtnCopy!.setEnabled(0)
	rdBtnExit!=rdForm!.getControl(2)

	rd_win_disp$="YES"

	return

def_grid:rem --- Define Grid

	rd_def_cols=3
	dim rd_attr_col$[rd_def_cols,len(rd_attr_def_col$)/5]
		rd_attr_col$[1,fnstr_pos("DVAR",rd_attr_def_col$,5)]="COPY"
		rd_attr_col$[1,fnstr_pos("LABS",rd_attr_def_col$,5)]=""
		rd_attr_col$[1,fnstr_pos("CTLW",rd_attr_def_col$,5)]="25"
		rd_attr_col$[1,fnstr_pos("MAXL",rd_attr_def_col$,5)]="1"
		rd_attr_col$[1,fnstr_pos("CTYP",rd_attr_def_col$,5)]="C"

		rd_attr_col$[2,fnstr_pos("DVAR",rd_attr_def_col$,5)]="CODE"
		rd_attr_col$[2,fnstr_pos("LABS",rd_attr_def_col$,5)]="Cd"
		rd_attr_col$[2,fnstr_pos("CTLW",rd_attr_def_col$,5)]="30"

		rd_attr_col$[3,fnstr_pos("DVAR",rd_attr_def_col$,5)]="DESC"
		rd_attr_col$[3,fnstr_pos("LABS",rd_attr_def_col$,5)]="Description"
		rd_attr_col$[3,fnstr_pos("CTLW",rd_attr_def_col$,5)]="200"

		for rd_curr_attr=1 to rd_def_cols
			rd_attr_col$[0,1]=rd_attr_col$[0,1]+pad("COPY_FIRM."+rd_attr_col$[rd_curr_attr,fnstr_pos("DVAR",rd_attr_def_col$,5)],40)
		next rd_curr_attr
		rd_attr_disp_col$=rd_attr_col$[0,1]

	call rd_dir_pgm$+"rdm_grid_init.aon",rd_gui_dev,rdAppsGrid!,"COLH-MULTI-AUTO-LINES-LIGHT-CHECKS",100,rd_attr_def_col$[all],rd_attr_disp_col$,rd_attr_col$[all]

	rdTablesGridHdr!=rdAppsGrid!.getColumnHeader()
	rdSortedBackColor!=rdSysGUI!.makeColor(250,250,250)
	rdWindowBackColor!=rdAppsGrid!.getBackColor()

	return

resize_win:rem --- Resize Window Contents

	rdAppsGrid!.setSize(rdForm!.getWidth()-(rdAppsGrid!.getX()*2),rdForm!.getHeight()-93)
	rdFirmFromList!.setSize(rdAppsGrid!.getWidth()-(rdFirmFromList!.getX()-rdAppsGrid!.getX()),rdFirmFromList!.getHeight())
	rdFirmToList!.setSize(rdAppsGrid!.getWidth()-(rdFirmToList!.getX()-rdAppsGrid!.getX()),rdFirmToList!.getHeight())
	rdBtnCopy!.setLocation(rdForm!.getWidth()-150,rdForm!.getHeight()-30)
	rdBtnExit!.setLocation(rdForm!.getWidth()-75,rdForm!.getHeight()-30)
	rdAppsGrid!.setFitToGrid(rdAppsGrid!.AUTO_RESIZE_LAST_COLUMN)

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5),err=*next)

	call stbl("+DIR_PGM")+"adc_error.aon",pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	if rd_win_disp$="YES" gosub save_win_settings

	run stbl("+DIR_PGM")+"ads_process_end.aon"
