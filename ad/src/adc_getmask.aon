rem adc - Retrieve masks
rem Program adc_getmask v8.0.0 29Aug2007 (syc_rm)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- element_id$  : Element name
rem --- app_id$      : Application ID (in)
rem --- mask_type$   : A = Amount
rem                    I = ID
rem                    U = Units
rem                    % = Percent
rem                    R = Rate
rem                    E = Extension
rem                    Q = Quantity
rem                    C = Cost
rem                    P = Price
rem                    V = Conversion Factor
rem                    M = Material Factor
rem                    O = Overhead Factor
rem                    H = Hours
rem                    Z = Zip Code
rem                    T = Telephone
rem --- i_mask$      : Requested input mask (out)
rem --- o_mask$      : Requested output mask (out)

rem --- If element_id$ is not blank, it will use that.
    seterr std_error
    setesc std_error

    enter element_id$,app_id$,mask_type$,i_mask$,o_mask$

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

misc_vars:rem --- Misc Variables

	rd_dir_syp$=stbl("+DIR_SYP")
	rd_dir_img$=stbl("+DIR_IMG")
	rd_dir_sys$=stbl("+DIR_SYS")
	rd_gui_dev$=stbl("+GUI_DEVICE")
	rd_file_usr$=stbl("+FILE_USR"),rd_file_usr$=stbl("+DIR_USR",err=*next)+"bar_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
	rd_file_set$=stbl("+FILE_SET")
	rd_user_id$=stbl("+USER_ID")

	rd_task_val$="EXPAND_ELEMENT"+str(dec(info(3,0)):"0000")

rem --- Open Tables

	rd_num_files=2
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]

	rd_open_tables$[1]="DDM_ELEMENTS",rd_open_opts$[1]="OTA"
	rd_open_tables$[2]="ADS_MASKS",rd_open_opts$[2]="OTA"

	gosub open_tables

	ddm_elements_dev=num(rd_open_chans$[1]);dim ddm_elementsa$:rd_open_tpls$[1]
	ads_mask_dev=num(rd_open_chans$[2]);dim ads_masksa$:rd_open_tpls$[2]

initializations: rem --- Initializations

    valid_type$="AIU%REQCPVMOHZT"
    i_mask$=""
    o_mask$=""

rem --- Verify valid input

    if cvs(element_id$,2)=""
        if cvs(app_id$,2)="" or cvs(mask_type$,2)=""
            goto done
        endif
        if len(mask_type$)<>1
            goto done
        endif
        if pos(mask_type$=valid_type$)=0 
            goto done
        endif    
        readrecord(ads_mask_dev,key=firm_id$+app_id$+mask_type$,dom=done)ads_masksa$
        i_mask$=ads_masksa.dd_attr_mski$
        o_mask$=ads_masksa.dd_attr_msko$
    else
        readrecord(ddm_elements_dev,key=pad(element_id$,16),dom=done)ddm_elementsa$
        readrecord(ads_mask_dev,key=firm_id$+ddm_elementsa.dd_system_id$+
:                                   ddm_elementsa.dd_mask_type$,dom=done)ads_masksa$
        i_mask$=ads_masksa.dd_attr_mski$
        o_mask$=ads_masksa.dd_attr_msko$
    endif

done: rem --- All done

    close(ddm_elements_dev,err=*next)
    close(ads_masks_dev,err=*next)
    goto std_exit

open_tables:rem -----<Open Tables

	call rd_dir_syp$+"bac_open_tables.bbj",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	return

rem --- Functions

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
