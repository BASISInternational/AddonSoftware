rem ==========================================================================
rem --- ado_AO_CdfMassager.aon 
rem --- AO_CdfMassager class (GitRepoInterface superclass)
rem --- Superclass used to restructure data/cdf callpoint programs.
rem --- Alphabetizes callpoints, and merges Mods project before/after callpoints into standard code.
rem --- 
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use java.io.File
    use java.util.Arrays
    use java.util.ArrayList
    use java.util.Iterator
    use java.util.Map
    use java.util.regex.Matcher
    use java.util.regex.Pattern
    use java.util.Scanner
    use java.util.Set
    use java.util.TreeMap
    use java.util.LinkedHashMap
    use java.util.Vector

    use ::ado_file.src::FileObject

rem /**
rem  * This class is used to restructure data/cdf callpoint programs.
rem  * Alphabetizes callpoints, and merges Mods project before/after callpoints into standard code.
rem  */
    
    class public AO_CdfMassager
    
        field protected BBjString CALLPOINT_SUFFIX!="\.([AB])\]\]\s*$"
        field protected BBjString SKIP_STRING!=".*setStatus\(\"+$22$+"([^-\r]*)-?SKIP-?(.*)\"+$22$+"\).*"
        
        rem /**
        rem  * Constructor.
        rem  */
        method public AO_CdfMassager()
            seterr GitRepoInterface_error
            
            methodret
            
GitRepoInterface_error:rem --- Method error trap/handler (11Oct2017)
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
    
        rem /**
        rem  * Combines two Maps of callpoint code into a single combined Map.
        rem  * 
        rem  * @param Map aonCallpoints! -- from readCdfFile() method
        rem  * @param Map modsCallpoints! -- from readCdfFile() method
        rem  *
        rem  * @return Map combinedCallpoints!
        rem  */
        method public Map combineCdfFiles(Map aonCallpoints!, Map modsCallpoints!)
            
            declare Set modKeys!
            declare Iterator modKeyIter!
            declare BBjString modKey!
            declare BBjString aonKey!
            declare BBjString suffix!
            declare BBjString aonBody!
            declare BBjString modsBody!
            declare BBjString body!
            
            REM Iterate through the mods callpoints and correlate them to the core callpoints 
            modKeys!=modsCallpoints!.keySet()
            modKeyIter!=modKeys!.iterator()
            
            while modKeyIter!.hasNext()
                suffix!=""
                modKey!=cast(BBjString,modKeyIter!.next())
                
                rem -- handle custom callpoints 
                custom!=modKey!.contains("<CUSTOM>")
                if (custom!) then
                    newKey!=#desuffix(modKey!)
                    body!=cast(BBjString,modsCallpoints!.get(modKey!))
                    body!=newKey!+$0A$+"REM *** Custom from mods ***"+$0A$+"REM    "+body!.replace("[[","").replace("]]","")
                    aonCallpoints!.put(newKey!,body!)
                    continue
                endif 
                
                rem -- get the callpoint header suffix
                suffix!=#getSuffix(modKey!) 
                
                rem -- ignore  callpoints without a suffix  
                if (suffix!.length()<=0) then 
                    continue
                endif  
                
                rem -- handle callponts with a suffix 
                aonKey!=#desuffix(modKey!)
                
                aonBody!=cast(BBjString,aonCallpoints!.get(aonKey!))
                modsBody!=cast(BBjString,modsCallpoints!.get(modKey!))
                
                REM -- REM the header line of the addon callpoint
                if (aonBody!<>null()) then
                    aonBody!="REM    "+aonBody!.replace("[[","").replace("]]","")
                endif 

                REM -- REM the header line of the mods callpoint 
                if (modsBody!<>null()) then
                    modsBody!="REM    "+modsBody!.replace("[[","").replace("]]","")
                else 
                    REM -- Throw an error on a null mods callpoint.  This should not be able to happen, so something is wrong
                    throw "Mods callpoint is completely empty.  This should never happen.",17
                endif 

                rem -- there's a before or after callpoint in mods that's not defined at all in core 
                if aonBody!=null() then 
                    body!=aonKey!+$0A$+"REM *** Callpoint from mods that's not in core ***"+$0A$+modsBody!
                    body!=#replaceSkips(body!)
                    aonCallpoints!.put(aonKey!,body!)
                    continue
                endif 
                
                rem -- append after callpoint to core callpoint 
                if suffix!="A" then 
                    body!=aonKey!+$0A$+"REM *** Core + After: Core ***"+$0A$+aonBody!+$0A$+"REM *** Core + After: After ***"+$0A$+modsBody!
                endif 
                
                rem -- if before without skip, append the core callpoint to the before callpoint, otherwise, replace the core 
                if suffix!="B" then
                    if (#isSkipPresent(modsBody!)) then
                        modsBody!=#replaceSkips(modsBody!)
                        body!=aonKey!+$0A$+"REM *** Before with skip ***"+$0A$+modsBody!
                    else 
                        body!=aonKey!+$0A$+"REM *** Before without skip + Core: Before ***"+$0A$+modsBody!+$0A$+"REM *** Before without skip + Core: Core ***"+$0A$+aonBody!
                    endif 
                endif 
                
                if (suffix!<>"A" and suffix!<>"B") then
                    throw "Don't know what to do for suffix: "+suffix!,17
                endif 
                
                aonCallpoints!.put(aonKey!,body!)
            wend 
            methodret aonCallpoints!
        methodend 
    
        rem /**
        rem  * Combines modified Addon callpoint code with standard Addon callpoint code
        rem  * into a single data/cdf callpoint program in the Addon installation. 
        rem  * 
        rem  * @param BBjString modsCdfDir$ -- path for Mods project data/cdf directory
        rem  * @param BBjString aonCdfDir$ -- path for Addon installation data/cdf directory
        rem  */
        method public void importModChanges(BBjString modsCdfDir$, BBjString aonCdfDir$)
            seterr importModChanges_error

            declare java.io.File modsCdfDir!
            declare java.io.File aonCdfDir!

            rem --- Standardize paths
            modsCdfDir$=FileObject.fixPath(modsCdfDir$, "/")
            modsCdfDir$=FileObject.addEndSlash(modsCdfDir$, "/")
            aonCdfDir$=FileObject.fixPath(aonCdfDir$, "/")
            aonCdfDir$=FileObject.addEndSlash(aonCdfDir$, "/")
            
            rem --- Verify directories exist
            rem     Throw an error if these directories don't exist. These directories must exist with CDF
            rem     files for the massager to work. 
            modsCdfDir!=new File(modsCdfDir$)
            if !modsCdfDir!.exists() or !modsCdfDir!.isDirectory() then throw "Directory "+modsCdfDir!.getPath()+" doesn't exist or isn't a directory.",12
            aonCdfDir!=new File(aonCdfDir$)
            if !aonCdfDir!.exists() or !aonCdfDir!.isDirectory() then throw "Directory "+modsCdfDir!.getPath()+" doesn't exist or isn't a directory.",12
            
            rem --- Process mods cdf files
            modsCdfs! = new Vector(java.util.Arrays.asList(modsCdfDir!.listFiles()))
            modsCdfIter!=modsCdfs!.iterator()
            while modsCdfIter!.hasNext()
                modsCdfFile!=modsCdfIter!.next()
                if !modsCdfFile!.getName().endsWith(".cdf") then continue
                aonCdfFile!=new File(aonCdfDir$+"/"+modsCdfFile!.getName())

                rem --- If cdf file exits in both mods and aon, then combine the two cdf files
                if (aonCdfFile!.exists()) then
                    aonCallpoints!=#readCdfFile(aonCdfFile!.getPath())
                    modsCallpoints!=#readCdfFile(modsCdfFile!.getPath())
                    combinedCallpoints!=#combineCdfFiles(aonCallpoints!,modsCallpoints!)
                    #writeCdfFile(combinedCallpoints!,aonCdfFile!.getPath())
                endif 
            wend
            
            methodret
            
importModChanges_error:rem --- Method error trap/handler (11Oct2017)
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
        rem /**
        rem  * Builds LinkedHashMap of callpoint code in specified cdf file.
        rem  * 
        rem  * @param BBjString filePath$ -- cdf file path
        rem  *
        rem  * @return LinkedHashMap cdfMap!
        rem  */
        method public Map readCdfFile(BBjString filePath$)
            methodret #readCdfFile(filePath$,new LinkedHashMap())
        methodend 

        rem /**
        rem  * Builds LinkedHashMap of callpoint code in specified cdf file.
        rem  * 
        rem  * @param BBjString filePath$ -- cdf file path
        rem  *
        rem  * @return LinkedHashMap cdfMap!
        rem  */
        method public Map readCdfFile(BBjString filePath$, Map cdfMap!)
            seterr readCdfFile_error
            
            declare BBjString replacementString!
            declare BBjString currentHeaderLine!
            
            if (cdfMap!=null()) then throw "Map parameter cannot be null",253

            rem --- Initializations
            keyPattern!="^\s*\[\[.*\]\]"
            pattern!=Pattern.compile(keyPattern!)
            
            rem --- Read all callpoints from a cdf file and put them into a map
            key!=null()
            body!=""
            fl!=new File(filePath$)
            sc!=new Scanner(fl!,err=*next)
            if sc!<>null()
                while (sc!.hasNextLine()) 
                    rem --- Test for new callpoint.
                    newLine!=sc!.nextLine()
                    matcher!=pattern!.matcher(newLine!)
                    if (matcher!.find()) then
                        newKey!=matcher!.group()
                        currentHeaderLine!=cast(BBjString,newLine!) 
                    else 
                        newKey!=null()
                    endif 
                    
                    rem -- handle new callpoint 
                    if (newKey!<>null()) then
                        cdfMap!.put(newKey!,"") 
                        key!=newKey!
                        newKey!=null() 
                    endif                     
                    cdfMap!.put(key!,cast(BBjString,cdfMap!.get(key!))+newLine!+$0A$) 
                wend
                sc!.close()
            endif
            methodret cdfMap!
            
readCdfFile_error:rem --- Method error trap/handler (11Oct2017)
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Returns the given callpoint body with callpoint skips remmed out and replaced if
        rem  * there's additional stati. 
        rem  * 
        rem  * @param BBjString body! 
        rem  *
        rem  * @return the body with skips replaced
        rem  */        
        method protected BBjString replaceSkips(BBjString body!)
            declare Pattern skipPattern!
            declare Matcher skipMatcher!
            declare java.util.List lines!
            declare Iterator lineIter!
            declare BBjString modifiedBody!
            declare BBjString currentLine!
            declare BBjString group1!
            declare BBjString ground2!
            declare BBjString modifiedLine!
            
            modifiedBody!=""
            lines!=Arrays.asList(body!.split($0A$))
        
            lineIter!=lines!.iterator()
            
            while lineIter!.hasNext()
                currentLine!=cast(BBjString,lineIter!.next())
                if (! currentLine!.matches(#SKIP_STRING!)) then
                    modifiedBody!=modifiedBody!+currentLine!+$0A$
                    continue
                endif 
                
                skipPattern!=Pattern.compile(#SKIP_STRING!)
                skipMatcher!=skipPattern!.matcher(currentLine!)
                skipMatcher!.find()
                
                group1!=skipMatcher!.group(1)
                group2!=skipMatcher!.group(2)
                
                action!=""
                if (group1!.length()>0) then 
                    action!=group1!
                endif 
                    
                if (group2!.length()>0) then 
                    if (action!.length()>0) then 
                        action!=action!+"-"+group2!
                    else 
                        action!=group2!
                    endif 
                endif
                
                modifiedLine!="REM    "+currentLine!
                if (action!.length()>0) then 
                    modifiedLine!=modifiedLine!+$0A$+"callpoint!.setStatus("+$22$+action!+$22$+")"
                endif   
                
                modifiedBody!=modifiedBody!+modifiedLine!+$0A$
            wend 
            methodret modifiedBody!
        methodend 

        rem /**
        rem  * Returns true if the callpoint body contains a setStatus("*SKIP*")
        rem  * 
        rem  * @param BBjString body! 
        rem  *
        rem  * @return true if there's a skip status in the callpoint
        rem  */        
        method protected BBjNumber isSkipPresent(BBjString body!)
            declare Pattern skipPattern!
            declare Matcher skipMatcher!
            
            skipPattern!=Pattern.compile(#SKIP_STRING!)
            skipMatcher!=skipPattern!.matcher(body!)
            methodret skipMatcher!.find()
        methodend 

        rem /**
        rem  * Returns the single letter suffix of the callpoint header
        rem  * 
        rem  * @param BBjString key! 
        rem  *
        rem  * @return the single letter character suffix of the callpoint header
        rem  */
        method protected BBjString getSuffix(BBjString key!)
            declare Pattern pattern!
            declare Matcher matcher! 
            declare BBjString group!
            
            pattern!=Pattern.compile(#CALLPOINT_SUFFIX!)
            matcher!=pattern!.matcher(key!)
            if (matcher!.find()) then  
                methodret matcher!.group(1).toUpperCase()
            else 
                methodret ""
            endif 
        methodend        

        rem /**
        rem  * Transforms a callpoint header with a suffix into a callpoint header without a suffix 
        rem  * 
        rem  * @param BBjString key! 
        rem  *
        rem  * @return the callpoint without the suffix
        rem  */
        method protected BBjString desuffix(BBjString key!)
            methodret key!.replaceAll(#CALLPOINT_SUFFIX!,"]]")
        methodend 

        rem /**
        rem  * Returns whether the callpoint header denotes a before callpoint
        rem  * 
        rem  * @param BBjString key! 
        rem  *
        rem  * @return 1 if the key string ends with the before callpoint suffix, 0 otherwise 
        rem  */
        method protected BBjNumber isBefore(BBjString key!)
            methodret #getSuffix(key!)="B"
        methodend 

        rem /**
        rem  * Builds TreeMap of callpoint code in specified cdf file.
        rem  * 
        rem  * @param BBjString filePath$ -- cdf file path
        rem  *
        rem  * @return TreeMap cdfMap!
        rem  */
        method public Map readAndOrderCdfFile(BBjString filePath$)
            methodret #readCdfFile(filePath$,new TreeMap())
        methodend 

        rem /**
        rem  * Writes specified cdf file from given LinkedHashMap of callpoint code.
        rem  * 
        rem  * @param LinkedHashMap cdfMap! -- cdf callpoint code
        rem  * @param BBjString filePath$ -- cdf file path
        rem  */
        method public void writeCdfFile(Map cdfMap!, BBjString filePath$)
            seterr writeCdf_error
            
            rem --- Open specified cdf file.  Warning: this will overwrite an existing file
            erase filePath$,err=*next
            string filePath$
            chan=unt
            open (chan) filePath$
            
            rem --- Go through LinkedHashMap and write all the callpoints
            iter!=cdfMap!.keySet().iterator()
            sv_key$=""
            sv_cp$=""
            while (iter!.hasNext())
                key!=cast(BBjString,iter!.next())
                cp!=cast(BBjString,cdfMap!.get(key!))
                print (chan) cp!,
            wend

            close (chan)
            
            methodret
            
writeCdf_error:rem --- Method error trap/handler (11Oct2017)
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend 

        rem /**
        rem  * Writes specified cdf file from given TreeMap of callpoint code.
        rem  * 
        rem  * @param TreeMap cdfMap! -- cdf callpoint code
        rem  * @param BBjString filePath$ -- cdf file path
        rem  */
        method public void writeOrderedCdfFile(TreeMap cdfMap!, BBjString filePath$)
            #writeCdfFile(cdfMap!,filePath$)
        methodend 
classend
