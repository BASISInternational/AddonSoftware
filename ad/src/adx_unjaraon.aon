rem ==========================================================================
rem --- adx_unjaraon.aon 
rem --- Utility to unpackage (un-jar) copy of complete Barista installation previously 
rem --- created via the Copy Addon Installation Utility adx_jaraon.aon.
rem --- 
rem --- AddonSoftware Version 19.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use java.io.File
    use java.util.Properties
    use java.util.Vector

    setesc std_error
    seterr std_error

rem --- Initializations
    sourcePaths!=new Properties()
    sysGUI! = BBjAPI().getSysGui()
    systems!=new Properties()
    savedDir$=dir("")

rem --- Get user inputs
    baseDir$=Option!.getOptionData("BASE_DIR")
    jarFile$=Option!.getOptionData("JAR_FILE")
    barDir$=Option!.getOptionData("BAR_DIR")


rem --- Open DDM_TABLE_TPLS in target Barista installation
    ddmTableTpls_dev=unt
    open(ddmTableTpls_dev)barDir$+"/sys/data/ddm_table_tpls.dat"; rem --- Error if not found, something is wrong.
    dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"

rem --- Open DDM_SYSTEMS in target Barista installation
    ddmSystems_dev=unt
    open(ddmSystems_dev)barDir$+"/sys/data/ddm_systems.dat"; rem --- Error if not found, something is wrong.
    findrecord(ddmTableTpls_dev,key=pad("DDM_SYSTEMS",16))ddm_table_tpls$; rem --- Error if not found, something is wrong.
    dim ddmSystems$:ddm_table_tpls.template$

rem --- Get Mounted Directory for system (application) installed in target Barista
    read(ddmSystems_dev,key="",dom=*next)
    while 1
        readrecord(ddmSystems_dev,end=*break)ddmSystems$
        systems!.setProperty(cvs(ddmSystems.mount_sys_id$,2),cvs(ddmSystems.mount_dir$,2))
    wend
    
rem --- Start main progress meter
    meter_title$=rdForm!.getTitle()
    meter_total_recs=9
rem wgh ... 9625 ... if pre-v19 then meter_total_recs=meter_total_recs+1
    meter_text$=""
    meter_action$="WIN-LST-OK"
    gosub disp_meter
    mainMeter!=meterWin!
    mainMeterProcRecs=meter_proc_recs
    mainMeterTotalRecs=meter_total_recs

rem --- Open log file
    location$ = baseDir$
    gosub open_log

rem --- Un-package existing Barista installation jar file at the new installation base directory

    rem --- Increment main progress meter
    meterWin!=mainMeter!
    meter_total_recs=mainMeterTotalRecs
    mainMeterProcRecs=mainMeterProcRecs+1
    meter_text$="Extract files from jar file "+baseDir$+File.separator+jarFile$
    meter_proc_recs=mainMeterProcRecs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

rem goto wgh1; rem wgh ... 9625 ... testing
    rem --- Un-package jar file
    chdir baseDir$
    x=scall("jar -xf "+jarFile$)
    chdir savedDir$
wgh1: rem wgh ... 9625 ... testing

rem --- Build sourcePath! Properties object from “Canonical Path:” lines in adx_jaraon.log file

    rem --- Increment main progress meter
    meterWin!=mainMeter!
    meter_total_recs=mainMeterTotalRecs
    mainMeterProcRecs=mainMeterProcRecs+1
    meter_text$="Get old source paths used"
    meter_proc_recs=mainMeterProcRecs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

    rem --- Process “Canonical Path:” lines in adx_jaraon.log file
    sourceLog$=baseDir$+File.separator+"adx_jaraon.log"
    sourceLog_dev=unt
    open(sourceLog_dev,isz=-1)sourceLog$; rem --- Error if not found, something is wrong.
    while 1
        read(sourceLog_dev,end=*break)line$

        key$=line$(1,pos(":"=line$))
        switch (BBjAPI().TRUE)
            case key$="Source Installation Base Directory:"
                sourceBaseDir$=cvs(line$(pos(":"=line$)+1),3)
                break
            case key$="Canonical Path:"
                path$=line$(pos(": "=line$)+2)
                path$=path$(1,pos("::::"=path$)-1)
                canonicalPath$=line$(pos("::::"=line$)+4)
                sourcePaths!.setProperty(path$,canonicalPath$)
                break
            case default
                break
        swend
    wend
    close(sourceLog_dev,err=*next)


rem --- Set permissions for extracted directory and file
rem wgh ... 9625 ... come back to this later

rem --- Update paths in system (application) syn file

    rem --- Increment main progress meter
    meterWin!=mainMeter!
    meter_total_recs=mainMeterTotalRecs
    mainMeterProcRecs=mainMeterProcRecs+1
    meter_text$="Update paths in *.syn files"
    meter_proc_recs=mainMeterProcRecs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

    rem --- Locate target syn files and update paths
    systemsIter!=systems!.keySet().iterator()
    while systemsIter!.hasNext()
        system$=systemsIter!.next()
        sourceMountDir$=systems!.getProperty(system$)
        if !sourcePaths!.containsKey(sourceMountDir$) then continue
        sourceCanonicalMountDir$=sourcePaths!.getProperty(sourceMountDir$)
        if pos(sourceBaseDir$=sourceCanonicalMountDir$)=1 then
            targetMountDir$=baseDir$+sourceCanonicalMountDir$(len(sourceBaseDir$)+1)
        endif
        print(log_dev)"    "+targetMountDir$

        rem --- Open target syn file, and temporary work file
        appSynFile$=targetMountDir$+"/config/"+cvs(system$,8)+".syn"
        appSyn_dev=unt
        open(appSyn_dev,isz=-1)appSynFile$; rem --- Error if not found, something is wrong.
        tmpWorkFile$=targetMountDir$+"/config/workfile.tmp"
        erase tmpWorkFile$, err=*next
        tmpWork_dev=unt
        open(tmpWork_dev,isz=-1,mode="O_CREATE,O_TRUNC")tmpWorkFile$

        rem --- Update paths
        while 1
            read(appSyn_dev,end=*break)record$

            key$ = record$(1, pos("="=record$) - 1)
            switch (BBjAPI().TRUE)
                case key$ = "DIR"
                case key$ = "SYSDIR"
                    xpos = pos("="=record$)
                    path$ = cvs(record$(xpos+1),3)
                    sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                    if sourcePaths!.containsKey(path$) then
                        if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                            path$=baseDir$+sourceCanonicalPath$(len(sourceBaseDir$)+1)
                        endif
                        record$=record$(1,pos("="=record$,1,2))+path$
                    endif
                    print(log_dev)"        "+key$+": "+path$
                    break
                case key$ = "APROD"
                case key$ = "SYSAPP"
                    xpos = pos("="=record$)
                    ypos = pos(";"=record$)
                    app$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    xpos = pos(";"=record$,1,5)
                    ypos = pos(";"=record$,1,6)
                    path$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    if sourcePaths!.containsKey(path$) then
                        sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                        if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                            path$=baseDir$+sourceCanonicalPath$(len(sourceBaseDir$)+1)
                        endif
                        record$=record$(1,xpos)+path$+record$(ypos)
                    endif
                    print(log_dev)"        "+key$+"="+app$+": "+path$
                    break
                case key$ = "STBL"
                case key$ = "SYSSTBL"
                    xpos = pos(" "=record$)
                    ypos = pos("="=record$,1,2)
                    stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    path$ = cvs(record$(ypos+1),3)
                    rem --- Sanity check if this looks like a path
                    if (pos("/"=path$) or pos("\"=path$)) and (pos("http:"=path$)=0 and pos("https:"=path$)=0) then
                        if sourcePaths!.containsKey(path$) then
                            sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                            if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                path$=baseDir$+sourceCanonicalPath$(len(sourceBaseDir$)+1)
                            endif
                            record$=record$(1,ypos)+path$
                        endif
                        print(log_dev)"        "+key$+" "+stbl$+": "+path$
                    endif
                    break
                case key$ = "PREFIX"
                case key$ = "SYSPFX"
                    xpos = pos("="=record$)
                    path$ = cvs(record$(xpos+1),3)
                    if sourcePaths!.containsKey(path$) then
                        sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                        if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                            path$=baseDir$+sourceCanonicalPath$(len(sourceBaseDir$)+1)
                        endif
                        record$=record$(1,xpos)+path$
                    endif
                    print(log_dev)"        "+key$+": "+path$
                    break
                case key$ = "CFG"
                case key$ = "SYSCFG"
                    xpos = pos("="=record$)
                    ypos = pos("="=record$,1,2)
                    stbl$ = cvs(record$(xpos+1, ypos-xpos-1),3)
                    path$ = cvs(record$(ypos+1),3)
                    if sourcePaths!.containsKey(path$) then
                        sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                        if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                            path$=baseDir$+sourceCanonicalPath$(len(sourceBaseDir$)+1)
                        endif
                        record$=record$(1,ypos)+path$
                    endif
                    print(log_dev)"        "+key$+" "+stbl$+": "+path$
                    break
                case default
                    rem --- skip other lines
                    break
            swend
            write(tmpWork_dev)record$
        wend
        close(appSyn_dev,err=*next)
        close(tmpWork_dev,err=*next)
        erase appSynFile$, err=*next
        rename tmpWorkFile$ to appSynFile$, err=*next
    wend

rem --- Update paths in system (application) adm_modules~*.xml files
    pathsToAdmModules!=new Vector()
    pathsToAdmModules!.add("data"+File.separator+"sync")
    pathsToAdmModules!.add("data"+File.separator+"admin_backup")
    for i=0 to pathsToAdmModules!.size()-1
        admModulePath$=pathsToAdmModules!.get(i)

        rem --- Increment main progress meter
        meterWin!=mainMeter!
        meter_total_recs=mainMeterTotalRecs
        mainMeterProcRecs=mainMeterProcRecs+1
        meter_text$="Update paths in "+admModulePath$+File.separator+"adm_modules~*.xml files"
        meter_proc_recs=mainMeterProcRecs
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)
        print(log_dev)meter_text$

        rem --- Locate target adm_modules~*.xml files and update paths
        systemsIter!=systems!.keySet().iterator()
        while systemsIter!.hasNext()
            system$=systemsIter!.next()
            sourceMountDir$=systems!.getProperty(system$)
            if !sourcePaths!.containsKey(sourceMountDir$) then continue
            sourceCanonicalMountDir$=sourcePaths!.getProperty(sourceMountDir$)
            if pos(sourceBaseDir$=sourceCanonicalMountDir$)=1 then
                targetMountDir$=baseDir$+sourceCanonicalMountDir$(len(sourceBaseDir$)+1)
            endif
    
            rem --- Process adm_modules~*.xml files for this system
            dir!=new File(targetMountDir$ + File.separator + admModulePath$)
            rem --- Validate directory
            if dir! <> null() and dir!.exists() and dir!.isDirectory() and dir!.list() <> null()
                fileVector! = new Vector(java.util.Arrays.asList(dir!.list(new AdmModulesFileter())))
                
                if(fileVector!.size()>0) then
                    rem --- Update paths in LOCALE_PATH and DD_MOUNT_DIR tags
                    startLocalePath$ = "<LOCALE_PATH>"
                    startLocalePathLen = len(startLocalePath$)
                    endLocalePath$ = "</LOCALE_PATH>"
                    startDdMountDir$ = "<DD_MOUNT_DIR>"
                    startDdMountDirLen = len(startDdMountDir$)
                    endDdMountDir$ = "</DD_MOUNT_DIR>"
                    
                    for j=0 to fileVector!.size()-1
                        admModuleFile$=dir!.getCanonicalPath()+File.separator+fileVector!.get(j)
                        print(log_dev)"    "+admModuleFile$

                        rem --- Open target adm_modules~*.xml file, and temporary work file
                        admModule_dev=unt
                        open(admModule_dev,isz=-1)admModuleFile$; rem --- Error if not found, something is wrong.
                        tmpWorkFile$=dir!.getCanonicalPath()+File.separator+"workfile.tmp"
                        erase tmpWorkFile$, err=*next
                        tmpWork_dev=unt
                        open(tmpWork_dev,isz=-1,mode="O_CREATE,O_TRUNC")tmpWorkFile$

                        rem --- Update paths
                        while 1
                            read(admModule_dev,end=*break)record$

                            rem --- Update path in <LOCALE_PATH> lines
                            startLocalePath = pos(startLocalePath$=cvs(record$,4))
                            if startLocalePath then
                                path$ = record$(startLocalePath + startLocalePathLen)
                                path$ = path$(1,pos(endLocalePath$=cvs(path$,4))-1)
                                if sourcePaths!.containsKey(path$) then
                                    sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                                    if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                        path$=baseDir$+sourceCanonicalPath$(len(sourceBaseDir$)+1)
                                    endif
                                    record$=record$(1,startLocalePath + startLocalePathLen - 1)+path$+record$(pos(endLocalePath$=cvs(record$,4), -1))
                                endif
                                print(log_dev)"        "+startLocalePath$+": "+path$
                            endif

                            rem --- Update path in <DD_MOUNT_DIR> lines
                            startDdMountDir = pos(startDdMountDir$=cvs(record$,4))
                            if startDdMountDir then
                                path$ = record$(startDdMountDir + startDdMountDirLen)
                                path$ = path$(1,pos(endDdMountDir$=cvs(path$,4))-1)
                                if sourcePaths!.containsKey(path$) then
                                    sourceCanonicalPath$=sourcePaths!.getProperty(path$)
                                    if pos(sourceBaseDir$=sourceCanonicalPath$)=1 then
                                        path$=baseDir$+sourceCanonicalPath$(len(sourceBaseDir$)+1)
                                    endif
                                    record$=record$(1,startDdMountDir + startDdMountDirLen - 1)+path$+record$(pos(endDdMountDir$=cvs(record$,4), -1))
                                endif
                                print(log_dev)"        "+startDdMountDir$+": "+path$
                            endif

                            write(tmpWork_dev)record$
                        wend
                        close(admModule_dev,err=*next)
                        close(tmpWork_dev,err=*next)
                        erase admModuleFile$, err=*next
                        rename tmpWorkFile$ to admModuleFile$, err=*next
                    next j
                endif
            endif
        wend
    next i

rem --- Update paths in system (application) data files
rem wgh ... 9625 ... stopped here
        
rem --- Update paths in system (application) *.def files for ALL languages if pre-v19 Barista
rem wgh ... 9625 ... if pre-v19 then meter_total_recs=meter_total_recs+1
rem wgh ... 9625 ... include Barista *.def files too
rem wgh ... 9625 ... use version for Addon AD module in Barista's adm_modules.dat file

rem --- Update paths in <new_base_dir>/barista/sys/config/barista.syn

rem --- Update port and SSL settings in barista.cfg for ALL languages
    
done: rem --- All done
    
    rem --- Stop main progress meter
    meterWin!=mainMeter!
    meter_total_recs=mainMeterTotalRecs
    meter_text$=""
    meter_proc_recs=mainMeterTotalRecs
    meter_action$="LST-END"
    gosub disp_meter
    print(log_dev)
    print(log_dev)"Install Copied Addon Installation Utility log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Close open files
    close(ddmTableTpls_dev,err=*next)
    close(ddmSystems_dev,err=*next)

    goto std_exit
    
disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log:rem --- Open log file

    rem --- create and open log file
    log$ = baseDir$+File.separator+"adx_unjaraon.log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
    
    rem --- write log header info
    print(log_dev)"Install Copied Addon Installation Utility log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)
    print(log_dev)"Source Operating System: " + info(0,0)
    print(log_dev)"Source Installation Base Directory: " + baseDir$
    print(log_dev)"Jar Filename: " + jarFile$
    print(log_dev)"Source Barista Installation Location: " + barDir$

    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
    
rem /**
rem  * FilenameFilter Class to filter adm_modules~*.xml files.
rem  */

    class public AdmModulesFileter implements java.io.FilenameFilter

        method public boolean accept(File dir!, String file!)
            if file!.startsWith("adm_modules~") and file!.endsWith(".xml")
                methodret Boolean.valueOf("true")
            else
                methodret Boolean.valueOf("false")
            endif
        methodend
        
    classend
    
    end