rem --- Upgrade Conversion Utility For Version 22.00
rem --- Program adc_v2200conversion.aon

rem --- AddonSoftware Version 22.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


rem --- CONVCTRLFILECHAN : Channel number conversion control file data/adx_conversionCtrl is open on (Input)
rem --- CONVCTRL!        : Property object of the conversion control file data/adx_conversionCtrl (Input)
rem --- INSTALLMAP!      : HashMap object of installed modules, keyed by module ID (Input)
rem --- rdForm!          : Window object to hold progress meter
rem --- Translate!       : Translator object translations
rem --- CONV_STATUS      : Status code/0=No error (Returned)

    use java.io.File
    use java.util.HashMap
    use java.util.GregorianCalendar

    use ::ado_file.src::FileObject
    use ::ado_SyncRecords.aon::SyncRecords

    setesc std_error
    seterr std_error
    
    enter convCtrlFileChan,convCtrl!,installMap!,rdForm!,Translate!,conv_status

rem --- Initializations

    conv_status=1
    dir_syp$=stbl("+DIR_SYP")
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")

    Calendar! = new GregorianCalendar()
    
rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log
    
rem --- Start progress meter

    meter_title$="adc_v2200conversion.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter

rem --- For version 22.00, initialize IRS1099_TYPE_BOX field in APM_VENDHIST
    this_module$="AP"
    if installMap!.get(this_module$)="Y" then
        task$="2200_AP_apm_vendhist"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=2
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="APM_VENDMAST",   open_opts$[1]="OTA"
            open_tables$[2]="APM_VENDHIST",   open_opts$[2]="OTA"
    
            gosub open_tables
    
            apmVendMast_dev=num(open_chans$[1])
            apmVendHist_dev=num(open_chans$[2])
            
            dim apmVendMast$:open_tpls$[1]
            dim apmVendHist$:open_tpls$[2]

            read(apmVendMast_dev,key="",dom=*next)
            while 1
                readrecord(apmVendMast_dev,end=*break)apmVendMast$
                
                apmVendHist_key$=apmVendMast.firm_id$+apmVendMast.vendor_id$
                read(apmVendHist_dev,key=apmVendHist_key$,dom=*next)
                while 1
                    readrecord(apmVendHist_dev,end=*break)apmVendHist$
                    if apmVendHist.firm_id$+apmVendHist.vendor_id$<>apmVendHist_key$ then break
                    if apmVendMast.vendor_1099$="Y" then
                        rem --- Currently using 1099-MISC form
                        apmVendHist.irs1099_type_box$="MISC"
                    else
                        rem --- Currently not using a 1099 form
                        apmVendHist.irs1099_type_box$="X"
                    endif
                    writerecord(apmVendHist_dev)apmVendHist$
                wend
            wend
            
            rem --- close files opened for this conversion
            num_files=2
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="APM_VENDMAST",   open_opts$[1]="C"
            open_tables$[2]="APM_VENDHIST",   open_opts$[2]="C"
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 22.00, initialize new START_DATE and PERIOD_END_nn fields and remove obsolete CAL_START_DATE and PER_ENDING_nn fields in GLS_CALENDAR
    if num(convCtrl!.getProperty("start_version"))>=17 then
        rem --- This conversion was already handled in adc_v1700conversion if the start_version is prior to v17
        this_module$="GL"
        if installMap!.get(this_module$)="Y" then
            if convCtrl!.getProperty("data_source")="OCJ" then
                task$="2200_GL_gls_calendar"
                if convCtrl!.getProperty(task$)<>"Completed" then
        
                    rem --- Increment progress meter
                    meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                       Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    gosub disp_meter
                    print(log_dev)meter_text$
        
                    rem --- Open File(s)
                    num_files=1
                    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                    open_tables$[1]="GLS_CALENDAR",   open_opts$[1]="OTA"
            
                    gosub open_tables
            
                    glsCalendar_dev=num(open_chans$[1])
                    
                    dim glsCalendar$:open_tpls$[1]
        
                    rem --- Need to initialize new START_DATE and PERIOD_END_nn fields from CAL_START_DATE and PER_ENDING_nn fields in the old GLS_CALENDAR
                    oldStbl$="+GLDATA"
                    oldFile$="gls_calendar"
                    gosub get_path_to_old_file
                    old_glsCalendar$=oldPathToFile$
                    open_success=0
                    old_glsCalendar_dev=unt
                    open(old_glsCalendar_dev,err=*next)old_glsCalendar$; open_success=1
                    if open_success then
                        rem --- Increment progress meter
                        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": GLS_CALENDAR "
                        meter_proc_recs=meter_proc_recs+1
                        meter_action$="MTR-LST"
                        gosub disp_meter
                        print(log_dev)meter_text$
                            
                        rem --- Get record template for old source GLS_CALENDAR file
                        ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                        open_success=0
                        ddm_table_tpls=unt
                        open(ddm_table_tpls,err=*next)ddm_table_tpls$; open_success=1
                        if open_success then
                            dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"
                            tpl_found=0
                            findrecord(ddm_table_tpls,key=pad(cvs(oldFile$,4),16),dom=*next)ddm_table_tpls$;tpl_found=1
                            if tpl_found then
                                dim old_glsCalendar_tpl$:ddm_table_tpls.template$
                            else
                                rem --- Required template missing
                                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                                   " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                                goto done
                            endif
                        else
                            rem --- Required file missing
                            msg_id$="AD_FILE_MISSING"
                            dim msg_tokens$[1]
                            msg_tokens$[1]=ddm_table_tpls$
                            gosub disp_message
                            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                               Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+ddm_table_tpls$+" *****"
                            goto done
                        endif
               
                        rem --- Initialize blank START_DATE and PERIOD_END_nn fields from CAL_START_DATE and PER_ENDING_nn fields in the old GLS_CALENDAR
                        read(glsCalendar_dev,key="",dom=*next)
                        while 1
                            readrecord(glsCalendar_dev,end=*break)glsCalendar$

                            rem --- Remove record with blank year created by Online Copy Job    
                            if cvs(glsCalendar.year$,2)="" then
                                remove(glsCalendar_dev,key=glsCalendar.firm_id$+glsCalendar.year$,dom=*next)
                                continue
                            endif
        
                            rem --- NOTE: START_DATE and PERIOD_END_nn fields may have been initialized already in upgrades to v21.02 thru v21.14.
                            newFields$=glsCalendar.start_date$
                            for i=1 to 13
                                period_end$="period_end_"+str(i:"00")
                                newFields$=newFields$+field(glsCalendar$,period_end$)
                            next i
                            if cvs(newFields$,2)<>"" then continue
        
                            rem --- Get CAL_START_DATE and PER_ENDING_nn fields from the old GLS_CALENDAR for this fiscal year.
                            redim old_glsCalendar_tpl$
                            readrecord(old_glsCalendar_dev,key=glsCalendar.firm_id$+glsCalendar.year$,dom=*continue)old_glsCalendar_tpl$
                    
                            rem --- Process only blank START_DATE dates
                            if cvs(glsCalendar.start_date$,2)="" and cvs(old_glsCalendar_tpl.cal_start_date$,2)<>"" then
                                rem --- Get the YYYYMMDD START_DATE by combining YEAR$+CAL_START_DATE$ from the old GLS_CALENDAR for this fiscal year
                                glsCalendar.start_date$=old_glsCalendar_tpl.year$+old_glsCalendar_tpl.cal_start_date$
                            endif
        
                            rem --- Process only blank PERIOD_END_nn dates
                            for per=1 to num(glsCalendar.total_pers$)
                                period_end$=field(glsCalendar$,"PERIOD_END_"+str(per:"00"))
                                per_ending$=field(old_glsCalendar_tpl$,"PER_ENDING_"+str(per:"00"))
                                if cvs(period_end$,2)="" and cvs(per_ending$,2)<>"" then
                                    rem --- Get the YYYYMMDD PER_ENDING_nn by combining YEAR$+PER_ENDING_nn$ from the old GLS_CALENDAR for this fiscal year
                                    field glsCalendar$,"PERIOD_END_"+str(per:"00")=old_glsCalendar_tpl.year$+per_ending$
                                    rem --- Increment the year when new calendar year starts.
                                    if per>1 and old_glsCalendar_tpl.year$+per_ending$<field(glsCalendar$,"PERIOD_END_01") then
                                        rem --- The current period end is less than the first peiod end, so it's in the next year.
                                        field glsCalendar$,"PERIOD_END_"+str(per:"00")=str(num(old_glsCalendar_tpl.year$)+1)+per_ending$
                                    endif
                                endif
                            next per
                            
                            rem --- Write new GLS_CALENDAR record
                            glsCalendar$=field(glsCalendar$)
                            writerecord(glsCalendar_dev)glsCalendar$
                        wend
                        write(convCtrlFileChan)task$+"=Completed"
                    
                        close(old_glsParams_dev,err=*next)
                    else
                        rem --- Required file missing
                        msg_id$="AD_FILE_MISSING"
                        dim msg_tokens$[1]
                        msg_tokens$[1]=old_glsParams$
                        gosub disp_message
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                           Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_glsCalendar$+" *****"
                        goto done
                    endif
                else
                    rem --- Increment progress meter
                    meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    gosub disp_meter
                    print(log_dev)meter_text$
                endif
            endif
        else
            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    endif

rem --- For version 22.00, initialize new ADDRESS_TYPE field in OPT_INVSHIP
    this_module$="OP"
    if installMap!.get(this_module$)="Y" then
        task$="2200_OP_opt_invship"
        if convCtrl!.getProperty(task$)<>"Completed" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:                   Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
    
            rem --- Open File(s)
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="OPT_INVSHIP",   open_opts$[1]="OTA"
    
            gosub open_tables
    
            optInvShip_dev=num(open_chans$[1])
            
            dim optInvShip$:open_tpls$[1]

            read(optInvShip_dev,key="",dom=*next)
            while 1
                optInvShip_key$=key(optInvShip_dev,end=*break)
                readrecord(optInvShip_dev,end=*break)optInvShip$
                if cvs(optInvShip.address_type$,2)<>"" then continue

                rem --- All existing OPT_INVSHIP records are for manual ship-to address
                optInvShip.address_type$="S"
                writerecord(optInvShip_dev)optInvShip$

                rem --- Remove old OPT_INVSHIP key with blank address_type$
                remove(optInvShip_dev,key=optInvShip_key$,dom=*next)
            wend
            
            rem --- close files opened for this conversion
            num_files=1
            dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
            open_tables$[1]="OPT_INVSHIP", open_opts$[1]="C"
            gosub open_tables
           
            write(convCtrlFileChan)task$+"=Completed"

            rem --- This task$ conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
                
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif
    
done: rem --- Done, close things up

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v2200conversion log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Close opened files
    if ddm_table_tpls then close(ddm_table_tpls,err=*next)

    if completed_successfully then conv_status=0; rem --- no errors encountered
	goto std_exit

get_path_to_old_file: rem --- Locate data directory in old Addon installation
    rem --- IN: oldStbl$ - STBL in old addon.syn that points to the data directory where the old file is located
    rem --- IN: oldFile$ - name of old file to get path for
    rem --- OUT: oldPathToFile$ - full path to requested file, including the file name
    oldPathToFile$=oldFile$

    rem --- Open old aon/config/addon.syn
    open_success=0
    old_addonsyn_dev=unt
    open(old_addonsyn_dev,isz=-1,err=*next)convCtrl!.getProperty("addon_source")+"/aon/config/addon.syn"; open_success=1
    if !open_success then return

    rem --- Get specified data directory from old addon.syn
    key$="=SET "+oldStbl$+"="
    while 1
        read(old_addonsyn_dev,end=*break)record$
        if(pos(key$=record$)) then
            xpos=pos(key$=record$)
            oldPathToFile$=record$(xpos+len(key$))+oldFile$
            break
        endif
    wend
    close(old_addonsyn_dev)

    return

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v2200conversion_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v2200conversion log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    exit

rem #endinclude std_exit.src

    end
