rem Create Table
rem Proprietary Software.  AddonSoftware
rem Program ID: adc_create_table.aon  <Mar 07, 2006>

	rem seterr error_proc

rem --- Enter Arguments

	enter
:		rd_table_alias$,
:		rd_disk_file$,
:		rd_table_chans$[all],
:		rd_create_action$,
:		rd_create_status$

rem --- Constants

	rd_dir_dda$=stbl("+DDDATA")
	rd_dir_pgm$=stbl("+DIR_PGM")
	rd_alias_types$="CDIKXVM"
	rd_create_status$=""

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp1)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp1)+rd_tmp1-1)/rd_tmp1)
	def fnstrip$(rd_tmp0$,rd_tmp1$)=rd_tmp0$(1,pos(rd_tmp1$=rd_tmp0$+rd_tmp1$)-1)

rem --- Open Tables

	rd_num_files=4
	dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]

	rd_open_tables$[1]="DDM_TABLES",rd_open_opts$[1]="OTA"
	rd_open_tables$[2]="DDM_TABLE_TPLS",rd_open_opts$[2]="OTA"
	rd_open_tables$[3]="DDM_KEY_SEGS",rd_open_opts$[3]="OTA"
	rd_open_tables$[4]="DDM_KEYS",rd_open_opts$[4]="OTA"

	gosub open_tables

	rd_ddm_tables=num(rd_open_chans$[1]);dim rd_ddm_tables$:rd_open_tpls$[1]
	rd_ddm_table_tpls=num(rd_open_chans$[2]);dim rd_ddm_table_tpls$:rd_open_tpls$[2]
	rd_ddm_key_segs=num(rd_open_chans$[3]);dim rd_ddm_key_segs$:rd_open_tpls$[3]
	rd_ddm_keys=num(rd_open_chans$[4]);dim rd_ddm_keys$:rd_open_tpls$[4]

rem --- Main Process

	gosub get_table_record
	if pos(rd_ddm_tables.dd_alias_type$="KXVM")<>0
		gosub get_template_map
		gosub get_table_knums
		if rd_table_knums$=""
			rd_create_status$="DDM_KEYS_MISSING:"+cvs(rd_table_alias$,3)
			goto exit_prog
		endif
		gosub gen_key_string
	endif
	if pos("ERASE"=rd_create_action$)<>0 gosub erase_existing

	gosub create_file

	goto exit_prog

get_table_record:rem --- Get Table Record

	rd_create_status$="Table definition not found for "+rd_table_alias$
	readrecord(rd_ddm_tables,key=pad(rd_table_alias$,16),dom=exit_prog)rd_ddm_tables$

	rd_create_status$=""

	if rd_disk_file$=""
		rd_aon_name$=rd_ddm_tables.dd_aon_name$
		rd_table_path$=cvs(rd_ddm_tables.dd_table_path$,3)
		if len(rd_aon_name$)>6 rd_aon_name$=rd_aon_name$(1,6)
		if rd_aon_name$="" rd_aon_name$=cvs(rd_table_alias$,10)
		while pos("["=rd_table_path$)<>0
			rd_stbl_from=pos("["=rd_table_path$)+1
			rd_stbl_thru=pos("]"=rd_table_path$)
			rd_proc_mssg$="Undefined global directory value"
			rd_temp_stbl$=stbl(rd_table_path$(rd_stbl_from,rd_stbl_thru-rd_stbl_from),err=exit_prog)
			rd_proc_mssg$=""
			if rd_stbl_thru=len(rd_table_path$)
				rd_table_path$=rd_table_path$(1,rd_stbl_from-2)+rd_temp_stbl$
				else
				rd_table_path$=rd_table_path$(1,rd_stbl_from-2)+rd_temp_stbl$+rd_table_path$(rd_stbl_thru+1)
			endif
		wend
		rd_disk_file$=rd_table_path$+rd_aon_name$
	endif

	return

get_template_map:rem --- Get Template & Create Position Map (Column+Field+Start+Offset)

	call rd_dir_pgm$+"adc_create_tpl.aon",
:		rd_table_alias$,
:		rd_gen_table_tpl$,
:		rd_table_chans$[all],
:		rd_status$

	if rd_status$<>""
		rd_create_status$="Template definition issue for "+rd_table_alias$
		goto exit_prog
	endif

	dim rd_temp_tpl$:rd_gen_table_tpl$

	rd_tpl_columns$=fattr(rd_temp_tpl$,"")
	rd_no_columns=pos($0a$=rd_tpl_columns$,1,0)
	rd_calc_rec_len=0
	rd_template_map$=""

	for rd_curr_col=1 to rd_no_columns
		rd_start_pos=pos($0a$=$0a$+rd_tpl_columns$,1,rd_curr_col)
		rd_end_pos=pos($0a$=$0a$+rd_tpl_columns$,1,rd_curr_col+1)
		rd_curr_col$=rd_tpl_columns$(rd_start_pos,rd_end_pos-rd_start_pos-1)
		rd_curr_fattr$=fattr(rd_temp_tpl$,rd_curr_col$,"")
			rd_fattr_fld=dec(rd_curr_fattr$(6,2))
			if rd_curr_col=1 and rd_fattr_fld=0 rd_fattr_fld=1
			rd_fattr_off=dec(rd_curr_fattr$(8,2))
			rd_fattr_len=dec(rd_curr_fattr$(10,2))
			rd_calc_rec_len=rd_calc_rec_len+rd_fattr_len
			if rd_curr_fattr$(3,1)<>$00$ rd_calc_rec_len=rd_calc_rec_len+1
		rd_template_map$=rd_template_map$+
:			pad(rd_curr_col$,16)+"-"+
:			str(rd_fattr_fld:"0000")+"-"+
:			str(rd_fattr_off:"0000")+"-"+
:			str(rd_fattr_len:"0000")+";"
	next rd_curr_col

	rd_calc_rec_len=rd_calc_rec_len+(min(50,int(rd_calc_rec_len*.1)))

	return

get_table_knums:rem --- Get Table Key Definitions

	rd_table_knums$=""
	rd_table_knum=0

	read(rd_ddm_keys,key=pad(rd_table_alias$,16),dir=0,dom=*next)

get_next_knum:rem --- Get Next Record Key Definition

	readrecord(rd_ddm_keys,end=*return)rd_ddm_keys$
	if rd_ddm_keys.dd_table_alias$<>pad(rd_table_alias$,16) return

	rd_table_knums$=rd_table_knums$+
:		rd_ddm_keys.dd_key_number$+"-"+
:		str(rd_table_knum:"00")+"-"+
:		pad(rd_ddm_keys.dd_key_id$,16)+";"

	rd_table_knum=rd_table_knum+1

	goto get_next_knum

gen_key_string:rem --- Generate Key String for Insertion Into FIN()

	switch pos(rd_ddm_tables.dd_alias_type$=rd_alias_types$)
		case fnstr_pos("K",rd_alias_types$,1);rem M-Keyed
			dim rd_hex_keys$(384,$00$)
		break
		case fnstr_pos("X",rd_alias_types$,1);rem X-Keyed
			rd_kex_keys$=""
		break
		case fnstr_pos("V",rd_alias_types$,1);rem V-Keyed
			rd_kex_keys$=""
		break
		case default
		break
	swend

	read(rd_ddm_key_segs,key=pad(rd_table_alias$,16),dir=0,dom=get_next_key)

get_next_key:rem --- Get Next Record Key

	readrecord(rd_ddm_key_segs,end=key_wrap_up)rd_ddm_key_segs$
	if rd_ddm_key_segs.dd_table_alias$<>pad(rd_table_alias$,16) goto key_wrap_up
	rd_seg_col$=pad(rd_ddm_key_segs.dd_segment_col$,16)
	if pos(rd_seg_col$=rd_template_map$)=0
		rd_create_status$="DDM_KEYS_INV_VAR:"+cvs(rd_seg_col$,3)
		goto exit_prog
	endif
	rd_seg_def$=rd_template_map$(pos(rd_seg_col$=rd_template_map$),32)
		rd_seg_fld=num(rd_seg_def$(18,4))
		rd_seg_off=num(rd_seg_def$(23,4))
		rd_seg_len=num(rd_seg_def$(28,4))
		if rd_ddm_key_segs$.dd_segment_sort$="D"
			rd_seg_attr$=$01$
			else
			rd_seg_attr$=$00$
		endif

	rd_actual_key_no$=rd_table_knums$(pos(rd_ddm_key_segs.dd_key_number$=rd_table_knums$,23)+3,2)

	switch pos(rd_ddm_tables.dd_alias_type$=rd_alias_types$)
		case fnstr_pos("K",rd_alias_types$,1);rem M-Keyed
			dim rd_key_seg$(20,$00$)
			rd_key_seg$(1,4)=bin(num(rd_actual_key_no$),4)
			rd_key_seg$(5,4)=bin(rd_seg_fld,4)
			rd_key_seg$(9,4)=bin(rd_seg_off,4)
			rd_key_seg$(13,4)=bin(rd_seg_len,4)
			rd_key_seg$(17,1)=rd_seg_attr$
			rd_key_def$=rd_key_def$+rd_key_seg$
		break
		case fnstr_pos("X",rd_alias_types$,1);rem X-Keyed
			dim rd_key_seg$(20,$00$)
			rd_key_seg$(1,4)=bin(num(rd_actual_key_no$),4)
			rd_key_seg$(5,4)=bin(rd_seg_fld,4)
			rd_key_seg$(9,4)=bin(rd_seg_off,4)
			rd_key_seg$(13,4)=bin(rd_seg_len,4)
			rd_key_seg$(17,1)=rd_seg_attr$
			rd_key_def$=rd_key_def$+rd_key_seg$
		break
		case fnstr_pos("V",rd_alias_types$,1);rem V-Keyed
			dim rd_key_seg$(20,$00$)
			rd_key_seg$(1,4)=bin(num(rd_actual_key_no$),4)
			rd_key_seg$(5,4)=bin(rd_seg_fld,4)
			rd_key_seg$(9,4)=bin(rd_seg_off,4)
			rd_key_seg$(13,4)=bin(rd_seg_len,4)
			rd_key_seg$(17,1)=rd_seg_attr$
			rd_key_def$=rd_key_def$+rd_key_seg$
		break
		case default
		break
	swend

	goto get_next_key

key_wrap_up:rem --- Wrap Up Key Generation

	if rd_key_def$=""
		rd_create_status$="Index definitions not found for "+rd_table_alias$
		goto exit_prog
	endif

	rd_key_def$=rd_key_def$+$FF$

	switch pos(rd_ddm_tables.dd_alias_type$=rd_alias_types$)
		case fnstr_pos("K",rd_alias_types$,1);rem M-Keyed
			rd_hex_keys$=rd_key_def$
		break
		case fnstr_pos("X",rd_alias_types$,1);rem X-Keyed
			rd_hex_keys$=rd_key_def$
		break
		case fnstr_pos("V",rd_alias_types$,1);rem V-Keyed
			rd_hex_keys$=rd_key_def$
		break
		case default
		break
	swend

	return

erase_existing:rem --- Erase Existing File

	erase rd_disk_file$,err=erase_error

	return

erase_error:rem --- Error Occurred on File Erase

	if err<>12 escape

	return

create_file:rem --- Create New Output File

	if rd_ddm_tables.dd_record_len<>rd_calc_rec_len
		rd_ddm_tables.dd_record_len=rd_calc_rec_len
		rd_ddm_tables$=field(rd_ddm_tables$)
		writerecord(rd_ddm_tables)rd_ddm_tables$
	endif

	switch pos(rd_ddm_tables.dd_alias_type$=rd_alias_types$)
		case fnstr_pos("D",rd_alias_types$,1);rem Direct
			dim rd_table_xfid$(13,$00$)
			rd_table_xfid$(1,1)=$02$
			rd_table_xfid$(2,4)=bin(rd_ddm_tables.dd_key_length,4)
			rd_table_xfid$(6,4)=bin(rd_ddm_tables.dd_nbr_record,4)
			rd_table_xfid$(10,4)=bin(rd_ddm_tables.dd_record_len,4)
			rd_table_xfid$=rd_table_xfid$+rd_disk_file$
			xfile rd_table_xfid$,err=*break
		break
		case fnstr_pos("M",rd_alias_types$,1);rem Single M-Keyed
			dim rd_table_xfid$(13,$00$)
			rd_table_xfid$(1,1)=$02$
			rd_table_xfid$(2,4)=bin(rd_ddm_tables.dd_key_length,4)
			rd_table_xfid$(6,4)=bin(rd_ddm_tables.dd_nbr_record,4)
			rd_table_xfid$(10,4)=bin(rd_ddm_tables.dd_record_len,4)
			rd_table_xfid$=rd_table_xfid$+rd_disk_file$
			xfile rd_table_xfid$,err=*break
		break
		case fnstr_pos("K",rd_alias_types$,1);rem M-Keyed
			dim rd_table_xfid$(13,$00$)
			rd_table_xfid$(1,1)=$66$
			rd_table_xfid$(6,4)=bin(rd_ddm_tables.dd_nbr_record,4)
			rd_table_xfid$(10,4)=bin(rd_ddm_tables.dd_record_len,4)
			rd_table_xfid$=rd_table_xfid$+rd_disk_file$
			xfile rd_table_xfid$,rd_hex_keys$,err=*break
		break
		case fnstr_pos("X",rd_alias_types$,1);rem X-Keyed
			dim rd_table_xfid$(13,$00$)
			rd_table_xfid$(1,1)=$68$
			rd_table_xfid$(6,4)=bin(rd_ddm_tables.dd_nbr_record,4)
			rd_table_xfid$(10,4)=bin(rd_ddm_tables.dd_record_len,4)
			rd_table_xfid$=rd_table_xfid$+rd_disk_file$
			xfile rd_table_xfid$,rd_hex_keys$,err=*break
		break
		case fnstr_pos("V",rd_alias_types$,1);rem V-Keyed
			dim rd_table_xfid$(13,$00$)
			rd_table_xfid$(1,1)=$6D$
			rd_table_xfid$(6,4)=bin(rd_ddm_tables.dd_nbr_record,4)
			rd_table_xfid$(10,4)=bin(rd_ddm_tables.dd_record_len,4)
			rd_table_xfid$=rd_table_xfid$+rd_disk_file$
			xfile rd_table_xfid$,rd_hex_keys$,err=*break
			rd_temp_chan=unt
			open(rd_temp_chan)rd_disk_file$
			lock(rd_temp_chan)
			rdFileInfo!=BBjAPI().getFileSystem().getFileInfo(rd_temp_chan)
			for rd_curr_knum=1 to len(rd_table_knums$)/23
				rd_set_key_num=num(rd_table_knums$(rd_curr_knum*23-19,2))
				rd_set_key_name$=cvs(rd_table_knums$(rd_curr_knum*23-16,16),3)
				rdFileInfo!.setKeyName(rd_set_key_num,rd_set_key_name$)
			next rd_curr_knum
			close(rd_temp_chan)
		break
		case default
		break
	swend

	return

open_tables:rem --- Open Tables

	call rd_dir_pgm$+"adc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_create_status$=rd_open_status$
		goto exit_prog
	endif

	return

all_returns:rem --- All Subroutine Returns

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))

	call stbl("+DIR_PGM")+"adc_error.aon",pgm(-2),str(tcb(5):"00000"),str(err:"000"),rd_err_text$,rd_err_act$

	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	exit

