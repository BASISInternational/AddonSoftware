rem adx - Upgrade Adminstrator to Version 8.x
rem Program adx_upgrade v8.0.0
 
rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Nov2005 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
 
setesc STD_ESCAPE
seterr STD_ERROR
begin

rem ---------------------------------------------------------------------
rem Open sysgui_length, retrieve template and initialize API
rem ---------------------------------------------------------------------

version$=fnglobal$("+AON_VERSION","8.0.0")
filename$=fnglobal$("+GUI_DEVICE","SYSGUI device")
gosub OPEN_FILE
if status then goto OPEN_ERROR
sysgui_dev=channel
dim sysgui$:tmpl(sysgui_dev)
sysgui_length=len(sysgui$)

rem --- API

BBjAPI!=BBjAPI()
rdSysGUI!=BBjAPI!.getSysGui()
rdSysGUI!.setLookAndFeel("WindowsXPLookAndFeel")

rem ---------------------------------------------------------------------
rem Notify user and get acknowledgement to continue
rem ---------------------------------------------------------------------

title$="AddonSoftware v"+version$+" Upgrade"
buttons=1,icon=32
message$="Ready to upgrade your AddonSoftware Administrator to Version "+version$+"?"
answer=msgbox(message$,buttons+icon,title$,err=THE_END)
if answer=2 then goto THE_END

rem ---------------------------------------------------------------------
rem Program initializations
rem ---------------------------------------------------------------------

rem --- The debug flag enables diagnostic output in text form. The higher
rem --- the value the more detailed the diagnostics. Level 1 provides simple
rem --- flow information.

debug=1
if debug then print 'show' 

rem --- Retrieve required config values

dir_pgm$=fnglobal$("+DIR_PGM","")
dir_img$=fnglobal$("+DIR_IMG","")
dir_sys$=fnglobal$("+DIR_SYS","")
dir_cfg$=fnglobal$("+DIR_CFG","")
dir_dat$=fnglobal$("+DIR_DAT","")
dir_frm$=fnglobal$("+DIR_FRM","")

rem --- Initialize application values

applications=13
dim descriptions$[applications],datapaths$[applications]
dim installed[applications]
applications$="SYAPARBMDDGLIVOPMPPOPRSASF"
descriptions$[1]="Administrator"
descriptions$[2]="Accounts Payable"
descriptions$[3]="Accounts Receivable"
descriptions$[4]="Bill of Materials"
descriptions$[5]="Data Dictionary"
descriptions$[6]="General Ledger"
descriptions$[7]="Inventory Control"
descriptions$[8]="Sales Order Processing"
descriptions$[9]="Material Requirements Planning"
descriptions$[10]="Purchase Order Processing"
descriptions$[11]="Payroll"
descriptions$[12]="Sales Analysis"
descriptions$[13]="Shop Floor Control"
datapaths$[1]=fnglobal$("+SYDATA",dir_dat$)
datapaths$[2]=fnglobal$("+APDATA",dir_dat$)
datapaths$[3]=fnglobal$("+ARDATA",dir_dat$)
datapaths$[4]=fnglobal$("+BMDATA",dir_dat$)
datapaths$[5]=fnglobal$("+DDDATA",dir_dat$)
datapaths$[6]=fnglobal$("+GLDATA",dir_dat$)
datapaths$[7]=fnglobal$("+OPDATA",dir_dat$)
datapaths$[8]=fnglobal$("+MPDATA",dir_dat$)
datapaths$[9]=fnglobal$("+PODATA",dir_dat$)
datapaths$[10]=fnglobal$("+PRDATA",dir_dat$)
datapaths$[11]=fnglobal$("+SADATA",dir_dat$)
datapaths$[12]=fnglobal$("+SFDATA",dir_dat$)
datapaths$[13]=fnglobal$("+SYDATA",dir_dat$)
adpath$=datapaths$[1]
ddpath$=datapaths$[5]

rem ---------------------------------------------------------------------
rem Warn the user about what's going to happen
rem ---------------------------------------------------------------------

buttons=1,icon=64
message$="The software has determined that you are running the version "+
:         version$+" Administrator with"+$0A$+
:        "with version 7.x data files."+$0A$+$0A$+
:        "Your Administrator must be upgraded to version "+version$+
:        " before you can continue upgrading"+$0A$+
:        "any other installed applications. This process will:"+$0A$+$0A$+
:        "1) Verify that all required files exist and that the Administrator "+
:        "data path has been"+$0A$+
:        "   correctly defined."+$0A$+
:        "2) Remove obsolete data files, work files, cross-reference files and "+
:        "entry files. New"+$0A$+
:        "   versions will be defined and populated as necessary by the system. "+
:        "Report images"+$0A$+
:        "   (i.e. Print to File) will also be removed."+$0A$+
:        "3) Install new version "+version$+" Administrator files."+$0A$+
:        "4) Insure that all files are true multi-keyed files."+$0A$+
:        "5) Convert date fields in all files to the new version "+version$+
:        " standard."+$0A$+
:        "6) Create new menu, parameter and control information necessary to "+
:        "use the version "+version$+$0A$+"   Administrator."+$0A$+$0A$+
:        "Depending upon the size of the system being upgraded, this process "+
:        "may take a significant"+$0A$+
:        "amount of time. If you cancel the upgrade at any point, you will need"+
:        " to restart the"+$0A$+
:        "process from the beginning."
answer=msgbox(message$,buttons+icon,title$,err=THE_END)
if answer=2 then goto THE_END

rem ---------------------------------------------------------------------
rem Verify data directories as defined in the config file
rem ---------------------------------------------------------------------

buttons=4,icon=32
message$="The data path specified in your config file for your AddonSoftware"+$0A$+
:        "Administrator (+SYPATH) must be set correctly in order to determine"+$0A$+
:        "what applications are installed and to successfully upgrade your system."+$0A$+$0A$+
:        "The current Administrator data path is "+$22$+adpath$+$22$+$0A$+$0A$+
:        "Is this the correct data path?"
answer=msgbox(message$,buttons+icon,title$,err=THE_END)
if answer=7 then goto THE_END

rem --- Validate legitimacy of data path by trying to open it

filename$=adpath$
gosub OPEN_FILE
if status then goto OPEN_ERROR
close (channel)

rem ---------------------------------------------------------------------
rem Open files and retrieve record templates
rem ---------------------------------------------------------------------

rem --- Note that the sym-02 User ID, sym-04 Applications , sym-06 Firms 
rem --- ddm-01 Data Element files are still in the v7.x format at this 
rem --- point.

files=9
dim files$[files],channels[files]
files$[1]=dir_cfg$+"FileUpgrades.ini"
files$[2]=dir_cfg$+"NewFiles.ini"
files$[3]=dir_cfg$+"Mergefiles.ini"
files$[4]=dir_cfg$+"DateConversions.ini"
files$[5]=dir_cfg$+"RenamedElements.ini"
files$[6]=adpath$+"sym-02"
files$[7]=adpath$+"sym-04"
files$[8]=adpath$+"sym-06"
files$[9]=ddpath$+"ddm-01"
for x=1 to files
    filename$=files$[X]
    gosub OPEN_FILE
    if status then exitto OPEN_ERROR
    channels[X]=channel
next x

upgrades_dev=channels[1],newfiles_dev=channels[2],mergefiles_dev=channels[3]
datefiles_dev=channels[4],elements_dev=channels[5],sym02_dev=channels[6]
sym04_dev=channels[7],sym06_dev=channels[8],ddm01_dev=channels[9]

fileupgrades=1,mergefiles=3,dateconversions=4

if debug then
    filename$=dir_dat$+"debug"+date(0:"%Mz%Dz%Yz")+"_"+date(0:"%Hz%mz")+".txt"
    erase filename$,err=*next
    string filename$
    gosub OPEN_FILE
    debug_dev=channel
endif
if status then goto OPEN_ERROR

gosub INITIALIZE_TEMPLATES

if debug then 
:  print (debug_dev) fndatestamp$(0),"Files opened and templates initialized..."

rem ---------------------------------------------------------------------
rem Prompt for and verify User ID
rem ---------------------------------------------------------------------

rem --- User ID file (sym-02) is still v7.x. Any entered ID must be valid 
rem --- and have a security level of 9.

USER_LOGIN:
if debug then print (debug_dev) fndatestamp$(0),"Requesting user login..."
call dir_pgm$+"rdm_login_win.aon",sysgui_dev,
:                                 rdSysGUI!,
:                                 rdLogWin!,
:                                 operator_id$,
:                                 password$,
:                                 rd_status$
if rd_status$="CANCEL" then goto THE_END

if debug then print (debug_dev) fndatestamp$(0),"User ID = ",$22$,operator_id$,$22$,
:                               " Password = ",$22$,password$,$22$,
:                               " Status = ",$22$,status$,$22$

rem --- Valid ID?

rd_status$="U"
operator_id$=cvs(operator_id$,2)
if operator_id$="" then goto USER_LOGIN
if len(operator_id$)>3 then goto USER_LOGIN
sym02a.operator_id$=operator_id$
find record (sym02_dev,key=sym02a.operator_id$,err=USER_LOGIN) sym02a$

rem --- Valid security level?

rd_status$="S"
if sym02a.security_lev$<>"9" then goto USER_LOGIN

rem --- Valid password (if applicable)?

if sym02a.password_set$="Y" then
    if password$<>cvs(sym02a.password$,2) then goto USER_LOGIN
endif

rem --- Remove the login window

rdLogWin!.destroy()
if debug then print (debug_dev) fndatestamp$(0),"User login completed..."

rem ---------------------------------------------------------------------
rem Get user confirmation on installed applications and data paths
rem ---------------------------------------------------------------------

if debug then 
:        print (debug_dev) fndatestamp$(0),"Verifying applications and paths..."
buttons=4,icon=32
message$="The data path specified in your config file for your AddonSoftware"+$0A$+
:        "applications must be set correctly in order what applications are "+$0A$+
:        "installed and to successfully upgrade your system."+$0A$+$0A$+
:        "These applications are installed:"+$0A$+$0A$

for x=1 to len(applications$) step 2
    sym04a.system_id$=applications$(x,2)
    sym04a.sys_install$="N"
    y=fnindex(applications$(x,2),applications$)
    find record (sym04_dev,key=sym04a.system_id$,err=*next) sym04a$
    if sym04a.sys_install$="Y" then
        installed[y]=1
        message$=message$+descriptions$[y]+" - Data path (+"+applications$(x,2)+
:                "DATA) is "+$22$+datapaths$[y]+$22$+$0A$
    endif
next x

message$=message$+$0A$+"Is this list of installed applications and data paths correct?"
answer=msgbox(message$,buttons+icon,title$,err=THE_END)
if answer=7 then goto THE_END

rem --- Validate legitimacy of data paths by trying to open them

for x=2 to applications
    if installed[x] then
        filename$=datapaths$[x]
        gosub OPEN_FILE
        if status then exitto OPEN_ERROR
        close (channel)
    endif
next x

close (sym04_dev)
if debug then 
:        print (debug_dev) fndatestamp$(0),"Verifying applications and paths...Completed"

rem ---------------------------------------------------------------------
rem Make sure that all registers and updates have been run
rem ---------------------------------------------------------------------

if debug then 
:        print (debug_dev) fndatestamp$(0),"Verifying registers and updates have been run..."
buttons=3,icon=48
message$="Part of this upgrade process will erase all of the existing entry"+$0A$+
:        "files. If you have not made sure that all registers and updates"+$0A$+
:        "have been run valuable data may be lost. All existing report"+$0A$+
:        "images (PF files) will also be erased. Any report images (PF files)"+$0A$+
:        "that you wish to keep should have been printed."+$0A$+$0A$+
:        "Have all registers and updates been run and report images printed?"
answer=msgbox(message$,buttons+icon,title$,err=THE_END)
if answer=2 then goto THE_END
if answer=7 then goto THE_END
if debug then 
:        print (debug_dev) fndatestamp$(0),"Verifying registers and updates have been run...Completed"

rem ---------------------------------------------------------------------
rem Display resource and initialize resource variables
rem ---------------------------------------------------------------------

if debug then print (debug_dev) fndatestamp$(0),"Displaying resource..."
iconname$=dir_img$+"addon_logo_16.ico"
filename$=dir_frm$+fnbasename$(pgm(-2))+".arc"
gosub OPEN_FILE
if status then goto OPEN_ERROR
close (channel)
group=1
item=1001
resource_dev=unt
resource_dev=resopen(filename$,err=RESOURCE_ERROR)
resource$=resget(resource_dev,group,item,err=RESOURCE_ERROR)
print (sysgui_dev)'context'(context),
print (sysgui_dev)'resource'(len(resource$)),resource$,
print (sysgui_dev)'focus'(0),
print (sysgui_dev)'minicon'(iconname$,0),
resclose (resource_dev)

rem --- Controls

btnOK=1
btnCancel=2
datapath=4001
phasedesc=4002
stepdesc=4003
listbox=4004
totalfiles=4005
statusbar=9999

rem --- Display data path

print (sysgui_dev)'title'(datapath,adpath$)

segments$=bin(1,2)
x$=sendmsg(sysgui_dev,statusbar,27,0,segments$)

rem statusbar$="This is a status bar message"
rem gosub UPDATE_STATUSBAR
rem gosub STD_INPUT

if debug then print (debug_dev) fndatestamp$(0),"Displaying resource...Completed"

rem ---------------------------------------------------------------------
rem Build list of valid firms
rem ---------------------------------------------------------------------

firms$=""
count=0
gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will build a list of all the "+
:          "valid firms for this system."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Building list of valid firms..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

read (sym06_dev,key="",dom=*next)
NEXT_FIRM:
read record (sym06_dev,end=FIRMS_DONE) sym06a$
description$=sym06a.firm_id$+" "+sym06a.firm_name$
firms$=firms$+sym06a.firm_id$
count=count+1
gosub UPDATE_FILELIST
goto NEXT_FIRM

FIRMS_DONE:
close (sym06_dev)
stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Build list of renamed data elements
rem ---------------------------------------------------------------------

oldnames$=""
newnames$=""
count=0
gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will build a list of all the "+
:          "renamed data elements for this version."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Building list of renamed data elements..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

done=0
repeat
    read (elements_dev,end=RENAMED_ELEMENTS_DONE)rec$
    rec$=cvs(rec$,2)
    if rec$="" then goto RENAMED_ELEMENTS_LOOP
    if rec$(1,1)="#" then goto RENAMED_ELEMENTS_LOOP
    count=count+1
    oldnames$=oldnames$+rec$(1,16)
    newnames$=newnames$+pad(rec$(18),16)
    description$=cvs(rec$(1,16),2)+" changed to "+rec$(18)
    gosub UPDATE_FILELIST
    goto RENAMED_ELEMENTS_LOOP

    RENAMED_ELEMENTS_DONE:
    done=1

RENAMED_ELEMENTS_LOOP:
until done

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Build list of v7.x date elements
rem ---------------------------------------------------------------------

count=0
gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will build a list of all the "+
:          "data elements for dates in the current data dictionary."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Building list of dates..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

datefields$=""
datetypes$=""
datalengths$=""
read (ddm01_dev,key="",dom=*next)
NEXT_ELEMENT:
read record (ddm01_dev,end=ELEMENTS_DONE) ddm01a$
if pos(ddm01a.data_type$="DA") then
    datefields$=datefields$+fndataname$(ddm01a.data_name$)
    datetypes$=datetypes$+ddm01a.data_type$
    datelengths$=datelengths$+str(ddm01a.field_length)
    description$=ddm01a.data_name$+" - "+ddm01a.description$
    count=count+1
    gosub UPDATE_FILELIST
endif
goto NEXT_ELEMENT

ELEMENTS_DONE:
close (ddm01_dev)
stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Erase obsolete data files
rem ---------------------------------------------------------------------

phasedesc$="This phase of the upgrade will remove all data files which have "+
:          "become obsolete with this release."
stepdesc$="Removing obsolete data files..."
delimiter$="[ObsoleteFiles]"

gosub REMOVE_FILES
if cancel then goto CANCELLED
if abort then goto ABORTED

rem ---------------------------------------------------------------------
rem Phase 3 - Erase work files
rem ---------------------------------------------------------------------

phasedesc$="This phase of the upgrade will remove all temporary work files. "+
:          "Work files will be redefined as needed by the system."
stepdesc$="Removing work files..."
delimiter$="[WorkFiles]"

gosub REMOVE_FILES
if cancel then goto CANCELLED
if abort then goto ABORTED

rem ---------------------------------------------------------------------
rem Erase cross-reference files
rem ---------------------------------------------------------------------

phasedesc$="This phase of the upgrade will remove all cross-reference files. "+
:          "Some cross-reference files will be redefined as needed by the system, "+
:          "others have been replaced by secondary indices."
stepdesc$="Removing cross-reference files..."
delimiter$="[XrefFiles]"

gosub REMOVE_FILES
if cancel then goto CANCELLED
if abort then goto ABORTED

rem ---------------------------------------------------------------------
rem Erase entry files
rem ---------------------------------------------------------------------

phasedesc$="This phase of the upgrade will remove all entry files. "+
:          "Entry files will be redefined as needed by the system."
stepdesc$="Removing entry files..."
delimiter$="[EntryFiles]"

gosub REMOVE_FILES
if cancel then goto CANCELLED
if abort then goto ABORTED

rem ---------------------------------------------------------------------
rem Remove PF files
rem ---------------------------------------------------------------------

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will remove all report images (i.e. "+
:          "Print to File). All current reports saved will be deleted."
gosub UPDATE_PHASE
gosub STD_INPUT
stepdesc$="Removing report images..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

count=0
read (sym02_dev,key="",dom=NEXT_PFID)

NEXT_PFID:
read record (sym02_dev,end=PFCOMPLETE) sym02a$
filename$="PF"+sym02a.pf_file_id$+"A"
description$="Removing "+filename$+" -  Report Index File (Successful)"
erase filename$,err=PFIMAGE_LOOP
count=count+1
gosub UPDATE_FILELIST

PFIMAGE_LOOP:
for x=1 to 99
    filename$="PF"+sym02a.pf_file_id$+str(X)
    description$="Removing "+filename$+" -  Report Image File (Successful)"
    erase filename$,err=NEXT_PFIMAGE
    count=count+1
    gosub UPDATE_FILELIST
    
    NEXT_PFIMAGE:
next x
goto NEXT_PFID

PFCOMPLETE:
close (sym02_dev)
stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Rename files listed in NewFiles.ini
rem ---------------------------------------------------------------------

rem --- Note that NewFiles.ini replaces zfiles with this release

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will install the new Version "+
:          version$+" Administrator and Data Dictionary files."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Verifying Version "+version$+" Administrator and Data Dictionary files..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

rem --- Read records and process file list

done=0
count=0
abort=0
repeat
    read (newfiles_dev,end=NEWFILES_VERIFY_DONE)rec$
    rec$=cvs(rec$,2)
    if rec$="" then goto NEWFILE_VERIFY_LOOP
    if rec$(1,1)="#" then goto NEWFILE_VERIFY_LOOP
    count=count+1
    filedesc$=cvs(rec$(1,pos(" -"=rec$)),2)
    filename$=datapaths$[fnindex(rec$(1,2),applications$)]+"z"+rec$(1,6)
    description$="Verifying "+filedesc$
    status$=fnstatus$(0,0,"")
    gosub OPEN_FILE
    close (channel)
    if status then 
        abort=1
        status$=fnstatus$(2,0,"")
    endif
    description$=description$+status$
    gosub UPDATE_FILELIST
    goto NEWFILE_VERIFY_LOOP

    NEWFILES_VERIFY_DONE:
    done=1

NEWFILE_VERIFY_LOOP:
until done

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem --- All the new files exist. Now rename them.

close (newfiles_dev)
filename$=dir_cfg$+"NewFiles.ini"
gosub OPEN_FILE
if status then goto OPEN_ERROR
newfiles_dev=channel
stepdesc$="Renaming Version "+version$+" Administrator and Data Dictionary files..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP
gosub CLEAR_LISTBOX

file_dev=newfiles_dev
newfiles=1
gosub RENAME_FILES

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem --- Everything has been renamed, open data dictionary files required
rem --- for the remaining phases.

filename$=ddpath$+"ddm-21"
gosub OPEN_FILE
if status then goto OPEN_ERROR
ddm21_dev=channel
filename$=ddpath$+"ddm-70"
gosub OPEN_FILE
if status then goto OPEN_ERROR
ddm70_dev=channel

rem ---------------------------------------------------------------------
rem Make sure all remaining files are true mkeyed
rem ---------------------------------------------------------------------

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will make sure that all remaining files "+
:          "are true MKEYED files. Files will be converted as necessary."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Converting files to true MKEYED..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP
delimiter$="[MkeyedFiles]"
filename=1
file_dev=upgrades_dev
gosub FIND_SECTION
if abort then goto ABORTED
upgrades_dev=file_dev

rem --- Read records and process file list

done=0
count=0
abort=0
repeat
    read (upgrades_dev,end=MKEYED_FILES_DONE)rec$
    rec$=cvs(rec$,2)
    if rec$="" then goto MKEYED_FILES_LOOP
    if rec$(1,1)="#" then goto MKEYED_FILES_LOOP
    if pos("[End"=rec$) then goto MKEYED_FILES_DONE
    count=count+1
    filedesc$=rec$(1,6)+" "+cvs(rec$(8),2)
    filename$=datapaths$[fnindex(rec$(1,2),applications$)]+rec$(1,6)
    basename$=rec$(1,6)
    sourcefile$=filename$
    description$="Converting "+filedesc$
    status$=fnstatus$(2,0,"")
    source_dev=0
    target_dev=0
    gosub OPEN_FILE
    if status then goto MKEYED_FILES_UPDATE
    source_dev=channel

    rem --- Is this file already a true MKEYED file?

    status$=fnstatus$(3,0,"")
    truemkeyed=0
    message$=""
    fidinfo$=fid(source_dev)
    fininfo$=fin(source_dev)
    keylen=asc(fidinfo$(2,1))
    reclen=dec(fidinfo$(7,2))
    oldrec=dec(fininfo$(77,4))
    if and($0F$,fidinfo$(1,1))=$06$ then
       truemkeyed=1
       if keylen OR pos($00$<>fininfo$(86))=0 then truemkeyed=0
    endif
    if truemkeyed then goto MKEYED_FILES_UPDATE

    rem --- Define new mkeyed version of the file

    gosub CREATE_MKEYED_FILE
    if quit then goto MKEYED_FILES_DONE
    if status then
        status$=fnstatus$(4,0,"")
        goto MKEYED_FILES_UPDATE
    endif
   
    rem --- Open target file

    filename$=targetfile$
    gosub OPEN_FILE
    if status then
        abort=1
        status$=fnstatus$(5,0,targetfile$)
        goto MKEYED_FILES_UPDATE
    endif
    target_dev=channel

    rem --- Read/write loop

    records=0
    fielderror=0
    read (source_dev,key="",dom=MKEYED_RECORD_LOOP)
    MKEYED_RECORD_LOOP:
        read record (source_dev,end=MKEYED_RECORDS_DONE) oldrec$
        records=records+1
        write record (target_dev) oldrec$
     goto MKEYED_RECORD_LOOP

    MKEYED_RECORDS_DONE:
    fininfo$=fin(target_dev)
    newrec=dec(fininfo$(77,4))
    if oldrec=newrec and 
:      oldrec=records and 
:      newrec=records then goto MKEYED_FILES_RENAME

    rem --- Record counts don't match
    abort=1
    status$=fnstatus$(6,0,"")
    if debug then print (debug_dev) fndatestamp$(0),"Conversion of ",basename$," failed ",
:                                   "due to a record count mismatch."
    if debug then print (debug_dev) fndatestamp$(0),oldrec," Original records / ",
:                                   records," Records read / ",
:                                   newrec," Records in output file"
    
    MKEYED_FILES_RENAME:
    close (source_dev,err=*next)
    close (target_dev,err=*next)
    status$=fnstatus$(1,records,"")
  
    rem --- Remove original and rename the new file  

    erase sourcefile$
    rename targetfile$,basename$

    MKEYED_FILES_UPDATE:
    close (source_dev,err=*next)
    close (target_dev,err=*next)
    description$=description$+status$
    gosub UPDATE_FILELIST
    goto MKEYED_FILES_LOOP

    MKEYED_FILES_DONE:
    done=1

MKEYED_FILES_LOOP:
until done

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Convert dates in normalized data files
rem ---------------------------------------------------------------------

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will convert all dates in the system to "+
:          "the standardized version "+version$+" format (normalized files only)."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Converting dates in normalized files..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

count=0
delimiter$="[NormalizedFiles]"
filename=dateconversions
file_dev=datefiles_dev
gosub FIND_SECTION
if abort then goto ABORTED
datefiles_dev=file_dev

rem --- Read records and process file list

done=0
count=0
abort=0
repeat
    read (datefiles_dev,end=NORMALIZED_DATES_DONE)rec$
    rec$=cvs(rec$,2)
    if rec$="" then goto NORMALIZED_DATES_LOOP
    if rec$(1,1)="#" then goto NORMALIZED_DATES_LOOP
    if pos("[End"=rec$) then goto NORMALIZED_DATES_DONE
    count=count+1
    filedesc$=rec$(1,6)+" "+rec$(7,1)+" "+cvs(rec$(9),2)
    filename$=datapaths$[fnindex(rec$(1,2),applications$)]+rec$(1,6)
    basename$=rec$(1,6)
    sourcefile$=filename$
    description$="Converting "+filedesc$
    status$=fnstatus$(2,0,"")
    source_dev=0
    target_dev=0
    gosub OPEN_FILE
    if status then goto NORMALIZED_DATES_UPDATE
    source_dev=channel

    rem --- Get record templates

    template$=rec$(1,6)+"A"
    gosub GET_TEMPLATES
    if quit then goto NORMALIZED_DATES_DONE
    if status then
        status$=fnstatus$(7,0,template$)
        goto NORMALIZED_DATES_UPDATE
    endif
    if keylen=0 then 
        status$=fnstatus$(8,0,"")
        abort=1
        goto NORMALIZED_DATES_UPDATE
    endif

    rem --- Calculate record length based on the template
   
    fields$=newtemplate$
    gosub GET_RECORD_LENGTH
 
    rem --- Define new mkeyed version of the file

    gosub CREATE_MKEYED_FILE
    if quit then goto NORMALIZED_DATES_DONE
    if status then
        status$=fnstatus$(4,0,"")
        goto NORMALIZED_DATES_UPDATE
    endif
   
    rem --- Open target file

    filename$=targetfile$
    gosub OPEN_FILE
    if status then
        abort=1
        status$=fnstatus$(5,0,targetfile$)
        goto NORMALIZED_DATES_UPDATE
    endif
    target_dev=channel

    rem --- Read/write loop

    records=0
    fielderror=0
    read (source_dev,key="",dom=NORMALIZED_RECORD_LOOP)
    NORMALIZED_RECORD_LOOP:
        dim oldrec$:oldtemplate$,newrec$:newtemplate$
        read record (source_dev,end=NORMALIZED_DATES_RENAME) oldrec$
        records=records+1
        gosub CONVERT_RECORD
        if fielderror then goto NORMALIZED_DATES_UPDATE
        write record (target_dev) newrec$
     goto NORMALIZED_RECORD_LOOP

    NORMALIZED_DATES_RENAME:
    close (source_dev,err=*next)
    close (target_dev,err=*next)
    status$=fnstatus$(1,records,"")
  
    rem --- Remove original and rename the new file  

    erase sourcefile$
    rename targetfile$,basename$

    NORMALIZED_DATES_UPDATE:
    close (source_dev,err=*next)
    close (target_dev,err=*next)
    description$=description$+status$
    gosub UPDATE_FILELIST
    goto NORMALIZED_DATES_LOOP

    NORMALIZED_DATES_DONE:
    done=1

NORMALIZED_DATES_LOOP:
until done

NORMALIZED_FILES_COMPLETED:
rem if abort then goto ABORTED
stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
gosub ENABLE_BUTTONS
gosub STD_INPUT

rem ---------------------------------------------------------------------
rem Convert dates in nonnormalized data files
rem ---------------------------------------------------------------------

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will convert all dates in the system to "+
:          "the standardized version "+version$+" format (non-normalized files "+
:          "only)."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Converting dates in non-normalized files..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

delimiter$="[NonNormalizedFiles]"
filename=dateconversions
file_dev=datefiles_dev
gosub FIND_SECTION
if abort then goto ABORTED
datefiles_dev=file_dev

count=0

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
rem if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Convert dates in individual records
rem ---------------------------------------------------------------------

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will convert all dates in the system to "+
:          "the standardized version "+version$+" format (parameter and system "+
:          "records only)."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Converting dates in individual records..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

delimiter$="[Records]"
filename=dateconversions
file_dev=datefiles_dev
gosub FIND_SECTION
if abort then goto ABORTED
datefiles_dev=file_dev

rem --- Read records and process file list

done=0
count=0
abort=0
repeat
    read (datefiles_dev,end=DATE_RECORDS_DONE)rec$
    rec$=cvs(rec$,2)
    if rec$="" then goto DATE_RECORDS_LOOP
    if rec$(1,1)="#" then goto DATE_RECORDS_LOOP
    if pos("[End"=rec$) then goto DATE_RECORDS_DONE
    count=count+1
    file_dev=0
    p=pos("-KeyValue"=rec$)
    keyvalue$=cvs(rec$(p+10),2)
    rec$=cvs(rec$(1,p-1),2)
    p=pos("-File"=rec$)
    filename$=cvs(rec$(p+6),2)
    rec$=cvs(rec$(1,p-1),2)
    filedesc$=rec$(1,6)+" "+rec$(7,1)+" - "+rec$(9)
    filename$=datapaths$[fnindex(filename$(1,2),applications$)]+filename$
    description$="Converting "+filedesc$
    status$=fnstatus$(2,0,"")
    gosub OPEN_FILE
    if status then escape
    if status then goto DATE_RECORDS_UPDATE
    file_dev=channel
 
    rem --- Get record template

    template$=rec$(1,7)
    gosub GET_TEMPLATES
    if quit then goto DATE_RECORDS_DONE
    if status then
        status$=fnstatus$(7,0,template$)
        goto DATE_RECORDS_UPDATE
    endif

    records=0
    l=len(firms$)
    for x=1 to l step 2
       firm$=firms$(x,2)
       k$=firm$+keyvalue$
       dim oldrec$:oldtemplate$,newrec$:newtemplate$
       find record (file_dev,key=k$,dom=NEXT_DATE_RECORDS_FIRM) oldrec$
       records=records+1
       gosub CONVERT_RECORD
       write record (file_dev,key=k$)newrec$

    NEXT_DATE_RECORDS_FIRM:
    next x
 
    status$=fnstatus$(1,records,"")

    DATE_RECORDS_UPDATE:
    close (file_dev,err=*next)
    description$=description$+status$
    gosub UPDATE_FILELIST
    goto DATE_RECORDS_LOOP

    DATE_RECORDS_DONE:
    done=1

DATE_RECORDS_LOOP:
until done

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
rem if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Rename remaining v7.x Administrator data files
rem ---------------------------------------------------------------------

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will rename remaining version 7.x "+
:          "Administrator data files to their new version "+version$+" names."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Renaming version 7.x Administrator data files..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

delimiter$="[RenameFiles]"
filename=1
file_dev=upgrades_dev
gosub FIND_SECTION
if abort then goto ABORTED
upgrades_dev=file_dev

newfiles=0
gosub RENAME_FILES

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Convert Administrator files as necessary
rem ---------------------------------------------------------------------

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will perform any necessary record "+
:          "conversions to the "+version$+" data records."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Converting Administrator data files..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

count=0

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem Merge v8.x Administrator records as necessary
rem ---------------------------------------------------------------------

gosub CLEAR_FORM
phasedesc$="This phase of the upgrade will merge any new version "+version$+
:          " Administrator information into existing data files."
gosub UPDATE_PHASE
gosub STD_INPUT
if cancel then goto CANCELLED
stepdesc$="Merging new Administrator information..."
gosub DISABLE_BUTTONS
gosub UPDATE_STEP

delimiter$="[MergeFiles]"
filename=mergefiles
file_dev=mergefiles_dev
gosub FIND_SECTION
if abort then goto ABORTED
mergefiles_dev=file_dev

count=0

stepdesc$=stepdesc$+"Completed"
gosub UPDATE_STEP
gosub UPDATE_COUNT
if abort then goto ABORTED
gosub ENABLE_BUTTONS
gosub STD_INPUT
if cancel then goto CANCELLED

rem ---------------------------------------------------------------------
rem All done. Let the user know and exit.
rem ---------------------------------------------------------------------
 
buttons=0
icon=64
message$="The Version "+version$+" Administrator upgrade is now complete. "+
:        "You can now"+$0A$+
:        "login to the system. Follow the procedures listed in the Version "+
:        version$+$0A$+
:        "Release Notes to upgrade the remaining installed applications."
answer=msgbox(message$,buttons+icon,title$,err=THE_END)
print (sysgui_dev,err=THE_END)'destroy'(0)
if debug then 
:  print (debug_dev) fndatestamp$(0),"Upgrade successfully completed..."
goto THE_END

rem ---------------------------------------------------------------------
rem User cancelled at some point. A restore will be required.
rem ---------------------------------------------------------------------
 
CANCELLED:
buttons=0,icon=48
message$="You have terminated the Version "+version$+" Administrator upgrade."+$0A$+
:        "Before trying again you will need to restore your version 7.x"+$0A$+
:        "data and copy the contents of the /install directory to your"+$0A$+
:        "data directory."
answer=msgbox(message$,buttons+icon,title$,err=THE_END)
print (sysgui_dev,err=THE_END)'destroy'(0)
if debug then 
:  print (debug_dev) fndatestamp$(0),"Upgrade cancelled by user request..."
goto THE_END

rem ---------------------------------------------------------------------
rem Subroutines for updating the form
rem ---------------------------------------------------------------------

rem --- Update phase
UPDATE_PHASE:
    print (sysgui_dev)'title'(phasedesc,phasedesc$)
    if debug>1 then print (debug_dev) fndatestamp$(0),phasedesc$
return

rem --- Update step
UPDATE_STEP:
    print (sysgui_dev)'title'(stepdesc,stepdesc$)
    if debug then print (debug_dev) fndatestamp$(0),stepdesc$
return

rem --- Update count
UPDATE_COUNT:
    count$="None"
    if count then count$=str(count:"###0")
    print (sysgui_dev)'title'(totalfiles,COUNT$)
return

rem --- Update file list
UPDATE_FILELIST:
    print (sysgui_dev)'listadd'(listbox,-1,description$),
    if debug>1 then print (debug_dev) fndatestamp$(0),description$
return

rem --- Update the status bar
UPDATE_STATUSBAR:
    x$=sendmsg(sysgui_dev,statusbar,20,0,statusbar$)
return

rem --- Clear form
CLEAR_FORM:
    print (sysgui_dev)'title'(phasedesc,"")
    print (sysgui_dev)'title'(stepdesc,"")
    print (sysgui_dev)'title'(totalfiles,"")
    gosub CLEAR_LISTBOX
    statusbar$=""
    gosub UPDATE_STATUSBAR
return

rem --- Clear listbox
CLEAR_LISTBOX:
    print (sysgui_dev)'listclr'(listbox),
return

rem --- Disable buttons
DISABLE_BUTTONS:
    print (sysgui_dev)'disable'(btnOK,btnCancel)
return

rem --- Enable buttons
ENABLE_BUTTONS:
    print (sysgui_dev)'enable'(btnOK,btnCancel)
return

rem ---------------------------------------------------------------------
rem File Subroutines
rem ---------------------------------------------------------------------

rem --- Open filename$ and return channel and status

OPEN_FILE:
    channel=unt,status=0
    open (channel,err=OPEN_FILE_ERROR)filename$
    goto OPEN_FILE_EXIT

    OPEN_FILE_ERROR:
    status=err+1

OPEN_FILE_EXIT:
return

rem --- Remove files as indicated in the FileUpgrades.ini file

REMOVE_FILES:
    gosub CLEAR_FORM
    gosub UPDATE_PHASE
    gosub STD_INPUT
    if cancel then goto REMOVE_FILES_EXIT
    gosub DISABLE_BUTTONS
    gosub UPDATE_STEP
    filename=1
    file_dev=upgrades_dev
    gosub FIND_SECTION
    upgrades_dev=file_dev
    if no_delimiter then goto REMOVE_FILES_FINISHED

    rem --- Read records and process file list until "[End"

    done=0,count=0
    repeat
        read (upgrades_dev,end=REMOVE_FILES_DONE)rec$
        rec$=cvs(rec$,2)
        if rec$="" then goto REMOVE_FILES_LOOP
        if debug>1 then print (debug_dev) fndatestamp$(0),rec$
        if pos("[End"=rec$) then goto REMOVE_FILES_DONE
        count=count+1
        filename$=datapaths$[fnindex(rec$(1,2),applications$)]+rec$(1,6)
        description$="Removing "+rec$
        status$=fnstatus$(2,0,"")
        gosub OPEN_FILE
        close (channel)
        if status then goto REMOVE_FILES_UPDATE
        erase filename$,err=REMOVE_FILES_FAILED
        status$=fnstatus$(0,0,"")
        goto REMOVE_FILES_UPDATE

        REMOVE_FILES_FAILED:
        status$=" (Failed - Error "+str(ERR)+")"
        abort=1
        if debug then print (debug_dev) fndatestamp$(0),"Removal of ",filename$,
:                                       " failed (Error ",str(err),")"
    
        REMOVE_FILES_UPDATE:
        description$=description$+status$
        gosub UPDATE_FILELIST
        goto REMOVE_FILES_LOOP

        REMOVE_FILES_DONE:
        done=1

    REMOVE_FILES_LOOP:
    until done

    REMOVE_FILES_FINISHED:
    stepdesc$=stepdesc$+"Completed"
    gosub UPDATE_STEP
    gosub UPDATE_COUNT
    gosub ENABLE_BUTTONS
    gosub STD_INPUT

REMOVE_FILES_EXIT:
return

rem --- Rename files listed in ini file

RENAME_FILES:
    done=0
    count=0
    abort=0
    repeat
        read (file_dev,end=RENAME_DONE)rec$
        rec$=cvs(rec$,2)
        if rec$="" then goto RENAME_LOOP
        if rec$(1,1)="#" then goto RENAME_LOOP
        if pos("[End"=rec$) then goto RENAME_DONE
        count=count+1
        filedesc$=cvs(rec$(1,pos(" -"=rec$)),2)
        filename$=rec$(1,6)
        p=pos("-Name"=rec$)
        if newfiles then oldname$="z"+rec$(1,6),newname$=filename$
:                   else oldname$=filename$,newname$=cvs(rec$(p+6),2)
        pathname$=datapaths$[fnindex(rec$(1,2),applications$)]+oldname$
        description$="Renaming "+filedesc$
        status$=fnstatus$(0,0,"")
        erase filename$,err=*next
        rename pathname$,newname$,err=RENAME_ERROR
        goto RENAME_UPDATE

        RENAME_ERROR:
        abort=1
        status$=" (Failed - Error "+str(ERR)+")"
        if debug then print (debug_dev) fndatestamp$(0),"Rename of ",filename$,
:                                       " to ",newname$," failed (Error ",str(err),")"

        RENAME_UPDATE:
        description$=description$+status$
        gosub UPDATE_FILELIST
        goto NEWFILE_VERIFY_LOOP

    RENAME_DONE:
    done=1

    RENAME_LOOP:
    until done

return

rem --- Search for delimiter in FileUpgrades.ini

FIND_SECTION:

    rem --- Close and reopen FileUpgrades.ini

    close (file_dev)
    filename$=files$[filename]
    gosub OPEN_FILE
    if status then exitto OPEN_ERROR
    file_dev=channel

    rem --- Read file until the section delimiter is found

    found=0
    no_delimiter=0
    abort=0
    if debug then print (debug_dev)fndatestamp$(0),"Looking for ",$22$,delimiter$,$22$,
:                                  " in ",filename$
    repeat
        read (file_dev,end=DELIMITER_NOTFOUND) rec$
        rec$=cvs(rec$,2)
        if pos(delimiter$=rec$) then found=1
        if debug>1 then print (debug_dev) fndatestamp$(0),"rec$=",$22$,rec$,$22$," found= ",found
        goto NEXT_FILELIST_RECORD

        DELIMITER_NOTFOUND:
        found=1
        no_delimiter=1
        abort=1

    NEXT_FILELIST_RECORD:
    until found
    if debug then 
:      if no_delimiter then print (debug_dev)fndatestamp$(0),$22$,delimiter$,$22$," NOT found"
:                      else print (debug_dev)fndatestamp$(0),"Found ",$22$,delimiter$,$22$

return

rem --- Retrieve old and new templates for this file

GET_TEMPLATES:
    status=0
    quit=0
    keylen=0
    filename$="ddm-21"
    if template$(1,2)="sy" then template$(1,2)="ad"
    find record (ddm21_dev,key=template$,knum=1,err=GET_TEMPLATES_ERROR) ddm21a$
    filename$="ddm-70"
    if template$(1,2)="ad" then template$(1,2)="sy"
    find record (ddm70_dev,key=template$,knum=0,err=GET_TEMPLATES_ERROR) ddm70a$
    oldtemplate$=cvs(ddm70a.record_template$,2+4)
    newtemplate$=cvs(ddm21a.record_template$,2+4)
    keylen=ddm70a.keylen
    goto GET_TEMPLATES_EXIT

    GET_TEMPLATES_ERROR:
    status=err+1
    quit=1
    abort=1
    buttons=4
    icon=16
    dialog$="Unable to locate record template for "+$22$+template$+$22$+
:            " in "+$22$+filename$+$22$
    message$=dialog$+$0A$+$0A$+
:            " Complete this phase before terminating the upgrade?"
    answer=msgbox(message$,buttons+icon,title$,err=GET_TEMPLATES_EXIT)
    if answer=6 then quit=0
    if debug then print (debug_dev) fndatestamp$(0),dialog$

GET_TEMPLATES_EXIT:
return

rem --- Define new mkeyed version of the file
   
CREATE_MKEYED_FILE:
    dim KEYDEF$(8*48,$00$)
    quit=0
    targetfile$=sourcefile$+".tmp"
    filefid$=fid(source_dev)
    filefin$=fin(source_dev)
    filefid$(1,1)=$06$
    filefid$(2,1)=$00$
    filefid$(7,2)=bin(reclen,2)
    filefid$=filefid$+".tmp"
    filedef.keynum=0
    filedef.fldnum=1
    filedef.offset=0
    filedef.keylen=keylen
    filedef.code=0
    keydef$(1,len(filedef$))=filedef$
    keydef$(len(filedef$)+1,1)=$FF$
    erase targetfile$,err=*next
    file filefid$,keydef$,err=CREATE_MKEYED_FILES_ERROR
    goto CREATE_MKEYED_FILES_EXIT

    CREATE_MKEYED_FILES_ERROR:
    status=err+1
    quit=1
    abort=1
    buttons=4
    icon=16
    dialog$="Unable to create temporary file for "+$22$+basename$+$22$
    message$=dialog$+$0A$+$0A$+
:            " Complete this phase before terminating the upgrade?"
    answer=msgbox(message$,buttons+icon,title$,err=CREATE_MKEYED_FILES_EXIT)
    if answer=6 then quit=0
    if debug then print (debug_dev) fndatestamp$(0),dialog$

CREATE_MKEYED_FILES_EXIT:
return

rem ---------------------------------------------------------------------
rem Miscellaneous Subroutines
rem ---------------------------------------------------------------------

rem --- Calculate record length based on the template

GET_RECORD_LENGTH:
    reclen=0
    while fields$<>""
        p=pos("("=fields$)
        fields$=fields$(p+1)
        p=pos(")"=fields$)
        reclen$=fields$(1,p-1)
        fields$=fields$(p+1)
         x=len(reclen$)
        if reclen$(x,1)="*" then reclen=reclen+1, reclen$=reclen$(1,x-1)
        reclen=reclen+num(reclen$)
    wend
    x=int(reclen/32)+1
    reclen=x*32
return

rem --- Convert record by moving fields from old template to the new one

CONVERT_RECORD:
    fields$=oldtemplate$
    while fields$<>""
        skip=0
        p=pos(":"=fields$)
        if p=0 then p=len(fields$)
        fieldname$=fields$(1,p-1)
        fields$=fields$(p+1)
        p=pos(","=fields$)
        if p=0 then p=len(fields$)
        fields$=fields$(p+1)
        newfield$=fieldname$
        p=pos(fieldname$=oldnames$,16)
        if p then newfield$=cvs(newnames$(p,16),2)
        datefield=pos(fieldname$=datefields$,12)
        if datefield then gosub CONVERT_DATES
        if skip then goto NEXT_FIELD
        skip=pos("RESERVED"=fieldname$)=1
        if skip=0 then 
:                 field newrec$,newfield$=field(oldrec$,fieldname$),err=FIELD_ERROR
        goto NEXT_FIELD

        FIELD_ERROR:
        abort=1
        fielderror=1
        status=err
        fields$=""
        status$=fnstatus$(9,0,"")
        print (debug_dev) fndatestamp$(0),"Error",status," encountered during MKEYED field "+
:                         "assignment for ",template$," (",basename$,")"
        print (debug_dev) fndatestamp$(0),"Old template =  ",oldtemplate$
        print (debug_dev) fndatestamp$(0),"New template =  ",newtemplate$
        print (debug_dev) fndatestamp$(0),"New field = ",newfield$," / Old field = ",fieldname$
        print (debug_dev) fndatestamp$(0),"File/Record conversion terminated"

    NEXT_FIELD:
    wend
return

rem --- Convert dates before writing out the new record

CONVERT_DATES:
    l=0
    mmddyy$=""
    yyyymmdd$=""
    value$=field(oldrec$,fieldname$)
    if cvs(value$,2)="" then goto CONVERT_DATES_FIELD
    p=int((datefield-1)/12)+1
    l=num(datelengths$(p,1))
    t$=datetypes$(l,1)
    if l=2 then goto CONVERT_DATES_YEAR
    if l<>3 and l<>6 then goto CONVERT_DATES_EXIT
    if l=3 then mmddyy$=fnb$(value$)
    if l=6 then mmddyy$=fnb6$(value$)
    yyyy$=fnyear$(mmddyy$(7,2))
    yyyymmdd$=yyyy$+mmddyy$(1,2)+mmddyy$(4,2)

    CONVERT_DATES_FIELD:
    field newrec$,newfield$=yyyymmdd$
    skip=1
    goto CONVERT_DATES_EXIT

    CONVERT_DATES_YEAR:
    yyyy$=fnyear$(value$)
    field newrec$,newfield$=yyyy$
    skip=1

    CONVERT_DATES_EXIT:
return

rem ---------------------------------------------------------------------
rem Functions
rem ---------------------------------------------------------------------

def fna$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
def fnb$(q1$)=fna$(q1$(2),q1$)+"/"+fna$(q1$(3),q1$)+"/"+fna$(q1$(1),q1$)
def fnb6$(q1$)=q1$(3,2)+"/"+q1$(5,2)+"/"+fnyy21_yy$(q1$(1,2))
def fnc$(q1$)=fna$(q1$(2),q1$)+fna$(q1$(3),q1$)+fna$(q1$(1),q1$)
def fnd$(q$)=chr(fnyy_year(q$(5,2))+32)+chr(num(q$(1,2))+32)+chr(num(q$(3,2))+32)
def fnm$(q$)=q$(5,2)+q$(1,4)
def fnn$(q$)=q$(3,4)+q$(1,2)
def fndatestamp$(q)=date(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "
def fnstr_pos(rd_ftemp0$,rd_ftemp1$,rd_ftemp1)=
:             int((pos(rd_ftemp0$=rd_ftemp1$,rd_ftemp1)+rd_ftemp1-1)/rd_ftemp1)

rem --- Return array index based on position in a string
def fnindex(q$,q1$)
    q=pos(cvs(q$,4)=q1$,2)
    if q then q=int(q/2)+1
    return q
fnend

rem --- Return file's base name
def fnbasename$(q$)
    q$=cvs(q$(pos("\"=q$,-1)+1),2)
    q=pos("."=q$)
    if q then q$=q$(1,q-1)
    return q$
fnend

rem --- Set status$ based on passed value
def fnstatus$(q,q1,q1$)
    q$=""
    if q=0 then q$=" (Successful)"
    if q=1 then q$=" (Successful - "+str(q1)+" records)"
    if q=2 then q$=" (Not found)"
    if q=3 then q$=" (Already true MKEYED)"
    if q=4 then q$=" (Failed - Can't define temp file)"
    if q=5 then q$=" (Failed - Unable to open "+q1$+")"
    if q=6 then q$=" (Failed - Record count mismatch)"
    if q=7 then q$=" (Failed - Missing "+q1$+" template)"
    if q=8 then q$=" (Failed - Invalid key length specified)"
    if q=9 then q$=" (Failed - Field assignment error)"
    return q$
fnend

rem --- Return string value of passed STBL variable
def fnglobal$(q$,q1$)
    q1$=stbl(q$,err=GLOBALSTR_EXIT)
    GLOBALSTR_EXIT: 
    return q1$
fnend

rem --- Convert dictionary data name to template name
def fndataname$(q$)
    dim q1$(12)
    q$=cvs(q$,2)
    q=len(q$)
    for q1=1 to q
        if q$(q1,1)=" " then q$(q1,1)="_"
    next q1
    q1$(1)=q$
    return q1$
fnend

rem --- Convert year from YY to YYYY
def fnyear$(q$)
    q=num(fnyy21_yy$(q$))
    if q then if q<10 then q1=2000+q
:                     else q1=1900+q
    q1$=str(q1:"0000")
    return q1$
fnend

rem  --- Un-Convert 21st Century Numeric Year to 2-Char Year
def fnyear_yy$(q)=str(mod(q,100):"00")

rem  --- Convert Numeric Year to 21st Century 2-Char Year
def fnyear_yy21$(q)=fnyy_yy21$(str(mod(q,100):"00"))

rem  --- Convert 2-Char Year to 21st Century 2-Char Year
def fnyy_yy21$(q1$)
    q9=10,q9=num(STBL("+Y2K_UPPER_LIMIT",err=YY_YY21_ERROR),err=YY_YY21_ERROR)
    YY_YY21_ERROR:
    if num(q1$(1,2),err=YY_YY21_EXIT)<q9 then q1$(1,1)=chr(int(num(q1$(1,2))/10)+65)
    YY_YY21_EXIT:
    return q1$
fnend

rem  --- Un-Convert 21st Century 2-Char Year to 2-Char Year
def fnyy21_yy$(q1$)
    q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
fnend

rem  --- Convert 2-Char Year to 21st Century Numeric Year
def fnyy_year(q1$)
    q=num(fnyy21_yy$(q1$)),q9=10
    q9=num(STBL("+Y2K_UPPER_LIMIT",err=YY_YEAR_ERROR),err=YY_YEAR_ERROR)
    YY_YEAR_ERROR:
    if q<q9 then q=q+100
    return q
fnend

rem ---------------------------------------------------------------------
rem Record template definitions
rem ---------------------------------------------------------------------

rem --- These are hard coded since the v8.0 dictionary isn't installed
rem --- yet and the v7.x public that generated record templates has
rem --- already been overlaid by the v8.0 Administrator.
         
INITIALIZE_TEMPLATES:

dim sym02a$:"operator_id:c(3),"+
:           "sep1:c(1*),"+
:           "short_name:c(24),"+
:           "security_lev:c(1),"+
:           "inp_fld_type:c(1),"+
:           "password_set:c(1),"+
:           "password:c(6),"+
:           "interface:c(1),"+
:           "last_sel_ptr:c(2),"+
:           "case_key:c(2),"+
:           "caps_key:c(2),"+
:           "bg_col_base:c(10),"+
:           "fg_col_base:c(10),"+
:           "bg_col_win1:c(10),"+
:           "fg_col_win1:c(10),"+
:           "bg_col_win2:c(10),"+
:           "fg_col_win2:c(10),"+
:           "pf_file_id:c(3),"+
:           "last_sel_opt:c(1),"+
:           "reserved_str:c(5),"+
:           "menu_jump:c(1),"+
:           "default_firm:c(2),"+
:           "menu_id:c(10),"+
:           "menu_id2:c(10),"+
:           "email_addr:c(40),"+
:           "reserved_str2:c(24),"+
:           "sep2:c(1*),"+
:           "max_pf_files:n(3*),"+
:           "reserved_num_1:n(1*),"+
:           "reserved_num_2:n(1*),"+
:           "reserved_num_3:n(1*),"+
:           "reserved_num_4:n(1*)"

dim sym04a$:"system_id:c(2),"+
:           "sep1:c(1*),"+
:           "sys_desc:c(35),"+
:           "multi_firm:c(1),"+
:           "firm_id:c(2),"+
:           "sys_install:c(1),"+
:           "aon_version:c(6),"+
:           "post_gl:c(1),"+
:           "batch_entry:c(1),"+
:           "interface:c(1),"+
:           "reserved_str:c(16),"+
:           "sep2:c(1*),"+
:           "data_path:c(50),"+
:           "sep3:c(1*),"+
:           "program_path:c(50),"+
:           "sep4:c(1*),"+
:           "reserved_num_1:n(1*),"+
:           "reserved_num_2:n(1*),"+
:           "reserved_num_3:n(1*)"

dim sym06a$:"firm_id:c(2),"+
:           "sep1:c(1*),"+
:           "firm_name:c(40*),"+
:           "help_flag:c(1),"+
:           "batch_entry:c(1),"+
:           "interface:c(1),"+
:           "reserved_str:c(13*)"

dim ddm01a$:"data_name:c(12),"+
:           "sep1:c(1*),"+
:           "description:c(30),"+
:           "lstrev_date:c(6),"+
:           "data_type:c(1),"+
:           "system_id:c(2),"+
:           "mask_type:c(1),"+
:           "special_mask:c(15),"+
:           "expand_code:c(12),"+
:           "compres_code:c(12),"+
:           "security_lev1:c(1),"+
:           "password1:c(6),"+
:           "security_lev2:c(1),"+
:           "password2:c(6),"+
:           "access_flag:c(1),"+
:           "reserved_str:c(11),"+
:           "sep2:c(1*),"+
:           "field_length:n(3*),"+
:           "display_len:n(3*),"+
:           "reserved_num:n(1*)"

dim ddm21a$:"table_alias:c(16*),"+
:           "table_name:c(7*),"+
:           "record_template:c(10240*)"

dim ddm70a$:"table_name:c(7),"+
:           "sep1:c(1*),"+
:           "table_alias:c(12),"+
:           "sep2:c(1*),"+
:           "record_template:c(3968),"+
:           "sep3:c(1*),"+
:           "keylen:n(3*)"

dim filedef$:"keynum:u(1),"+
:            "fldnum:u(1),"+
:            "offset:u(2),"+
:            "keylen:u(1),"+
:            "code:u(1),"+
:            "ignore:u(2)"

return

rem ---------------------------------------------------------------------
rem Standard input for form
rem ---------------------------------------------------------------------

rem --- Cycle until close box or button is pressed

STD_INPUT:
 
    done=0
    cancel=0
    repeat
        read record (sysgui_dev,siz=sysgui_length)sysgui$
        print "sysgui.code$ = ",sysgui.code$
        if sysgui.code$="X" then cancel=1
        if sysgui.code$="B" then done=1
        if sysgui.code$="B" then if sysgui.id=btnCancel then cancel=1
    until done

return 

rem ---------------------------------------------------------------------
rem Standard error routine (01Nov2005)
rem --------------------------------------------------------------------- 

STD_ERROR:
ESCAPE 
goto THE_END

rem ---------------------------------------------------------------------
rem Standard escape routine (01Nov2005)
rem --------------------------------------------------------------------- 

STD_ESCAPE:
ESCAPE 
goto THE_END

rem ---------------------------------------------------------------------
rem Error routines
rem --------------------------------------------------------------------- 

OPEN_ERROR:
message$="Unable to locate or open "+$22$+filename$+$22$+" - Status was "+str(status-1)
goto DISPLAY_ERROR_MESSAGE

RESOURCE_ERROR:
message$="Unable to open or load "+$22$+filename$+$22$+" - Status was "+str(err)
goto DISPLAY_ERROR_MESSAGE

DISPLAY_ERROR_MESSAGE:
buttons=0
icon=16
answer=msgbox(message$,buttons+icon,title$,err=ABORTED)
if debug then print (debug_dev) fndatestamp$(0),message$
goto ABORTED
 
rem ---------------------------------------------------------------------
rem Upgrade aborted for some reason. A restore will be required.
rem ---------------------------------------------------------------------
 
ABORTED:
buttons=0,icon=16
abort$=abort$+"The Version "+version$+" Administrator upgrade has terminated abnormally."+$0A$+
:             "Before trying again you will need to restore your version 7.x data"+$0A$+
:             "and copy the contents of the /install directory to your data directory."+$0A$+
:             "If problems persist call AddonSoftware Support at (800) 275-6350."
answer=msgbox(abort$,buttons+icon,title$,err=THE_END)
print (sysgui_dev,err=THE_END)'DESTROY'(0)
if debug then 
:  print (debug_dev) fndatestamp$(0),"Upgrade aborted due to errors..."
goto THE_END

rem ---------------------------------------------------------------------
rem Exit program
rem --------------------------------------------------------------------- 

rem --- Return to the menu
THE_END:
print (sysgui_dev,err=EXIT_PROGRAM)'destroy'(0)
EXIT_PROGRAM:
release 
end
