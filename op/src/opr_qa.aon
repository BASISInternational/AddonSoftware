rem --- Order Status Report By Customer
rem --- Program opr_qa v8.0.0 09Jul2007 (opr_qa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:28:20)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0232)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0101)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0107)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0120)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0121)
rem --- v7.x Administrator reference ["sys-01"] (Line 0131)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0139)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0145)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0150)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0151)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0181)
rem --- BBx reference ["syc_ra.bbx"] (Line 0181)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0219)
rem --- BBx reference ["syc_rs.bbx"] (Line 0219)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0220)
rem --- BBx reference ["syc_rs.bbx"] (Line 0220)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0365)
rem --- BBx reference ["syc_rs.bbx"] (Line 0365)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0366)
rem --- BBx reference ["syc_rs.bbx"] (Line 0366)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]

rem --- The following IOLIST's were removed from this program:

rem --- arm01a: iolist b0$,b1$(1)
rem --- arm10a: iolist x0$(1)
rem --- ope01a: iolist a0$(1),a1$,a[all]
rem --- ope11a: iolist w0$,w1$(1),w2$,w[all]
rem --- opm02a: iolist y0$(1)

rem --- The following channel references have been identified:

rem --- ars01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0141)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-10"
    files$[4]="ope-01"
    files$[5]="ope-11"
    files$[6]="opm-02"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm10_dev=channels[3]
    ope01_dev=channels[4]
    ope11_dev=channels[5]
    opm02_dev=channels[6]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm10a$:templates$[3],ope01a$:templates$[4],
:       ope11a$:templates$[5],opm02a$:templates$[6]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=6
    dim files$[files],options$[files],channels[files]
    files$[1]="ope-01"
    files$[2]="ope-11"
    files$[3]="arm-01"
    files$[4]="arm-10"
    files$[5]="sys-01"
    files$[6]="opm-02"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ope01_dev=channels[1]
    ope11_dev=channels[2]
    arm01_dev=channels[3]
    arm10_dev=channels[4]
    sys01_dev=channels[5]
    opm02_dev=channels[6]

rem --- Parameters

    dim p[2]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    p[0]=num(p2$(1,2))

rem --- Initializations

    headings=3
    dim a0$(200),a[13],w1$(64),w[17],x0$(32),headings$[headings]
    optn$="OQBC"
    p8$=""
    t0=0
    t1=0
    t0$=""
    done=0
    m8$="(###)-###-####"
    m0=len(m0$)
    m1=len(m1$)
    l9=59
    l=l9+1
    h0=132
    h=0
    headings$[0]=n1$
    headings$[1]=n3$
    clock$=""
    when$=sysinfo.system_date$

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    gosub display_fields
    goto start_done

l800: rem --- Option

    v0$="S"
    v1$="^C"
    v2$=p8$
    v3$=""
    v4$="O=Open Orders, Q=Quotes, B=Backorders, C=Credit Held Orders, <F1>=All Orders"
    v0=4
    v1=40
    v2=3
    x$=""
    h3$=""
    control_id=3000
    i0=0
    gosub std_input
    on v3 goto l840,l841,flow_control,l800,flow_control,l840,flow_control
l840:
    if v$<>"" goto l842
l841:
    v$=optn$; goto l870
l842:
    for x=1 to len(optn$)
        if pos(optn$(x,1)=v$)>0 x$=x$+optn$(x,1)
    next x
    if len(x$)>0 v$=x$ else goto l800
    for x=1 to len(v$)
        if x=len(v$) and x<>1 h3$=h3$+" and " else if h3$<>"" leth3$=h3$+", "
        if v$(x,1)="O" h3$=h3$+"Open" else if v$(x,1)="Q" h3$=h3$+"Quoted" else if v$(x,1)="B" h3$=h3$+"Backordered" else ifv$(x,1)="C" h3$=h3$+"Credit Held" else exitto l800
    next x
l870:
    p8$=v$
    if len(p8$)<4 h3$=h3$+" Orders Only" else h3$="All Orders"
    if len(h3$)>80-v1-len(p8$)-1 x$=h3$(1,80-v1-len(p8$)-1) else x$=h3$
    call pgmdir$+"syc_rs.bbx","",my_context,3000,p8$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,x$,0,"",status
    goto flow_control

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

rem --- File Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","CN","","","Printing","",m0+8,ope01_dev,1,meter_num,status
    headings$[2]=h3$
    read (ope01_dev,key=firm_id$,dom=*next)

l1000: rem --- Next key

    dim k$(20)
    k$(1)=key(ope01_dev,end=l4000)
    if k$(1,2)<>firm_id$ goto l4000
    if k$(18,3)<>"000" goto l3800

rem --- Next header

    read record (ope01_dev,end=l4000) ope01a$
    if a0$(21,1)="V" or a0$(22,1)="I" goto l3800
    if pos("O"=p8$)>0 and a0$(23,1)<>"B" and a0$(101,1)<>"C" and a0$(21,1)<>"P" goto l1300
    if pos("B"=p8$)>0 and a0$(23,1)="B" goto l1300
    if pos("C"=p8$)>0 and a0$(101,1)="C" goto l1300
    if pos("Q"=p8$)>0 and a0$(21,1)="P" goto l1300
    goto l3800

l1300: rem --- Got One To Print

    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(5,p[0]),m0$)+" "+a0$(11,7),0,0,1,meter_num,status

rem --- Customer break?

    if a0$(5,6)<>t0$ gosub l6000

rem --- Retrieve terms

    if a0$(62,2)=x0$(4,2) goto l1700
    dim x0$(32)
    find record (arm10_dev,key=firm_id$+"A"+a0$(62,2),dom=l1700) arm10a$
    terms$=x0$(6,20)

l1700: rem --- Type?

    x9$=a0$(22,1)
    if x9$<>"O" goto l1790
    if a0$(101,1)="C" x9$="C"
    if a0$(101,1)="R" x9$="R"
    if a0$(23,1)="B" x9$="B"
    if a0$(21,1)="P" x9$="Q"

l1790: rem --- Add Up Order Amount

    amnt=0
    read (ope11_dev,key=a0$(1,17)+"000",dom=*next)
l1910:
    kb$=key(ope11_dev,end=l2000)
    if len(kb$)<17 goto l2000
    if kb$(1,17)<>a0$(1,17) goto l2000
    read record (ope11_dev) ope11a$
    price=w[1]*w[2]
    dim y0$(32); find record (opm02_dev,key=firm_id$+w0$(21,1),dom=*next) opm02a$
    if y0$(25,1)="O" if w1$(44,1)="Y" price=w[6] else price=w[1]
    amnt=amnt+price
    goto l1910

l2000: rem --- Print Status Line

    if l+1>l9 gosub report_heading
    print (printer_dev)customer$,@(m0+1),name$,@(32+m0),a0$(11,7),@(40+m0),fndate$(a0$(77,3)),@(49+m0),fndate$(a0$(27,3)),@(58+m0),a0$(111,10),@(69+m0),a0$(32,10),@(80+m0),a0$(62,2)," ",terms$,@(101+m0)," ",x9$,@(h0-m1),amnt:m1$; rem ESCAPE, Need to make room for Cust PO#, A0$(111,20)
    customer$=""
    name$=phone$
    phone$=""
    l=l+1
    number=number+1
    t0=t0+1
    t1=t1+amnt

l3800: rem --- Get Next Order

    goto l1000
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l800,done,done,done

l4000: rem --- PRINT

rem --- End

    done=1
    gosub l6000
    if l+2>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)t0," Total Orders ",@(h0-m1-13),"Total Amount",@(h0-m1),t1:m1$
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],3,h,h0,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(32+m0),"Order",@(41+m0),"Order",@(51+m0),"Ship",@(101+m0),"Order"
    print (printer_dev)"Customer",@(32+m0),"Number",@(42+m0),"Date",@(51+m0),"Date",@(58+m0),"PO Number",@(69+m0),"Ship-Via",@(80+m0),"Terms",@(101+m0),"Type",@(h0-13),"Order Amount"
    l=l+2
    return
display_fields:
    control_id=3000
    cid_cnt=0
l5510:
    if cid_cnt=0 disp_inp$=optn$,disp_desc$="All Orders"
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5550
    goto l5510
l5550:
    disp_inp$=""
    disp_desc$=""
    return

l6000: rem --- Customer break

    if t0$="" goto l6100
    if number>1 goto l6100
    if l+1>l9 gosub report_heading
    print (printer_dev)@(m0+1),name$
    let l=l+1
l6100:
    if done>0 goto l6190
    dim b1$(282)
    let t0$=a0$(5,6),b1$(1)="(Not On File)",number=0
    find record (arm01_dev,key=a0$(1,2)+a0$(5,6),dom=*next) arm01a$
    let customer$=fnmask$(a0$(5,p[0]),m0$),name$=b1$(1,30)
    let phone$=fnmask$(b1$(112,10),m8$)
    if l+2>l9 gosub report_heading
    print (printer_dev)""
    let l=l+1
l6190:
    return

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    if pos("E"=cvs(q1$,4)) goto *next else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
