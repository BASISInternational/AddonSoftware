rem --- Order Status Report By Customer
rem --- Program opr_qa v8.0.0 09Jul2007 (opr_qa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:28:20)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-10",ids$[3]="ARC_TERMCODE"
    files$[4]="ope-01",ids$[4]="OPE_ORDHDR"
    files$[5]="ope-11",ids$[5]="OPE_ORDDET"
    files$[6]="opm-02",ids$[6]="OPC_LINECODE"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm10_dev=channels[3]
    ope01_dev=channels[4]
    ope11_dev=channels[5]
    opm02_dev=channels[6]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm10a$:templates$[3],ope01a$:templates$[4],
:       ope11a$:templates$[5],opm02a$:templates$[6]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A:ARS_PARAMS"
    ids$[2]="ivs-01A:IVS_PARAMS"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivs01a$:templates$[2]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    Option$=fnget_fld_data$(table$,"Option")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")




rem --- Parameters

rem    dim p[2]
   
    n1$=sysinfo.firm_name$
    n2$="AR"
    n3$=sysinfo.task_desc$
    find record (ads01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (ads01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
rem p[0]=num(p2$(1,2))
    p[0]=num(ivs01a_key.FIRM_ID$)

rem --- Initializations

    headings=3
    dim a0$(200),a[13],w1$(64),w[17],x0$(32),headings$[headings]
    optn$="OQBC"
    p8$=""
    t0=0
    t1=0
    t0$=""
    done=0
    m8$="(###)-###-####"
    m0=len(ars01a.customer_output$)
    m1=len(ars01a.amount_mask$)
    l9=59
    l=l9+1
    h0=132
    h=0
    headings$[0]=n1$
    headings$[1]=n3$
    clock$=""
    when$=sysinfo.system_date$
    more=1
rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub display_fields
    
Option: rem --- Option

    v0$="S"
    v1$="^C"
    v2$=p8$
    v3$=""
    v4$="O=Open Orders, Q=Quotes, B=Backorders, C=Credit Held Orders, <F1>=All Orders"
    v0=4
    v1=40
    v2=3
    x$=""
    h3$=""
    control_id=3000
    i0=0
    on v3 goto Key_Flow,Option_Flow,flow_control,Option,flow_control,Key_Flow,flow_control
Key_Flow:

    if v$="" then 
Option_Flow:
            v$=optn$
    else

            for x=1 to len(optn$)
                if pos(optn$(x,1)=v$)>0 x$=x$+optn$(x,1)
            next x
            if len(x$)>0 v$=x$ else goto Option
            for x=1 to len(v$)
                if x=len(v$) and x<>1 h3$=h3$+" and " else if h3$<>"" leth3$=h3$+", "
                if  v$(x,1)="O" h3$=h3$+"Open" else if v$(x,1)="Q" h3$=h3$+"Quoted" else if v$(x,1)="B" h3$=h3$+"Backordered" else if v$(x,1)="C" h3$=h3$+"Credit Held" else exitto Option
            next x
    endif

    p8$=v$
    if len(p8$)<4 h3$=h3$+" Orders Only" else h3$="All Orders"
    if len(h3$)>80-v1-len(p8$)-1 x$=h3$(1,80-v1-len(p8$)-1) else x$=h3$
    call pgmdir$+"syc_rs.bbx","",my_context,3000,p8$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,x$,0,"",status
    goto flow_control

done: rem --- Correct?

    if validate then validate=0
        else
            v0$="S"
            v1$="KC"
            v2$="Y"
            v3$=""
            v4$="ITAC=Y"
            v0=6
            v1=fnv(v4$)
            v2=22
            control_id=i0-i0_done+1
    
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done

done_test:



                                action=pos(v$="YN")
                                flow_ctr=0
                                validate_ip=1
                                d_key=2

                                switch action
                                       case flow_ctr
                                             goto flow_control
                                             break
                                        case validate_ip
                                             goto validate_input 
                                             break
                                        case d_key
                                             goto do_nonkey1
                                             break
                                             case default
                                        break
                                swend

rem     on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
                validate=1
                old_control_id=0
do_nonkey1:
                v3=0
                i0=i0_nonkey1-1
                goto flow_control

endif



rem --- File Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","CN","","","Printing","",m0+8,ope01_dev,1,meter_num,status
    headings$[2]=h3$
    read (ope01_dev,key=firm_id$,dom=*next)


    while more

rem             dim k$(20)
                ope01a_key.FIRM_ID$=key(ope01_dev,end=Print1)
                if ope01a_key.FIRM_ID$<>firm_id$ goto Print1
                if ope01a_key.SEQUENCE_000$<>"000" continue

rem --- Next header

                read record (ope01_dev,end=Print1) ope01a$
                if ope01a.INVOICE_TYPE$="V" or ope01a.ORDINV_FLAG$="I" continue
                    if pos("O"=p8$)<0 and ope01a.BACKORD_FLAG$="B" and ope01a.CREDIT_FLAG$="C" and ope01a.INVOICE_TYPE$="P" then
                        if pos("B"=p8$)<0 and ope01a.BACKORD_FLAG$<>"B" then
                            if pos("C"=p8$)<0 and ope01a.CREDIT_FLAG$<>"C" then
                                if pos("Q"=p8$)<0 and ope01a.INVOICE_TYPE$="P" then
                                    continue
                                endif
                            endif
                        endif
                     endif
                



                call pgmdir$+"adc_progress.aon","S","","","",fnmask$(ope01a_key.CUSTOMER_ID$,m0$)+" "+ope01a.ORDER_NO$,0,0,1,meter_num,status

rem --- Customer break?

                if ope01a_key.CUSTOMER_ID$<>t0$ gosub Customer_break

rem --- Retrieve terms

                if  ope01a.TERMS_CODE$<>arm10a_key.AR_TERMS_CODE$ then
                    dim x0$(32)
                    find record (arm10_dev,key=firm_id$+"A"+ope01a.TERMS_CODE$,dom=Type) arm10a$
                    terms$=arm10a_key.CODE_DESC$
                endif

rem --- Type?
Type:

                x9$=ope01a.ORDINV_FLAG$
                if x9$="O" then
                    if ope01a.CREDIT_FLAG$="C" x9$="C"
                    if ope01a.CREDIT_FLAG$="R" x9$="R"
                    if ope01a.BACKORD_FLAG$="B" x9$="B"
                    if ope01a.INVOICE_TYPE$="P" x9$="Q"
               endif

rem --- Add Up Order Amount


                amnt=0
                read (ope11_dev,key=ope01a_key.FIRM_ID$+ope01a_key.AR_TYPE$+ope01a_key.CUSTOMER_ID$+ope01a_key.ORDER_NO$+"000",dom=*next)
            while more
                ope11a_key$=key(ope11_dev,end=*break)
                if len(ope11a_key$)<17 break
                if ope11a_key.FIRM_ID$+ope11a_key.AR_TYPE$+ope11a_key.CUSTOMER_ID$+ope11a_key.ORDER_NO$<>ope01a_key.FIRM_ID$+ope01a_key.AR_TYPE$+ope01a_key.CUSTOMER_ID$+ope01a_key.ORDER_NO$ break
                read record (ope11_dev) ope11a$
                price=ope11a.UNIT_PRICE*ope11a.QTY_ORDERED
rem             dim y0$(32) 
                find record (opm02_dev,key=firm_id$+ope11a.MAN_PRICE$,dom=*next) opm02a$
                if opm02a.LINE_TYPE$="O" if ope11a.COMMIT_FLAG$="Y" price=ope11a.EXT_PRICE else price=ope11a.UNIT_PRICE
                amnt=amnt+price
            wend

rem --- Print Status Line


                if l+1>l9 gosub report_heading
                print (printer_dev)customer$,@(m0+1),name$,@(32+m0),ope01a_key.ORDER_NO$,@(40+m0),fndate$(ope01a.ORDER_DATE$),@(49+m0),fndate$(ope01a.SHIPMNT_DATE$),@(58+m0),ope01a.CUSTOMER_PO_NO$,@(69+m0),ope01a.AR_SHIP_VIA$,@(80+m0),ope01a.TERMS_CODE$," ",terms$,@(101+m0)," ",x9$,@(h0-m1),amnt:m1$; rem ESCAPE, Need to make room for Cust PO#, A0$(111,20)
                customer$=""
                name$=phone$
                phone$=""
                l=l+1
                number=number+1
                t0=t0+1
                t1=t1+amnt
    wend
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto Option,done,done,done

Print1: rem --- PRINT

rem --- End

    done=1
    gosub Customer_break
    if l+2>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)t0," Total Orders ",@(h0-m1-13),"Total Amount",@(h0-m1),t1:m1$
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],3,h,h0,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(32+m0),"Order",@(41+m0),"Order",@(51+m0),"Ship",@(101+m0),"Order"
    print (printer_dev)"Customer",@(32+m0),"Number",@(42+m0),"Date",@(51+m0),"Date",@(58+m0),"PO Number",@(69+m0),"Ship-Via",@(80+m0),"Terms",@(101+m0),"Type",@(h0-13),"Order Amount"
    l=l+2
    return
display_fields:
    control_id=3000
    cid_cnt=0
while more
    if cid_cnt=0 disp_inp$=optn$,disp_desc$="All Orders"
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 break
    wend
Display:
    disp_inp$=""
    disp_desc$=""
    return

Customer_break: rem --- Customer break

    if t0$<>"" then
        if number<1 then
            if l+1>l9 gosub report_heading
            print (printer_dev)@(m0+1),name$
            let l=l+1
        endif
    endif
           

    if done>0 return
rem dim b1$(282)
    let t0$=ope01a_key.CUSTOMER_ID$,arm01a.CUSTOMER_NAME$="(Not On File)",number=0
    find record (arm01_dev,key=ope01a_key.FIRM_ID$+ope01a_key.CUSTOMER_ID$,dom=*next) arm01a$
    let customer$=fnmask$(ope01a_ket.CUSTOMER_ID$,m0$),name$=arm01a.CUSTOMER_NAME$
    let phone$=fnmask$(arm01a.PHONE_NO$,m8$)
    if l+2>l9 gosub report_heading
    print (printer_dev)""
    let l=l+1

    return

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    if pos("E"=cvs(q1$,4))
 rem   goto  *next
    else
        return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
    
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

rem    run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
