rem --- Item Price Calculation
rem --- Program opc_pc v8.0.0 12Dec2007 (opc_pc)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/12/2007 10:44:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



            seterr std_error
            setesc std_error
            enter channels[all],firm_id$,whs$,item$,listcd$,cust$,date$,priccd$,ordqty,type_price$,price,disc,status

rem --- Retrieve the program path

            pgmdir$=stbl("+dir_pgm",err=*next)
            whs$=pad(whs$,2)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+sysinfo",err=*next)
            milestone=num(stbl("+milestone",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

            files=6,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            files$[1]="ars_params",ids$[1]="ARS_PARAMS"
            files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
            files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
            files$[4]="ivm-06",ids$[4]="IVM_ITEMPRIC"
            files$[5]="ivc_priccode",ids$[5]="IVC_PRICCODE"
            files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
            call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit
            ars01a_dev=channels[1]
            ivm01_dev=channels[2]
            ivm02_dev=channels[3]
            ivm06_dev=channels[4]
            ivm10_dev=channels[5]
            ivs01a_dev=channels[6]

rem --- Dimension string templates

            dim ars01a$:templates$[1],ivm01a$:templates$[2],ivm02a$:templates$[3],
:           ivm06a$:templates$[4],ivm10a$:templates$[5],ivs01a$:templates$[6]

rem --- Assign form input values to local variables

            value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

            ars01a_key$=firm_id$+"AR00"
            find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
            ivs01a_key$=firm_id$+"IV00"
            find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open Files

            ivm01_dev=channels[1]
            ivm02_dev=channels[2],ivm06_dev=channels[6],ivm10_dev=channels[10]

rem --- Initialize Data
            more=1
            type_price$="N"
            price=0,disc=0,status=0
            digits=tcb(14); rem "Get current precision

rem --- Get Item Class

  while more

 
             read record (ivm01_dev,key=firm_id$+item$,dom=*break) ivm01a$

rem --- Get Item's Warehouse Cost & Prices

 
             read record (ivm02_dev,key=firm_id$+whs$+item$,dom=*break) ivm02a$
    

list_price: rem --- Use Current List Price

    price=ivm02a.cur_price

rem --- Use Prior List Price

      if cvs(listcd$,2)<>"" or listcd$=ivm02a.pri_price_cd$ or ivm02a.pri_price<>0 then 

            price=ivm02a.pri_price
            type_price$="P"
            break
     endif
contract_pricing: rem --- Use Contract Pricing

    if ivm06_dev<>0 then 
       dim condata$(48),conbrk[9],conprc[9]
           find record (ivm06_dev,key=firm_id$+cust$+item$,dom=pricing_table) ivm06a$
                if (cvs(ivm06a.from_date$,2)="" and date$>=ivm06a.from_date$) or (cvs(ivm06a.thru_date$,2)="" and date$>ivm06a.thru_date$) then 
                    if abs(ordqty)>=conbrk[0] then 
                          for x=0 to 9
                          if conbrk[x]>0 and abs(ordqty)>=conbrk[x] then let price=conprc[x]
                          next x
                          type_price$="X"
                          break
                    endif
               endif      
    endif

pricing_table: rem --- Use Pricing Table

            if ordqty=0 then break
            find record (ivm10_dev,key=firm_id$+"E"+ivm01a.item_class$+priccd$,dom=*break) ivm10e$
            if (ivm10e.break_qty=0 and ivm10e.break_disc=0) or abs(ordqty)<ivm10e.break_qty then let price=ivm02a.cur_price; break
            for x=0 to 9
                if tablbrk[x]>0 and abs(ordqty)>=tablbrk[x] then let perc=tabldisc[x]
            next x
            type_price$=ivm10e.iv_price_mth$
            on pos(type_price$="CML") goto done,mark_up_cast,margin_over_cost,mark_down_list_price

mark_up_cast: rem --- Mark-Up From Cost

            precision digits+3
            percent=perc/100
            precision digits
            price=ivm02a.unit_cost+ivm02a.unit_cost*percent
            if ivm02a.cur_price=0 then break
            precision digits+3
            percent=1-price/ivm02a.cur_price
            precision digits
            disc=100*percent
            break

margin_over_cost: rem --- Margin Over Cost

            if perc>=100 break; rem "No such thing as 100% margin unless cost=0
            price=ivm02a.unit_cost*100/(100-perc)
            if ivm02a.cur_price=0 then break
            precision digits+3
            percent=1-price/ivm02a.cur_price
            precision digits
            disc=100*percent
            break

mark_down_list_price: rem --- Mark-Down List Price

            precision digits+3
            percent=perc/100
            precision digits
            price=ivm02a.cur_price-ivm02a.cur_price*percent
            disc=perc
            break

wend

done: rem --- All Done

            if price=0 then let type_price$="N"
            goto std_exit

rem --- Return STATUS = ERR

            status=err
            if status=0 then let status=999
            type_price$="N"
            price=0,disc=0
            goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
