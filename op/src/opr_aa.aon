rem --- Shipping Schedule Report (Input Overlay)
rem --- Program opr_aa v8.0.0 09Jul2007 (opr_aa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:28:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0433)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0133)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0140)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0153)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0154)
rem --- v7.x Administrator reference ["sys-01"] (Line 0166)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0177)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0183)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0188)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0189)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0223)
rem --- BBx reference ["syc_ra.bbx"] (Line 0223)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0259)
rem --- BBx reference ["syc_rs.bbx"] (Line 0259)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0272)
rem --- BBx reference ["syc_rs.bbx"] (Line 0272)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0273)
rem --- BBx reference ["syc_rs.bbx"] (Line 0273)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0309)
rem --- BBx reference ["syc_rs.bbx"] (Line 0309)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0315)
rem --- BBx reference ["syc_rs.bbx"] (Line 0315)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0316)
rem --- BBx reference ["syc_rs.bbx"] (Line 0316)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0353)
rem --- BBx reference ["syc_rs.bbx"] (Line 0353)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0354)
rem --- BBx reference ["syc_rs.bbx"] (Line 0354)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0374)
rem --- BBx reference ["syc_rs.bbx"] (Line 0374)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0455)
rem --- BBx reference ["syc_rs.bbx"] (Line 0455)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0456)
rem --- BBx reference ["syc_rs.bbx"] (Line 0456)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0514)
rem --- BBx reference ["syc_rs.bbx"] (Line 0514)
rem --- BBx reference ["opr_ab.bbx"] (Line 0519)
rem --- v7.x Administrator reference ["syc_lk.bbx"] (Line 0541)
rem --- BBx reference ["syc_lk.bbx"] (Line 0541)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- ivm10a: iolist c0$(1)
rem --- ivm10c: iolist w0$(1)
rem --- ope01a: iolist a0$(1)
rem --- ope11a: iolist e0$,e1$(1),e2$,e[all]
rem --- opm02a: iolist y0$
rem --- opw02a: iolist x$,x1$,e[2],e[6]

rem --- The following channel references have been identified:

rem --- arm01a: Channel reference (Line 0181)

rem --------------------------------------------------------------------------------
rem --- ars01a: (Generated by CodePort)
rem --- ivm01a: Channel reference (Line 0179)
rem --- ivm02a: Channel reference (Line 0178)
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0176)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="ivm-01"
    files$[4]="ivm-02"
    files$[5]="ivm-10"
    files$[6]="ope-01"
    files$[7]="ope-11"
    files$[8]="opm-02"
    files$[9]="opw-02"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm10_dev=channels[5]
    ope01_dev=channels[6]
    ope11_dev=channels[7]
    opm02_dev=channels[8]
    opw02_dev=channels[9]

rem --- Dimension string templates

    dim arm01a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm10a$:templates$[5],ope01a$:templates$[6],ope11a$:templates$[7],
:       opm02a$:templates$[8],opw02a$:templates$[9]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivm-10C"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivm10c$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=9
    dim files$[files],options$[files],channels[files]
    files$[1]="ope-01"
    files$[2]="ope-11"
    files$[3]="arm-01"
    files$[4]="ivm-02"
    files$[5]="ivm-01"
    files$[6]="opw-02"
    files$[7]="sys-01"
    files$[8]="ivm-10"
    files$[9]="opm-02"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ope01_dev=channels[1]
    ope11_dev=channels[2]
    arm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm01_dev=channels[5]
    opw02_dev=channels[6]
    sys01_dev=channels[7]
    ivm10_dev=channels[8]
    opm02_dev=channels[9]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    dim p[2],i[4]
    for x=0 to 3
        i[x]=num(i2$(x*2+1,2))
    next x
    i[0]=num(i2$(1,2))
    p[1]=num(p2$(3,2))
    p[2]=num(p3$(4,1))
    p[0]=num(p2$(1,2))

rem --- Initialize Data

    h0=0
    number=1
    dim description$[number],field[number],position[number],length[number]
    l9=30
    l=0
    optn$="OQBC"
    p7$="OB"
    dim w[7]
    m0=len(p5$)
    m1=len(m1$)
    m2=len(m2$)
    if m2<9 call pgmdir$+"adc_sizemask.aon",m2$,m2,9,9
    p8$=""
    p7$=optn$
    wh$=""
    dim j$(m1+m2*7,"-"),j0$(10,"0"),j1$(50," ")

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    gosub display_fields
    goto start_done

l900: rem --- Selected Warehouse

    v0$="S"
    v1$="EC"
    v2$=wh$
    v0=2
    v1=40
    v2=3
    i0=0
    v4$="Enter Selected Warehouse, <F1>=All, <F3>=Lookup"
    v3$=""
    control_id=3000
    gosub std_input
    on v3 goto l950,l955,flow_control,l940,flow_control,l960,flow_control
l940:
    description$[0]="ID"
    description$[1]="Warehouse"
    title$="Warehouse Lookup"
    field[0]=1
    position[0]=4
    length[0]=2
    field[1]=1
    position[1]=6
    length[1]=24
    column=79-length[0]-length[1]-2-number*4
    record$="C"
    row=3
    gosub l6200
l950:
    if v$<>"" goto l960
l955:
    wh$=""; gosub clear_text; call pgmdir$+"syc_rs.bbx"
    ""
    my_context
    13000
    "All"
    0
    ""
    status; goto l990
l960:
    dim w0$(165)
    v$=v$+fill(2)
    v$=v$(1,2)
    find record (ivm10_dev,key=firm_id$+"C"+v$,dom=l900) ivm10c$
    call pgmdir$+"syc_rs.bbx","",my_context,3000,w0$(4,2),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,w0$(6,24),0,"",status
    wh$=w0$(4,2)
l990:
    goto flow_control

l1000: rem --- Product

    v0$="S"
    v1$="EC"
    v2$=p8$
    v0=3
    v1=40
    v2=4
    v4$="Select A Valid Product Type, <F1>=All Product Types, <F3>=Lookup"
    v3$=""
    control_id=3001
    gosub std_input
    on v3 goto l1050,l1055,flow_control,l1043,flow_control,l1060,flow_control
l1043:
    dim description$[number],field[number],positoin[number],length[number]
    description$[0]="ID"
    description$[1]="Description"
    title$="Product Type Lookup"
    field[0]=1
    position[0]=4
    length[0]=3
    field[1]=1
    position[1]=7
    length[1]=20
    column=79-length[0]-length[1]-2-number*4
    record$="A"
    row=5
    gosub l6200
l1050:
    if v$<>"" goto l1060
l1055:
    gosub clear_text; let p8$="",v3=0; call pgmdir$+"syc_rs.bbx","",my_context,13001,"All",0,"",status; goto l1090
l1060:
    dim c0$(35)
    v$=v$+fill(3)
    v$=v$(1,3)
    find record (ivm10_dev,key=firm_id$+"A"+v$,dom=l1000) ivm10a$
    call pgmdir$+"syc_rs.bbx","",my_context,3001,c0$(4,3),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13001,c0$(7,20),0,"",status
    p8$=c0$(4,3)
l1090:
    goto flow_control

l1200: rem --- Option

    v0$="S"
    v1$="^C"
    v2$=p7$
    v3$=""
    v4$="O=Open Orders, Q=Quotes, B=Backorders, C=Credit Held Orders, <F1>=All Orders"
    v0=4
    v1=40
    v2=5
    xx$=""
    h3$=""
    control_id=3002
    gosub std_input
    on v3 goto l1237,l1240,flow_control,l1200,flow_control,l1242,flow_control
l1237:
    if v$<>"" goto l1242
l1240:
    v$=optn$; goto l1270
l1242:
    for x=1 to len(optn$)
        if pos(optn$(x,1)=v$)>0 xx$=xx$+optn$(x,1)
    next x
    if len(xx$)>0 v$=xx$ else goto l1200
    for x=1 to len(v$)
        if x=len(v$) and x<>1 h3$=h3$+" and " else if h3$<>"" leth3$=h3$+", "
        if v$(x,1)="O" h3$=h3$+"Open" else if v$(x,1)="Q" h3$=h3$+"Quoted" else if v$(x,1)="B" h3$=h3$+"Backordered" else ifv$(x,1)="C" h3$=h3$+"Credit Held" else exitto l1200
    next x
l1270:
    p7$=v$
    if len(p7$)<4 h3$=h3$+" Orders Only" else h3$="All Orders"
    if len(h3$)>80-v1-len(p7$)-1 xx$=h3$(1,80-v1-len(p7$)-1) else xx$=h3$
    call pgmdir$+"syc_rs.bbx","",my_context,3002,v$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13002,xx$,0,"",status
    goto flow_control

l1300: rem --- Summary Or Detail ?

    if p9$="" p9$="D"
    v0$="S"
    v1$="C"
    v2$=p9$
    v3$="SD"
    v4$="S=Summary Of Items D=Item Detail By Order"
    v0=1
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1330,l1300,flow_control,l1300,flow_control,l1330,flow_control
l1330:
    p9$=v$
    if p9$="D" xd$="Detail" else xd$="Summary"
    call pgmdir$+"syc_rs.bbx","",my_context,13003,xd$,0,"",status
    goto flow_control

l1400: rem --- Aging Date

    v0$="D"
    v1$="CER"
    v2$=sysinfo.system_date$
    v0=3
    v1=40
    v2=7
    v4$="Enter Date to Schedule Shipments From"
    v3$=""
    control_id=3004
    gosub std_input
    on v3 goto l1440,l1400,flow_control,l1400,flow_control,l1440,flow_control
l1440:
    if v3=4 goto std_exit
    p6$=v$
    goto flow_control

l1500: rem --- Number of Days

    if p8=0 p8=15
    v0$="N"
    v1$="CR"
    v2$=str(p8)
    v3$="###"
    v1=40
    v2=8
    v4$="Enter # of Aging Days per Column"
    v0=3
    control_id=3005
    gosub std_input
    on v3 goto l1540,l1500,flow_control,l1500,flow_control,l1540,flow_control
l1540:
    if v3=4 goto std_exit
    p8=num(v$)
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l900,l1000,l1200,l1300,l1400,l1500,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control
end_input:
    goto l5100
display_fields:
    control_id=3000
    cid_cnt=0
l5010:
    if cid_cnt=0 vari$="",vard$="All" else if cid_cnt=1 vari$="",vard$="All" else if cid_cnt=2 vari$=optn$,vard$="All Orders" else if cid_cnt=3 vari$="D",vard$="Detail" else ifcid_cnt=4 vari$=fndate$(sysinfo.system_date$) else if cid_cnt=5 vari$="15"
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,vari$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,vard$,0,"",status
    cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>5 goto l5050
    goto l5010
l5050:
    vari$=""
    vard$=""
    return

l5100: rem --- Create Data ?

    goto l5150; rem "Delete this line if user wants option to NOT rebuild opw-02
    call pgmdir$+"adc_yesno.aon",1,"Resort Work File? <Y/N=Use File From Last Report>",2,v$,v3
    if v$="N" goto l5900
l5150:
    call pgmdir$+"adc_progress.aon","N","","","Sorting:","",(len(p5$)+1)+7,0,1,meter_num,status
    call pgmdir$+"adc_clearfile.aon",opw02_dev
    read (ope01_dev,key=firm_id$+"  ",dom=*next)

l5200: rem --- Read Order Header Information

    dim a0$(200),e0$(52),e1$(64),e[17]
    k$=key(ope01_dev,end=l5900)
    if k$(1,2)<>firm_id$ goto l5900
    read record (ope01_dev,key=k$) ope01a$
    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(5,p[0]),p5$)+"  "+a0$(11,7),0,0,1,meter_num,status
    if a0$(21,1)="V" goto l5200
    if a0$(22,1)="I" goto l5200
    orddate$=a0$(77,3)
    shipdate$=a0$(27,3)
    stat$=a0$(22,1)
    if a0$(101,1)="C" stat$="C"
    if a0$(101,1)="R" stat$="R"
    if a0$(23,1)="B" stat$="B"
    if a0$(21,1)="P" stat$="Q"
    dim y0$(30)

rem --- Read Order Detail 

    read (ope11_dev,key=a0$(1,20),dom=*next)
l5403:
    let k$=key(ope11_dev,end=l5200)
    if k$(1,17)<>a0$(1,17) goto l5200
    find record (ope11_dev,key=k$) ope11a$
    find record (opm02_dev,key=firm_id$+e0$(21,1),dom=*next) opm02a$
    if pos(y0$(25,1)="SNP")=0 goto l5403
    if p8$<>"" and e0$(23,3)<>p8$ goto l5403
    if e1$(41,3)<>"   " shipdate$=e1$(41,3)

rem --- Write to opw-02 

    dim x$(54),x1$(28),x9$(40)
    if pos(y0$(25,1)="SP")<>0 x9$(1)=e0$(33,i[0]) else x9$(1)=e1$
    let x$(1)=firm_id$+x9$(1)+e0$(31,2)+e0$(11,10)
    let x1$(1)=e0$(3,8)+e0$(23,3)+shipdate$+y0$(25,1)+stat$+orddate$+e1$(44,1)+y0$(27,1)
    write record (opw02_dev,key=x$) opw02a$
    goto l5403
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return
l5900:
    gosub l6000
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run pgmdir$+"opr_ab.bbx"

l6000: rem --- Days Heading 

    let h4$="",h5$=""
    let v0$=p6$,v1$="",v0=-1
    call pgmdir$+"adc_daydates.aon",v0$,v1$,v0
    for x=4 to 1 step -1
        let v$=v1$,v=p8*x,v0$=""
        call pgmdir$+"adc_daydates.aon",v$,v0$,v
        if v$="N" or v0$="N" goto l6140
        let h5$=v0$+h5$,v=p8*x+1,v0$=""
        call pgmdir$+"adc_daydates.aon",v$,v0$,v
        if v$="N" or v0$="N" goto l6140
        let h4$=v0$+h4$
    l6140:
    next x
    let h4$=p6$+h4$
    return

l6200: rem --- Code Lookup 

    call pgmdir$+"syc_lk.bbx",ivm10_dev,record$,number,title$,description$[all],field[all],position[all],length[all],column,row,v$
    return

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fndate$(q1$)=fndate$(q1$(2),q1$)+fndate$(q1$(3),q1$)+fndate$(q1$(1),q1$)
    def fndate$(q$)=chr(fnyy_year(q$(5,2))+32)+chr(num(q$(1,2))+32)+chr(num(q$(3,2))+32)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
    let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
    let q=num(fnyy$(q1$)),q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8181)
l8181:
    if q<q9 q=q+100
    return q
    fnend

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    if pos("E"=cvs(q1$,4)) goto *next else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
