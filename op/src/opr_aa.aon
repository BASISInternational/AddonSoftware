rem --- Shipping Schedule Report (Input Overlay)
rem --- Program opr_aa v8.0.0 09Jul2007 (opr_aa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:28:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



                seterr std_error
                setesc std_error

rem --- Retrieve the program path

                pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

                sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
                dim sysinfo$:sysinfo_template$
                sysinfo$=stbl("+SYSINFO",err=*next)
                milestone=num(stbl("+MILESTONE",err=*next),err=*next)
                firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

                files=9,begfile=1,endfile=files
                dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
                files$[1]="ads-01"
                files$[2]="arm-01"
                files$[3]="ivm-01"
                files$[4]="ivm-02"
                files$[5]="ivm-10"
                files$[6]="ope-01"
                files$[7]="ope-11"
                files$[8]="opm-02"
                files$[9]="opw-02"
                call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
                if status goto std_exit
                ads01_dev=channels[1]
                arm01_dev=channels[2]
                ivm01_dev=channels[3]
                ivm02_dev=channels[4]
                ivm10_dev=channels[5]
                ope01_dev=channels[6]
                ope11_dev=channels[7]
                opm02_dev=channels[8]
                opw02_dev=channels[9]

rem --- Dimension string templates

                dim arm01a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:                   ivm10a$:templates$[5],ope01a$:templates$[6],ope11a$:templates$[7],
:                   opm02a$:templates$[8],opw02a$:templates$[9]

rem --- Retrieve miscellaneous templates

                files=3,begfile=1,endfile=files
                dim ids$[files],templates$[files]
                ids$[1]="ars-01A"
                ids$[2]="ivm-10C"
                ids$[3]="ivs-01A"
                call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
                if status goto std_exit

rem --- Dimension miscellaneous string templates

                dim ars01a$:templates$[1],ivm10c$:templates$[2],ivs01a$:templates$[3]


rem --- Assign form input values to local variables

                Warehouse_code$ = option!.getOptionData("Warehouse_code")
                  product_type$ =   option!.getOptionData("product_type")
                        option$ =         option!.getOptionData("option")
                       summary$ =        option!.getOptionData("summary")   
                    aging_date$ =     option!.getOptionData("aging_date")
                         dates$ =           option!.getOptionData("date")


rem --- Retrieve parameter records

                ars01a_key$=firm_id$+"AR00"
                find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
                ivs01a_key$=firm_id$+"IV00"
                find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$




rem --- Parameters

                n1$=sysinfo.firm_name$
                n2$="AR"
                n4$=sysinfo.task_desc$
                find record (ads01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
                find record (ads01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
                dim p[2],i[4]
                for x=0 to 3
                    i[x]=num(ivs01a$(x*2+1,2))
                next x
                i[0]=num(ivs01a.item_id_len$)
                p[1]=num(ars01a.max_customer_len$)
                p[2]=num(ars01a.zip_length$)
                p[0]=num(ars01a.customer_size$)

rem --- Initialize Data

                h0=0
                number=1
                dim description$[number],field[number],position[number],length[number]
                l9=30
                l=0
                optn$="OQBC"
                p7$="OB"
                dim w[7]
                m0=len(ars01a.customer_output$)
                m1=len(ivs01a.amount_mask$)
                m2=len(ivs01a.unit_mask$)
                if m2<9 call pgmdir$+"adc_sizemask.aon",ivs01a.unit_mask$,m2,9,9
                p8$=""
                p7$=optn$
                wh$=""
                dim j$(m1+m2*7,"-"),j0$(10,"0"),j1$(50," ")

rem --- Run overlay  
  
                run pgmdir$+"opr_ab.bbx"


rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fndate$(q1$)=fndate$(q1$(2),q1$)+fndate$(q1$(3),q1$)+fndate$(q1$(1),q1$)
    def fndate$(q$)=chr(fnyy_year(q$(5,2))+32)+chr(num(q$(1,2))+32)+chr(num(q$(3,2))+32)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
    let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
    let q=num(fnyy$(q1$)),q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8181)
l8181:
    if q<q9 q=q+100
    return q
    fnend

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    if pos("E"=cvs(q1$,4)) goto alpha_fnf else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
