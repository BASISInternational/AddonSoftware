rem --- Invoice Printing (Form)
rem --- Program opr_invoice_o1 v8.0.0 12Jun2009 (opr_ca)
rem --- Created by adx_codeport.bbj v1.1.5 (06/12/2009 12:05:26)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnunform_printer (Line 0159)
rem --- v7.x administrator reference ["syc_fe.bbx"] (Line 0138)
rem --- BBx reference ["syc_fe.bbx"] (Line 0138)

rem --- The following IOLIST's were removed from this program:

rem --- arm01a1: iolist b0$,b1$
rem --- arm02a: iolist b0$,b1$,b[all]
rem --- arm03a: iolist c0$,c1$
rem --- arm10a: iolist x1$
rem --- arm10c: iolist y7$,y9$
rem --- arm10f: iolist x3$
rem --- ivm01a: iolist *,x2$,x9$(1)
rem --- ope01a: iolist a0$(1),a1$,a[all]
rem --- ope11a: iolist w0$,w1$(1),w2$,w[all]
rem --- ope21a: iolist t0$,t1$(1),t2$,t[all]
rem --- ope31a: iolist d0$,d1$
rem --- ope41a: iolist z0$,z1$
rem --- opm02a: iolist y0$(1)
rem --- opm04a: iolist mh0$(1)
rem --- opm09a: iolist x$,x8$(1)
rem --- opm14a: iolist md0$(1),md1$(1)

rem --- The following channel references have been identified:

rem --- ars01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)
rem --- ope04a: Channel reference (Line 0212)

rem --- o9$ = return program
rem --- o9  = 1 - batch print from opr_ga.bbx p3$(65,10)
rem               cust_id$ = first customer ID
rem --- o9  = 2 - on demand print from ope_ce.bbx p3$(94,10) or opm_mm p3$(104,10)
rem               cust_id$ = first customer ID
rem               order_no$ = first order number
rem --- o9  = 3 - historical invoice print from opm_ml.bbx
rem               ope01_dev = opt01_dev
rem               ope11_dev = opt11_dev
rem               ope21_dev = opt21_dev
rem               ope31_dev = opt31_dev

    setesc std_error
    seterr std_error

rem --- Use statements

    use ::ado_func.src::func
    use ::ado_pdf.src::PDFHelper
    use ::sys/prog/bao_option.bbj::Option

    use java.awt.Font
    use java.lang.Float
    use javax.print.attribute.HashPrintRequestAttributeSet
    use javax.print.attribute.standard.MediaPrintableArea
    use javax.print.attribute.standard.MediaSizeName
    use javax.print.attribute.standard.OrientationRequested

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Set document Directory

    docdir$=""
    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Sanity

    if o9<1 or o9>3 then
        msg_id$ = "OP_BAD_PRINT_FLAG"
        dim msg_tokens$[2]
        msg_tokens$[1] = str(o9)
        msg_tokens$[1] = pgm(-2)
        gosub disp_message
        goto std_exit
    endif

rem --- Derive/set path and filename for logo to go on form

    logofile$ = ""
    start_block = 1
    curr_path$=dsk("")+dir("")

    if start_block then   
        chdir stbl("+CUST_IMAGES",err=*endif),err=*endif
        logofile$="file:"+dsk("")+dir("")+stbl("+FORM_LOGO",err=*endif)
    endif

    chdir curr_path$

rem --- Open/Lock files

    files=19,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",       ids$[1]="ARM_CUSTMAST"
    files$[2]="arm-02",       ids$[2]="ARM_CUSTDET"
    files$[3]="arm-03",       ids$[3]="ARM_CUSTSHIP"
    files$[4]="arc_termcode", ids$[4]="ARC_TERMCODE"
    files$[5]="arc_cashcode", ids$[5]="ARC_CASHCODE"
    files$[6]="arc_salecode", ids$[6]="ARC_SALECODE"
    files$[7]="ars_report",   ids$[7]="ARS_REPORT"
    files$[8]="ivm-01",       ids$[8]="IVM_ITEMMAST"
rem files$[9]="ivs_params",   ids$[9]="IVS_PARAMS"
    files$[10]="ope-01",      ids$[10]="OPE_ORDHDR"
    files$[11]="ope-04",      ids$[11]="OPE_PRNTLIST"
    files$[12]="ope-11",      ids$[12]="OPE_ORDDET"
    files$[13]="ope-21",      ids$[13]="OPE_ORDLSDET"
    files$[14]="ope-31",      ids$[14]="OPE_ORDSHIP"
    files$[15]="ope-41",      ids$[15]="OPE_INVCASH"
    files$[16]="opm-02",      ids$[16]="OPC_LINECODE"
    files$[17]="opm-04",      ids$[17]="OPC_MSG_HDR"
    files$[18]="opm-09",      ids$[18]="OPM_CUSTJOBS"
    files$[19]="opm-14",      ids$[19]="OPC_MSG_DET"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    arm01_dev=channels[1]
    arm02_dev=channels[2]
    arm03_dev=channels[3]
    arm10_dev=channels[4]
    arm10c_dev=channels[5]
    arm10f_dev=channels[6]
    ars_report_dev=channels[7]
    ivm01_dev=channels[8]
rem ivs01a_dev=channels[9]
    ope01_dev=channels[10]
    ope04_dev=channels[11]
    ope11_dev=channels[12]
    ope21_dev=channels[13]
    ope31_dev=channels[14]
    ope41_dev=channels[15]
    opm02_dev=channels[16]
    opm04_dev=channels[17]
    opm09_dev=channels[18]
    opm14_dev=channels[19]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm01a1$:templates$[1],arm02a$:templates$[2],arm03a$:templates$[3]
    dim arm10a$:templates$[4],arm10c$:templates$[5],arm10f$:templates$[6]
    dim ars01b$:templates$[7],ivm01a$:templates$[8]
    dim ope01a$:templates$[10],ope04a$:templates$[11],ope11a$:templates$[12]
    dim ope21a$:templates$[13],ope31a$:templates$[14],ope41a$:templates$[15]
    dim opm02a$:templates$[16],opm04a$:templates$[17],opm09a$:templates$[18]
    dim opm14a$:templates$[19]

rem --- Parameters (company addresses)

    find record (ars_report_dev, key=firm_id$+"AR02", err=std_missing_params) ars01b$

    remit$=ars01b.remit_addr_1$+ars01b.remit_addr_2$+ars01b.remit_city$+ars01b.remit_state$+ars01b.remit_zip$
    call pgmdir$+"adc_address.aon",remit$,24,3,9,30
    remit$=ars01b.remit_name$+remit$

    comp$=ars01b.addr_line_1$+ars01b.addr_line_2$+ars01b.city$+ars01b.state_code$+ars01b.zip_code$
    call pgmdir$+"adc_address.aon",comp$,24,3,9,30
    comp$=ars01b.name$+comp$

rem --- Init PDF printing 

    declare Font textfont!
    declare Font boldfont!
    declare Font italicfont!
    declare Font largefont!
    declare BBjSysGui mySysGui!
    declare BBjColor white!
    declare BBjColor black!
    declare BBjColor light_gray!

    textfont!   = new Font("Times New Roman", Font.PLAIN, 10)
    italicfont! = new Font("Times New Roman", Font.ITALIC, 10)
    boldfont!   = new Font("Arial", Font.BOLD, 10)
    largefont!  = new Font("Arial", Font.BOLD, 26)
    
    mySysGui! = BBjAPI().openSysGui("X0")
    white! = mySysGui!.makeColor(mySysGui!.WHITE)
    black! = mySysGui!.makeColor(mySysGui!.BLACK)
    light_gray! = mySysGui!.makeColor(mySysGui!.LTGRAY)

rem --- Setup PDF printer and print area   

    declare HashPrintRequestAttributeSet requestAttributes!
    declare MediaPrintableArea a!
    declare Float x!
    declare Float y!
    declare Float w!
    declare Float h!

    requestAttributes! = new HashPrintRequestAttributeSet()
    requestAttributes!.add(MediaSizeName.NA_LETTER)
    requestAttributes!.add(OrientationRequested.PORTRAIT)

    units = MediaPrintableArea.INCH
    x! = new Float(0.5).floatValue()
    y! = new Float(0.5).floatValue()
    w! = new Float(8.0).floatValue()
    h! = new Float(10.5).floatValue()
    a! = new MediaPrintableArea(x!,y!,w!,h!,units)

    requestAttributes!.add(a!)

rem --- Create PDF printer and set attributes 

    declare BBjAPI myAPI!
    declare BBjPrinter myBBjPrinter!
    declare BBjForm docPrint!
    
    myAPI! = BBjAPI()
    myBBjPrinter! = myAPI!.getBBjPrinter(1)

    myBBjPrinter!.setAttributes(requestAttributes!)
    docPrint! = myBBjPrinter!.getForm(0)
    
rem --- Setup form page and PDF helper object
	
	declare BBjFormPage page!
    declare PDFHelper pdf!

    page! = docPrint!.createPage()
    page!.setRightMargin(18)
    page!.setLeftMargin(18)
    page!.setTopMargin(18)
    page!.setBottomMargin(18)
    
    pdf! = new PDFHelper(textfont!)

rem --- Initialize Data

    precision i[2]

    address=30
    page=0; rem p, \Wp\W
    line=0; rem l, \Wl\W
    maxlines=30; rem l9 , \Wl9\W
    rem h0=0
    rem l9=30
    headings=0
    when$=sysinfo.system_date$

rem dim h9$(50,$0a$); rem escape get rid of this line, please!
    dim mh0$(36),md0$(6),md1$(40),x4$(200)
    dim w1$(64),w[17],headings$[headings]

    price_mask$=m4$
    ext_mask$=m1$

    call pgmdir$+"adc_sizemask.aon",price_mask$,price_mask,11,11
    call pgmdir$+"adc_sizemask.aon",ext_mask$,ext_mask,12,12

    func.setLen1(int(p[3]))
    func.setLen2(int(p[4]))
    func.setLen3(int(p[5]))

    nothing_printed = 1

rem --- Initial Read

    declare Option option!

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",len(m0$)+8,ope04_dev,1,0,status
    if status = 999 then goto std_exit

    if o9<>1 then 
        read record (ope01_dev, key=firm_id$+"  "+cust_id$+order_no$, dir=0, dom=run_overlay)
    else

    rem --- P5$=Starting customer number on restart

        read (ope04_dev, key=firm_id$+"I"+"  "+cust_id$, dom=*next)
    endif

rem --- Main Read

    while 1

        if o9=1 then 
            read record (ope04_dev, end=*break) ope04a$
            if ope04a$.firm_id$<>firm_id$ or ope04a.ordinv_flag$<>"I" then break

            if start_block then
                bad_record = 1
                extract record (ope01_dev, key=firm_id$+"  "+ope04a.customer_id$+ope04a.order_no$, dom=*endif) ope01a$; rem a0$
                bad_record = 0
            endif

            if bad_record then
                remove (ope04_dev, key=firm_id$+"I"+"  "+ope04a.customer_id$+ope04a.order_no$, dom=*next)
                continue
            endif
        endif
        
        if ope01a.cash_sale$ = "Y" then
            arm10c.code_desc$  = "Invalid Receipt Code"
            arm10c.trans_type$ = "C"

            if ope41_dev then
                find record (ope41_dev, key=firm_id$+"  "+ope01a.customer_id$+ope01a.order_no$, dom=*endif, err=*endif) ope41a$; rem z0$, z1$
                find record (arm10c_dev, key=firm_id$+"C"+ope041a.cash_rec_cd$, dom=*next) arm10c$; rem y7$, y9$
            endif
        endif

        if ope01a.invoice_type$ = "V" then continue
        
        if o9=1 then 
            if ope01a.ordinv_flag$ = "I" then
                if ope01a.print_status$ = "Y" then continue
                if ope01a.print_status$<>"B" and ope01a.lock_status$="Y" then continue
                rem testing ope01a.lock_status$ = "Y"
                ope01a$ = field(ope01a$)
                write record (ope01_dev) ope01a$
            else

            rem --- Remove bad record

                remove (ope04_dev, key=firm_id$+"I  "+ope04a.customer_id$+ope04a.order_no$, dom=*next)
                continue
            endif
        endif
        
    rem --- Get a barista document ID

        new_doc_id$ = ""
        pdf_doc$    = ""
        call sypdir$+"bac_documents.bbj", new_doc_id$, "", "", "I", "PDF", docdir$, "pdf", option!.getAlias(), "C", ope01a.customer_id$, rd_table_chans$[all], "DOC_ID"

    rem --- Heading

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status
        if status = 999 then exitto std_exit

        dim b$(150)
        dim arm01a1$:fattr(arm01a1$)
        arm01a1.customer_id$ = "Not On File"
        start_block = 1

        if start_block then
            read record (arm01_dev, key=firm_id$+ope01a.customer_id$, dom=*endif) arm01a1$; rem b1$
            b$ = arm01a1.addr_line_1$ + arm01a1.addr_line_2$ + arm01a1.addr_line_3$ + arm01a1.addr_line_4$ + arm01a1.city$ + arm01a1.state_code$ + arm01a1.zip_code$; rem  b1$(31,72)+b1$(179,48)+b1$(103,9)
            call pgmdir$+"adc_address.aon",b$,24,5,p[2],30
        endif

        b$ = pad(arm01a1.customer_id$, address) + b$

    rem --- Ship-To

        c$ = b$
        dim arm03a$:fattr(arm03a$)

        if cvs(ope01a.shipto_no$, 2) <> ""  and  ope01a.shipto_no$ <> "000099" then 
            shipto$ = ""
            start_block = 1

            if start_block then
                find record (ope31_dev, key=firm_id$+ope01a.customer_id$+ope01a.order_no$, dom=*endif) ope31a$; rem d1$
                c$ = ope31a.addr_line_1$ + ope31a.addr_line_2$ + ope31a.addr_line_3$ + ope31a.addr_line_4$ + ope31a.city$ + ope31a.state_code$ + ope31a.zip_code$; rem d1$(31,81)

                arm03a.name$ = ope31a.name$; rem d1$(1,30)
            endif

            call pgmdir$+"adc_address.aon",c$,24,3,p[2],30
            c$ = pad(arm03a.name$, address) + c$
            read (ope01_dev, key=firm_id$+"  "+ope01a.customer_id$+ope01a.order_no$, dom=*next)
        else
            shipto$ = ""
            start_block = 1

            if start_block then
                find record (arm03_dev,key=firm_id$+ope01a.customer_id$+ope01a.shipto_no$, dom=*endif) arm03a$; rem c1$
                shipto$=ope01a.shipto_no$
                c$ = arm03a.addr_line_1$ + arm03a.addr_line_2$ + arm03a.addr_line_3$ + arm03a.addr_line_4$ + arm03a.city$ + arm03a.state$ + arm03a.zip_code$; rem c1$(31,81)
                call pgmdir$+"adc_address.aon",c$,24,3,p[2],30
                c$ = pad(arm03a.name$, address) + c$
            endif
        endif

        rem if len(c$)<len(b$) then c$ = pad(c$, len(b$))

    rem --- Terms

        dim arm10a$:fattr(arm10a$)
        arm10a.code_desc$ = "Not Found"
        find record (arm10_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=*next) arm10a$; rem x1$

    rem --- Salesperson

        arm10f.code_desc$ = "Not Found"
        find record (arm10f_dev,key=firm_id$+"F"+ope01a.slspsn_code$,dom=*next) arm10f$; rem x3$

    rem --- Job Name

        dim opm09a$:fattr(opm09a$)
        opm09a.customer_name$ = "Not Found"

        if opm09_dev then 
            find record (opm09_dev, key=firm_id$+ope01a.customer_id$+ope01a.job_no$, dom=*next) opm09a$; rem x8$
        else
            opm09a.customer_name$ = ope01a.job_no$
        endif

    rem --- Print Heading, Initial Read

        page=0
        gosub report_heading
        t0=0
        x6$=""
        
        read (ope11_dev, key=firm_id$+"  "+ope01a.customer_id$+ope01a.order_no$, dom=*next)

    rem --- Detail

        while 1

            read record (ope11_dev, end=*break) ope11a$
            if ope01a.firm_id$ <> ope11a.firm_id$ then break
            if ope01a.customer_id$ <> ope11a.customer_id$ then break

        rem --- Type

            dim opm02a$:fattr(opm02a$)
            dim ivm01a$:fattr(ivm01a$)
            item_desc$ = "Item not found"
            start_block = 1

            if start_block then
                find record (opm02_dev, key=firm_id$+ope11a.line_code$, dom=*endif) opm02a$; rem y0$
                ivm01a.item_desc$ = ope11a.item_id$
            endif

            if pos(opm02a.line_type$=" SP") then
                find record (ivm01_dev, key=firm_id$+ope11a.item_id$, dom=*next) ivm01a$; rem *, x2$, x9$
                item_desc$ = pad( func.displayDesc(ivm01a.item_desc$), desclen )
            endif

            if opm02a.line_type$<>"M" or pos(opm02a.message_type$="BI ") then 
                gosub line_detail
            endif

        rem --- Total

            t0 = t0 + ope11a.ext_price

        rem --- Any Serial/Lot #'s?

        rem i3$ = ivs01a

            if pos(ivs01a.lotser_flag$="LS")=0 then continue
            if pos(opm02a.line_type$="PS")=0 then continue
            if ivm01a.lotser_item$<>"Y" then continue

        rem --- OK, There Are Lots

            t$=""
            t9=0
            read (ope21_dev, key=firm_id$+"  "+ope11a.customer_id$+ope11a.order_no$+ope11a.internal_seq_no$, dom=*next)

            while 1
                read record (ope21_dev, end=*break) ope21a$; rem t0$, t1$, t[all]
                if firm_id$                <> ope21a.firm_id$        then break
                if ope11a.customer_id$     <> ope21a.customer_id$    then break
                if ope11a.order_no$        <> ope21a.order_no$       then break
                if ope11a.internal_seq_no$ <> ope21a.orddet_seq_ref$ then break

                if ope21a.qty_ordered then
                    gosub print_lotser_no
                    t9=t9+ope21a.qty_shipped
                endif
            wend

            if t9 < ope11a.qty_shipped then
            rem dim t1$(20,"_"),t[2]
                ope21a.lotser_no$ = fill(20, "_")
                ope21a.qty_ordered = 0
                ope21a.qty_shipped = 0
                ope21a.unit_cost   = 0

                for y=1 to ope11a.qty_shipped - t9
                    gosub print_lotser_no
                    if ivs01a.lotser_flag$="L" then break
                next y
            endif

            if line+1 <= maxline then
                print (printer_dev)""
                line = line + 1
            endif

        wend

    rem --- Total

        gosub print_total
        if o9=1 then
            ope01a.print_status$ = "B"
            ope01a$ = field(ope01a$)
            write record (ope01_dev) ope01a$
        endif

        nothing_printed = 0

    wend

rem --- Display PDF

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if status = 999 then goto std_exit

    if nothing_printed then
        docPrint!.cancel()
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto run_overlay
    endif

    docPrint!.preview()

rem --- Updates and final processing

    if o9=2 then
        gosub open_cash_box
        gosub order_update
    endif

    if o9=1 then

        msg_id$ = "OP_INVOICE_UPDATE"
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit

        call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Updating","",0,0,1,0,status
        if status = 999 then goto std_exit

        read (ope04_dev,key=firm_id$+"I",dom=*next)

    rem --- Update loop

        start_block = 1

        while 1
            read record (ope04_dev, end=*break) ope04a$
            if ope04a.firm_id$<>firm_id$ or ope04a.ordinv_flag$<>"I" then break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status
            if status = 999 then exitto std_exit

            if start_block then
                extract record (ope01_dev,key=firm_id$+"  "+ope04a.customer_id$+ope04a.order_no$, dom=*endif) ope01a$
                if ope01a.print_status$="B" then gosub order_update
            endif
        wend

    endif

run_overlay: rem --- Close Files and run program

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if status = 999 then goto std_exit

    if o9=3 then
        read (ope01_dev, key=firm_id$+"  "+ope01a.customer_id$, dom=*next)
        read record (arm01_dev,key=firm_id$+ope01a.customer_id$) arm01a2$
        read record (arm02_dev,key=firm_id$+ope01a.customer_id$+"  ") arm02a$
    endif

rem run o9$
    goto std_exit

open_cash_box: rem --- Cash Box Open (not implemented yet)

    if r1$<>"" and cvs(r1$(17,2), 2) <> "" then 
        cashbox_dev = unt
        open (cashbox_dev, err=*endif) r1$(17,2)

        for i=1 to pos(" "<>r1$(1,8),-1) step 2
            if pos(" "<>r1$(i,2))=0 continue
            if r1$(i,2)="1B" print (cashbox_dev)'es', else print (cashbox_dev)ath(r1$(i,2)),
        next i

        print (cashbox_dev)

        for i=1 to num(r1$(29,4))
            print (cashbox_dev)ath(r1$(21,pos(" "<>r1$(21,8),-1)))
        next i

        for i=1 to pos(" "<>r1$(9,8),-1) step 2
            if pos(" "<>r1$(8+i,2))=0 continue
            if r1$(8+i,2)="1B" print (cashbox_dev)'es', else print (cashbox_dev)ath(r1$(8+i,2)),
        next i

        print (cashbox_dev)
        close (cashbox_dev,err=*next)
    endif

    return

order_update: rem --- Update order's status

    ope01a.print_status$ = "Y"
    ope01a.lock_status$  = "N"
    ope01a$ = field(ope01a$)
    write record (ope01_dev) ope01a$

    return

report_heading: rem --- Report Heading

rem --- Create PDF physical file, if needed

    declare BBjForm docPDF!

    while pdf_doc$ = ""
        prtr_dev = unt
        pdf_doc$ = docdir$ + new_doc_id$ + ".pdf"
		start_block = 1
		
		if start_block
			open (prtr_dev,err=*endif)pdf_doc$
			close (prtr_dev)
			erase pdf_doc$
		endif

        docPDF! = myAPI!.getBBjPDFForm(pdf_doc$, requestAttributes!)
    wend

    line = 0
    page = page + 1
    rem order$ = ope01a.order_no$
    rem invoice$ = ope01a.ar_inv_no$
    
rem --- Create pages from both physical and display objects   

    declare BBjFormPage pagePDF!
    declare BBjFormPage pagePrint!
    
    pagePDF!   = docPDF!.createPage()
    pagePrint! = docPrint!.createPage()
    
rem --- Use page! as a holder object to update both pages.  Start with print object.
    
    page! = pagePrint!
    
    while 1
    
        page! = pdf!.setText(0,10,568,0,"INVOICE",largefont!,pdf!.CENTER_JUSTIFY(),black!,white!,page!)
        page! = pdf!.setLogo(0,0,185,68,logofile$,page!)
        
    rem --- Company Address
    
        page! = pdf!.setText(50,60,comp$(1,address),page!)
        page! = pdf!.setText(50,72,comp$(31,address),page!)
        page! = pdf!.setText(50,84,comp$(61,address),page!)
        page! = pdf!.setText(50,96,comp$(91,address),page!)
 
    rem --- Bill To

        page! = pdf!.drawBox(0,126,568,96,page!)
        page! = pdf!.drawVLine(45,126,96,page!)
        page! = pdf!.setText(0,132,40,0,"Bill To",boldfont!,pdf!.RIGHT_JUSTIFY(),page!)
        
        page! = pdf!.setText(50,132,b$(1,address),page!)
        page! = pdf!.setText(50,144,b$(31,address),page!)
        page! = pdf!.setText(50,156,b$(61,address),page!)
        page! = pdf!.setText(50,168,b$(91,address),page!)    
        page! = pdf!.setText(50,180,b$(121,address),page!)
        page! = pdf!.setText(50,192,b$(151,address),page!)
        
    rem --- Ship to
    
        page! = pdf!.drawVLine(284,126,96,page!)
        page! = pdf!.drawVLine(329,126,96,page!)
        page! = pdf!.setText(284,132,40,0,"Ship To",boldfont!,pdf!.RIGHT_JUSTIFY(),page!)

        page! = pdf!.setText(334,132,c$(1,address),page!)
        page! = pdf!.setText(334,144,c$(31,address),page!)
        page! = pdf!.setText(334,156,c$(61,address),page!)
        page! = pdf!.setText(334,168,c$(91,address),page!)    
        page! = pdf!.setText(334,180,c$(121,address),page!)
        page! = pdf!.setText(334,192,c$(151,address),page!)

    rem --- Info Box

        page! = pdf!.drawBox(424, 24, 144, 72, page!)
        page! = pdf!.drawHLine(424, 48, 144, page!)
        page! = pdf!.drawHLine(424, 72, 144, page!)
        page! = pdf!.drawVLine(490, 24,  72, page!)

        page! = pdf!.setText(432, 30, 54, 30, "Page",      boldfont!, pdf!.RIGHT_JUSTIFY(), page!)
        page! = pdf!.setText(432, 54, 54, 54, "Date",      boldfont!, pdf!.RIGHT_JUSTIFY(), page!)
        page! = pdf!.setText(432, 78, 54, 78, "Invoice #", boldfont!, pdf!.RIGHT_JUSTIFY(), page!)

        page! = pdf!.setText(496,30,str(page),page!)
        page! = pdf!.setText(496,54,func.formatDate(ope01a.invoice_date$),page!)
        page! = pdf!.setText(496,78,ope01a.ar_inv_no$,page!)
        
        if o9=3 then
            page! = pdf!.setText(496,102,54,102,"DUPLICATE",boldfont!,pdf!.CENTER_JUSTIFY(),page!)
        endif
        
    rem --- Ribbon info
    
        page! = pdf!.drawBox(0, 234, 568, 48, page!)
        page! = pdf!.drawVLine( 72, 234, 48, page!)
        page! = pdf!.drawVLine(132, 234, 48, page!)
        page! = pdf!.drawVLine(180, 234, 48, page!)
        page! = pdf!.drawVLine(204, 234, 28, page!)
        page! = pdf!.drawHLine(204, 262, 84, page!)
        page! = pdf!.drawVLine(288, 234, 48, page!)
        page! = pdf!.drawVLine(378, 234, 48, page!)
        page! = pdf!.drawVLine(438, 234, 48, page!)
        
        page! = pdf!.setText(0,   234+2, 0,       0, "Order #",    boldfont!, pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(72,  234+2, 132-72,  0, "Order Date", boldfont!, pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(132, 234+2, 180-132, 0, "Cust #",     boldfont!, pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(180, 234+2, 204-180, 0, "Sls",        boldfont!, pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(204, 234+2, 288-204, 0, "P/O Number", boldfont!, pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(288, 234+2, 378-288, 0, "Ship Via",   boldfont!, pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(378, 234+2, 438-378, 0, "Ship Date",  boldfont!, pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(438, 234+2, 568-438, 0, "Terms",      boldfont!, pdf!.CENTER_JUSTIFY(),page!)
        
        page! = pdf!.setText(0,   234+14, 0,       0, ope01a.order_no$,                                             null(), pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(72,  234+14, 132-72,  0, func.formatDate(ope01a.order_date$),                          null(), pdf!.CENTER_JUSTIFY(),page!)
        page! = pdf!.setText(132, 234+14, 180-132, 0, func.alphaMask(ope01a.customer_id$, ars01a.customer_output$), null(), pdf!.CENTER_JUSTIFY(),page!)
        
    rem a0$(59,3),@(h0+29),a0$(111,10),@(h0+42),a0$(32,10),@(h0+56),fndate$(a0$(27,3)),@(h0+65),a0$(62,2); rem escape, need to make room for cust po#, a0$(111,20)
        
    rem --- Duplicate what was done pagePrint!, if both pages have updated, we're done
    
        if page! = pagePDF! then break
        page! = pagePDF!
        
    wend
    
    return

line_detail: rem --- Item Detail

    if line > maxline-1 gosub cont
    line = line + 1; rem testing
    return; rem testing
    
    if pos(y0$(25,1)="MO")=0 print (printer_dev)@(h0+0),w[2],@(h0+6),w[4],@(h0+12),w[3],
    if pos(y0$(25,1)="MNO") print (printer_dev)@(h0+19),w1$(1,40),
    if pos(y0$(25,1)=" SRDP") print (printer_dev)@(h0+21),w0$(33),
    if pos(y0$(25,1)=" SRDNP") print (printer_dev)@(h0+56),w[1]:price_mask$,
    if y0$(25,1)<>"M" print (printer_dev)@(h0+68),w[6]:ext_mask$,
    if y0$(25,1)="S" print (printer_dev)@(h0+52),x9$(4,2),
    print (printer_dev)'lf',
    line = line + 1
    if len(x2$)>40 x2$=x2$(1,40)
    if pos(y0$(25,1)="SP")=0 goto l5396
    if line > maxline-1 gosub cont
    print (printer_dev)@(h0+19),x2$,'lf',
    line = line + 1
l5396: 
    return

print_lotser_no: rem --- Serial #'s Here

    if line <= maxline-1 goto l5440
    gosub cont
    rem if pos(y0$(25,1)=" SP") print (printer_dev)@(h0+24),w0$(33); let line = line + 1
l5440: 
    rem if i3$(17,1)="L" goto l5470
    rem print (printer_dev)@(h0+24),"S/N: ",t1$(1,i[3])
    goto l5480
l5470: 
    rem print (printer_dev)@(h0+24),"Lot: ",t1$(1,i[3]),"   Shipped: ",
    rem if t[1]<>0 print (printer_dev)t[1]:m2$ else print (printer_dev)fill(m2,"-")
l5480: 
    line = line + 1
    return

print_total: rem --- Total

rem gosub messages
rem print (printer_dev)h9$(1,l9-l+2)
rem if a0$(99,1)="Y" gosub paid_info
rem print (printer_dev)@(h0+0),message$,@(h0+68),t0:ext_mask$,'lf'
rem if a[2]>0 print (printer_dev)@(h0+58),"Discount",
rem print (printer_dev)@(h0+68),-a[2]:ext_mask$
rem print (printer_dev)@(h0+0),x6$,@(h0+68),a[0]:ext_mask$
rem print (printer_dev)@(h0+68),a[1]:ext_mask$,'lf'
rem print (printer_dev)@(h0+68),t0+a[0]-a[2]+a[1]:ext_mask$
rem print (printer_dev)'ff',

    docPDF!.print()
    call pgmdir$+"adc_rptcontrol.aon",option!.getAlias(),ope01a.customer_id$,"C",new_doc_id$,"pdf"

    return

cont: rem --- Continued

    rem print (printer_dev)h9$(1,l9-l+1)
    rem print (printer_dev)@(h0+70),"Continued",'ff',
    gosub report_heading
    return

forms_msg: rem --- New Forms

    dim message$[1]
    message$[0]="Please Make Sure That The Correct Invoice Forms Are Mounted On Printer "+sysinfo.printer_id$
    message$[1]="For "+n1$+" (<Enter>=Continue) "
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,-1,-1,v$,v3
    return

messages: rem --- Print Messages

    ms$=""
    for i=1 to 2
        gosub build_msg
        if status continue
        for j=1 to 5
            if pos(" "<>x4$(j*40-39,40))=0 continue
            if line > maxline-2 gosub cont
            if i=1 and j=1 print (printer_dev)'lf',; let line = line + 1
            print (printer_dev)@(h0+27),x4$(j*40-39,40)
            line = line + 1
        next j
    next i
    return

paid_info: rem --- Print Paid Info

    x6$="PAID: "+cvs(y7$(7,20),2)+" "
    if y9$(21,1)="P" x6$=x6$+"# "+z0$(31,16)
    if y9$(21,1)="C" x6$=x6$+"# "+z0$(24,7)
    x6$=x6$+" NAME: "+z1$
    return

build_msg: rem --- Reformat new opm-04/14 records into old-style

rem --- arm-10 G records for backwards compatibility

    status=11
    ml=0
    mk$=firm_id$+a0$(70,2)
    start_block = 1

    if start_block then
        find record (opm04_dev,key=mk$,dom=*endif) opm04a$
        status=0
        read (opm14_dev,key=mk$,dom=*next)

        while 1
            mk$=key(opm14_dev,end=*break)
            if pos(mh0$(1,4)=mk$)<>1 then break
            read record (opm14_dev,key=mk$) opm14a$
            if pos(md0$=ms$,6) then continue
            ms$=ms$+md0$
            x4$(ml*40+1)=md1$
            ml=ml+1
            if ml>=5 then break
        wend
    endif

    return

disp_message: rem --- Display Message Dialog

    call sypdir$+"bac_message.bbj",
:       msg_id$,
:       msg_tokens$[all],
:       msg_opt$,
:       table_chans$[all]

    return   

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report: 

    release

rem #endinclude std_end.src

    end
