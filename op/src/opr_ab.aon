rem --- Ship Schedule Report (Report Overlay)
rem --- Program opr_ab v8.0.0 28Jan2008 (opr_ab)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/28/2008 10:24:25)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        seterr std_error
        setesc std_error

rem --- Retrieve the program path

         pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$


rem --- Initialize Data

        more=1
        headings=4
        rem dim a[1],t[6],c[5],w[16],headings$[headings]
        dim t[6],c[5],w[16],headings$[headings]
        h1$=n4$
        h0=132,h=0,l9=59,l=l9+1,t0=0
        if pos("O"=p7$)>0 and pos("R"=p7$)=0 then let p7$=p7$+"R"

        While more
            if p9$<>"D" or m0+m1+7*m2+31<132 then break
            if m1>12 then call pgmdir$+"adc_sizemask.aon",ivs01a.amount_mask$,m1,12,m1-1
            if m2>9 then call pgmdir$+"adc_sizemask.aon",ivs01a.unit_mask$,m2,9,m2-1
        Wend

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit
        if p9$="D" then
            let h1$="Detail "+h1$
        else
            let h1$="Summary "+h1$
        endif
        h2$="Product Selection: "
        if p8$="" then
            let h2$=h2$+"All"
        else
            let h2$=h2$+p8$
        endif
        headings$[0]=n1$
        headings$[1]=h1$
        headings$[2]=h2$
        headings$[3]=h3$
        when$=sysinfo.system_date$,clock$=""

        call pgmdir$+"adc_progress.aon","N","","","","",0,opw02_dev,1,meter_num,status

rem --- Initial Read

        read (opw02_dev,key=firm_id$,dom=*next)

rem --- Main Loop Starts
While more

        rem dim a0$(54)
        read record (opw02_dev,end=done) opw02a$
        if pos(opw02a.order_status$=p7$)=0 then continue
        if wh$<>"" then
            if opw02a.warehouse_id$<>wh$ then
                continue
            endif
        endif

rem --- Breaks

        if opw02a.firm_id$(1,2+i[0])<>t0$ then gosub Item_Break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Accumulate

        dim c[5]
        x=pos(opw02a.est_shp_date$>=h4$,-3)
        x=int((x+2)/3),c[x]=c[x]+opw02a.qty_ordered
        if p9$="D" then
            if l+1>l9 then gosub Print_Item
            gosub All_WareHouses
            if opw02a.commit_flag$="Y" then print (printer_dev)@(132-m1-7*m2-30-m0),"Drop",
            print (printer_dev)@(132-m1-7*m2-25-m0),fnmask$(opw02a.customer_id$(1,p[0]),p5$),
:                          @(132-m1-7*m2-24),opw02a.order_no$," ",opw02a.order_status$,
:                          @(132-m1-7*m2-14),fndate$(opw02a.est_shp_date$),"  ",opw02a.commit_flag$,
            for x=0 to 5
                if c[x]<>0 then
                    print (printer_dev)@(132-m1-(7-x)*m2),c[x]:m2$,
                endif
            next x
            print (printer_dev)@(132-m1-m2),opw02a.qty_ordered:m2$,@(132-m1),opw02a.extended_amt:m1$
            l1=l1+1
            l2=l2+1,l=l+1
        endif

        for j=0 to 5
            let t[j]=t[j]+c[j]
        next j
        t[6]=t[6]+opw02a.extended_amt
        u0=u0+opw02a.extended_amt

Wend

done: rem --- End

        t9$="E"
        gosub Item_Break
        if h=0 then gosub report_heading
        print (printer_dev)@(132-m1-m2*7),j$(1,m1+m2*7),'lf',@(132-m1-16),"Report Value: ",
:                      @(132-m1),u0:m1$
        goto std_exit

report_heading: rem --- Report Heading

        l=headings+1
        t3=0
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
        if status then exitto std_exit
        print (printer_dev)@(0),"Item",@(i[0]),"Whse",@(5+i[0]),"Prod",@(10+i[0]),"UM",
:                          @(15+i[0]),"Description"
        for x=1 to 5
            print (printer_dev)@(132-m1-(6-x)*m2-8),fndate$(h4$(x*3-2,3)),
        next x
        print (printer_dev)@(132-m1-6*m2-6),"Past",@(132-m1-6),"Total",@(126),"Total"

        if p9$="D" then
            print (printer_dev)@(132-m1-7*m2-25-m0),"Cust",@(132-m1-7*m2-24),"Order",
:                       @(132-m1-7*m2-14),"Shp-Date Com?",
        endif

        for x=1 to 4
            print (printer_dev)@(132-m1-(6-x)*m2-8),fndate$(h5$(x*3-2,3)),
        next x

        print (printer_dev)@(132-m1-m2-8)," Future",@(132-m1-6*m2-6),"Due",
:                      @(132-m1-4),"Qty",@(126),"Value"
        l=l+3
        return

Print_Item: rem --- Print Item

        if l>l9-2 then gosub report_heading
        if wh$="" then
            let x$="ALL"
        else
            let x$=opw02a.warehouse_id$
        endif
        print (printer_dev)'lf',@(0),opw02a.item_iddes$(1,i[0]),@(1+i[0]),x$,@(5+i[0]),opw02a.product_type$,
:                           @(10+i[0]),ivm01a.unit_of_sale$,@(15+i[0]),ivm01a.item_desc$
        l=l+2
        l1=0
        return

Item_Break: rem --- Item Break

        if t0$<>"" then
            if p9$="D" then
                if l2>1 then
                    if l+2>l9 then gosub report_heading
                    if p9$="D" then print (printer_dev)@(132-m1-7*m2),j$(1,m2*6),@(132-m1-m2),j$(1,m1+m2); let l=l+1
                    for x=0 to 5
                        print (printer_dev)@(132-m1-(7-x)*m2),t[x]:m2$
                    next x
                    print (printer_dev)@(132-m1-m2),t[0]+t[1]+t[2]+t[3]+t[4]+t[5]:m2$,@(132-m1),t[6]:m1$
                    l=l+1
                endif
            endif

rem --- Item Total

            gosub All_WareHouses

        endif

        if t9$<>"" then return
        dim t[6]
        t0$=opw02a.firm_id$(1,i[0]+2)
        l1=0,l2=0
        rem dim x1$(i[1]+i[2]+i[3]),x2$(50),t[6],c[5]
        dim t[6],c[5]
        ivm01a.item_desc$="*Not on File*"
        x3$=""
        find record (ivm01_dev,key=firm_id$+opw02a.item_iddes$(1,20),dom=*next) ivm01a$
        if opw02a.line_code$="N" then
            ivm01.item_desc$="*Non-Stock Item*"
            ivm01a.unit_of_sale$="EA"
        endif
        gosub Print_Item
        return

All_WareHouses: rem --- All Warehouses

        a3$=x3$
        dim b[16],w[16]
        if a3$="" then return
        for x=1 to len(a3$) step 2
            find record (ivm02_dev,key=firm_id$+a3$(x,2)+t0$(3,i[0]),dom=*continue) ivm02a$
            for x1=0 to 16
                b[x1]=b[x1]+w[x1]
            next x1
        next x
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

    rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

        def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release


rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release

rem --- #endinclude std_end.src

        end
