rem --- Ship Schedule Report (Report Overlay)
rem --- Program opr_ab v8.0.0 18Jul2007 (opr_ab)
rem --- Created by adx_codeport.bbx v1.1.5 (07/18/2007 09:38:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$



rem --- Assign form input values to local variables

    table$=fnget_table$("")
    Whse$=fnget_fld_data$(table$,"Whse")
    Product_Selection$=fnget_fld_data$(table$,"Product_Selection")
    Option$=fnget_fld_data$(table$,"Option")
    Summary_Detail$=fnget_fld_data$(table$,"Summary_Detail")
    Aging_Date$=fnget_fld_data$(table$,"Aging_Date")
    Days$=fnget_fld_data$(table$,"Days")
rem --- Initialize Data

    headings=4
    dim a[1],t[6],c[5],w[16],headings$[headings]
    h1$=n4$
    h0=132
    h=0
    l9=59
    l=l9+1
    t0=0
    more=1
    if pos("O"=p7$)>0 and pos("R"=p7$)=0 p7$=p7$+"R"
    while more
        if p9$<>"D" or m0+m1+7*m2+31<132 break
        if m1>12 call pgmdir$+"adc_sizemask.aon",m1$,m1,12,m1-1
        if m2>9 call pgmdir$+"adc_sizemask.aon",m2$,m2,9,m2-1
    wend

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    if p9$="D" h1$="Detail "+h1$ else h1$="Summary "+h1$
    h2$="Product Selection: "
    if p8$="" h2$=h2$+"All" else h2$=h2$+p8$
    headings$[0]=n1$
    headings$[1]=h1$
    headings$[2]=h2$
    headings$[3]=h3$
    when$=sysinfo.system_date$
    clock$=""
    rem call pgmdir$+"adc_progress.aon","CN",sysinfo.task_desc$,"","Printing","",7,opw02_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,opt61_dev,1,meter_num,status
rem --- Initial Read

    read (opw02_dev,key=firm_id$,dom=*next)

    while more ; rem --- Main Read

        dim opw02_key$(54)
        read record (opw02_dev,end=done) opw02a$
        if pos(opw02a.ORDER_STATUS$=p7$)=0 continue
        if wh$<>"" if opw02a.WAREHOUSE_ID$<>wh$ continue
        if opw02a_key$(1,2+i[0])<>t0$ gosub Item_Break
        rem call pgmdir$+"adc_progress.aon","S","","","",opw02a_key$(3,i[0]),0,0,1,0,ignore_status
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        dim c[5]
        x=pos(opw02a.EST_SHP_DATE$>=h4$,-3)
        x=int((x+2)/3)
        c[x]=c[x]+opw02a.QTY_ORDERED
        if p9$<>"D" then
            for j=0 to 5; let t[j]=t[j]+c[j]; next j; let t[6]=t[6]+opw02a.EXTENDED_AMT,u0=u0+opw02a.EXTENDED_AMT
        else
            if l+1>l9 gosub Print_Item
            gosub All_Warehse
            if opw02a.RESERVED_STR$="Y" print (printer_dev)@(132-m1-7*m2-30-m0),"Drop",
            print (printer_dev)@(132-m1-7*m2-25-m0),fnmask$(opw02_key$(3,p[0]),p5$),@(132-m1-7*m2-24),opw02a.ORDER_NO$," ",opw02a.ORDER_STATUS$,@(132-m1-7*m2-14),fndate$(opw02a.EST_SHP_DATE$),"  ",opw02a.COMMIT_FLAG$,
            for x=0 to 5; if c[x]<>0 print (printer_dev)@(132-m1-(7-x)*m2),c[x]:m2$,
            next x
            print (printer_dev)@(132-m1-m2),opw02a.QTY_ORDERED:m2$,@(132-m1),opw02a.EXTENDED_AMT:m1$
            l1=l1+1
            l2=l2+1
            l=l+1
        fi
    wend

done: rem --- End

    t9$="E"
    gosub Item_Break
    if h=0 gosub report_heading
    print (printer_dev)@(132-m1-m2*7),j$(1,m1+m2*7),'LF',@(132-m1-16),"Report Value: ",@(132-m1),u0:m1$
    goto std_exit

report_heading: rem --- Report Heading
    l=headings+1
    t3=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    
    if status exitto std_exit
    print (printer_dev)@(0),"Item",@(i[0]),"Whse",@(5+i[0]),"Prod",@(10+i[0]),"UM",@(15+i[0]),"Description"
    for x=1 to 5; print (printer_dev)@(132-m1-(6-x)*m2-8),fndate$(h4$(x*3-2,3)),; next x
    print (printer_dev)@(132-m1-6*m2-6),"Past",@(132-m1-6),"Total",@(126),"Total"
    if p9$="D" print (printer_dev)@(132-m1-7*m2-25-m0),"Cust",@(132-m1-7*m2-24),"Order",@(132-m1-7*m2-14),"Shp-Date Com?",
    for x=1 to 4; print (printer_dev)@(132-m1-(6-x)*m2-8),fndate$(h5$(x*3-2,3)),; next x
    print (printer_dev)@(132-m1-m2-8)," Future",@(132-m1-6*m2-6),"Due",@(132-m1-4),"Qty",@(126),"Value"
    l=l+3
return

Print_Item: rem --- Print Item
    if l>l9-2 gosub report_heading
    if wh$="" x$="ALL" else x$=opw02a.WAREHOUSE_ID$
    print (printer_dev)'LF',@(0),a0$(3,i[0]),@(1+i[0]),x$,@(5+i[0]),a1$(9,3),@(10+i[0]),x2$(4,2),@(15+i[0]),x1$
    l=l+2
    l1=0
return

Item_Break: rem --- Item Break

    if t0$<>"" goto Find_Record
    if p9$="D" if l2<=1 gosub All_Warehse
    if l+2>l9 gosub report_heading
    if p9$="D" print (printer_dev)@(132-m1-7*m2),j$(1,m2*6),@(132-m1-m2),j$(1,m1+m2); let l=l+1
    for x=0 to 5; print (printer_dev)@(132-m1-(7-x)*m2),t[x]:m2$,; next x
    print (printer_dev)@(132-m1-m2),t[0]+t[1]+t[2]+t[3]+t[4]+t[5]:m2$,@(132-m1),t[6]:m1$
    l=l+1
   
    gosub All_Warehse
    Find_Record:
        if t9$<>"" return
        dim t[6]
        t0$=opw02a_key$(1,i[0]+2)
        l1=0
        l2=0
        dim ivm01a_key$(i[1]+i[2]+i[3]),x2$(50),t[6],c[5]
        ivm01a_key$(1)="*Not on File*"
        x3$=""
        find record (ivm01_dev,key=firm_id$+opw02a_key$(3,20),dom=*next) ivm01a$
        if opwO2a$.LINE_CODE$="N" x1$(1)="*Non-Stock Item*",x2$(4,2)="EA"
        gosub Print_Item
return

All_Warehse: rem --- All Warehouses
    a3$=x3$
    dim b[16],w[16]
    if a3$="" return
    for x=1 to len(a3$) step 2
        find record (ivm02_dev,key=firm_id$+ivm02_key$(x,2)+t0$(3,i[0]),dom=*break) ivm02a$
        for x1=0 to 16
            b[x1]=b[x1]+w[x1]
        next x1
    next x
return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
