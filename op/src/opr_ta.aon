rem --- Sales Tax Report
rem --- Program opr_ta v8.0.0 06Jul2007 (opr_ta)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:57:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_yy21$ (Line 0244)
rem --- Undefined function fnyy_yy21$ (Line 0245)
rem --- Undefined function fnv (Line 0342)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0101)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0107)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0120)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0121)
rem --- v7.x Administrator reference ["sys-01"] (Line 0129)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0134)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0138)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0143)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0173)
rem --- BBx reference ["syc_ra.bbx"] (Line 0173)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0196)
rem --- BBx reference ["syc_rs.bbx"] (Line 0196)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0197)
rem --- BBx reference ["syc_rs.bbx"] (Line 0197)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0220)
rem --- BBx reference ["syc_rs.bbx"] (Line 0220)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0221)
rem --- BBx reference ["syc_rs.bbx"] (Line 0221)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0292)
rem --- BBx reference ["syc_rs.bbx"] (Line 0292)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0293)
rem --- BBx reference ["syc_rs.bbx"] (Line 0293)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0359)
rem --- BBx reference ["syc_rs.bbx"] (Line 0359)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0360)
rem --- BBx reference ["syc_rs.bbx"] (Line 0360)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- art02a: iolist a0$,a[0],a[1],a[2]
rem --- opm06a: iolist x0$(1),x1$(1),x0,x1

rem --- The following channel references have been identified:

rem --- ars01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0148)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="art-02"
    files$[3]="opm-06"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    art02_dev=channels[2]
    opm06_dev=channels[3]

rem --- Dimension string templates

    dim art02a$:templates$[2],opm06a$:templates$[3]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=3
    dim files$[files],options$[files],channels[files]
    files$[1]="art-02"
    files$[2]="opm-06"
    files$[3]="sys-01"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    art02_dev=channels[1]
    opm06_dev=channels[2]
    sys01_dev=channels[3]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$

rem --- Initializations

    dim headings$[3],a[2],t[2],g[2],o[1]
    p8$=""
    p9$=""
    h0=132
    h=0
    headings$[0]=n1$
    headings$[1]=n3$
    l9=42
    l=l9+1
    when$=sysinfo.system_date$
    clock$=""
    headings=3
    m1=len(m1$)
    m3=len(m3$)

rem --- Print positions

    call pgmdir$+"adc_sizemask.aon",m1$,m1,14,15
    o[0]=23+m3
    o[1]=o[0]+6

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    goto start_done

l800: rem --- Beginning Date

    v0$="Z"
    v1$="EC"
    v2$=p9$
    v0=4
    v1=40
    v2=3
    v4$="Enter The Starting Month as MMYY (<F1>=First)"
    v3$=""
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l830,l825,flow_control,l800,flow_control,l830,flow_control
l825:
    v$=""
l830:
    p9$=cvs(v$,2)
    gosub clear_text
    if p9$="" call pgmdir$+"syc_rs.bbx","",my_context,13000,"First",0,"",status; goto l840
    call pgmdir$+"syc_rs.bbx","",my_context,3000,p9$(1,2)+"/"+p9$(3,2),0,"",status
l840:
    if p9$<>"" and (p9$(1,2)<"01" or p9$(1,2)>"12") goto l800
    goto flow_control

l850: rem --- Ending Date

    v0$="Z"
    v1$="C"
    v2$=p8$
    v0=4
    v1=40
    v2=4
    v4$="Enter Ending Month as MMYY (<F1>=Last)"
    v3$=""
    control_id=3001
    gosub std_input
    on v3 goto l875,l870,flow_control,l850,flow_control,l875,flow_control
l870:
    v$=""
l875:
    p8$=cvs(v$,2)
    gosub clear_text
    if p8$="" call pgmdir$+"syc_rs.bbx","",my_context,13001,"Last",0,"",status; goto l885
    call pgmdir$+"syc_rs.bbx","",my_context,3001,p8$(1,2)+"/"+p8$(3,2),0,"",status
l885:
    if p8$<>"" and (p8$(1,2)<"01" or p8$(1,2)>"12") goto l850
    goto flow_control

l950: rem --- Background

    dim j$(4*m1,"-")
    call pgmdir$+"adc_progress.aon","CN","","","Printing","",8,art02_dev,1,meter_num,status
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    if p9$="" x0$="First" else x0$=p9$(1,2)+"/"+p9$(3,2)
    if p8$="" x1$="Last" else x1$=p8$(1,2)+"/"+p8$(3,2)
    headings$[2]="From "+x0$+" Thru "+x1$

rem --- Position File

    read (art02_dev,key=firm_id$,dom=*next)

l1100: rem --- Main Read

    read record (art02_dev,end=l4000) art02a$
    if a0$(1,2)<>firm_id$ goto l4000
    if p9$<>"" if a0$(5,4)<fnyy_yy21$(p9$(3,2))+p9$(1,2) goto l1100
    if p8$<>"" if a0$(5,4)>fnyy_yy21$(p8$(3,2))+p8$(1,2) goto l1100
    call pgmdir$+"adc_progress.aon","S","","","",a0$(3,2)+" "+a0$(7,2)+"/"+fnyy$(a0$(5,2)),0,0,1,meter_num,status

rem --- Breaks

    if a0$(3,2)<>t0$ gosub l6000

rem --- Print

    if l>l9 gosub report_heading
    print (printer_dev)h3$,@(o[0]),a0$(7,2),"/",fnyy$(a0$(5,2)),@(o[1]),a[0]:m1$,a[1]:m1$,a[2]:m1$,a[2]-a[0]:m1$
    l=l+1
    l0=l0+1
    h3$=""
    for x=0 to 2
        t[x]=t[x]+a[x]
        g[x]=g[x]+a[x]
    next x

rem --- Loop back for next record

    goto l1100

l4000: rem --- All done

    if l>l9 gosub report_heading
    t9$="E"
    gosub l6000
    print (printer_dev)@(o[1]+m1),j$(1,m1)
    print (printer_dev)@(3),"Totals For Report",@(o[1]+m1),g[1]:m1$
    goto std_exit

report_heading: rem --- Report Heading

    l=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)"Tax"
    print (printer_dev)"Cd  Description",@(o[0]-5),"Rate",@(o[0]),"Date",@(o[1]+m1-8),"Taxable",@(o[1]+m1*2-4),"Tax",@(o[1]+m1*3-6),"Gross",@(o[1]+m1*4-12),"Non-Taxable"
    print (printer_dev)""
    return
display_fields:
    control_id=3000
    cid_cnt=0
l5510:
    if cid_cnt=0 if p9$="" disp_inp$="",disp_desc$="First" else disp_inp$=p9$(1,2)+"/"+p9$(3,2),disp_desc$=""
    if cid_cnt=1 if p8$="" disp_inp$="",disp_desc$="Last" else disp_inp$=p8$(1,2)+"/"+p8$(3,2),disp_desc$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5550
    goto l5510
l5550:
    disp_inp$=""
    disp_desc$=""
    return

l6000: rem --- Tax Code Breaks

    if t0$="" goto l6100
    if l0<1 goto l6100
    print (printer_dev)@(o[1]),j$
    print (printer_dev)@(3),"Totals For ",t0$,@(o[1]),t[0]:m1$,t[1]:m1$,t[2]:m1$,t[2]-t[0]:m1$
    print (printer_dev)""
    l=l+3
l6100:
    if t9$<>"" goto l6190
    dim x0$(4),x1$(60),t[2]
    t0$=a0$(3,2)
    l0=0
    x1$(6,20)="Unknown Tax Code"
    x0=0
    find record (opm06_dev,key=firm_id$+t0$,dom=*next) opm06a$
    h3$=t0$+" "+x1$(6,20)+str(x0:m3$)
l6190:
    return
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l800,l850,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    goto l950
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,"",0,"",status
    if v3=1 or v$="" call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem --- FUNCTIONS

    def fnv(q$)=42+int(len(q$)/2)

rem --- Convert 2-Char Year to 21st Century 2-Char Year

    def fnyy_yy21$(q1$)
    let q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8131)
l8131:
    if num(q1$(1,2),err=*next)<q9 q1$(1,1)=chr(int(num(q1$(1,2))/10)+65)
    return q1$
    fnend
rem --- Un-Convert 21st Century 2-Char Year to 2-Char Year
    def fnyy$(q1$)
    let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
