rem --- MTD Sales Journal
rem --- Program opr_ea v8.0.0 06Jul2007 (opr_ea)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:58:05)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0242)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0111)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0118)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0133)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0134)
rem --- v7.x Administrator reference ["sys-01"] (Line 0143)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0149)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0153)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0158)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0159)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0173)
rem --- BBx reference ["syc_ra.bbx"] (Line 0173)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0195)
rem --- BBx reference ["syc_rs.bbx"] (Line 0195)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0196)
rem --- BBx reference ["syc_rs.bbx"] (Line 0196)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0197)
rem --- BBx reference ["syc_rs.bbx"] (Line 0197)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0217)
rem --- BBx reference ["syc_rs.bbx"] (Line 0217)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0218)
rem --- BBx reference ["syc_rs.bbx"] (Line 0218)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0219)
rem --- BBx reference ["syc_rs.bbx"] (Line 0219)
rem --- BBx reference ["opr_eb.bbx"] (Line 0260)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0266)
rem --- BBx reference ["syc_rs.bbx"] (Line 0266)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0267)
rem --- BBx reference ["syc_rs.bbx"] (Line 0267)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file opt-61 referenced (Line 0098)
rem --- Cross-reference file opt-61 referenced (Line 0146)

rem --- The following IOLIST's were removed from this program:

rem --- gls01a: iolist x$,g1$,g2$,g3$

rem --- The following channel references have been identified:

rem --- arm01a: Channel reference (Line 0171)

rem --------------------------------------------------------------------------------
rem --- ars01a: (Generated by CodePort)
rem --- ivs01a: (Generated by CodePort)
rem --- opt01a: Channel reference (Line 0168)
rem --- opt61a: Channel reference (Line 0167)
rem --- sys01a: Channel reference (Line 0166)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    precision 4

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="opt-01"
    files$[4]="opt-61"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    opt01_dev=channels[3]
    opt61_dev=channels[4]

rem --- Dimension string templates

    dim arm01a$:templates$[2],opt01a$:templates$[3],opt61a$:templates$[4]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=4
    dim files$[files],options$[files],channels[files]
    files$[1]="opt-61"
    files$[2]="opt-01"
    files$[3]="arm-01"
    files$[4]="sys-01"
    call pgmdir$+"adc_fileopen.aon",1,1,4,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    opt61_dev=channels[1]
    opt01_dev=channels[2]
    arm01_dev=channels[3]
    sys01_dev=channels[4]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    dim p[3],v[11]
    p[0]=num(p2$(1,2))

rem --- Initializations

    p9$=""
    p8$=""

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    goto start_done

l1000: rem --- From Date

    v0$="D"
    v1$="CE"
    v2$=p8$
    v4$="Enter The Starting Date (<F1>=First)"
    v0=8
    v1=40
    v2=3
    v3$=""
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1070,l1060,flow_control,l1000,flow_control,l1070,flow_control
l1060:
    v$=""
l1070:
    p8$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,13000,"",0,"",status
    if p8$="" call pgmdir$+"syc_rs.bbx","",my_context,3000,"",0,"",status
    if p8$="" call pgmdir$+"syc_rs.bbx","",my_context,13000,"First",0,"",status
    goto flow_control

l1200: rem --- Through Date

    v0$="D"
    v1$="C"
    v2$=p9$
    v4$="Enter The Ending Date (<F1>=Last)"
    v0=8
    v1=40
    v2=4
    v3$=""
    control_id=3001
    gosub std_input
    on v3 goto l1260,l1250,flow_control,l1200,flow_control,l1260,flow_control
l1250:
    v$=""
l1260:
    p9$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,13001,"",0,"",status
    if p9$="" call pgmdir$+"syc_rs.bbx","",my_context,3001,"",0,"",status
    if p9$="" call pgmdir$+"syc_rs.bbx","",my_context,13001,"Last",0,"",status
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    run pgmdir$+"opr_eb.bbx"
display_fields:
    let control_id=3000,cid_cnt=0
l5010:
    if cid_cnt=0 if p8$="" disp_inp$="",disp_desc$="First" else disp_inp$=fndate$(p8$),disp_desc$=""
    if cid_cnt=1 if p9$="" disp_inp$="",disp_desc$="Last" else disp_inp$=fndate$(p9$),disp_desc$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>2 goto l5050
    goto l5010
l5050:
    let disp_inp$="",disp_desc$=""
    return

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fnv(q$)=42+int(len(q$)/2)

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
