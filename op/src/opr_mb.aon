rem --- Sales Commission Report (Report Overlay)
rem --- Program opr_mb v8.0.0 22Jan2008 (opr_mb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/22/2008 09:45:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open Printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Initializations

        more=1
        dim a[10],t[9],u[9],w[1],x[1],o[11],headings$[6]
        x0$="First Date"
        x1$="Last Date",h5$=""
        if p8$<>"" then let x0$=fndate$(p8$)
        if p9$<>"" then let x1$=fndate$(p9$)
        h4$="Paid Invoices"
        when$=sysinfo.system_date$,clock$=""
        if p7$="B" then let h4$="Booked Invoices"
        if s0$<>"" then let h6$=s0$ else let h6$="First"
        if s1$<>"" then let h7$=s1$ else let h7$="Last"
        if s2$="S" then let h8$="Commission Based On Gross Sales"
        if s2$="P" then let h8$="Commission Based On Gross Profit"
        t0$=""
        t0=0,t1=0,l9=55,l=l9+1,h=0,h0=132
        x0$="Beginning Date: "+x0$
        x1$="   Ending Date: "+x1$
        call pgmdir$+"adc_sizemask.aon",ars01a.amount_mask$,m1,11,13

rem --- Headings

        dim h1$(h0),h2$(h0),j$(5*m1+2*m4,"-")
        headings$[0]=n1$
        headings$[1]=n3$
        h1$(1)="Beginning Salesperson: "+h6$
        h1$(fncenter(h4$,h0),len(h4$))=h4$
        h1$(h0-len(x0$))=x0$
        h2$(1)="   Ending Salesperson: "+h7$
        h2$(fncenter(h8$,h0),len(h8$))=h8$
        h2$(h0-len(x1$))=x1$
        headings$[2]=h1$
        headings$[3]=h2$

rem --- Print positions

        o[11]=h0-m1
        h1$="Commission",h2$="   Due    ",h1=o[11]+m1-11
        if p7$<>"P" then let o[11]=h0-1,h1=o[11],h1$="",h2$=""
        o[1]=8
        o[2]=o[1]+m0+1,o[10]=o[11]-m1,o[9]=o[10]-m4
        o[8]=o[9]-m4
        o[7]=o[8]-m1,o[6]=o[7]-m1,o[5]=o[6]-m1
        o[4]=o[5]-m1
        o[3]=o[4]-9,h2=h1,width=min(30,o[3]-o[2]-1)

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,opt71_dev,1,meter_num,status

rem --- Position File Pointer

        read (opt71_dev,key=firm_id$,dom=*next)


rem --- retrieve template for ART_INVDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","ART_INVDET","PRIMARY",art11a_key_tpl$,table_chans$[all],status$
        dim art11a_key$:art11a_key_tpl$



rem --- retrieve template for OPT_SALESCOM record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_SALESCOM","PRIMARY",opt71a_key_tpl$,table_chans$[all],status$
        dim opt71a_key$:opt71a_key_tpl$


rem --- Read Comission Record
While more

        opt71a_key$=key(opt71_dev,end=*break)
        read record (opt71_dev,end=Control_Breaks) opt71a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if pos(firm_id$=opt71a.firm_id$+opt71a.ar_type$+opt71a.slspsn_code$+opt71a.ar_inv_no$+opt71a.customer_id$+opt71a.invoice_type$+opt71a.invoice_date$)<>1 then break
        if p7$="B" then
            if p8$<>"" then
                if opt71a.invoice_date$<p8$ then
                    continue
                endif
            endif
        endif
        if p7$="B" then
            if p9$<>"" then
                if opt71a.invoice_date$>p9$ then
                    continue
                endif
            endif
        endif
        if s0$<>"" then
            if opt71a.slspsn_code$<s0$ then
                continue
            endif
        endif
        if s1$<>"" then
            if opt71a.slspsn_code$>s1$ then
                continue
            endif
        endif
        if opt71a.invoice_type$="V" then continue

Control_Breaks: rem --- Control Breaks

        if opt71a.slspsn_code$<>t0$ then gosub Salesperson_Break
        if p7$<>"B" then

rem --- Calculate commission due

            gosub Search_Invoice_Transactions
            if paid=0 then continue
            a[9]=0
            if s2$="S" then
                if sold<>0 then
                    let a[9]=(-paid)/sold*opt71a.total_sales*opt71a.comm_percent/100
                endif
            endif
            if s2$="P" then
                if sold<>0 then
                    let a[9]=(-paid)/sold*(opt71a.total_sales-opt71a.total_cost)*opt71a.comm_percent/100
                endif
            endif

        endif

rem -- Get Customer Name

        rem dim b1$(width)
        arm01a.cust_name$="(Not On File)"
        find record (arm01_dev,key=firm_id$+opt71a.customer_id$,dom=*next) arm01a$

rem --- Print

        if l>l9 then gosub report_heading
        x0=0
        a[8]=opt71a.total_sales*opt71a.comm_percent/100,due$=""
        if opt71a.total_sales<>0 then let x0=100*(opt71a.total_sales-opt71a.total_cost)/opt71a.total_sales
        if s2$="P" then let a[8]=(opt71a.total_sales-opt71a.total_cost)*opt71a.comm_percent/100
        if p7$="P" then let due$=str(a[9]:ars01a.amount_mask$)
        print (printer_dev)@(o[0]),opt71a.ar_inv_no$,@(o[1]),fnmask$(opt71a.customer_id$(1,p[0]),ars01a.customer_output$),
:                          @(o[2]),arm01a.cust_name$,@(o[3]),fndate$(opt71a.invoice_date$),
:                          @(o[4]),opt71a.total_sales:ars01a.amount_mask$,@(o[5]),opt71a.comm_amt:ars01a.amount_mask$,
:                          @(o[6]),opt71a.total_cost:ars01a.amount_mask$,@(o[7]),opt71a.total_sales-opt71a.total_Cost:ars01a.amount_mask$,
:                          @(o[8]),x0:m4$,@(o[9]),opt71a.comm_percent:m4$,@(o[10]),a[8]:ars01a.amount_mask$,@(o[11]),due$
        l=l+1
        l1=l1+1,t1=t1+1

rem --- Accumulate totals

        precision 2
        t[5]=t[5]+opt71a.COMM_AMT
        u[5]=u[5]+opt71a.COMM_AMT
        t[6]=t[6]+opt71a.TOTAL_SALES
        u[6]=u[6]+opt71a.TOTAL_SALES
        t[7]=t[7]+opt71a.TOTAL_COST
        u[7]=u[7]+opt71a.TOTAL_COST
        t[8]=t[8]+a[8]
        u[8]=u[8]+a[8]
        t[9]=t[9]+a[9]
        u[9]=u[9]+a[9]
        precision 4

rem --- Next record
Wend


done: rem --- All done

        t9$="E"
        gosub Salesperson_Break
        x0=0
        t0$="",x$="Report Totals",h5$="Report Summary"
        gosub report_heading
        print (printer_dev)t0," Total Salespersons"
        if u[6]<>0 then let x0=100*(u[6]-u[7])/u[6]
        if p7$="P" then let due$=str(u[9]:ars01a.amount_mask$)
        print (printer_dev)@(o[4]-len(x$)),x$,@(o[4]),u[6]:ars01a.amount_mask$,@(o[5]),u[5]:ars01a.amount_mask$,
:                          @(o[6]),u[7]:ars01a.amount_mask$,@(o[7]),u[6]-u[7]:ars01a.amount_mask$,@(o[8]),x0:m4$,
:                          @(o[10]),u[8]:ars01a.amount_mask$,@(o[11]),due$

rem --- Averages

        if t0<>0 then
            for x=0 to 9
                u[x]=u[x]/t0
            next x
            x0=0
            x$="Report Averages"
            if u[6]<>0 then let x0=100*(u[6]-u[7])/u[6]
            if p7$="P" then let due$=str(u[9]:ars01a.amount_mask$)
            u[3]=0
            if s2$="S" and u[6]<>0 then let u[3]=100*u[8]/u[6]
            if s2$="P" and u[6]-u[7]<>0 then let u[3]=100*u[8]/(u[6]-u[7])
            print (printer_dev)@(o[4]-len(x$)),x$,@(o[4]),u[6]:ars01a.amount_mask$,@(o[5]),u[5]:ars01a.amount_mask$,
:                              @(o[6]),u[7]:ars01a.amount_mask$,@(o[7]),u[6]-u[7]:ars01a.amount_mask$,@(o[8]),x0:m4$,
:                              @(o[9]),u[3]:m4$,@(o[10]),u[8]:ars01a.amount_mask$,@(o[11]),due$
        endif

        goto std_exit

report_heading: rem --- Report Heading

        l=9
        headings$[5]=h5$
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],6,h,h0,when$,clock$,status
        if status then exitto std_exit
        print (printer_dev)@(o[0]),"Invoice",@(o[4]+m1-6),"Gross",@(o[7]+m1-6),"Gross",@(h1),h1$
        print (printer_dev)@(o[0]),"Number",@(o[1]),"Customer",@(o[3]+2),"Date",@(o[4]+m1-6),"Sales",
:                          @(o[5]+m1-6),"Other",@(o[6]+m1-5),"Cost",@(o[7]+m1-7),"Profit",
:                          @(o[8]+m4-5),"GP %",@(o[9]+m4-7),"Comm %",@(o[10]+m1-11),"Commission",
:                          @(h2),h2$
        print (printer_dev)""
        return

Salesperson_Break: rem --- Salesperson Break

        if t0$<>"" then
            if l1<>0 then
                x0=0
                x$="Total For "+h5$
                if len(x$)>o[4] then let x$=x$(1,o[4]-1)
                if t[6]<>0 then let x0=100*(t[6]-t[7])/t[6]
                if p7$="P" then let due$=str(t[9]:ars01a.amount_mask$)
                print (printer_dev)@(o[4]),j$
                print (printer_dev)@(o[4]-len(x$)),x$,@(o[4]),t[6]:ars01a.amount_mask$,@(o[5]),t[5]:ars01a.amount_mask$,
:                                  @(o[6]),t[7]:ars01a.amount_mask$,@(o[7]),t[6]-t[7]:ars01a.amount_mask$,@(o[8]),x0:m4$,
:                                  @(o[10]),t[8]:ars01a.amount_mask$,@(o[11]),due$
                t0=t0+1
            endif
        endif

        if t9$<>"" then return
        dim h5$(32),t[9]
        t0$=opt71a_key.slspsn_code$
        arm10f.code_desc$="(Not On File)",l=l9+1,l1=0
        find record (arm10_dev,key=firm_id$+"F"+t0$,dom=*next) arm10f$
        h5$="Salesperson "+t0$+" "+cvs(arm10f.code_desc$,2)
        return

Search_Invoice_Transactions: rem --- Search Invoice Transactions

        paid=0
        sold=0
        read record (art01_dev,key=(opt71a.firm_id$+opt71a.ar_type$)+opt71a.customer_id$+opt71a.ar_inv_no$+"00",dom=Zero_Balance_Cash_Invoice) art01a$
        sold=art01a.invoice_amt
        read record (art11_dev,key=(opt71a.firm_id$+opt71a.ar_type$)+opt71a.customer_id$+opt71a.ar_inv_no$,dom=*next) art11a$



        While more
            art11a_key$=key(art11_dev,end=Rtn_1)
            if art11a_key.firm_id$+art11a_key.ar_type$+art11a_key.customer_id$+art11a_key.ar_inv_no$+
:              art11a_key.sequence_num$<>opt71a.firm_id$+opt71a.ar_type$+opt71a.customer_id$+
:              opt71a.ar_inv_no$ then
                return
            endif
            read record (art11_dev,key=art11a_key$) art11a$
            if p8$<>"" then
                if art11a.trans_date$<p8$ then
                    continue
                endif
            endif
            if p9$<>"" then
                if art11a.trans_date$>p9$ then
                    continue
                endif
            endif
            if art11a.trans_type$="C" then
                let paid=paid+art11a.trans_amt+art11a.adjdisc_amt
            else
                let sold=sold+art11a.trans_amt+art11a.adjdisc_amt
            endif
        Wend

Zero_Balance_Cash_Invoice: rem --- Zero Balance Cash Invoice ?

        read record (opt41_dev,key=opt71a.firm_id$+opt71a.ar_type$+opt71a.customer_id$+opt71a.ar_inv_no$,dom=Rtn_1) opt41a$
        if p8$<>"" then
            if opt41a.invoice_date$<p8$ then
                return
            endif
        endif
        if p9$<>"" then
            if opt41a.invoice_date$>p9$ then
                return
            endif
        endif
        sold=-opt41a.invoice_amt
        paid=opt41a.tendered_amt

Rtn_1:
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

    rem --- Format zip/postal code

        def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem --- #endinclude std_end.src

        end
