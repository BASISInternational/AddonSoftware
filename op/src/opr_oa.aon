rem --- Order Status Report By Item
rem --- Program opr_oa v8.0.0 06Jul2007 (opr_oa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 07:30:46)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0360)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0141)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0148)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0161)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0162)
rem --- v7.x Administrator reference ["sys-01"] (Line 0174)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0184)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0190)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0195)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0196)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0223)
rem --- BBx reference ["syc_ra.bbx"] (Line 0223)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0247)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0249)
rem --- BBx reference ["syc_rs.bbx"] (Line 0249)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0253)
rem --- BBx reference ["syc_rs.bbx"] (Line 0253)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0254)
rem --- BBx reference ["syc_rs.bbx"] (Line 0254)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0277)
rem --- BBx reference ["syc_rs.bbx"] (Line 0277)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0278)
rem --- BBx reference ["syc_rs.bbx"] (Line 0278)
rem --- BBx reference ["ivc_lk.bbx"] (Line 0298)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0300)
rem --- BBx reference ["syc_rs.bbx"] (Line 0300)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0304)
rem --- BBx reference ["syc_rs.bbx"] (Line 0304)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0305)
rem --- BBx reference ["syc_rs.bbx"] (Line 0305)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0343)
rem --- BBx reference ["syc_rs.bbx"] (Line 0343)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0344)
rem --- BBx reference ["syc_rs.bbx"] (Line 0344)
rem --- BBx reference ["opr_ob.bbx"] (Line 0374)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0382)
rem --- BBx reference ["syc_rs.bbx"] (Line 0382)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0383)
rem --- BBx reference ["syc_rs.bbx"] (Line 0383)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0390)
rem --- BBx reference ["syc_rs.bbx"] (Line 0390)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ope-61 referenced (Line 0125)
rem --- Cross-reference file ope-61 referenced (Line 0183)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ope61a replaced by index on ope-11 (Line 0131)

rem --- The following IOLIST's were removed from this program:

rem --- ivm10a: iolist x0$(1)
rem --- ivm10c: iolist x0$(1)

rem --- The following channel references have been identified:

rem --- ars01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivm01a: Channel reference (Line 0199)
rem --- ivm02a: Channel reference (Line 0198)
rem --- ivs01a: (Generated by CodePort)
rem --- ope01a: Channel reference (Line 0195)
rem --- ope11a: Channel reference (Line 0194)
rem --- ope61a: Channel reference (Line 0194)
rem --- opm02a: Channel reference (Line 0193)
rem --- sys01a: Channel reference (Line 0192)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    files$[3]="ivm-02"
    files$[4]="ivm-10"
    files$[5]="ope-01"
    files$[6]="ope-11"
    files$[7]="ope-61"
    files$[8]="opm-02"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm10_dev=channels[4]
    ope01_dev=channels[5]
    ope11_dev=channels[6]
    ope61_dev=channels[7]
    opm02_dev=channels[8]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm10a$:templates$[4],
:       ope01a$:templates$[5],ope11a$:templates$[6],ope61a$:templates$[7],
:       opm02a$:templates$[8]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivm-10C"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivm10c$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=8
    dim files$[files],options$[files],channels[files]
    files$[1]="ope-01"
    files$[2]="ope-11"
    files$[3]="ivm-10"
    files$[4]="ivm-02"
    files$[5]="ivm-01"
    files$[6]="ope-61"
    files$[7]="sys-01"
    files$[8]="opm-02"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ope01_dev=channels[1]
    ope11_dev=channels[2]
    ivm10_dev=channels[3]
    ivm02_dev=channels[4]
    ivm01_dev=channels[5]
    ope61_dev=channels[6]
    sys01_dev=channels[7]
    opm02_dev=channels[8]

rem --- Parameters

    dim p[2],i[5]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    i[0]=num(i2$(1,2))
    i[1]=num(i2$(5,1))
    i[2]=num(i2$(7,2))
    i[3]=num(i2$(9,2))
    i[4]=num(i2$(11,2))
    i[5]=num(i2$(13,2))
    p[1]=num(p2$(3,2))
    p[2]=num(p3$(4,1))
    p[0]=num(p2$(1,2))

rem --- Initializations

    dim description$[1],length[1],position[1],field[1],x0$(32)
    number=1
    p8$=""
    p9$="D"
    p6$=""
    p5$=""
    h1$=n4$
    optn$="OQBC"

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    gosub display_fields
    goto start_done

l1000: rem --- Product

    v0$="S"
    v1$="KC"
    v2$=p8$
    v0=3
    v1=40
    v2=3
    i0=0
    v4$="Enter A Valid Product Type (<F1>=All/<F3>=Lookup)"
    v3$=""
    control_id=3000
    i0=0
    h4$="Product Type: "
    gosub std_input
    on v3 goto l1055,l1045,flow_control,l1050,flow_control,l1055,flow_control
l1045:
    v$=""; goto l1055
l1050:
    call pgmdir$+"ivc_lk.bbx",1,v1,v2,v$
l1055:
    if v$="" gosub clear_text; let h4$=h4$+"All"; call pgmdir$+"syc_rs.bbx","",my_context,13000,"All",0,"",status; goto l1090
    v$=v$+"   "
    v$=v$(1,3)
    find record (ivm10_dev,key=firm_id$+"A"+v$,dom=l1000) ivm10a$
    call pgmdir$+"syc_rs.bbx","",my_context,3000,x0$(4,3),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,x0$(7,20),0,"",status
    h4$=h4$+v$+" "+cvs(x0$(7,20),2)
l1090:
    p8$=v$
    goto flow_control

l1300: rem --- Summary/Detail

    v0$="S"
    v1$="C"
    v2$=p9$
    v3$="SD"
    v4$="S=Summary By Item     D=Item Detail By Order"
    v0=1
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l1330,l1300,flow_control,l1300,flow_control,l1330,flow_control
l1330:
    p9$=v$
    x$="Detail"
    if p9$="S" x$="Summary"
    call pgmdir$+"syc_rs.bbx","",my_context,3002,p9$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13002,x$,0,"",status
    goto flow_control

l1400: rem --- Warehouse Entry

    v0$="S"
    v1$="KC"
    v2$=p6$
    v4$="Enter A Valid Warehouse (<F1>=All/<F3>=Lookup)"
    v0=2
    v1=40
    v2=6
    v3$=""
    control_id=3003
    gosub std_input
    h5$="Warehouse: "
    on v3 goto l1520,l1450,flow_control,l1500,flow_control,l1520,flow_control
l1450:
    v$=""; goto l1520
l1500:
    call pgmdir$+"ivc_lk.bbx",3,v1,v2,v$
l1520:
    if v$="" gosub clear_text; let h5$=h5$+"All"; call pgmdir$+"syc_rs.bbx","",my_context,13003,"All",0,"",status; goto l1580
    v$=v$+"  "
    v$=v$(1,2)
    find record (ivm10_dev,key=firm_id$+"C"+v$,dom=l1400) ivm10c$
    call pgmdir$+"syc_rs.bbx","",my_context,3003,x0$(4,2),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13003,x0$(6,20),0,"",status
    h5$=h5$+v$+" "+cvs(x0$(6,20),2)
l1580:
    p6$=v$
    goto flow_control

l1600: rem --- Option

    v0$="S"
    v1$="^C"
    v2$=p5$
    v3$=""
    v4$="O=Open Orders, Q=Quotes, B=Backorders, C=Credit Held Orders, <F1>=All Orders"
    v0=4
    v1=40
    v2=4
    x$=""
    h3$=""
    control_id=3001
    gosub std_input
    on v3 goto l1640,l1641,flow_control,l1600,flow_control,l1640,flow_control
l1640:
    if v$<>"" goto l1642
l1641:
    v$=optn$; goto l1670
l1642:
    for x=1 to len(optn$)
        if pos(optn$(x,1)=v$)>0 x$=x$+optn$(x,1)
    next x
    if len(x$)>0 v$=x$ else goto l1600
    for x=1 to len(v$)
        if x=len(v$) and x<>1 h3$=h3$+" and " else if h3$<>"" leth3$=h3$+", "
        if v$(x,1)="O" h3$=h3$+"Open" else if v$(x,1)="Q" h3$=h3$+"Quoted" else if v$(x,1)="B" h3$=h3$+"Backordered" else ifv$(x,1)="C" h3$=h3$+"Credit Held" else exitto l1600
    next x
l1670:
    p5$=v$
    if len(p5$)<4 h3$=h3$+" Orders Only" else h3$="All Orders"
    if len(h3$)>80-v1-len(p5$)-1 x$=h3$(1,80-v1-len(p5$)-1) else x$=h3$
    call pgmdir$+"syc_rs.bbx","",my_context,3001,p5$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13001,x$,0,"",status
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1600,l1300,l1400,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    let v0$="S",v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    run pgmdir$+"opr_ob.bbx"
display_fields:
    let control_id=3000,cid_cnt=0
l5010:
    if cid_cnt=0 disp_inp$="",disp_desc$="All"
    if cid_cnt=1 disp_inp$=optn$,disp_desc$="All Orders"
    if cid_cnt=2 disp_inp$="D",disp_desc$="Detail"
    if cid_cnt=3 disp_inp$="",disp_desc$="All"
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5010
l5050:
    let disp_inp$="",disp_desc$=""
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem --- FUNCTIONS

    def fnv(q$)=42+int(len(q$)/2)

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
