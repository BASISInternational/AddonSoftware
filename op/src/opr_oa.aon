rem --- Order Status Report By Item
rem --- Program opr_oa v8.0.0 06Jul2007 (opr_oa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 07:30:46)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



                seterr std_error
                setesc std_error

rem --- Retrieve the program path

                pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

                sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
                dim sysinfo$:sysinfo_template$
                sysinfo$=stbl("+SYSINFO",err=*next)
                milestone=num(stbl("+MILESTONE",err=*next),err=*next)
                firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

                files=8,begfile=1,endfile=files
                dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
                files$[1]="ads-01"
                files$[2]="ivm-01"
                files$[3]="ivm-02"
                files$[4]="ivm-10"
                files$[5]="ope-01"
                files$[6]="ope-11"
                files$[7]="ope-61"
                files$[8]="opm-02"
                call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
                if status goto std_exit
                ads01_dev=channels[1]
                ivm01_dev=channels[2]
                ivm02_dev=channels[3]
                ivm10_dev=channels[4]
                ope01_dev=channels[5]
                ope11_dev=channels[6]
                ope61_dev=channels[7]
                opm02_dev=channels[8]

rem --- Dimension string templates

                dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm10a$:templates$[4],
:               ope01a$:templates$[5],ope11a$:templates$[6],ope61a$:templates$[7],
:               opm02a$:templates$[8]

rem --- Retrieve miscellaneous templates

                files=3,begfile=1,endfile=files
                dim ids$[files],templates$[files]
                ids$[1]="ars-01A"
                ids$[2]="ivm-10C"
                ids$[3]="ivs-01A"

                call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
                if status goto std_exit

rem --- Dimension miscellaneous string templates

                dim ars01a$:templates$[1],ivm10c$:templates$[2],ivs01a$:templates$[3]


rem --- Assign form input values to local variables

                Product_type$=option!.getOptionData("Product_type")
                option$=option!.getOptionData("option")
                summary$=option!.getOptionData("summary")   
                Warehouse$=option!.getOptionData("Warehouse")

rem --- Retrieve parameter records

                ars01a_key$=firm_id$+"AR00"
                find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
                ivs01a_key$=firm_id$+"IV00"
                find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$



rem --- Parameters

                dim p[2],i[5]
                n1$=sysinfo.firm_name$
                n2$="AR"
                n4$=sysinfo.task_desc$
                find record (ads01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
                find record (ads01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
                i[0]=num(ivs01a.item_id_len$)
                i[1]=num(ivs01a.precision$)
                i[2]=num(ivs01a.ls_no_len$)
                i[3]=num(ivs01a.desc_len$)
                i[4]=num(ivs01a.desc_len$)
                i[5]=num(ivs01a.desc_len$)
                p[1]=num(ars01a.max_customer_len$)
                p[2]=num(ars01a.zip_length$)
                p[0]=num(ars01a.customer_size$)

rem --- Initializations

                dim description$[1],length[1],position[1],field[1],x0$(32)
                number=1
                p8$=""
                p9$="D"
                p6$=""
                p5$=""
                h1$=n4$
                optn$="OQBC"



rem --- Run report overlay

                run pgmdir$+"opr_ob.bbx"

rem --- FUNCTIONS

    def fnv(q$)=42+int(len(q$)/2)

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
