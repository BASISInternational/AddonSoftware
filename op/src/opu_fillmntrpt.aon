rem --- Order Fullfillment Report Update
rem --- Program opu_fillmntrpt.aon

rem --- AddonSoftware Version 22.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    setesc std_error
    seterr std_error

rem --- Use statements and declares  
    use ::sys/prog/bao_option.bbj::Option

    declare Option option!
    declare BBjVector OutVect!

rem --- Retrieve the program path
    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data
    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)

rem --- Ready To Invoice?
    msg_id$="OP_INVOICE_ORDERS"
    gosub disp_message
    if msg_opt$="N" then goto std_exit_no_update
    endif

rem --- Open/Lock files
    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="opt-31",           ids$[1]="OPE_ORDSHIP"
    files$[2]="opt-21",           ids$[2]="OPT_INVLSDET"
    files$[3]="opt_fillmntlsdet", ids$[3]="OPT_FILLMNTLSDET"
    files$[4]="opt_cartlsdet",    ids$[4]="OPT_CARTLSDET"
    files$[5]="opt_shiptrack",    ids$[5]="OPT_SHIPTRACK"
    files$[6]="ope-04",           ids$[6]="OPE_PRNTLIST"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update
    
    opeOrdShip_dev=channels[1]
    optInvLsDet_dev=channels[2]
    optFillmntLsDet_dev=channels[3]
    optCartLsDet_dev=channels[4]
    optShipTrack_dev=channels[5]
    opePrntList_dev=channels[6]

    dim opeOrdShip$:templates$[1]
    dim optInvLsDet$:templates$[2]
    dim optFillmntLsDet$:templates$[3]
    dim optCartLsDet$:templates$[4]
    dim optShipTrack$:templates$[5]
    dim opePrntList$:templates$[6]

rem --- Initialize Progress Meter
    total_recs=0
    call pgmdir$+"adc_progress.aon","N","","","","",0,optInvHdr_dev,1,meter_num,status

rem --- Invoice packed and shipped orders
    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_INVHDR","AO_STATUS",optInvHdr_key_tpl$,table_chans$[all],status$
    dim optInvHdr_key$:optInvHdr_key_tpl$

    readyToInvoice_iter! = readyToInvoice!.iterator()
    while readyToInvoice_iter!.hasNext()
        optInvHdr_key$=readytoInvoice_iter!.next()
        ar_type$=optInvHdr_key.ar_type$
        customer_id$=optInvHdr_key.customer_id$
        order_no$=optInvHdr_key.order_no$
        old_inv_no$=optInvHdr_key.ar_inv_no$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

        rem --- Get next Invoice number
        call stbl("+DIR_SYP")+"bas_sequences.bbj","INVOICE_NO",inv_no$,table_chans$[all],"QUIET"

        rem --- Replace ope_ordship opt-31 records
        for i=1 to 2
            if i=1 then
                address_type$="B"
            else
                address_type$="S"
            endif
            ordship_found=0
            opeOrdShip_key$=firm_id$+customer_id$+order_no$+old_inv_no$+address_type$
            extractrecord(opeOrdShip_dev,key=opeOrdShip_key$,knum="PRIMARY",dom=*next)opeOrdShip$; ordship_found=1; rem Advisory locking
            if ordship_found and opeOrdShip.trans_status$="E" then
                opeOrdShip.ar_inv_no$=inv_no$
                opeOrdShip.mod_user$=sysinfo.user_id$
                opeOrdShip.mod_date$=date(0:"%Yd%Mz%Dz")
                opeOrdShip.mod_time$=date(0:"%Hz%mz")
                opeOrdShip$=field(opeOrdShip$)
                writerecord(opeOrdShip_dev)opeOrdShip$
                remove(opeOrdShip_dev,key=opeOrdShip_key$)
            endif
        next i

        rem --- Replace opt_invdet opt-11 records
        skipNewOpe21Records$=""
        optInvDet_trip$=optInvHdr_key$
        read (optInvDet_dev, key=optInvDet_trip$,knum="AO_STAT_CUST_ORD",dom=*next)
        while 1
            optInvDet_key$=key(optInvDet_dev,end=*break)
            if pos(optInvDet_trip$=optInvDet_key$)<>1 then break
            extractrecord(optInvDet_dev)optInvDet$; rem Advisory locking
            rem --- Skip new opt_invdet opt-11 records where QTY_ORDERED=0, QTY_SHIPPED=0 and QTY_BACKORD=0, if for "M" and "O" line types.
            skipNewOpe11Record=0
            if optInvDet.qty_ordered=0 and optInvDet.qty_shipped=0 and optInvDet.qty_backord=0 then
                read record (opcLineCode_dev, key=firm_id$+optInvDet.line_code$, dom=*next)opcLineCode$
                if pos(opcLineCode.line_type$="MO")=0 then
                    skipNewOpe11Record=1
                    skipNewOpe21Records$=skipNewOpe21Records$+ope11a.internal_seq_no$+";"
                endif
            endif
            if !skipNewOpe11Record then
                rem --- Use Fulfillment item picking info
                optFillmntDet_trip$=optInvHdr_key$+optInvDet.internal_seq_no$
                read(optFillmntDet_dev,key=optFillmntDet_trip$,knum="AO_STATUS_ORDDET",dom=*next)
                while 1
                    optFillmntDet_key$=key(optFillmntDet_dev,end=*break)
                    if pos(optFillmntDet_trip$=optFillmntDet_key$)<>1 then break
                    readrecord(optFillmntDet_dev)optFillmntDet$
                    break
                wend
                rem --- Make sure this detail line is pickable
                if optFillmntDet.qty_shipped>0 then
                    read record (opcLineCode_dev, key=firm_id$+optInvDet.line_code$, dom=*next)opcLineCode$
                    if pos(opcLineCode.line_type$="MO")=0 and opcLineCode.dropship$<>"Y" then 
                        optInvDet.qty_shipped=optFillmntDet.qty_picked
                        if optInvDet.qty_shipped<=optInvDet.qty_ordered then optInvDet.qty_backord=optInvDet.qty_ordered-optInvDet.qty_shipped
                    endif
                endif
        
                optInvDet.ar_inv_no$=inv_no$
                optInvDet.mod_user$=sysinfo.user_id$
                optInvDet.mod_date$=date(0:"%Yd%Mz%Dz")
                optInvDet.mod_time$=date(0:"%Hz%mz")
                optInvDet$=field(optInvDet$)
                writerecord(optInvDet_dev)optInvDet$
            endif
           optInvDet_primary$=optInvDet.firm_id$+optInvDet.ar_type$+optInvDet.customer_id$+optInvDet.order_no$+old_inv_no$+optInvDet.internal_seq_no$
            remove(optInvDet_dev,key=optInvDet_primary$)
            read(optInvDet_dev,key=optInvDet_key$,dom=*next)
        wend

        rem --- Replace opt_invlsdet opt-21 records
        rem --- Remove any item lot/serial picking info from Order Entry
        optInvLsDet_trip$=optInvHdr_key$
        read (optInvLsDet_dev, key=optInvLsDet_trip$,knum="AO_STAT_CUST_ORD",dom=*next)
        while 1
            optInvLsDet_key$=key(optInvLsDet_dev,end=*break)
            if pos(optInvLsDet_trip$=optInvLsDet_key$)<>1 then break
            extractrecord(optInvLsDet_dev)optInvLsDet$; rem Advisory locking
            optInvLsDet_primary$=optInvLsDet.firm_id$+optInvLsDet.ar_type$+optInvLsDet.customer_id$+optInvLsDet.order_no$+old_inv_no$+optInvLsDet.orddet_seq_ref$+optInvLsDet.sequence_no$
            remove(optInvLsDet_dev,key=optInvLsDet_primary$)
            read(optInvLsDet_dev,key=optInvLsDet_key$,dom=*next)
        wend
        
        rem --- Use Fulfillment item lot/serial picking info
        optFillmntLsDet_trip$=optInvHdr_key$
        read(optFillmntLsDet_dev,key=optFillmntLsDet_trip$,knum="AO_STATUS",dom=*next)
        while 1
            optFillmntLsDet_key$=key(optFillmntLsDet_dev,end=*break)
            if pos(optFillmntLsDet_trip$=optFillmntLsDet_key$)<>1 then break
            readrecord(optFillmntLsDet_dev)optFillmntLsDet$
        
            redim optInvLsDet$
            optInvLsDet.firm_id$=optFillmntLsDet.firm_id$
            optInvLsDet.ar_type$=optFillmntLsDet.ar_type$
            optInvLsDet.customer_id$=optFillmntLsDet.customer_id$
            optInvLsDet.order_no$=optFillmntLsDet.order_no$
            optInvLsDet.ar_inv_no$=inv_no$
            optInvLsDet.orddet_seq_ref$=optFillmntLsDet.orddet_seq_ref$
            optInvLsDet.sequence_no$=optFillmntLsDet.sequence_no$
            optInvLsDet.lotser_no$=optFillmntLsDet.lotser_no$
            optInvLsDet.created_user$=sysinfo.user_id$
            optInvLsDet.created_date$=date(0:"%Yd%Mz%Dz")
            optInvLsDet.created_time$=date(0:"%Hz%mz")
            optInvLsDet.trans_status$="E"
            optInvLsDet.qty_ordered=optFillmntLsDet.qty_shipped
            optInvLsDet.qty_shipped=optFillmntLsDet.qty_picked
            optInvLsDet.unit_cost=optFillmntLsDet.unit_cost
            optInvLsDet$=field(optInvLsDet$)
            writerecord(optInvLsDet_dev)optInvLsDet$
        wend

        rem --- Replace opt_invhdr opt-01 record
        ordhdr_found=0
        extractrecord(optInvHdr_dev,key=optInvHdr_key$,knum="AO_STATUS",dom=*next)optInvHdr$; ordhdr_found=1; rem Advisory locking
        if ordhdr_found then
            rem --- Use Fulfillment header info
            redim optFillmntHdr$
            readrecord(optFillmntHdr_dev,key=optInvHdr_key$,knum="AO_STATUS",dom=*next)optFillmntHdr$
            optInvHdr.shipmnt_date$=optFillmntHdr.shipmnt_date$
            optInvHdr.ar_ship_via$=optFillmntHdr.ar_ship_via$
            optInvHdr.shipping_id$=optFillmntHdr.shipping_id$
        
            rem --- Use Carton header info
            freight_amt=0
            optCartHdr_trip$=optInvHdr_key$
            read(optCartHdr_dev,key=optCartHdr_trip$,knum="AO_STATUS",dom=*next)
            while 1
                optCartHdr_key$=key(optCartHdr_dev,end=*break)
                if pos(optCartHdr_trip$=optCartHdr_key$)<>1 then break
                readrecord(optCartHdr_dev)optCartHdr$
                freight_amt=freight_amt+optCartHdr.freight_amt
            wend
            optInvHdr.freight_amt=freight_amt
        
            optInvHdr.ar_inv_no$=inv_no$
            optInvHdr.ordinv_flag$="I"
            optInvHdr.invoice_date$=sysinfo.system_date$
            optInvHdr.print_status$="N"
            optInvHdr.lock_status$="N"
            optInvHdr.mod_user$=sysinfo.user_id$
            optInvHdr.mod_date$=date(0:"%Yd%Mz%Dz")
            optInvHdr.mod_time$=date(0:"%Hz%mz")
            optInvHdr.no_sls_tax_calc$="1"; rem --- Deferr sales tax calculation to Invoice Entry ADIS
            optInvHdr$=field(optInvHdr$)
            writerecord(optInvHdr_dev)optInvHdr$
            optInvHdr_primary$=optInvHdr.firm_id$+optInvHdr.ar_type$+optInvHdr.customer_id$+optInvHdr.order_no$+old_inv_no$
            remove(optInvHdr_dev,key=optInvHdr_primary$)
        
            rem --- Update TRANS_STATUS and AR_INV_NO in all 6 fulfillment tables
            optFillmntHdr_Primary_key$=firm_id$+ar_type$+customer_id$+order_no$+old_inv_no$
            trans_status$="U"
            ar_inv_no$=inv_no$
            gosub updateFulfillment
        
            rem --- Add to Shipment Tracking if not already there
            optCartHdr_trip$=firm_id$+"U"+ar_type$+customer_id$+order_no$+inv_no$
            read(optCartHdr_dev,key=optCartHdr_trip$,knum="AO_STATUS",dom=*next)
            while 1
                optCartHdr_key$=key(optCartHdr_dev,end=*break)
                if pos(optCartHdr_trip$=optCartHdr_key$)<>1 then break
                readrecord(optCartHdr_dev)optCartHdr$
                if cvs(optCartHdr.tracking_no$,2)="" then continue
        
                rem --- Is this carton already being tracked?
                alreadyTracked=0
                optShipTrack_trip$=firm_id$+ar_type$+customer_id$+order_no$
                read(optShipTrack_dev,key=optShipTrack_trip$,dom=*next)
                while 1
                    optShipTrack_key$=key(optShipTrack_dev,end=*break)
                    if pos(optShipTrack_trip$=optShipTrack_key$)<>1 then break
                    readrecord(optShipTrack_dev)optShipTrack$
                    if optShipTrack.tracking_no$<>optCartHdr.tracking_no$ then continue
                    alreadyTracked=1
                    break
                wend
        
                rem --- Enter Shipment Tracking info for cartons NOT already being tracked
                if !alreadyTracked then
                    ship_seq_no$=optInvHdr.ship_seq_no$
                    if cvs(ship_seq_no$,2)="" then ship_seq_no$='001'
        
                    redim optShipTrack$
                    optShipTrack.firm_id$=firm_id$
                    optShipTrack.ar_type$=ar_type$
                    optShipTrack.customer_id$=customer_id$
                    optShipTrack.order_no$=order_no$
                    optShipTrack.ship_seq_no$=ship_seq_no$
                    optShipTrack.tracking_no$=optCartHdr.tracking_no$
                    optShipTrack.void_flag$="N"
                    optShipTrack.scac_code$=optCartHdr.scac_code$
                    optShipTrack.carrier_code$=optCartHdr.carrier_code$
                    optShipTrack.create_date$=date(0:"%Yd%Mz%Dz")
                    optShipTrack.weight=optCartHdr.weight
                    optShipTrack.cust_freight_amt=optCartHdr.freight_amt
                    optShipTrack.act_freight_amt=optCartHdr.freight_amt
                    optShipTrack$=field(optShipTrack$)
                    writerecord(optShipTrack_dev)optShipTrack$
                endif
            wend
            
            rem --- NOTE: Tax calculation is updated in Invoice Entry
        endif

rem --- NOTE: Do NOT update OPE_PRNTLIST (ope-04) so Invoice cannot be printed for pushed Order without it first going through Invoice Entry.
rem --- NOTE: Forcing pushed Order through Invoice Entry also takes care of updating the tax calculation.
    wend

rem --- Done
    goto std_exit

rem ==========================================================================
updateFulfillment: rem ---  Update TRANS_STATUS and AR_INV_NO in all 6 fulfillment tables
rem IN: optFillmntHdr_Primary_key$
rem IN: trans_status$
rem IN: ar_inv_no$
rem OUT: - none -
rem ==========================================================================
    rem --- OPT_CARTLSDET
    optCartLsDet_trip$=optFillmntHdr_Primary_key$
    read(optCartLsDet_dev,key=optCartLsDet_trip$,knum="PRIMARY",dom=*next)
    while 1
        optCartLsDet_key$=key(optCartLsDet_dev,end=*break)
        if pos(optCartLsDet_trip$=optCartLsDet_key$)<>1 then break
        readrecord(optCartLsDet_dev)optCartLsDet$
        optCartLsDet.ar_inv_no$=ar_inv_no$
        optCartLsDet.trans_status$=trans_status$
        optCartLsDet.mod_user$=sysinfo.user_id$
        optCartLsDet.mod_date$=date(0:"%Yd%Mz%Dz")
        optCartLsDet.mod_time$=date(0:"%Hz%mz")
        optCartLsDet$=field(optCartLsDet$)
        writerecord(optCartLsDet_dev)optCartLsDet$
        remove(optCartLsDet_dev,key=optCartLsDet_key$)
    wend

    rem --- OPT_FILLMNTLSDET
    optFillmntLsDet_trip$=optFillmntHdr_Primary_key$
    read(optFillmntLsDet_dev,key=optFillmntLsDet_trip$,knum="PRIMARY",dom=*next)
    while 1
        optFillmntLsDet_key$=key(optFillmntLsDet_dev,end=*break)
        if pos(optFillmntLsDet_trip$=optFillmntLsDet_key$)<>1 then break
        readrecord(optFillmntLsDet_dev)optFillmntLsDet$
        optFillmntLsDet.ar_inv_no$=ar_inv_no$
        optFillmntLsDet.trans_status$=trans_status$
        optFillmntLsDet.mod_user$=sysinfo.user_id$
        optFillmntLsDet.mod_date$=date(0:"%Yd%Mz%Dz")
        optFillmntLsDet.mod_time$=date(0:"%Hz%mz")
        optFillmntLsDet$=field(optFillmntLsDet$)
        writerecord(optFillmntLsDet_dev)optFillmntLsDet$
        remove(optFillmntLsDet_dev,key=optFillmntLsDet_key$)
    wend

    rem --- OPT_CARTDET
    optCartDet_trip$=optFillmntHdr_Primary_key$
    read(optCartDet_dev,key=optCartDet_trip$,knum="PRIMARY",dom=*next)
    while 1
        optCartDet_key$=key(optCartDet_dev,end=*break)
        if pos(optCartDet_trip$=optCartDet_key$)<>1 then break
        readrecord(optCartDet_dev)optCartDet$
        optCartDet.ar_inv_no$=ar_inv_no$
        optCartDet.trans_status$=trans_status$
        optCartDet.mod_user$=sysinfo.user_id$
        optCartDet.mod_date$=date(0:"%Yd%Mz%Dz")
        optCartDet.mod_time$=date(0:"%Hz%mz")
        optCartDet$=field(optCartDet$)
        writerecord(optCartDet_dev)optCartDet$
        remove(optCartDet_dev,key=optCartDet_key$)
    wend

    rem --- OPT_FILLMNTDET
    optFillmntDet_trip$=optFillmntHdr_Primary_key$
    read(optFillmntDet_dev,key=optFillmntDet_trip$,knum="PRIMARY",dom=*next)
    while 1
        optFillmntDet_key$=key(optFillmntDet_dev,end=*break)
        if pos(optFillmntDet_trip$=optFillmntDet_key$)<>1 then break
        readrecord(optFillmntDet_dev)optFillmntDet$
        optFillmntDet.ar_inv_no$=ar_inv_no$
        optFillmntDet.trans_status$=trans_status$
        optFillmntDet.mod_user$=sysinfo.user_id$
        optFillmntDet.mod_date$=date(0:"%Yd%Mz%Dz")
        optFillmntDet.mod_time$=date(0:"%Hz%mz")
        optFillmntDet$=field(optFillmntDet$)
        writerecord(optFillmntDet_dev)optFillmntDet$
        remove(optFillmntDet_dev,key=optFillmntDet_key$)
    wend

    rem --- OPT_CARTHDR
    optCartHdr_trip$=optFillmntHdr_Primary_key$
    read(optCartHdr_dev,key=optCartHdr_trip$,knum="PRIMARY",dom=*next)
    while 1
        optCartHdr_key$=key(optCartHdr_dev,end=*break)
        if pos(optCartHdr_trip$=optCartHdr_key$)<>1 then break
        readrecord(optCartHdr_dev)optCartHdr$
        optCartHdr.ar_inv_no$=ar_inv_no$
        optCartHdr.trans_status$=trans_status$
        optCartHdr.mod_user$=sysinfo.user_id$
        optCartHdr.mod_date$=date(0:"%Yd%Mz%Dz")
        optCartHdr.mod_time$=date(0:"%Hz%mz")
        optCartHdr$=field(optCartHdr$)
        writerecord(optCartHdr_dev)optCartHdr$
        remove(optCartHdr_dev,key=optCartHdr_key$)
    wend

    rem --- OPT_FILLMNTHDR
    readrecord(optFillmntHdr_dev,key=optFillmntHdr_Primary_key$,knum="PRIMARY")optFillmntHdr$
    optFillmntHdr.ar_inv_no$=ar_inv_no$
    optFillmntHdr.trans_status$=trans_status$
    optFillmntHdr.mod_user$=sysinfo.user_id$
    optFillmntHdr.mod_date$=date(0:"%Yd%Mz%Dz")
    optFillmntHdr.mod_time$=date(0:"%Hz%mz")
    optFillmntHdr$=field(optFillmntHdr$)
    writerecord(optFillmntHdr_dev)optFillmntHdr$
    remove(optFillmntHdr_dev,key=optFillmntHdr_Primary_key$)

    return

disp_message: rem --- Display Message Dialog

    call sypdir$+"bac_message.bbj",
:       msg_id$,
:       msg_tokens$[all],
:       msg_opt$,
:       table_chans$[all]

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:      else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update: 
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end

