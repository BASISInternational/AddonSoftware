rem --- Sales Register (Cash Sales)
rem --- Program opr_hb v8.0.0 16Jul2007 (opr_hb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 01:05:59)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$


rem --- Assign form input values to local variables

    table$=fnget_table$("")
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    Sequence$=fnget_fld_data$(table$,"Sequence")   
    Phace$=fnget_fld_data$(table$,"Phace")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initialize Data

    precision 4
    dim d[1],r[2,1]
    l=l9+1
    headings$[3]="Cash Receipts Summary"
    t0$=""
    t9$=""

rem --- Background

  rem  if p3$(15,1)="N" goto Call_Prog

       if p3$(15,1)<>"N" then

            rem --- PRINT @(40,5),"Sorting Cash Sales",'CL',@(0,10),'CL',@(0,11),'CL',@(0,12),'CL',

                call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
                call pgmdir$+"adc_progress.aon","N","","","","",m0+8,0,1,meter_num,status

rem --- Sort Cash

                read (ope41_dev,key=firm_id$,dom=*next)


           while more

                    read record (ope41_dev,end=*break) ope41a$
                    if pos(firm_id$=ope41a.FIRM_ID$)<>1 break
                    find record (ope01_dev,key=ope41a.FIRM_ID$+ope41a.AR_TYPE$+ope41a.CUSTOMER_ID$+ope41a.ORDER_NO$+"000",dom=*continue) ope01a$
                    if ope01a.PRINT_STATUS$+ope01a.LOCK_STATUS$<>"YS" continue

rem --- Write Record

rem                 if seq$="C" call pgmdir$+"adc_progress.aon","S","","","",fnmask$(ope41a.CUSTOMER_ID$,p[0],m0$)+""+ope41a.AR_INV_NO$,0,0,1,meter_num,status
rem                 if seq$="I" call pgmdir$+"adc_progress.aon","S","","","",ope41a.AR_INV_NO$+" "+fnmask$(ope41a.CUSTOMER_ID$,p[0],m0$),0,0,1,meter_num,status
                    if seq$="C" call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                    if seq$="I" call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                    x0$=ope41a.FIRM_ID$+ope41a.AR_TYPE$+ope41a.INVOICE_DATE$+ope41a.AR_INV_NO$+ope41a.CUSTOMER_ID$+ope41a.ORDER_NO$
                    if seq$="C" x0$(8,7)=""
                    write record (opw41_dev,key=x0$) opw41a$

          wend

          

rem --- PRINT @(40,5),"Printing Cash Sales",'CL',@(0,10),'CL',@(0,11),'CL',@(0,12),'CL',

                call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
                call pgmdir$+"adc_progress.aon","CN","","","Printing Cash Sales","",m0+17,ope41_dev,1,meter_num,status
                read (opw41_dev,key=firm_id$,dom=*next)

        while more

rem                              k$=key(opw41_dev,end=done)
                        opw41a_key$=key(opw41_dev,end=*break)
                        if pos(firm_id$=opw41a_key$)<>1 break
                        read (opw41_dev)

rem --- Breaks
rem                     if k$(5,3)<>t0$ i=0; gosub l6000

                        if opw41a_key.INVOICE_DATE$<>t0$ i=0; gosub Date_Break
                        find record (ope41_dev,key=opw41a_key.FIRM_ID$+opw41a_key.AR_TYPE$+opw41a_key.CUSTOMER_ID$,dom=*continue) ope41a$
rem                     dim x1$(30)
                        find record (arm10_dev,key=firm_id$+"C"+ope41a.CASH_REC_CD$,dom=*next) arm10c$

rem --- Get Customer

                        find record (arm01_dev,key=firm_id$+ope41a.CUSTOMER_ID$,dom=Check_Value1) arm01a$
rem                     b1$=b1$(1,30)
        Check_Value1:
                        if p3$(15,1)="Y" if ope41a.CUSTOMER_ID$=p3$(16,6) if cvs(d1$,2)<>"" arm01a.CUSTOMER_NAME$=d1$

rem --- Print

rem                        call pgmdir$+"adc_progress.aon","S","","","",fndate$(t0$)+" "+fnmask$(ope41a.CUSTOMER_ID$,m0$)+" "+ope41a.AR_INV_NO$,0,0,1,meter_num,status
                           call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                        if l+1>l9 gosub report_heading
                        print (printer_dev)fnmask$(ope41a.CUSTOMER_ID$,m0$),
:                                                                   @(8),arm01a.CUSTOMER_NAME$,
:                                                                   @(40),ope41a.AR_INV_NO$,
:                                                                   @(49),fndate$(ope41a.INVOICE_DATE$),
:                                                                   @(60),ope41a.CASH_REC_CD$,
                        if arm10c.TRANS_TYPE$="P" print (printer_dev)
:                                                                   @(64),ope41a.PAYMENT_ID$,
:                                                                   @(81),fndate$(ope41a.EXPIRE_DATE$),
:                                                                   @(90),d[0]:m1$; break
                        print (printer_dev)
:                                                                   @(104),ope41a.PAYMENT_ID$,
:                                                                   @(120),d[0]:m1$


                        l=l+1

rem --- Totals

                        for i=0 to 1
                            if arm10c.TRANS_TYPE$="$" r[0,i]=r[0,i]+ope41a.INVOICE_AMT
                            if arm10c.TRANS_TYPE$="C" r[1,i]=r[1,i]+ope41a.INVOICE_AMT
                            if arm10c.TRANS_TYPE$="P" r[2,i]=r[2,i]+ope41a.INVOICE_AMT
                        next i

        wend


rem --- Totals
        

                        t9$="E"
                        for i=0 to 1
                            gosub Date_Break
                        next i

    endif




                        run pgmdir$+"opr_hc.bbx"

rem --- Report Heading

report_heading:

                        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
                        if status exitto std_exit
                        l=headings+1
                        print (printer_dev)""
                        print (printer_dev)"Customer",
:                                                       @(40),"Invoice",
:                                                       @(49),"Invoice",
:                                                       @(59),"Pay",
:                                                       @(67),"***  Credit Card Deposit  ***",
:                                                       @(106),"***  Cash Deposit  ***"
                        print (printer_dev)
:                                                       @(0),"No.     Name",
:                                                       @(40),"Number",
:                                                       @(51),"Date",
:                                                       @(59),"Type",
:                                                       @(66),"Number",
:                                                       @(84),"Exp",
:                                                       @(93),"Amount",
:                                                       @(103),"Memo",
:                                                       @(125),"Amount"
                        l=l+3

                        return

rem --- Date Break

Date_Break: 

                        if t0$<>"" then
                                x$="Total For "+fndate$(t0$)
                                if i=1 x$="Total All Cash Receipts"
                                if l+4>l9 gosub report_heading
                                print (printer_dev)
:                                                   @(90),fill(m1,"-"),
:                                                   @(120),fill(m1,"-"),'LF',
:                                                   @(39),x$,@(66),"Credit Cards:",
:                                                   @(90),r[2,i]:m1$,
:                                                   @(103),"Cash:",
:                                                   @(120),r[0,i]:m1$,'LF',
:                                                   @(103),"Checks:",
:                                                   @(120),r[1,i]:m1$,'LF'
                                l=l+4

                        endif

                        if t9$<>"" return
                        t0$=k$(5,3)
                        for x=0 to 2
                            for y=0 to i
                                r[x,y]=0
                            next y
                        next x

                        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem  --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time  handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end

