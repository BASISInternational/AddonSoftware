rem --- INVOICE HISTORY REPORT
rem --- Program opr_ka v8.0.0 09Jul2007 (opr_ka)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:28:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0458)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0154)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0160)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0173)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0174)
rem --- v7.x Administrator reference ["sys-01"] (Line 0185)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0197)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0205)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0211)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0212)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0237)
rem --- BBx reference ["syc_ra.bbx"] (Line 0237)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0259)
rem --- BBx reference ["syc_lc.bbx"] (Line 0259)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0263)
rem --- BBx reference ["syc_rs.bbx"] (Line 0263)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0266)
rem --- BBx reference ["syc_rs.bbx"] (Line 0266)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0267)
rem --- BBx reference ["syc_rs.bbx"] (Line 0267)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0288)
rem --- BBx reference ["syc_lc.bbx"] (Line 0288)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0292)
rem --- BBx reference ["syc_rs.bbx"] (Line 0292)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0296)
rem --- BBx reference ["syc_rs.bbx"] (Line 0296)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0297)
rem --- BBx reference ["syc_rs.bbx"] (Line 0297)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0319)
rem --- BBx reference ["syc_rs.bbx"] (Line 0319)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0323)
rem --- BBx reference ["syc_rs.bbx"] (Line 0323)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0343)
rem --- BBx reference ["syc_rs.bbx"] (Line 0343)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0348)
rem --- BBx reference ["syc_rs.bbx"] (Line 0348)
rem --- v7.x Administrator reference ["syc_lk.bbx"] (Line 0378)
rem --- BBx reference ["syc_lk.bbx"] (Line 0378)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0383)
rem --- BBx reference ["syc_rs.bbx"] (Line 0383)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0387)
rem --- BBx reference ["syc_rs.bbx"] (Line 0387)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0388)
rem --- BBx reference ["syc_rs.bbx"] (Line 0388)
rem --- v7.x Administrator reference ["syc_li.bbx"] (Line 0408)
rem --- BBx reference ["syc_li.bbx"] (Line 0408)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0412)
rem --- BBx reference ["syc_rs.bbx"] (Line 0412)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0417)
rem --- BBx reference ["syc_rs.bbx"] (Line 0417)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0441)
rem --- BBx reference ["syc_rs.bbx"] (Line 0441)
rem --- BBx reference ["opr_kb.bbx"] (Line 0472)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0486)
rem --- BBx reference ["syc_rs.bbx"] (Line 0486)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0487)
rem --- BBx reference ["syc_rs.bbx"] (Line 0487)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0494)
rem --- BBx reference ["syc_rs.bbx"] (Line 0494)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- arm01a: iolist *,x0$
rem --- arm10f: iolist x2$

rem --- The following channel references have been identified:

rem --- arm02a: Channel reference (Line 0209)

rem --------------------------------------------------------------------------------
rem --- ars01a: (Generated by CodePort)
rem --- ivm01a: Channel reference (Line 0207)
rem --- ivm10a: Channel reference (Line 0206)
rem --- ivs01a: (Generated by CodePort)
rem --- opm02a: Channel reference (Line 0204)
rem --- opt01a: Channel reference (Line 0202)
rem --- opt11a: Channel reference (Line 0202)
rem --- opt21a: Channel reference (Line 0201)
rem --- sys01a: Channel reference (Line 0200)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-02"
    files$[4]="arm-10"
    files$[5]="ivm-01"
    files$[6]="ivm-10"
    files$[7]="opm-02"
    files$[8]="opt-01"
    files$[9]="opt-11"
    files$[10]="opt-21"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm10_dev=channels[4]
    ivm01_dev=channels[5]
    ivm10_dev=channels[6]
    opm02_dev=channels[7]
    opt01_dev=channels[8]
    opt11_dev=channels[9]
    opt21_dev=channels[10]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm02a$:templates$[3],arm10a$:templates$[4],
:       ivm01a$:templates$[5],ivm10a$:templates$[6],opm02a$:templates$[7],
:       opt01a$:templates$[8],opt11a$:templates$[9],opt21a$:templates$[10]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=10
    dim files$[files],options$[files],channels[files]
    files$[1]="opt-01"
    files$[2]="opt-11"
    files$[3]="arm-01"
    files$[4]="ivm-01"
    files$[5]="opt-21"
    files$[6]="sys-01"
    files$[7]="arm-02"
    files$[8]="ivm-10"
    files$[9]="arm-10"
    files$[10]="opm-02"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    opt01_dev=channels[1]
    opt11_dev=channels[2]
    arm01_dev=channels[3]
    ivm01_dev=channels[4]
    opt21_dev=channels[5]
    sys01_dev=channels[6]
    arm02_dev=channels[7]
    ivm10_dev=channels[8]
    arm10_dev=channels[9]
    opm02_dev=channels[10]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    n9$=firm_id$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (sys01_dev,key=n9$+"IV00",dom=std_missing_params) ivs01a$
    dim p[2],i[4]
    for x=0 to 3
        i[x]=num(i2$(x*2+1,2))
    next x
    i[0]=num(i2$(1,2))
    p[1]=num(p2$(3,2))
    p[2]=num(p3$(4,1))
    p[0]=num(p2$(1,2))

rem --- Initialize Data

    h0=0
    number=1
    l9=30
    l=0
    dim j$(80,"-"),j1$(40," ")
    dim a[5],w[7]
    m0=len(m0$)

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    goto start_done

rem --- Print Options

l1000: rem --- Beginning Customer

    v0$="M"
    v1$="CE"
    v2$=s0$
    v3$=m0$
    v4$="Enter A Valid Customer Number(<F1>=First/<F3>=Lookup)"
    v0=6
    v1=40
    v2=3
    i0=0
    control_id=3000
    if s0$<>"" v2$=s0$(1,p[0])
    gosub std_input
    on v3 goto l1045,l1050,flow_control,l1040,flow_control,l1045,flow_control
l1040:
    call pgmdir$+"syc_lc.bbx",v$
l1045:
    if v$<>"" goto l1060
l1050:
    gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13000,"First",0,"",status; let s0$=""; goto l1090
l1060:
    find record (arm01_dev,key=firm_id$+v$,dom=l1000) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3000,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,x0$(1,30),0,"",status
    h4$=fnmask$(v$(1,p[0]),m0$)
    s0$=v$
l1090:
    goto flow_control

l1200: rem --- Ending Customer

    v0$="M"
    v1$="CE"
    v2$=s1$
    v3$=m0$
    v4$="Enter A Valid Customer Number(<F1>=Last/<F3>=Lookup)"
    v0=6
    v1=40
    v2=4
    control_id=3001
    if s1$<>"" v2$=s1$(1,p[0])
    gosub std_input
    on v3 goto l1235,l1240,flow_control,l1230,flow_control,l1235,flow_control
l1230:
    call pgmdir$+"syc_lc.bbx",v$
l1235:
    if v$<>"" goto l1255
l1240:
    gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13001,"Last",0,"",status; let s1$=""; goto l1290
l1255:
    if v$<s0$ goto l1200
    find record (arm01_dev,key=firm_id$+v$,dom=l1200) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3001,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13001,x0$(1,30),0,"",status
    h5$=fnmask$(v$(1,p[0]),m0$)
    s1$=v$
l1290:
    goto flow_control

l1400: rem --- Begining Invoice Date

    v0$="D"
    v1$="C"
    v2$=s2$
    v3$=""
    v4$="<F1>=First"
    v0=7
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l1437,l1440,flow_control,l1400,flow_control,l1437,flow_control
l1437:
    if v$<>"" goto l1460
l1440:
    gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13002,"First",0,"",status; let s2$=""; goto l1490
l1460:
    s2$=v$
    h6$=fndate$(v$)
    call pgmdir$+"syc_rs.bbx","",my_context,3002,h6$,0,"",status
l1490:
    goto flow_control

l1600: rem --- Ending Invoice Date

    v0$="D"
    v1$="C"
    v2$=s3$
    v3$=""
    v4$="<F1>=Last"
    v0=7
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1637,l1640,flow_control,l1600,flow_control,l1637,flow_control
l1637:
    if v$<>"" goto l1650
l1640:
    gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13003,"Last",0,"",status; let s3$=""; goto l1690
l1650:
    if v$<s2$ goto l1600
    s3$=v$
    h7$=fndate$(v$)
    call pgmdir$+"syc_rs.bbx","",my_context,3003,h7$,0,"",status
l1690:
    goto flow_control

l1800: rem --- Salesperson

    dim description$[number],field[number],position[number],length[number]
    description$[0]="Code"
    field[0]=1
    position[0]=4
    length[0]=3
    description$[1]="Name"
    field[1]=1
    position[1]=7
    length[1]=20
    column=79-length[0]-length[1]-2-number*4
    record$="F"
    title$="Salesperson Lookup"
    v0$="S"
    v1$="C"
    v2$=s4$
    v3$=""
    v4$="Enter A Valid Salesperson Code (<F1>=All/<F3>=Lookup)"
    v0=3
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l1850,l1845,flow_control,l1838,flow_control,l1850,flow_control
l1838:
    call pgmdir$+"syc_lk.bbx",arm10_dev,record$,number,title$,description$[all],field[all],position[all],length[all],column,row,v$
    if v$<>"" goto l1850
l1845:
    v$=""
l1850:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13004,"All",0,"",status; goto l1880
    v$=v$+"   "
    v$=v$(1,3)
    find record (arm10_dev,key=firm_id$+"F"+v$,dom=l1800) arm10f$
    call pgmdir$+"syc_rs.bbx","",my_context,3004,x2$(position[0],length[0]),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13004,x2$(7,20),0,"",status
    h8$=v$
l1880:
    s4$=v$
    goto flow_control

l2000: rem --- Selected Item

    v0$="S"
    v1$="C"
    v2$=s5$
    v3$=""
    v4$="Enter An Item To Be Searched  (<F1>=Include All/<F3>=Lookup)"
    v0=i[0]
    v1=40
    v2=8
    control_id=3005
    gosub std_input
    on v3 goto l2055,l2060,flow_control,l2045,flow_control,l2055,flow_control
l2045:
    call pgmdir$+"syc_li.bbx",v$; if v3=4 goto l2000 else print @(v1,v2),v$,
l2055:
    if v$<>"" goto l2070
l2060:
    gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13005,"All",0,"",status; let s5$=""; goto l2090
l2070:
    v$=v$+j1$(1,i[0])
    v$=v$(1,i[0])
    s5$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3005,s5$,0,"",status
    if s5$<>"" h9$=s5$
l2090:
    goto flow_control

l2200: rem --- Below Minimum GP%

    v0$="S"
    v1$="C"
    v2$=s6$
    v3$=""
    v4$="Enter The Minimum Gross Profit Percentage (<F1>=100)"
    v0=7
    v1=40
    v2=9
    control_id=3006
    gosub std_input
    on v3 goto l2250,l2245,flow_control,l2200,flow_control,l2250,flow_control
l2245:
    v$=""
l2250:
    if v$="" v$="100"
    s6=num(v$,err=l2200)
    s6$=str(s6:"-###.00%")
    call pgmdir$+"syc_rs.bbx","",my_context,3006,s6$,0,"",status
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l1800,l2000,l2200,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    let v0$="S",v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    run pgmdir$+"opr_kb.bbx"
display_fields:
    let control_id=3000,cid_cnt=0
l5006:
    find record (arm01_dev,key=firm_id$+s0$,dom=*next) arm01a$
    if cid_cnt=0 if s0$="" disp_inp$="",disp_desc$="First" else disp_inp$=fnmask$(s0$,m0$),disp_desc$=x0$(1,30)
    find record (arm01_dev,key=firm_id$+s1$,dom=*next) arm01a$
    if cid_cnt=1 if s1$="" disp_inp$="",disp_desc$="Last" else disp_inp$=fnmask$(s1$,m0$),disp_desc$=x0$(1,30)
    if cid_cnt=2 if s2$="" disp_inp$="",disp_desc$="First" else disp_inp$=fndate$(s2$),disp_desc$=""
    if cid_cnt=3 if s3$="" disp_inp$="",disp_desc$="Last" else disp_inp$=fndate$(s3$),disp_desc$=""
    find record (arm10_dev,key=firm_id$+"F"+s4$,dom=*next) arm10f$
    if cid_cnt=4 if s4$="" disp_inp$="",disp_desc$="All" else disp_inp$=s4$,disp_desc$=x2$(7,20)
    if cid_cnt=5 if s5$="" disp_inp$=s5$,disp_desc$="All" else disp_inp$=s5$,disp_desc$=""
    if cid_cnt=6 if s6$="" disp_inp$="100.00",disp_desc$="" else disp_inp$=s6$,disp_desc$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5006
l5050:
    let disp_inp$="",disp_desc$=""
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    if pos("E"=cvs(q1$,4)) goto *next else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
