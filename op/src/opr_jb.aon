rem --- Invoice Edit Report
rem --- Program opr_jb v8.0.0 25Jan2008 (opr_jb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/25/2008 03:03:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
       
rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open Printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Initialize Data

        more=1
        precision i[1]
        dim j$(h0,"-"),j1$(30," "),j2$(h0,"=")
        rem dim a0$(200),a[13],w1$(64),w[17],lf_item$[10],lf_channels[10]
        dim lf_item$[10],lf_channels[10]
        dim o[4],r[3,4],s[2],t[4],t9[100,3],u[3]
        ord=0
        ship=0,bo=0,l9=50,l=l9+1,h=0,nf$="(Not On File)"
        m8$="##0.00-"
        m9$="###.0%",clock$="",when$=sysinfo.system_date$
        m1=len(ars01a.amount_mask$)
        m2=len(ars01a.unit_mask$)
        m3=len(ars01a.rate_mask$)
        m8=len(m8$)
        m9=len(m9$)
        r9$="SPN"
        x2$="",h8$=x1$,h9$="Invoiced By: "+h9$
        if ivs01a.lotser_flag$="S" then let x2$="Ser#"
        if ivs01a.lotser_flag$="L" then let x2$="Lot#"
        if s0$="" then let h4$="First"
        if s1$="" then let h5$="Last"
        if s2$="" then let h6$="First"
        if s3$="" then let h7$="Last"

        While more
            if m2*3+m3*2+m1*3+27+i[0]<132 then break
            call pgmdir$+"adc_sizemask.aon",ars01a.amount_mask$,m1,max(10,m1-1),max(10,m1-1)
            call pgmdir$+"adc_sizemask.aon",ars01a.unit_mask$,m2,max(10,m2-1),max(10,m2-1)
            call pgmdir$+"adc_sizemask.aon",ars01a.rate_mask$,m3,max(10,m3-1),max(10,m3-1)
        Wend

rem --- Headings

        headings=5
        dim headings$[5],x0$(h0),x1$(h0)
        headings$[0]=n1$
        headings$[1]=n4$,rt$="Report Totals"
        x0$(1)="Beginning Customer: "+h4$
        x0$(fncenter(h8$,h0))=h8$
        x0$(h0-26)="Beginning Order #: "+h6$
        x1$(1)="   Ending Customer: "+h5$
        x1$(fncenter(h9$,h0))=h9$
        x1$(h0-26)="   Ending Order #: "+h7$
        headings$[3]=x0$
        headings$[4]=x1$

    rem --- Print positions

        lw=m1*3+m3*2+m2*3+m8+m9
        o[0]=h0-m1*3-m3*2,o[1]=h0-m1*3-m3-m8

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,ape01_dev,1,meter_num,status

rem --- Initial Read

        read (ope01_dev,key=firm_id$+"  "+s0$+s2$,dom=*next)

rem --- retrieve template for OPE_ORDHDR record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDHDR","PRIMARY",ope01a_key_tpl$,table_chans$[all],status$
        dim ope01a_key$:ope01a_key_tpl$

rem --- retrieve template for OPE_ORDDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","PRIMARY",ope11a_key_tpl$,table_chans$[all],status$
        dim ope11a_key$:ope11a_key_tpl$

rem --- retrieve template for OPE_ORDLSDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDLSDET","PRIMARY",ope21a_key_tpl$,table_chans$[all],status$
        dim ope21a_key$:ope21a_key_tpl$



rem --- Main Loop Starts
While more
        ope01a_key$=key(ope01_dev,end=done)
        if pos(firm_id$+"  "=ope01a_key$)<>1 then break
        if s1$<>"" and ope01a_key.firm_id$+ope01a_key.ar_type$+ope01a_key.customer_id$>firm_id$+"  "+s1$ then break
        if s3$<>"" and ope01a_key.order_no$>s3$ then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read record (ope01_dev,key=ope01a_key$) ope01a$
        if ope01a.ordinv_flag$<>"I" or ope01a.ar_inv_no$=j1$(1,7) then continue
        if s5$<>"" and ope01a.ord_taken_by$<>s5$ then continue
        if s6$<>"A" then
            if s6$="P" and ope01a.print_status$<>"Y" then continue
            if s6$="U" and ope01a.print_status$="Y" then continue
        endif

rem --- Heading

        if ope01a.invoice_type$="V" then

rem --- Void

            if l>l9 then gosub report_heading
            gosub Find_Customer
            print (printer_dev)""
            print (printer_dev)fnmask$(ope01a.customer_id$(1,p[0]),ars01a.customer_output$),@(8),arm01a.customer_name$,
:                              @(40),ope01a.order_no$,@(48),ope01a.ar_inv_no$,
:                              @(57),fndate$(ope01a.invoice_date$),@(66),ope01a.ord_taken_by$,
:                              @(70),ope01a.slspsn_code$,@(74),"(Void)"
            l=l+2
            continue

        endif

    rem --- Print

        gosub Find_Customer
        gosub Order_Header

    rem --- Detail

        read (ope11_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=*next)


        While more
            ope11a_key$=key(ope11_dev,end=*break)
            if ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$<>ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$ then break
            read record (ope11_dev) ope11a$
            desc$=ope11a.order_memo$
            rem dim x0$(32)
            find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$
            if pos(opm02a.line_type$="SP")<>0 then
                rem dim d1$(60),d2$(62),d[20]
                find record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=Label_One) ivm01a$
                if opm02a.dropship$<>"Y" or ars10a.dropshp_cost$<>"Y" then
                    if cvs(desc$,2)="" then let desc$=fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])
                    find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=Label_One) ivm02a$
                    if ivm02a.unit_cost<>0 then let ope11a.unit_cost=ivm02a.unit_cost
                    if ivs01a.lifofifo$<>"N" then
                        gosub Lifo_Fifo
                        ope11a.unit_cost=ret_cost
                    endif
                endif
            endif
Label_One:
            gosub Print_Detail
            s[0]=s[0]+ope11a.ext_prince
            s[1]=s[1]+ope11a.unit_cost*ope11a.qty_shipped
            s[2]=s[2]+ope11a.comm_percent
            s0=s0+1
            u[0]=u[0]+ope11a.ext_price
            u[1]=u[1]+ope11a.unit_cost*ope11a.qty_shipped
            u[2]=u[2]+ope11a.comm_percent
            ord=ord+ope11a.qty_ordered
            bo=bo+ope11a.qty_backord
            ship=ship+ope11a.qty_shipped
            r9=0
            r9=pos(opm02a.line_type$=r9$)
            if r9<>0 then
                x=r9-1
                r[x,0]=r[x,0]+ope11a.ext_price
                r[x,1]=r[x,1]+ope11a.unit_cost*ope11a.qty_shipped
                r[x,2]=r[x,2]+ope11a.qty_ordered
                r[x,3]=r[x,3]+ope11a.qty_backord
                r[x,4]=r[x,4]+ope11a.qty_shipped
            endif

            if opm02a.line_type$="O" then let r[3,0]=r[3,0]+ope11a.ext_price
            if opm02a.prod_type_pr$="N" then continue
            if pos(ope11a.product_type$=t9$,3)=0 then let t9$=t9$+ope11a.product_type$
            x=pos(ope11a.product_type$=t9$,3)
            x=int(x/3)
            t9[x,0]=t9[x,0]+ope11a.ext_price
            t9[x,1]=t9[x,1]+ope11a.unit_cost*ope11a.qty_shipped
            t9[x,2]=t9[x,2]+ope11a.comm_percent
            t9[x,3]=t9[x,3]+ope11a.qty_shipped
        Wend

rem --- Invioce Totals

        gosub Sales_Total
        dim s[2]
        s0=0
        ord=0,bo=0,ship=0
Wend
rem --- Main Loop Ends


done: rem --- Totals

        precision 2
        e9$="E"
        if l+7>l9 or s4$="Y" then gosub report_heading
        print (printer_dev)""
        print (printer_dev)@(o[0]-m2*3-m8-m9),j2$(1,lw)
        print (printer_dev)rt$,@(o[0]-m2*3-m8-m9),ordt:ars01a.unit_mask$,@(o[0]-m2*2-m8-m9),bot:ars01a.unit_mask$,
:                              @(o[0]-m2-m8-m9),shipt:ars01a.unit_mask$,@(o[0]-m8-4),"Sales Total: ",
:                              @(o[1]),u[0]:ars01a.amount_mask$,@(132-m1*2-m8),u[1]:ars01a.amount_mask$,@(132-m1-m8),u[0]-u[1]:ars01a.amount_mask$,
:                              @(132-m8),sgn(fnd(u[0]-u[1],u[0]))*min(999.99,abs(fnd(u[0]-u[1],u[0]))):m8$
        print (printer_dev)@(o[0]-m8-7),"Sales Discount",@(o[1]),-t[2]:ars01a.amount_mask$
        print (printer_dev)@(o[0]-m8),"Freight",@(o[1]),t[1]:ars01a.amount_mask$
        print (printer_dev)@(o[0]-m8-2),"Sales Tax",@(o[1]),t[4]:ars01a.amount_mask$
        print (printer_dev)@(o[1]),j$(1,m1)
        print (printer_dev)u2:"###0"," Total Invoices",@(o[0]-m8-5),rt$,@(o[1]),u[0]+t[1]-t[2]+t[4]:ars01a.amount_mask$
        l=l+8

rem --- Totals By Product

        dim t[3]
        if int(len(t9$)/3)+7+l>l9 then gosub report_heading
        print (printer_dev)""
        print (printer_dev)"Product Type Totals"
        print (printer_dev)""
        print (printer_dev)"Product",@(30+m2-6),"Units",@(30+m2+m1-6),"Sales",@(30+m2+m1*2-5),"Cost",
:                                    @(30+m2+m1*3-6),"G.P.",@(30+m2+m1*4-7),"  GP %",'lf',

        if len(t9$)<>0 then
            for x=1 to len(t9$) step 3
                x0=int(x/3)
                rem dim x0$(32)
                ivm10a.code_desc$=nf$
                find record (ivm10_dev,key=firm_id$+"A"+t9$(x,3),dom=*next) ivm10a$
                if t9[x0,0]=0 and t9[x0,1]=0 then continue
                print (printer_dev)t9$(x,3)," ",ivm10a.code_desc$,@(30),t9[x0,3]:ars01a.unit_mask$,t9[x0,0]:ars01a.amount_mask$,
:                                  t9[x0,1]:ars01a.amount_mask$,t9[x0,0]-t9[x0,1]:ars01a.amount_mask$,fnd(t9[x0,0]-t9[x0,1],
:                                  t9[x0,0]):ars01a.amount_mask$
                t[0]=t[0]+t9[x0,0]
                t[1]=t[1]+t9[x0,1]
                t[2]=t[2]+t9[x0,2]
                t[3]=t[3]+t9[x0,3]
                l=l+1
            next x
        endif

        print (printer_dev)@(30),j$(1,m2+m1*4)
        print (printer_dev)rt$,@(30),t[3]:ars01a.unit_mask$,t[0]:ars01a.amount_mask$,t[1]:ars01a.amount_mask$,t[0]-t[1]:ars01a.amount_mask$,fnd(t[0]-t[1],t[0]):ars01a.amount_mask$
        l=l+2

rem --- Total By Line Type

        if l+9>l9 then gosub report_heading
        dim t[1]
        print (printer_dev)""
        print (printer_dev)"Line Type Total",'lf','lf',@(0),"Description",@(29),"Ord",@(39),"B/O",
:                           @(48),"Ship",@(61),"Sales",@(75),"Cost",'lf'

        if r[0,0]<>0 or r[0,1]<>0 or r[0,2]<>0 or r[0,3]<>0 or r[0,4]<>0 then
            print (printer_dev)@(0),"Standard Items",@(33-m2),r[0,2]:ars01a.unit_mask$,@(43-m2),r[0,3]:ars01a.unit_mask$,
:                              @(53-m2),r[0,4]:ars01a.unit_mask$,@(67-m3),r[0,0]:ars01a.rate_mask$,@(80-m3),r[0,1]:ars01a.rate_mask$
        endif

        if r[1,0]<>0 or r[1,1]<>0 or r[1,2]<>0 or r[1,3]<>0 or r[1,4]<>0 then
            print (printer_dev)@(0),"Promotional Items",@(33-m2),r[1,2]:ars01a.unit_mask$,@(43-m2),r[1,3]:ars01a.unit_mask$,
:                              @(53-m2),r[1,4]:ars01a.unit_mask$,@(67-m3),r[1,0]:ars01a.rate_mask$,@(80-m3),r[1,1]:ars01a.rate_mask$
        endif

        if r[2,1]<>0 or r[2,0]<>0 or r[2,2]<>0 or r[2,3]<>0 or r[2,4]<>0 then
            print (printer_dev)@(0),"Non-Stock Items",@(33-m2),r[2,2]:ars01a.unit_mask$,@(43-m2),r[2,3]:ars01a.unit_mask$,
:                              @(53-m2),r[2,4]:ars01a.unit_mask$,@(67-m3),r[2,0]:ars01a.rate_mask$,@(80-m3),r[2,1]:ars01a.rate_mask$
        endif

        if r[3,0]<>0 then print (printer_dev)@(0),"Other Charges",@(67-m3),r[3,0]:ars01a.rate_mask$

        for x=0 to 3
            t[0]=t[0]+r[x,0]
            t[1]=t[1]+r[x,1]
        next x
        print (printer_dev)@(67-m3),j$(1,m3),@(80-m3),j$(1,m3)
        print (printer_dev)rt$,@(67-m3),t[0]:ars01a.rate_mask$,@(80-m3),t[1]:ars01a.rate_mask$
        l=l+2
        goto std_exit

    report_heading: rem --- Report Heading

        l=headings+1
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
        if status then exitto std_exit
        if e9$<>"E" then
            print (printer_dev)@(2),"-- Customer --",@(41),"Order",@(48),"Invoice",@(57),"Invoice",
:                              @(75),"P.O.",@(97),"Dist",@(120),"Tax"
            print (printer_dev)@(0),"Number",@(8),"Name",@(40),"Number",@(48),"Number",@(58),"Date",
:                              @(66),"By",@(70),"Sls",@(74),"Number",@(85),"Ship Via",@(97),"Code",
:                              @(103),"Terms",@(120),"Code",@(126),"Prntd?"
        endif

        l=l+2
        return

Order_Header: rem --- Order Header

        if l+7>l9 or s4$="Y" then gosub report_heading
        gosub Terms_Code
        print (printer_dev)""
        print (printer_dev)fnmask$(ope01a.customer_id$(1,p[0]),ars01a.customer_output$),@(8),arm01a.customer_name$,
:                          @(40),ope11a.order_no$,@(48),ope01a.ar_inv_no$,
:                          @(57),fndate$(ope01a.invoice_date$),@(66),ope01a.or_taken_by$,
:                          @(70),ope01a.slspsn_code$,@(74),ope01a.customer_po_no$,
:                          @(85),ope01a.ar_ship_via$,@(98),ope01a.terms_code$,
:                          @(103),arm10a.terms_code$,@(120),ope01a.tax_code$,@(128),ope01a.print_status$; rem escape, need to make room for cust po#, a0$(111,20)
        if ope01a.lock_status$<>"N" then
            print (printer_dev)@(40),"Lock Flag = ",ope01a.lock_status$
            let l=l+1
        endif
        print (printer_dev)""
        print (printer_dev)@(132-m1*2-m3-m8-6),"Gross",@(132-m8-m1-9),"Extended"
        print (printer_dev)@(1),"Ln Cd",@(7),"Prd Whs Item",
        print (printer_dev)@(o[0]-m2*2-m8-m9-4),"Ord",@(o[0]-m2-m8-m9-4),"B/O",@(o[0]-m8-m9-5),"Ship",
:                          @(o[0]-m8-4),"Disc",@(o[1]-6),"Price",@(132-m1*2-m3-m8-6),"Sales",
:                          @(132-m1*2-m8-5),"Cost",@(132-m8-m1-5),"Cost",@(132-m8-7),"Profit",
:                          @(132-5),"GP %"
        l=l+5
        return

Sales_Total: rem --- Sales Total/Freight/Sales Tax/Invoice Total

        precision 2
        if l+7>l9 then gosub Order_Header
        print (printer_dev)@(o[0]-m2*3-m9-m8),j$(1,lw)
        print (printer_dev)@(o[0]-m8-4),"Sales Total",@(o[0]-m2*3-m8-m9),ord:ars01a.unit_mask$,
:                          @(o[0]-m2*2-m8-m9),bo:ars01a.unit_mask$,@(o[0]-m2-m8-m9),ship:ars01a.unit_mask$,@(o[1]),s[0]:ars01a.amount_mask$,
:                          @(132-m1*2-m8),s[1]:ars01a.amount_mask$,@(132-m1-m8),s[0]-s[1]:ars01a.amount_mask$,
:                          @(132-m8),sgn(fnd(s[0]-s[1],s[0]))*min(999.99,abs(fnd(s[0]-s[1],s[0]))):m8$
        print (printer_dev)@(o[0]-m8-7),"Sales Discount",@(o[1]),-ope01a.discount_amt:ars01a.amount_mask$
        print (printer_dev)@(o[0]-m8),"Freight",@(o[1]),ope01a.freight_amt:ars01a.amount_mask$
        print (printer_dev)@(o[0]-m8-2),"Sales Tax",@(o[1]),ope01a.tax_amount:ars01a.amount_mask$
        print (printer_dev)@(o[1]),j$(1,m1)
        print (printer_dev)@(o[0]-m8-9),"   Invoice Total",@(o[1]),s[0]+ope01a.freight_amt-ope01a.discount_amt+ope01a.tax_amount:ars01a.amount_mask$
        u[3]=u[3]+s[0]
        t2=t2+1
        u2=u2+1,l=l+7,ordt=ordt+ord,bot=bot+bo,shipt=shipt+ship
        t[2]=t[2]+ope01a.discount_amt
        t[1]=t[1]+ope01a.freight_amt
        t[4]=t[4]+ope01a.tax_amount
        precision i[1]
        return

Serialized_Inventory: rem --- Serialized/Lotted Inventory

        read (ope21_dev,key=ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$,dom=*next)

        While more
            ope21a_key$=key(ope21_dev,end=*break)
            if ope21a_key.firm_id$+ope21a_key.ar_type$+ope21a_key.customer_id$+ope21a_key.order_no$<>ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$ then break
            read record (ope21_dev,key=ope21a_key$) ope21a$
            if l+1>l9 then gosub report_heading
            print (printer_dev)@(max(o[0]-m8-m9-m2*3-i[2]-9,0)),x2$," ",ope21a_key.sequence_no$," ",ope21a.lotser_no$,
            print (printer_dev)@(o[0]-m2*3-m8-m9),r0:ars01a.unit_mask$,@(o[0]-m2-m8-m9),r1:ars01a.unit_mask$,
:                              @(132-m1*2-m3-m8),r2:ars01a.rate_mask$
            l=l+1
        Wend

        return

    Print_Detail: rem --- Print Detail

        if l>l9 then gosub report_heading; gosub Order_Header
        print (printer_dev)@(1),ope11a.line_no$," ",ope11a.line_code$,@(11),ope11a.warehouse_id$,
        if pos(opm02a.line_type$="M")<=0 then
            if pos(opm02a.line_type$="O")<=0 then
                print (printer_dev)@(7),ope11a.product_type$,
                if pos(opm02a.line_type$="SP")<>0 then print (printer_dev)@(15),ope11a.item_id$,
                if pos(opm02a.line_type$="SP")<>0 and pos(ivs01a.lotser_flag$="SL")<>0 and ivm01a.lotser_item$="Y" then gosub Average_Item_Cost
                if ser_qty<>0 then let ope11a.unit_cost=ser_cost/ser_qty
                print (printer_dev)@(o[0]-m2*3-m8-m9),ope11a.qty_ordered:ars01a.unit_mask$,ope11a.qty_backord:ars01a.unit_mask$,ope11a.qty_shipped:ars01a.unit_mask$,
            endif

            print (printer_dev)@(o[0]-m8-m9),ope11a.disc_percent:m9$,@(o[0]-m8),
:                              ope11a.unit_price:ars01a.rate_mask$,@(o[0]-m8+m3),ope11a.ext_price:ars01a.amount_mask$,
:                              @(o[0]-m8+m1+m3),ope11a.unit_cost:ars01a.rate_mask$,@(o[0]-m8+m1+m3*2),
:                              ope11a.unit_cost*ope11a.qty_shipped:ars01a.amount_mask$,@(o[0]-m8+m1*2+m3*2),
:                              ope11a.ext_price-ope11a.unit_cost*ope11a.qty_shipped:ars01a.amount_mask$,
:                              @(h0-m8),sgn(fnd(ope11a.ext_price-ope11a.unit_cost*ope11a.qty_shipped,
:                              ope11a.ext_price))*min(999.99,abs(fnd(ope11a.ext_price-ope11a.unit_cost*ope11a.qty_shipped,
:                              ope11a.ext_price))):m8$,
            if opm02a.line_type$<>"O" then
                print (printer_dev)""
                l=l+1
            endif
        endif

        print (printer_dev)@(17),desc$
        l=l+1
        if pos(opm02a.line_type$="SP")<>0 and pos(ivs01a.lotser_flag$="SL")<>0 and ivm01a.lotser_item$="Y" then gosub Serialized_Inventory
        return

    Find_Customer: rem --- Find Customer

        rem dim b1$(30),c[6]
        rem b0$=firm_id$+a0$(5,6)
        arm01a.firm_id$=firm_id$
        arm01a.customer_id$=ope01a.customer_id$
        arm01a.customer_name$=nf$
        find record (arm01_dev,key=arm01a.firm_id$+arm01a.customer_id$,dom=*next) arm01a$
        find record (arm02_dev,key=arm01a.firm_id$+arm01a.customer_id$+"  ",dom=*next) arm02a$
        return

Lifo_Fifo: rem --- LIFO/FIFO

        if ope11a.qty_shipped=0 then
            return
        endif
        ret_cost=ope11a.unit_cost
        if opm02a.dropship$="Y" or pos(opm02a.line_type$="SP")=0 then
            return
        endif
        lf_channels[0]=ivm04_dev
        lf_channels[1]=ivw04_dev
        lf_channels[2]=ivm02_dev
        lf_action$=ivs01a.lifofifo$+"I"
        lf_date$=ope01a.invoice_date$
        if ope11a.qty_shipped<0 then let lf_action$(2,1)="R"
        lf_item$[0]=firm_id$
        lf_item$[1]=ope11a.warehouse_id$
        lf_item$[2]=ope11a.item_id$
        call pgmdir$+"ivc_lf.bbx",lf_action$,"R",lf_date$,lf_channels[all],lf_item$[all],i[1],abs(ope11a.qty_shipped),ope11a.unit_cost,ret_cost,status

        return

Average_Item_Cost: rem --- Get Average Of Serialized/Lotted Item Cost

        ser_qty=0
        ser_cost=0
        read (ope21_dev,key=ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$+ope11a_key.line_no$,dom=*next)

        While more
            ope21a_key$=key(ope21_dev,end=*break)
            if ope21a_key.firm_id$+ope21a_key.ar_type$+ope21a_key.customer_id$+ope21a_key.order_no$+ope21a_key.line_no$<>ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$+ope11a_key.line_no$ then break
            read record (ope21_dev,key=ope21a_key$) ope21a$
            ser_cost=ser_cost+r1*r2
            ser_qty=ser_qty+r1
        Wend

        return

Terms_Code: rem --- Terms Code

        rem dim w$(30)
        let arm10a.code_desc$=nf$
        find record (arm10_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=*next) arm10a$
        let w$=arm10a.code_desc$
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem #endinclude std_end.src

        end
