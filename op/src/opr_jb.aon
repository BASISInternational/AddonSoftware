rem --- Invoice Edit Report
rem --- Program opr_jb v8.0.0 16Jul2007 (opr_jb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:13:32)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    rem milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$



rem --- Assign form input values to local variables

    table$=fnget_table$("")
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    Beginning_Customer$=fnget_fld_data$(table$," Beginning_Customer")
    Ending_Customer$=fnget_fld_data$(table$,"Ending_Customer")
    Beginning_Order_Number$=fnget_fld_data$(table$," Beginning_Order_Number")   
    Ending_Order_Number$=fnget_fld_data$(table$,"Ending_Order_Number")
    Invoiced$=fnget_fld_data$(table$," Invoiced")
    Print_Status$=fnget_fld_data$(table$," Beginning_Order_Number")   
    Page_Break$=fnget_fld_data$(table$," Page_Break")

rem --- Initialize Data
    precision num(ivs01a.precision$)
    rem precision i[1]
    dim j$(h0,"-"),j1$(30," "),j2$(h0,"=")
    dim a0$(200),a[13],w1$(64),w[17],lf_item$[10],lf_channels[10]
    dim o[4],r[3,4],s[2],t[4],t9[100,3],u[3]
    ord=0
    ship=0
    bo=0
    l9=50
    l=l9+1
    h=0
    nf$="(Not On File)"
    m8$="##0.00-"
    m9$="###.0%"
    clock$=""
    when$=sysinfo.system_date$
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    m8=len(m8$)
    m9=len(m9$)
    r9$="SPN"
    x2$=""
    h8$=x1$
    h9$="Invoiced By: "+h9$
    if ivs01a.LOTSER_FLAG$="S" x2$="Ser#"
    if ivs01a.LOTSER_FLAG$="L" x2$="Lot#"
    if s0$="" h4$="First"
    if s1$="" h5$="Last"
    if s2$="" h6$="First"
    if s3$="" h7$="Last"
    more=1

    while more
        if m2*3+m3*2+m1*3+27+i[0]<132 break
        call pgmdir$+"adc_sizemask.aon",m1$,m1,max(10,m1-1),max(10,m1-1)
        call pgmdir$+"adc_sizemask.aon",m2$,m2,max(10,m2-1),max(10,m2-1)
        call pgmdir$+"adc_sizemask.aon",m3$,m3,max(10,m3-1),max(10,m3-1)
    wend

rem --- Headings

    headings=5
    dim headings$[5],x0$(h0),x1$(h0)
    headings$[0]=n1$
    headings$[1]=n4$
    rt$="Report Totals"
    x0$(1)="Beginning Customer: "+h4$
    x0$(fncenter(h8$,h0))=h8$
    x0$(h0-26)="Beginning Order #: "+h6$
    x1$(1)="   Ending Customer: "+h5$
    x1$(fncenter(h9$,h0))=h9$
    x1$(h0-26)="   Ending Order #: "+h7$
    headings$[3]=x0$
    headings$[4]=x1$

rem --- Print positions

    lw=m1*3+m3*2+m2*3+m8+m9
    o[0]=h0-m1*3-m3*2
    o[1]=h0-m1*3-m3-m8

rem --- Background

    rem call pgmdir$+"adc_progress.aon","CN",sysinfo.task_desc$,"","Printing","",m0+8,ope01_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,opt61_dev,1,meter_num,status

rem --- Initial Read

    read (ope01_dev,key=firm_id$+"  "+s0$+s2$,dom=*next)


while more ; rem --- Main Read
    k1$=key(ope01_dev,end=*break)
    if pos(firm_id$+"  "=k1$)<>1 break
    if s1$<>"" and k1$(1,10)>firm_id$+"  "+s1$ break
    if s3$<>"" and k1$(11,7)>s3$ break
    rem call pgmdir$+"adc_progress.aon","S","","","",fnmask$(k1$(5,6),m0$)+" "+k1$(11,7),0,0,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    read record (ope01_dev,key=k1$) ope01a$
    if ope01a.ORDINV_FLAG$<>"I" or ope01a.AR_INV_NO$=j1$(1,7)  continue
    if s5$<>"" and ope01a.ORD_TAKEN_BY$<>s5$ continue
    if (s6$="A" and ope01a.INVOICE_TYPE$<>"V") then
        gosub Find_Customer
        gosub Order_Header
    endif
    if s6$="P" and ope01a.PRINT_STATUS$<>"Y" continue
    if s6$="U" and ope01a.PRINT_STATUS$="Y" continue
    if ope01a.INVOICE_TYPE$<>"V" gosub Find_Customer;gosub Order_Header  
    rem --- Void

    if l>l9 gosub report_heading
    gosub Find_Customer
    print (printer_dev)""
    print (printer_dev)fnmask$(a0$(5,p[0]),m0$),@(8),arm01a.CUSTOMER_NAME$,@(40),ope01a.ORDER_NO$,@(48),ope01a$.AR_INV_NO$,@(57),fndate$(ope01a$.INVOICE_DATE$),@(66),ope01a$.ORD_TAKEN_BY$,@(70),ope01a$.SLSPSN_CODE$,@(74),"(Void)"
    l=l+2
    continue
    ope11_key$=ope01a.FIRM_ID$+ope01a.AR_TYPE$+ope01a.CUSTOMER_ID$+ope01a.ORDER_NO$
    read (ope11_dev,key=ope11_key$,dom=*next)
    while more
        k$=key(ope11_dev,end=*break)
        if k$(1,17)<>ope11_key$ break
        read record (ope11_dev) ope11a$
        desc$=ope11a.ORDER_MEMO$
        dim x0$(32)
        find record (opm02_dev,key=firm_id$+ope11a.LINE_NO$,dom=*next) opm02a$
        if pos(opm02a.LINE_TYPE="SP")=0 goto Assign_Value
        dim d1$(60),d2$(62),d[20]
        find record (ivm01_dev,key=firm_id$+ope11a.ITEM_ID$,dom=Assign_Value) ivm01a$
        if opm02a.DROPSHIP="Y" and p3$(28,1)="Y" goto Assign_Value
        if cvs(desc$,2)="" desc$=fnzipcode$(ivm01a.ITEM_DESC,i[3],i[4],i[5])
        find record (ivm02_dev,key=firm_id$+ope11a.WAREHOUSE_ID$+ope11a.ITEM_ID$,dom=Assign_Value) ivm02a$
        if ivm02a.UNIT_COST<>0 ope11a.UNIT_COST=ivm02a.UNIT_COST
        if i3$(3,1)="N" goto Assign_Value
        gosub LIFO_FIFO
        ope11a.UNIT_COST=ret_cost
        Assign_Value:
            gosub Print_Detail
        s[0]=s[0]+ope11a.EXT_PRICE
        s[1]=s[1]+ope11a.UNIT_COST*ope11a.QTY_SHIPPED
        s[2]=s[2]+ope11a.COMM_PERCENT
        s0=s0+1
        u[0]=u[0]+ope11a.EXT_PRICE
        u[1]=u[1]+ope11a.UNIT_COST*ope11a.QTY_ORDERED
        u[2]=u[2]+ope11a.COMM_PERCENT
        ord=ord+ope11a.QTY_ORDERED
        bo=bo+ope11a.QTY_BACKORD
        ship=ship+ope11a.QTY_SHIPPED
        r9=0
        r9=pos(opm02a.LINE_TYPE$=r9$)
        if r9<>0 then
            x=r9-1
            r[x,0]=r[x,0]+ope11a.EXT_PRICE
            r[x,1]=r[x,1]+ope11a.UNIT_COST*ope11a.QTY_SHIPPED
            r[x,2]=r[x,2]+ope11a.QTY_ORDERED
            r[x,3]=r[x,3]+ope11a.QTY_BACKORD
            r[x,4]=r[x,4]+ope11a.QTY_SHIPPED
        endif
        if opm02a.LINE_TYPE$="O" r[3,0]=r[3,0]+ope11a.EXT_PRICE
        if opm02a.PROD_TYPE_PR$="N" continue
        if pos(ope11a.PRODUCT_TYPE$=t9$,3)=0 t9$=t9$+ope11a.PRODUCT_TYPE$
        x=pos(ope11a.PRODUCT_TYPE$=t9$,3)
        x=int(x/3)
        t9[x,0]=t9[x,0]+ope11a.EXT_PRICE
        t9[x,1]=t9[x,1]+ope11a.UNIT_COST*ope11a.QTY_SHIPPED
        t9[x,2]=t9[x,2]+ope11a.COMM_PERCENT
        t9[x,3]=t9[x,3]+ope11a.QTY_SHIPPED
    wend

    rem --- Invioce Totals
    gosub Totals
    dim s[2]
    s0=0
    ord=0
    bo=0
    ship=0
wend  ; rem --- Main Read

 rem --- Totals

    precision 2
    e9$="E"
    if l+7>l9 or s4$="Y" gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(o[0]-m2*3-m8-m9),j2$(1,lw)
    print (printer_dev)rt$,@(o[0]-m2*3-m8-m9),ordt:m2$,@(o[0]-m2*2-m8-m9),bot:m2$,@(o[0]-m2-m8-m9),shipt:m2$,@(o[0]-m8-4),"Sales Total: ",@(o[1]),u[0]:m1$,@(132-m1*2-m8),u[1]:m1$,@(132-m1-m8),u[0]-u[1]:m1$,@(132-m8),sgn(fnd(u[0]-u[1],u[0]))*min(999.99,abs(fnd(u[0]-u[1],u[0]))):m8$
    print (printer_dev)@(o[0]-m8-7),"Sales Discount",@(o[1]),-t[2]:m1$
    print (printer_dev)@(o[0]-m8),"Freight",@(o[1]),t[1]:m1$
    print (printer_dev)@(o[0]-m8-2),"Sales Tax",@(o[1]),t[4]:m1$
    print (printer_dev)@(o[1]),j$(1,m1)
    print (printer_dev)u2:"###0"," Total Invoices",@(o[0]-m8-5),rt$,@(o[1]),u[0]+t[1]-t[2]+t[4]:m1$
    l=l+8

rem --- Totals By Product

    dim t[3]
    if int(len(t9$)/3)+7+l>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)"Product Type Totals"
    print (printer_dev)""
    print (printer_dev)"Product",@(30+m2-6),"Units",@(30+m2+m1-6),"Sales",@(30+m2+m1*2-5),"Cost",@(30+m2+m1*3-6),"G.P.",@(30+m2+m1*4-7),"  GP %",'LF',
    if len(t9$)<>0 then
        for x=1 to len(t9$) step 3
            x0=int(x/3)
            dim x0$(32)
            x0$(7)=nf$
            find record (ivm10_dev,key=firm_id$+"A"+t9$(x,3),dom=*next) ivm10a$
            if t9[x0,0]<>0 and t9[x0,1]<>0 then
                print (printer_dev)t9$(x,3)," ",opm02a.CODE_DESC$,@(30),t9[x0,3]:m2$,t9[x0,0]:m1$,t9[x0,1]:m1$,t9[x0,0]-t9[x0,1]:m1$,fnd(t9[x0,0]-t9[x0,1],t9[x0,0]):m1$
                t[0]=t[0]+t9[x0,0]
                t[1]=t[1]+t9[x0,1]
                t[2]=t[2]+t9[x0,2]
                t[3]=t[3]+t9[x0,3]
                l=l+1
            endif
        next x
    else

        print (printer_dev)
:       @(30),j$(1,m2+m1*4)
        print (printer_dev)rt$,
:       @(30),t[3]:m2$,t[0]:m1$,t[1]:m1$,t[0]-t[1]:m1$,fnd(t[0]-t[1],t[0]):m1$
        l=l+2
        
    fi
rem --- Total By Line Type

    if l+9>l9 gosub report_heading
    dim t[1]
    print (printer_dev)""
    print (printer_dev)"Line Type Total",'LF','LF',@(0),"Description",@(29),"Ord",@(39),"B/O",@(48),"Ship",@(61),"Sales",@(75),"Cost",'LF'
    if r[0,0]<>0 or r[0,1]<>0 or r[0,2]<>0 or r[0,3]<>0 or r[0,4]<>0 print (printer_dev)@(0),"Standard Items",@(33-m2),r[0,2]:m2$,@(43-m2),r[0,3]:m2$,@(53-m2),r[0,4]:m2$,@(67-m3),r[0,0]:m3$,@(80-m3),r[0,1]:m3$
    if r[1,0]<>0 or r[1,1]<>0 or r[1,2]<>0 or r[1,3]<>0 or r[1,4]<>0 print (printer_dev)@(0),"Promotional Items",@(33-m2),r[1,2]:m2$,@(43-m2),r[1,3]:m2$,@(53-m2),r[1,4]:m2$,@(67-m3),r[1,0]:m3$,@(80-m3),r[1,1]:m3$
    if r[2,1]<>0 or r[2,0]<>0 or r[2,2]<>0 or r[2,3]<>0 or r[2,4]<>0 print (printer_dev)@(0),"Non-Stock Items",@(33-m2),r[2,2]:m2$,@(43-m2),r[2,3]:m2$,@(53-m2),r[2,4]:m2$,@(67-m3),r[2,0]:m3$,@(80-m3),r[2,1]:m3$
    if r[3,0]<>0 print (printer_dev)@(0),"Other Charges",@(67-m3),r[3,0]:m3$
    for x=0 to 3
        t[0]=t[0]+r[x,0]
        t[1]=t[1]+r[x,1]
    next x
    print (printer_dev)@(67-m3),j$(1,m3),@(80-m3),j$(1,m3)
    print (printer_dev)rt$,@(67-m3),t[0]:m3$,@(80-m3),t[1]:m3$
    l=l+2
    goto std_exit

report_heading: rem --- Report Heading
    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status exitto std_exit
    if e9$="E"then
        l=l+2
    else
        print (printer_dev)@(2),"-- Customer --",@(41),"Order",@(48),"Invoice",@(57),"Invoice",@(75),"P.O.",@(97),"Dist",@(120),"Tax"
        print (printer_dev)@(0),"Number",@(8),"Name",@(40),"Number",@(48),"Number",@(58),"Date",@(66),"By",@(70),"Sls",@(74),"Number",@(85),"Ship Via",@(97),"Code",@(103),"Terms",@(120),"Code",@(126),"Prntd?"
    fi
return

Order_Header: rem --- Order Header
    if l+7>l9 or s4$="Y" gosub report_heading
    gosub Terms_Code
    print (printer_dev)""
    print (printer_dev)fnmask$(ope01a_key$(5,p[0]),m0$),@(8),arm01a.CUSTOMER_NAME$,@(40),ope01a.ORDER_NO$,@(48),ope01a.AR_INV_NO$,@(57),fndate$(ope01a.INVOICE_DATE$),@(66),ope01a.ORD_TAKEN_BY$,@(70),ope01a.SLSPSN_CODE$,@(74),ope01a_key$(111,10),@(85),ope01a.AR_SHIP_VIA$,@(98),ope01a.DIST_CODE$,@(103),w$,@(120),ope01a.TAX_CODE$,@(128),ope01a.PRINT_STATUS$; rem ESCAPE, Need to make room for Cust PO#, A0$(111,20)
    if ope01a.LOCK_STATUS$<>"N" print (printer_dev)@(40),"Lock Flag = ",ope01a.LOCK_STATUS$; let l=l+1
    print (printer_dev)""
    print (printer_dev)@(132-m1*2-m3-m8-6),"Gross",@(132-m8-m1-9),"Extended"
    print (printer_dev)@(1),"Ln Cd",@(7),"Prd Whs Item",
    print (printer_dev)@(o[0]-m2*2-m8-m9-4),"Ord",@(o[0]-m2-m8-m9-4),"B/O",@(o[0]-m8-m9-5),"Ship",@(o[0]-m8-4),"Disc",@(o[1]-6),"Price",@(132-m1*2-m3-m8-6),"Sales",@(132-m1*2-m8-5),"Cost",@(132-m8-m1-5),"Cost",@(132-m8-7),"Profit",@(132-5),"GP %"
    l=l+5
return

Totals: rem --- Sales Total/Freight/Sales Tax/Invoice Total

    precision 2
    if l+7>l9 gosub Order_Header
    print (printer_dev)@(o[0]-m2*3-m9-m8),j$(1,lw)
    print (printer_dev)@(o[0]-m8-4),"Sales Total",@(o[0]-m2*3-m8-m9),ord:m2$,@(o[0]-m2*2-m8-m9),bo:m2$,@(o[0]-m2-m8-m9),ship:m2$,@(o[1]),s[0]:m1$,@(132-m1*2-m8),s[1]:m1$,@(132-m1-m8),s[0]-s[1]:m1$,@(132-m8),sgn(fnd(s[0]-s[1],s[0]))*min(999.99,abs(fnd(s[0]-s[1],s[0]))):m8$
    print (printer_dev)@(o[0]-m8-7),"Sales Discount",@(o[1]),-a[2]:m1$
    print (printer_dev)@(o[0]-m8),"Freight",@(o[1]),a[1]:m1$
    print (printer_dev)@(o[0]-m8-2),"Sales Tax",@(o[1]),a[0]:m1$
    print (printer_dev)@(o[1]),j$(1,m1)
    print (printer_dev)@(o[0]-m8-9),"   Invoice Total",@(o[1]),s[0]+a[1]-a[2]+a[0]:m1$
    u[3]=u[3]+s[0]
    t2=t2+1
    u2=u2+1
    l=l+7
    ordt=ordt+ord
    bot=bot+bo
    shipt=shipt+ship
    t[2]=t[2]+a[2]
    t[1]=t[1]+a[1]
    t[4]=t[4]+a[0]
    precision i[1]
return

Serialized_Lotted: rem --- Serialized/Lotted Inventory
    read (ope21_dev,key=k$(1,20),dom=*next)
    while more
        k2$=key(ope21_dev,end=*break)
        if k2$(1,20)<>k$(1,20) break
        read record (ope21_dev,key=k2$) ope21a$
        if l+1>l9 gosub report_heading
        print (printer_dev)@(max(o[0]-m8-m9-m2*3-i[2]-9,0)),x2$," ",k2$(21,3),"",r1$,
        print (printer_dev)@(o[0]-m2*3-m8-m9),r0:m2$,@(o[0]-m2-m8-m9),r1:m2$,@(132-m1*2-m3-m8),r2:m3$
        l=l+1
    wend
return

Print_Detail: rem --- Print Detail
    if l>l9 gosub report_heading; gosub Order_Header
        print (printer_dev)@(1),ope11a.LINE_NO$," ",ope11a.LINE_CODE$,@(11),ope11a.WAREHOUSE_ID$,
    if pos(opm02a.LINE_TYPE$="M")>0 then
        print (printer_dev)@(17),desc$
        l=l+1
        if pos(opm02a.LINE_TYPE$="SP")<>0 and pos(i3$(17,1)="SL")<>0 and d2$(19,1)="Y" gosub Serialized_Lotted
    endif
    if pos(opm02a.LINE_TYPE$="O")>0 then
        print (printer_dev)@(o[0]-m8-m9),w[8]:m9$,@(o[0]-m8),w[1]:m3$,@(o[0]-m8+m3),w[6]:m1$,@(o[0]-m8+m1+m3),w[0]:m3$,@(o[0]-m8+m1+m3*2),w[0]*w[4]:m1$,@(o[0]-m8+m1*2+m3*2),w[6]-w[0]*w[4]:m1$,@(h0-m8),sgn(fnd(w[6]-w[0]*w[4],w[6]))*min(999.99,abs(fnd(w[6]-w[0]*w[4],w[6]))):m8$,
        if x0$(25,1)="O" then
            print (printer_dev)@(17),desc$
            l=l+1
            if pos(opm02a.LINE_TYPE$="SP")<>0 and pos(i3$(17,1)="SL")<>0 and d2$(19,1)="Y" gosub Serialized_Lotted
        endif
        print (printer_dev)""
        l=l+1
    endif
    print (printer_dev)@(7),ope11a.PRODUCT_TYPE$,
    if pos(opm02a.LINE_TYPE$="SP")<>0 print (printer_dev)@(15),ope11a_key$(33),
    if pos(opm02a.LINE_TYPE$="SP")<>0 and pos(i3$(17,1)="SL")<>0 and d2$(19,1)="Y" gosub Get_Average; if ser_qty<>0 w[0]=ser_cost/ser_qty
    print (printer_dev)@(o[0]-m2*3-m8-m9),w[2]:m2$,w[3]:m2$,w[4]:m2$,
return

Find_Customer: rem --- Find Customer
  rem  dim b1$(30),arm02a.CREDIT_LIMIT
    arm01a_key$=firm_id$+ope01a.CUSTOMER_ID$
    arm01a_key$(1)=nf$
    find record (arm01_dev,key=b0$,dom=*next) arm01a$
    find record (arm02_dev,key=b0$+"  ",dom=*next) arm02a$
return

LIFO_FIFO: rem --- LIFO/FIFO
    if w[4]<>0 then
        let ret_cost=w[0]
        if opm02a.DROPSHIP$<>"Y" or pos(opm02a.LINE_TYPE$="SP")<>0 then
            let lf_channels[0]=ivm04_dev,lf_channels[1]=ivw04_dev,lf_channels[2]=ivm02_dev
            let lf_action$=i3$(3,1)+"I",lf_date$=ope01a.INVOICE_DATE$
            if w[4]<0 lf_action$(2,1)="R"
            let lf_item$[0]=firm_id$,lf_item$[1]=ope11a.WAREHOUSE_ID$,lf_item$[2]=ope11a.ITEM_ID$
            call pgmdir$+"ivc_lf.bbx",lf_action$,"R",lf_date$,lf_channels[all],lf_item$[all],i[1],abs(w[4]),w[0],ret_cost,status
        endif
   endif
return

Get_Average: rem --- Get Average Of Serialized/Lotted Item Cost
    let ser_qty=0,ser_cost=0
    read (ope21_dev,key=k$(1,20),dom=*next)
    while more
        let k4$=key(ope21_dev,end=*break)
        if k4$(1,20)<>k$(1,20) break
        read record (ope21_dev,key=k4$) ope21a$
        let ser_cost=ser_cost+r1*r2,ser_qty=ser_qty+r1
    wend
return

Terms_Code: rem --- Terms Code
    dim w$(30)
    let w$(6)=nf$
    find record (arm10_dev,key=firm_id$+"A"+ope01a.TERMS_CODE$,dom=*next) arm10a$
    let w$=w$(6,15)
return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                          cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

end
