rem --- Open Order Detail Report
rem --- Program opr_ia v8.0.0 06Jul2007 (opr_ia)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:47:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- v7.x Administrator reference ["sys-01A"] (Line 0181)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0187)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0200)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0201)
rem --- v7.x Administrator reference ["sys-01"] (Line 0213)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0229)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0240)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0245)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0246)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0269)
rem --- BBx reference ["syc_ra.bbx"] (Line 0269)
rem --- v7.x Administrator reference ["syc_df.bbx"] (Line 0271)
rem --- BBx reference ["syc_df.bbx"] (Line 0271)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0295)
rem --- BBx reference ["syc_rs.bbx"] (Line 0295)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0300)
rem --- BBx reference ["syc_rs.bbx"] (Line 0300)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0301)
rem --- BBx reference ["syc_rs.bbx"] (Line 0301)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0326)
rem --- BBx reference ["syc_rs.bbx"] (Line 0326)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0332)
rem --- BBx reference ["syc_rs.bbx"] (Line 0332)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0333)
rem --- BBx reference ["syc_rs.bbx"] (Line 0333)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0355)
rem --- BBx reference ["syc_rs.bbx"] (Line 0355)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0359)
rem --- BBx reference ["syc_rs.bbx"] (Line 0359)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0379)
rem --- BBx reference ["syc_rs.bbx"] (Line 0379)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0383)
rem --- BBx reference ["syc_rs.bbx"] (Line 0383)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0420)
rem --- BBx reference ["syc_rs.bbx"] (Line 0420)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0421)
rem --- BBx reference ["syc_rs.bbx"] (Line 0421)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0426)
rem --- BBx reference ["syc_rs.bbx"] (Line 0426)
rem --- v7.x Administrator reference ["syc_df.bbx"] (Line 0428)
rem --- BBx reference ["syc_df.bbx"] (Line 0428)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0442)
rem --- BBx reference ["syc_rs.bbx"] (Line 0442)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0443)
rem --- BBx reference ["syc_rs.bbx"] (Line 0443)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0444)
rem --- BBx reference ["syc_rs.bbx"] (Line 0444)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0465)
rem --- BBx reference ["syc_rs.bbx"] (Line 0465)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0468)
rem --- BBx reference ["syc_rs.bbx"] (Line 0468)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0490)
rem --- BBx reference ["syc_rs.bbx"] (Line 0490)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0491)
rem --- BBx reference ["syc_rs.bbx"] (Line 0491)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0495)
rem --- BBx reference ["syc_rs.bbx"] (Line 0495)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0515)
rem --- BBx reference ["syc_rs.bbx"] (Line 0515)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0516)
rem --- BBx reference ["syc_rs.bbx"] (Line 0516)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0517)
rem --- BBx reference ["syc_rs.bbx"] (Line 0517)
rem --- BBx reference ["opr_ib.bbx"] (Line 0551)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0569)
rem --- BBx reference ["syc_rs.bbx"] (Line 0569)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0570)
rem --- BBx reference ["syc_rs.bbx"] (Line 0570)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0581)
rem --- BBx reference ["syc_rs.bbx"] (Line 0581)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0587)
rem --- BBx reference ["syc_lc.bbx"] (Line 0587)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0588)
rem --- BBx reference ["syc_rs.bbx"] (Line 0588)
rem --- v7.x Administrator reference ["syc_lk.bbx"] (Line 0599)
rem --- BBx reference ["syc_lk.bbx"] (Line 0599)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- arm01a: iolist *,x0$
rem --- arm10f: iolist x2$

rem --- The following channel references have been identified:

rem --- arm02a: Channel reference (Line 0304)

rem --------------------------------------------------------------------------------
rem --- ars01a: (Generated by CodePort)
rem --- ivm01a: Channel reference (Line 0301)
rem --- ivm02a: Channel reference (Line 0301)
rem --- ivm10a: Channel reference (Line 0300)
rem --- ivs01a: (Generated by CodePort)
rem --- ope01a: Channel reference (Line 0297)
rem --- ope04a: Channel reference (Line 0296)
rem --- ope11a: Channel reference (Line 0295)
rem --- ope21a: Channel reference (Line 0294)
rem --- opm02a: Channel reference (Line 0294)
rem --- poe08a: Channel reference (Line 0293)
rem --- sys01a: Channel reference (Line 0291)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=13,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-02"
    files$[4]="arm-10"
    files$[5]="ivm-01"
    files$[6]="ivm-02"
    files$[7]="ivm-10"
    files$[8]="ope-01"
    files$[9]="ope-04"
    files$[10]="ope-11"
    files$[11]="ope-21"
    files$[12]="opm-02"
    files$[13]="poe-08"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm10_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm10_dev=channels[7]
    ope01_dev=channels[8]
    ope04_dev=channels[9]
    ope11_dev=channels[10]
    ope21_dev=channels[11]
    opm02_dev=channels[12]
    poe08_dev=channels[13]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm02a$:templates$[3],arm10a$:templates$[4],
:       ivm01a$:templates$[5],ivm02a$:templates$[6],ivm10a$:templates$[7],
:       ope01a$:templates$[8],ope04a$:templates$[9],ope11a$:templates$[10],
:       ope21a$:templates$[11],opm02a$:templates$[12],poe08a$:templates$[13]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=13
    dim files$[files],options$[files],channels[files]
    files$[1]="ope-01"
    files$[2]="ope-11"
    files$[3]="arm-01"
    files$[4]="ivm-01"
    files$[5]="ope-04"
    files$[6]="ope-21"
    files$[7]="sys-01"
    options$[7]="P"
    files$[8]="arm-02"
    files$[9]="ivm-10"
    files$[10]="arm-10"
    files$[11]="ivm-02"
    files$[12]="opm-02"
    files$[13]="poe-08"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],ignore,status
    if status goto std_exit
    ope01_dev=channels[1]
    ope11_dev=channels[2]
    arm01_dev=channels[3]
    ivm01_dev=channels[4]
    ope04_dev=channels[5]
    ope21_dev=channels[6]
    sys01_dev=channels[7]
    arm02_dev=channels[8]
    ivm10_dev=channels[9]
    arm10_dev=channels[10]
    ivm02_dev=channels[11]
    opm02_dev=channels[12]
    poe08_dev=channels[13]

rem --- Parameters

    dim p[1],i[5]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    i[0]=num(i2$(1,2))
    i[1]=num(i2$(5,1))
    i[2]=num(i2$(7,2))
    i[3]=num(i2$(9,2))
    i[4]=num(i2$(11,2))
    i[5]=num(i2$(13,2))
    p[0]=num(p2$(1,2))

rem --- Initialize Data

    optn$="OQBCN"
    s4$=optn$
    s6$="U"
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    call pgmdir$+"syc_df.bbx",0,3008,my_context,status
    goto start_done

l1000: rem --- Beginning Customer

    v0$="M"
    v1$="CE"
    v2$=s0$
    v3$=m0$
    v4$="Enter A Valid Customer Number(<F1>=First/<F3>=Lookup)"
    v0=6
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1043,l1040,flow_control,l1032,flow_control,l1043,flow_control
l1032:
    gosub lu_cust
    if v$="" goto l1000 else goto l1043
l1040:
    v$=""
l1043:
    gosub clear_text
    if v$="" call pgmdir$+"syc_rs.bbx","",my_context,13000,"First",0,"",status; let s0$=""; goto l1090
    v$=v$+"000000"; let v$=v$(1,6)
    find record (arm01_dev,key=firm_id$+v$,dom=l1000) arm01a$
    xd$=x0$
    if len(xd$)>30 xd$=xd$(1,30)
    call pgmdir$+"syc_rs.bbx","",my_context,3000,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,xd$,0,"",status
    h4$=fnmask$(v$(1,p[0]),m0$)
    s0$=v$(1,p[0])
l1090:
    goto flow_control

l1200: rem --- Ending Customer

    v0$="M"
    v1$="CE"
    v2$=s1$
    v3$=m0$
    v4$="Enter A Valid Customer Number(<F1>=Last/<F3>=Lookup)"
    v0=6
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1245,l1240,flow_control,l1232,flow_control,l1245,flow_control
l1232:
    gosub lu_cust
    if v$="" goto l1200 else goto l1245
l1240:
    v$=""
l1245:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13001,"Last",0,"",status; let s1$=""; goto l1290
    v$=v$+"000000"; let v$=v$(1,6)
    if v$<s0$ goto l1200
    find record (arm01_dev,key=firm_id$+v$,dom=l1200) arm01a$
    xd1$=x0$
    if len(xd1$)>30 xd1$=xd1$(1,30)
    call pgmdir$+"syc_rs.bbx","",my_context,3001,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13001,xd1$,0,"",status
    h5$=fnmask$(v$(1,p[0]),m0$)
    s1$=v$(1,p[0])
l1290:
    goto flow_control

l1400: rem --- Beginning Order Date

    v0$="D"
    v1$="C"
    v2$=s2$
    v3$=""
    v4$="<F1>=First"
    v0=8
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l1450,l1445,flow_control,l1400,flow_control,l1450,flow_control
l1445:
    v$=""
l1450:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13002,"First",0,"",status
    if v$<>"" h6$=fndate$(v$)
    s2$=v$
    if v$="" goto l1486
    call pgmdir$+"syc_rs.bbx","",my_context,3002,fndate$(s2$),0,"",status
l1486:
    goto flow_control

l1600: rem --- Ending Order Date

    v0$="D"
    v1$="C"
    v2$=s3$
    v3$=""
    v4$="<F1>=Last"
    v0=8
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1650,l1645,flow_control,l1600,flow_control,l1650,flow_control
l1645:
    v$=""
l1650:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13003,"Last",0,"",status
    if v$<>"" h7$=fndate$(v$)
    s3$=v$
    if v$="" goto l1686
    call pgmdir$+"syc_rs.bbx","",my_context,3003,fndate$(s3$),0,"",status
l1686:
    goto flow_control

l1800: rem --- Option

    v0$="S"
    v1$="^C"
    v2$=s4$
    v3$=""
    v4$="O=Open Orders, Q=Quotes, B=Backorders, C=Credit Held, N=Non Stock, <F1>=All"
    v0=5
    v1=40
    v2=10
    x$=""
    x3$=""
    control_id=3007
    gosub std_input
    on v3 goto l1837,l1840,flow_control,l1800,flow_control,l1837,flow_control
l1837:
    if v$<>"" goto l1842
l1840:
    v$=optn$; goto l1870
l1842:
    for x=1 to len(optn$)
        if pos(optn$(x,1)=v$)>0 x$=x$+optn$(x,1)
    next x
    if len(x$)>0 v$=x$ else goto l1800
    for x=1 to len(v$)
        if x=len(v$) and x<>1 x3$=x3$+" and " else if x3$<>"" letx3$=x3$+", "
        if v$(x,1)="O" x3$=x3$+"Open" else if v$(x,1)="Q" x3$=x3$+"Quoted" else if v$(x,1)="B" x3$=x3$+"Backordered" else ifv$(x,1)="C" x3$=x3$+"Credit Held" else if v$(x,1)="N" letx3$=x3$+"Non Stock" else exitto l1800
    next x
l1870:
    s4$=v$
    if len(s4$)<5 x3$=x3$+" Orders Only" else x3$="All Orders"
    if len(x3$)>80-v1-len(s4$)-1 x$=x3$(1,80-v1-len(s4$)-1) else x$=x3$
    xd2$=x$
    call pgmdir$+"syc_rs.bbx","",my_context,3007,s4$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13007,xd2$,0,"",status
    goto flow_control

l1900: rem --- Non Stock Option

    if s4$<>"N" s8$=""; call pgmdir$+"syc_rs.bbx","",my_context,3008,"",0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13008,"",0,"",status; call pgmdir$+"syc_df.bbx",0,3008,my_context,status; goto flow_control
    if s8$="" s8$="A"
    call pgmdir$+"syc_df.bbx",1,3008,my_context,status
    v0$="S"
    v1$="C"
    v2$=s8$
    v3$=""
    v4$="A=Include All Non Stock, P=Non Stock W/ Associated PO's, N=Non Stock W/Out PO's"
    v0=1
    v1=40
    v2=11
    control_id=3008
    gosub std_input
    on v3 goto l1940,l1900,flow_control,l1900,flow_control,l1940,flow_control
l1940:
    if pos(v$="APN")=0 goto l1900
    if v$="P" call pgmdir$+"syc_rs.bbx","",my_context,13008,"Non Stock With PO's",0,"",status; goto l1980
    if v$="N" call pgmdir$+"syc_rs.bbx","",my_context,13008,"Non Stock W/Out PO's",0,"",status; goto l1980
    if v$="A" call pgmdir$+"syc_rs.bbx","",my_context,13008,"All Non-Stock",0,"",status
l1980:
    s8$=v$
    goto flow_control

l2000: rem --- Entered By

    v0$="S"
    v1$="C"
    v2$=s5$
    v3$=""
    v4$="<F1>=All"
    v0=3
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l2060,l2055,flow_control,l2000,flow_control,l2060,flow_control
l2055:
    v$=""
l2060:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13004,"All",0,"",status
    if v$<>"" v$=v$+"   ",v$=v$(1,3),h9$=v$ else h9$="All"
    s5$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3004,s5$,0,"",status
    goto flow_control

l2100: rem --- Salesperson

    v0$="S"
    v1$="^C"
    v2$=s7$
    v3$=""
    v4$="Enter A Valid Salesperson Code(<F1>=All/<F3>=Lookup)"
    v0=3
    v1=40
    v2=8
    control_id=3005
    gosub std_input
    on v3 goto l2140,l2137,flow_control,l2134,flow_control,l2140,flow_control
l2134:
    gosub lu_slp
    if v$="" goto l2100 else goto l2140
l2137:
    v$=""
l2140:
    if v$="" call pgmdir$+"syc_rs.bbx","",my_context,13005,"All",0,"",status; goto l2180
    call pgmdir$+"syc_rs.bbx","",my_context,3005,v$,0,"",status
    v$=v$+"   "
    v$=v$(1,3)
    find record (arm10_dev,key=firm_id$+"F"+v$,dom=l2100) arm10f$
    call pgmdir$+"syc_rs.bbx","",my_context,13005,x2$(7,20),0,"",status
l2180:
    s7$=v$
    goto flow_control

l2200: rem --- Printed/Unprinted/All

    v0$="S"
    v1$="^C"
    v2$=s6$
    v3$=""
    v4$="Select Order Print Status To Include (P=Printed/U=Unprinted/A=All)"
    v0=1
    v1=40
    v2=9
    control_id=3006
    gosub std_input
    on v3 goto l2240,l2200,flow_control,l2200,flow_control,l2240,flow_control
l2240:
    if pos(v$="PUA")=0 goto l2200
    if v$="P" call pgmdir$+"syc_rs.bbx","",my_context,13006,"Printed Orders",0,"",status; let x1$="Printed "
    if v$="U" call pgmdir$+"syc_rs.bbx","",my_context,13006,"Unprinted Orders",0,"",status; let x1$="Unprinted "
    if v$="A" call pgmdir$+"syc_rs.bbx","",my_context,13006,"All Orders",0,"",status
    s6$=v$
    goto flow_control

flow_control: rem --- Flow control

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l2000,l2100,l2200,l1800,l1900,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    let v0$="S",v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=0,v2=22,control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    run pgmdir$+"opr_ib.bbx"

display_fields: rem --- Display fields

    let control_id=3000,cid_cnt=0
    find record (arm01_dev,key=firm_id$+s0$,dom=*next) arm01a$
l5004:
    if cid_cnt=0 if cvs(s0$,2)="" disp_inp$="",disp_desc$="First" else disp_inp$=fnmask$(s0$,m0$),disp_desc$=x0$(1,30)
    find record (arm01_dev,key=firm_id$+s1$,dom=*next) arm01a$
    if cid_cnt=1 if cvs(s1$,2)="" disp_inp$="",disp_desc$="First" else disp_inp$=fnmask$(s1$,m0$),disp_desc$=x0$(1,30)
    if cid_cnt=2 if s2$="" disp_inp$="",disp_desc$="First" else disp_inp$=fndate$(s2$),disp_desc$=""
    if cid_cnt=3 if s3$="" disp_inp$="",disp_desc$="First" else disp_inp$=fndate$(s3$),disp_desc$=""
    if cid_cnt=4 if s5$="" disp_inp$="",disp_desc$="All" elselet disp_inp$=s5$,disp_desc$=""
    find record (arm10_dev,key=firm_id$+"F"+s7$,dom=*next) arm10f$
    if cid_cnt=5 if s7$="" disp_inp$="",disp_desc$="All" else disp_inp$=s7$,disp_desc$=x2$(7,20)
    if cid_cnt=6 if s6$="U" disp_inp$=s6$,disp_desc$="Unprinted Orders" else if s6$="P" disp_inp$=s6$,disp_desc$="Printed Orders" else if s6$="A" disp_inp$=s6$,disp_desc$="All Orders"
    if cid_cnt=7 disp_inp$=s4$; if len(s4$)<5 disp_desc$=x$ else disp_desc$="All Orders"
    if cid_cnt=8 if s8$="A" disp_inp$=s8$,disp_desc$="All Non-Stock" else if s8$="P" disp_inp$=s8$,disp_desc$="Non Stock With PO's" else if s8$="N" disp_inp$=s8$,disp_desc$="Non Stock W/Out PO's" else disp_inp$="",disp_desc$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5004
l5050:
    let disp_inp$="",disp_desc$=""
    return

rem --- Clear text

    goto l5750; rem ESCAPE, disabled
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
l5750:
    return

lu_cust: rem --- Customer search

    call pgmdir$+"syc_lc.bbx",v$
    if v$<>"" call pgmdir$+"syc_rs.bbx","",my_context,control_id,fnmask$(v$(1,p[0]),m0$),0,"",status
    return

lu_slp: rem --- Salesperson Lookup

    let number=1
    dim description$[number],field[number],position[number],length[number]
    let description$[0]="Sales ID",description$[1]="Salesperson"
    let field[0]=1,position[0]=4,length[0]=3
    let field[1]=1,position[1]=7,length[1]=20
    let column=79-length[0]-length[1]-2-number*4,row=v2,record$="F"
    call pgmdir$+"syc_lk.bbx",arm10_dev,record$,number,"Salesperson Lookup",description$[all],field[all],position[all],length[all],column,row,v$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
