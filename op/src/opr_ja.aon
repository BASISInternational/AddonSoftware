rem --- Invoice Edit Report
rem --- Program opr_ja v8.0.0 06Jul2007 (opr_ja)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:46:15)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0443)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0160)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0166)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0179)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0180)
rem --- v7.x Administrator reference ["sys-01"] (Line 0195)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0208)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0214)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0220)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0221)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0259)
rem --- BBx reference ["syc_ra.bbx"] (Line 0259)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0279)
rem --- BBx reference ["syc_lc.bbx"] (Line 0279)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0284)
rem --- BBx reference ["syc_rs.bbx"] (Line 0284)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0288)
rem --- BBx reference ["syc_rs.bbx"] (Line 0288)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0289)
rem --- BBx reference ["syc_rs.bbx"] (Line 0289)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0309)
rem --- BBx reference ["syc_lc.bbx"] (Line 0309)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0314)
rem --- BBx reference ["syc_rs.bbx"] (Line 0314)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0319)
rem --- BBx reference ["syc_rs.bbx"] (Line 0319)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0320)
rem --- BBx reference ["syc_rs.bbx"] (Line 0320)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0343)
rem --- BBx reference ["syc_rs.bbx"] (Line 0343)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0346)
rem --- BBx reference ["syc_rs.bbx"] (Line 0346)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0367)
rem --- BBx reference ["syc_rs.bbx"] (Line 0367)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0371)
rem --- BBx reference ["syc_rs.bbx"] (Line 0371)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0390)
rem --- BBx reference ["syc_rs.bbx"] (Line 0390)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0393)
rem --- BBx reference ["syc_rs.bbx"] (Line 0393)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0415)
rem --- BBx reference ["syc_rs.bbx"] (Line 0415)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0416)
rem --- BBx reference ["syc_rs.bbx"] (Line 0416)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0426)
rem --- BBx reference ["syc_rs.bbx"] (Line 0426)
rem --- BBx reference ["opr_jb.bbx"] (Line 0457)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0470)
rem --- BBx reference ["syc_rs.bbx"] (Line 0470)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0471)
rem --- BBx reference ["syc_rs.bbx"] (Line 0471)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0477)
rem --- BBx reference ["syc_rs.bbx"] (Line 0477)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0478)
rem --- BBx reference ["syc_rs.bbx"] (Line 0478)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- arm01a: iolist *,x0$

rem --- The following channel references have been identified:

rem --- arm02a: Channel reference (Line 0290)

rem --------------------------------------------------------------------------------
rem --- arm10a: Channel reference (Line 0289)
rem --- ars01a: (Generated by CodePort)
rem --- ivm01a: Channel reference (Line 0287)
rem --- ivm02a: Channel reference (Line 0286)
rem --- ivm04a: Channel reference (Line 0290)
rem --- ivm10a: Channel reference (Line 0284)
rem --- ivs01a: (Generated by CodePort)
rem --- ivw04a: Channel reference (Line 0287)
rem --- ope01a: Channel reference (Line 0281)
rem --- ope11a: Channel reference (Line 0280)
rem --- ope21a: Channel reference (Line 0279)
rem --- opm02a: Channel reference (Line 0279)
rem --- sys01a: Channel reference (Line 0277)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=13,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-02"
    files$[4]="arm-10"
    files$[5]="ivm-01"
    files$[6]="ivm-02"
    files$[7]="ivm-04"
    files$[8]="ivm-10"
    files$[9]="ivw-04"
    files$[10]="ope-01"
    files$[11]="ope-11"
    files$[12]="ope-21"
    files$[13]="opm-02"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm10_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm04_dev=channels[7]
    ivm10_dev=channels[8]
    ivw04_dev=channels[9]
    ope01_dev=channels[10]
    ope11_dev=channels[11]
    ope21_dev=channels[12]
    opm02_dev=channels[13]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm02a$:templates$[3],arm10a$:templates$[4],
:       ivm01a$:templates$[5],ivm02a$:templates$[6],ivm04a$:templates$[7],
:       ivm10a$:templates$[8],ivw04a$:templates$[9],ope01a$:templates$[10],
:       ope11a$:templates$[11],ope21a$:templates$[12],opm02a$:templates$[13]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=13
    dim files$[files],options$[files],channels[files]
    files$[1]="ope-01"
    files$[2]="ope-11"
    files$[3]="ope-21"
    files$[4]="arm-01"
    files$[5]="arm-02"
    files$[6]="arm-10"
    files$[7]="ivm-01"
    files$[8]="ivm-02"
    files$[9]="ivm-10"
    files$[10]="sys-01"
    files$[11]="opm-02"
    call pgmdir$+"adc_fileopen.aon",1,1,11,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ope01_dev=channels[1]
    ope11_dev=channels[2]
    ope21_dev=channels[3]
    arm01_dev=channels[4]
    arm02_dev=channels[5]
    arm10_dev=channels[6]
    ivm01_dev=channels[7]
    ivm02_dev=channels[8]
    ivm10_dev=channels[9]
    sys01_dev=channels[10]
    opm02_dev=channels[11]

rem --- Parameters

    dim p[2],i[5]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    lf$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    if pos(i3$(3,1)="LF") lf$="Y"
    i[0]=num(i2$(1,2))
    i[1]=num(i2$(5,1))
    i[2]=num(i2$(7,2))
    i[3]=num(i2$(9,2))
    i[4]=num(i2$(11,2))
    i[5]=num(i2$(13,2))
    p[1]=num(p2$(3,2))
    p[2]=num(p3$(4,1))
    p[0]=num(p2$(1,2))

rem --- Initialize Data

    dim lf_channels[1]
    m0=len(m0$)
    s4$="N"
    s6$="U"
    h0=132

rem --- Additional File Opens

    if lf$<>"Y" goto display_resource
    files$[12]="ivm-04"
    files$[13]="ivw-04"
    options$[13]="CL"
    call pgmdir$+"adc_fileopen.aon",1,12,13,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm04_dev=channels[12]
    ivw04_dev=channels[13]
    lf_channels[0]=ivm04_dev
    lf_channels[1]=ivw04_dev

display_resource: rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    goto start_done

l1000: rem --- Beginning Customer

    v0$="M"
    v1$="CE"
    v2$=s0$
    v3$=m0$
    v4$="Enter A Valid Customer Number(<F1>=First/<F3>=Lookup)"
    v0=p[0]
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1045,l1040,flow_control,l1032,flow_control,l1045,flow_control
    if v3<>3 goto l1040
l1032:
    call pgmdir$+"syc_lc.bbx",v$
    if v$="" goto l1000 else goto l1050
l1040:
    if v3=1 v$=""
l1045:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13000,"First",0,"",status; let s0$=""; goto l1090
l1050:
    v$=v$+"000000"; let v$=v$(1,6)
    find record (arm01_dev,key=firm_id$+v$,dom=l1000) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3000,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,x0$(1,30),0,"",status
    h4$=fnmask$(v$(1,p[0]),m0$)
    s0$=v$(1,p[0])
l1090:
    goto flow_control

l1200: rem --- Ending Customer

    v0$="M"
    v1$="CE"
    v2$=s1$
    v3$=m0$
    v4$="Enter A Valid Customer Number(<F1>=Last/<F3>=Lookup)"
    v0=p[0]
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1245,l1240,flow_control,l1232,flow_control,l1245,flow_control
l1232:
    call pgmdir$+"syc_lc.bbx",v$
    if v$="" goto l1200 else goto l1250
l1240:
    if v3=1 v$=""
l1245:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13001,"Last",0,"",status; let s1$=""; goto l1290
l1250:
    v$=v$+"000000"; let v$=v$(1,6)
    if v$<s0$ goto l1200
    find record (arm01_dev,key=firm_id$+v$,dom=l1200) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3001,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13001,x0$(1,30),0,"",status
    h5$=fnmask$(v$(1,p[0]),m0$)
    s1$=v$(1,p[0])
l1290:
    goto flow_control

l1400: rem --- Beginning Order

    v0$="Z"
    v1$="C"
    v2$=s2$
    v3$=""
    v4$="<F1>=First"
    v0=7
    v1=40
    v2=5
    control_id=3002
    if s0$="" and s1$="" or s0$<>s1$ v$=""; goto l1443
    gosub std_input
    on v3 goto l1445,l1445,flow_control,l1400,flow_control,l1445,flow_control
l1443:
l1445:
    if v3=1 v$=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13002,"First",0,"",status; let s2$=""; goto l1490
    if v$<>"" h6$=v$
    s2$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3002,s2$,0,"",status
l1490:
    goto flow_control

l1600: rem --- Ending Order

    v0$="Z"
    v1$="C"
    v2$=s3$
    v3$=""
    v4$="<F1>=Last"
    v0=7
    v1=40
    v2=6
    control_id=3003
    if s0$="" and s1$="" or s0$<>s1$ v$=""; goto l1643
    gosub std_input
    on v3 goto l1645,l1645,flow_control,l1600,flow_control,l1645,flow_control
l1643:
l1645:
    if v3=1 v$=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13003,"Last",0,"",status; let s3$=""; goto l1690
    if v$<>"" h7$=v$
    if v$<s2$ goto l1600
    s3$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3003,s3$,0,"",status
l1690:
    goto flow_control

l2000: rem --- Invoiced By

    v0$="S"
    v1$="C"
    v2$=s5$
    v3$=""
    v4$="<F1>=All"
    v0=3
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l2053,l2053,flow_control,l2000,flow_control,l2053,flow_control
l2053:
    if v3=1 v$=""
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13004,"All",0,"",status; let s5$=""; goto l2090
    if v$<>"" v$=v$+"   ",v$=v$(1,3),h9$=v$ else h9$="All"
    s5$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3004,s5$,0,"",status
l2090:
    goto flow_control

l2200: rem --- Printed/Not-Printed/Both

    v0$="S"
    v1$="C"
    v2$=s6$
    v3$="PUA"
    v4$="P=Printed Invoices   U=Unprinted Invoices   A=All Invoices"
    v0=1
    v1=40
    v2=8
    control_id=3005
    gosub std_input
    on v3 goto l2250,l2200,flow_control,l2200,flow_control,l2250,flow_control
l2250:
    if v$="P" x1$="Printed Invoices"
    if v$="U" x1$="Unprinted Invoices"
    if v$="A" x1$="All Invoices"
    s6$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3005,s6$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13005,x1$,0,"",status
    goto flow_control

l2400: rem --- Page Break

    let v0$="Y",v1$="C",v2$=s4$,v3$="",v4$="Page Break Between Invoices (Y/N)?",v0=1,v1=40,v2=9,control_id=3006
    gosub std_input
    on v3 goto l2450,l2400,flow_control,l2400,flow_control,l2450,flow_control
l2450:
    let s4$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3006,s4$,0,"",status
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l2000,l2200,l2400,done,done,done,l1000

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    let v0$="S",v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    run pgmdir$+"opr_jb.bbx"
display_fields:
    let control_id=3000,cid_cnt=0
    find record (arm01_dev,key=firm_id$+s0$,dom=*next) arm01a$
l5007:
    if cid_cnt=0 if s0$="" disp_inp$="",disp_desc$="First" else disp_inp$=fnmask$(s0$(1,p[0]),m0$),disp_desc$=x0$(1,30)
    find record (arm01_dev,key=firm_id$+s1$,dom=*next) arm01a$
    if cid_cnt=1 if s1$="" disp_inp$="",disp_desc$="Last" else disp_inp$=fnmask$(s1$(1,p[0]),m0$),disp_desc$=x0$(1,30)
    if cid_cnt=2 if s2$="" disp_inp$="",disp_desc$="First" else disp_inp$=s2$,disp_desc$=""
    if cid_cnt=3 if s3$="" disp_inp$="",disp_desc$="Last" else disp_inp$=s3$,disp_desc$=""
    if cid_cnt=4 if s5$="" disp_inp$="",disp_desc$="All" elselet disp_inp$=s5$,disp_desc$=""
    if cid_cnt=5 if s6$="P" disp_inp$=s6$,disp_desc$="PrintedInvoices" else if s6$="U" disp_inp$=s6$,disp_desc$="Unprinted Invoices" else if s6$="A" disp_inp$=s6$,disp_desc$="All Invoices"
    if cid_cnt=6 disp_inp$=s4$
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>6 goto l5050
    goto l5007
l5050: let disp_inp$="",disp_desc$=""
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,"",0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
