rem --- Print Packing List
rem --- Program opr_packlist.aon

rem --- AddonSoftware
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- opr_packlist.aon uses three sprocs and three .jaspers to generate Packing Lists:
rem ---    - OPOPACKLIST_HDR.prc / OPPackListHdr.jasper
rem ---    - OPOPACKLIST_DET.prc / OPPackListDet.jasper
rem ---    - OPOPACKLIST_DET_LOTSER.prc / OPPackListDet-LotSer.jasper

    setesc std_error
    seterr std_error

rem --- Use statements and Declares
    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl
    use ::sys/prog/bao_option.bbj::Option
    use ::sys/prog/bao_utilities.bbj::BarUtils
    use ::bbtranslator.bbj::BBTranslator
    use ::ado_func.src::func
    use ::ado_rptControl.src::ReportControl
    use ::ado_util.src::util

    declare BBTranslator Translate!
    declare Option option!

    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif
        
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 200; rem keep it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 100

rem --- Assign form input values to local variables
    customer_id$ = option!.getOptionData("customer_id")
    order_no$ = option!.getOptionData("order_no")

rem --- Retrieve sysinfo data
    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Retrieve the program path
    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Get logo to go on form; start w/ company logo, fall back to default logo from config if no company logo specified
    logo_filename$=""
    logo_filename$=func.getCompanyLogo()
    if logo_filename$=""
        logo_file$=stbl("+CUST_IMAGES",err=*next)+stbl("+FORM_LOGO",err=*next)
        if logo_file$<>""
            logo_filename$=BBjAPI().getFileSystem().resolvePath(util.resolvePathStbls(logo_file$,err=*next))
        endif
    endif

rem --- Open files
    num_files=16
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ARC_SALECODE",   open_opts$[1]="OTA"
    open_tables$[2]="ARC_TERMCODE",   open_opts$[2]="OTA"
    open_tables$[3]="ARM_CUSTMAST",   open_opts$[3]="OTA"
    open_tables$[4]="ARS_PARAMS",     open_opts$[4]="OTA"
    open_tables$[5]="ARS_REPORT",     open_opts$[5]="OTA"
    open_tables$[6]="IVM_ITEMMAST",   open_opts$[6]="OTA"
    open_tables$[7]="IVS_PARAMS",     open_opts$[7]="OTA"
    open_tables$[8]="OPT_FILLMNTDET", open_opts$[8]="OTA"
    open_tables$[9]="OPT_FILLMNTHDR", open_opts$[9]="OTA"
    open_tables$[10]="OPT_CARTDET",   open_opts$[10]="OTA"
    open_tables$[11]="OPT_CARTHDR",   open_opts$[11]="OTA"
    open_tables$[12]="OPT_CARTLSDET", open_opts$[12]="OTA"
    open_tables$[13]="OPT_INVHDR",    open_opts$[13]="OTA"
    open_tables$[14]="OPC_MESSAGE",   open_opts$[14]="OTA"
    open_tables$[15]="OPE_ORDSHIP",   open_opts$[15]="OTA"
    open_tables$[16]="OPM_CUSTJOBS",  open_opts$[16]="OTA"

    gosub open_tables

    arsReport_dev=num(open_chans$[5])
    ivParams_dev=num(open_chans$[7])
    optCartHdr_dev=num(open_chans$[11])

    dim arsReport$:open_tpls$[5]
    dim ivParams$:open_tpls$[7]
    dim optCartHdr$:open_tpls$[11]

rem --- Get Parameters
    findrecord(ivParams_dev,key=firm_id$+"IV00",dom=std_missing_params)ivParams$
    findrecord(arsReport_dev,key=firm_id$+"AR02",err=std_missing_params)arsReport$

    comp_addrLine_len = 40
    comp$=arsReport.addr_line_1$+arsReport.addr_line_2$+arsReport.city$+arsReport.state_code$+arsReport.zip_code$
    call pgmdir$+"adc_address.aon",comp$,24,3,9,comp_addrLine_len
    comp$=pad(arsReport.name$,comp_addrLine_len)+comp$

rem --- Initialize Data
    call pgmdir$+"adc_getmask.aon","","AR","I","",cust_mask$,0,cust_size
    call pgmdir$+"adc_getmask.aon","","AR","U","",qty_mask$,0,qty_mask
    call pgmdir$+"adc_getmask.aon","","IV","I","",ivIMask$,0,0

    rem --- Make the 'Patterns' used to mask in iReports from Addon masks
    rem       examples:
    rem          ##0.00;##0.00-   Includes negatives with minus at the end
    rem          ##0.00;-##0.00   Includes negatives with minus at the front
    rem          ##0.00;##0.00-   Positives only
    qty_mask_pattern$=fngetPattern$(qty_mask$)

rem --- Set Report parameters
    params! = Option!.getOptionMap()
    params!.put("FIRM_ID",firm_id$)
    params!.put("AR_TYPE",callpoint!.getDevObject("ar_type"))
    params!.put("CUSTOMER_ID",customer_id$)
    params!.put("ORDER_NO",order_no$)
    params!.put("AR_INV_NO",callpoint!.getDevObject("ar_inv_no"))
    params!.put("QTY_MASK",qty_mask$)
    params!.put("ITEM_MASK",ivImask$)
    params!.put("CUST_MASK",cust_mask$)
    params!.put("CUST_SIZE",str(cust_size))
    params!.put("BARISTA_WD",dir(""))
    params!.put("LOGO_FILE",logo_filename$)
    params!.put("IVS_LOTSER_FLAG",ivParams.lotser_flag$)
    if callpoint!.getDevObject("reprint_flag")="Y" then
        params!.put("REPRINT",Translate!.getTranslation("AON_REPRINT"))
    else
        params!.put("REPRINT","")
    endif
        
    params!.put("AR_ADDRESS1",comp$((comp_addrLine_len*0)+1,comp_addrLine_len))
    params!.put("AR_ADDRESS2",comp$((comp_addrLine_len*1)+1,comp_addrLine_len))
    params!.put("AR_ADDRESS3",comp$((comp_addrLine_len*2)+1,comp_addrLine_len))
    params!.put("AR_ADDRESS4",comp$((comp_addrLine_len*3)+1,comp_addrLine_len))

    call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arsReport.phone_no$,2),"",phone_mask$
    tmpphone$=cvs(arsReport.phone_no$,2)
    tmpphone$=str(tmpphone$:phone_mask$,err=*next)
    params!.put("AR_PHONE_NO",tmpphone$)
    fax_no$=cvs(arsReport.fax_no$,2)
    if fax_no$<>"" then fax_no$=str(fax_no$:phone_mask$,err=*next)
    params!.put("AR_FAX_NO",fax_no$)

rem --- Make Document Archive Record and Get ID
    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=rd_alias_id$
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$="DOC_ID-NOREPRINT"
    gosub document_whse
    rd_archive_action$=""

rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)

rem --- Set Report Name & Subreport directory
    reportDir$ = stbl("+DIR_REPORTS",err=*next)
    reportTitle$=sysinfo.task_desc$+"_"+rd_doc_id$
    repTitle!=reportTitle$
    repTitle$=repTitle!.replace(" ","_")
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "OPPackListHdr"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

rem --- See if this document is set up in Addon Report Control
    rptctl_alias$ = "PACKING_LIST"
    reportControl!=new ReportControl()
    reportControl!.setDocExtension("pdf")
    rpt_ctl$=reportControl!.getReportControl(rptctl_alias$)
    rpt_ctl$=iff(rpt_ctl$="","NO","YES")
    rpt_id$=iff(rpt_ctl$="YES",reportControl!.getReportID(),"")
    rpt_logo_file$=iff(rpt_ctl$="YES",reportControl!.getLogoFile(),"")
    logo_filename$=iff(rpt_logo_file$="",logo_filename$,rpt_logo_file$);rem doc-specific logo supersedes default or company logo

    rem --- Use ReportControl object to see if customer wants print, email, or fax
    do_emailFax=0
    emailFax! = BBjAPI().makeVector()
    if rpt_ctl$="YES"
        found=reportControl!.getRecipientInfo(rpt_id$,customer_id$,"")
        if found         
            if reportControl!.getEmailYN()="Y" or reportControl!.getFaxYN()="Y"
                emailFax!.add(rpt_id$)
                emailFax!.add(customer_id$)
                emailFax!.add(rd_doc_id$)
                do_emailFax=1
            endif
        endif
    endif
    
rem --- Check for user authentication
    declare BBJasperReport report!
    report! = BarUtils.getBBJasperReport(filename$)
    report!.putParams(params!)

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)

    rem --- Create one individual Packing List (not the full report)
    declare BBJasperReport packingList!
    packingList! = BarUtils.getBBJasperReport(filename$)
    packingList!.putParams(params!)
    packingList!.setLocale(locale$)

rem --- Fill Report and Show
    rc=report!.fill(1)
    if rc<>BBJasperReport.getSUCCESS() then goto close_win
    rc=packingList!.fill(1)
    if rc<>BBJasperReport.getSUCCESS() then goto close_win

    rem --- The full report includes a separate copy of the Packing List for each carton
    cartons=0
    optCartHdr_trip$=firm_id$+"E"+callpoint!.getDevObject("ar_type")+customer_id$+order_no$+callpoint!.getDevObject("ar_inv_no")
    read(optCartHdr_dev,key=optCartHdr_trip$,knum="AO_STATUS",dom=*next)
    while 1
        optCartHdr_key$=key(optCartHdr_dev,end=*break)
        if pos(optCartHdr_trip$=optCartHdr_key$)<>1 then break
        read(optCartHdr_dev)
        cartons=cartons+1
    wend
    if cartons>1 then
        for i=2 to cartons
            report!.appendReport(packingList!)
        next i
    endif
    
    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path
            
    gosub exportToPDF; rem --- force save to doc archive
    
    declare BBJasperViewerWindow viewerWindow!
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,repTitle$,$00080093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)
    viewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    savMenuItem! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_ITEM_NAME())
    savMenuItem!.setCallback(BBjMenuItem.ON_POPUP_ITEM_SELECT,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")

    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)
        
    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win")

rem --- Event Control
    process_events,err=*same

    goto std_exit

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_doc_path$=dsk("")+dir("")
        rd_doc_path$=BBjAPI().getFileSystem().resolvePath(util.resolvePathStbls(stbl("+DOC_DIR_PDF",err=*next)),err=*next)+"/"
        mkdir rd_doc_path$,err=*next
    endif

    return

OnSaveMenuButton:
rem --- save save and display confirmation dialog

    show_save_dlg$="YES"
 
exportToPDF:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_name$=repTitle$+".pdf"
        rd_doc_ext$="PDF"
        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse

        rem --- Use PACKING_LIST for Report Control's Report Alias
        reportTitle$=Translate!.getTranslation("AON_PACKING_LIST","Packing List")+"_"+rd_doc_id$
        repTitle!=reportTitle$
        repTitle$=repTitle!.replace(" ","_")
        rd_doc_name$=repTitle$+".pdf"
        rd_doc_ext$="PDF"
        packingList!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif

    if show_save_dlg$="YES"
        msg_id$="DOC_OUTPUT_COMP"
        gosub disp_message
        show_save_dlg$=""
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    rem gosub exportToPDF; rem --- Already aways done

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

close_win:rem --- Viewer Window Closed
    if emailFax!.size() then
        msg_id$ = "CONF_RPTCTL"
        gosub disp_message
        if msg_opt$="Y"
            for email_fax=0 to emailFax!.size()-1 step 3
                reportControl!.addToDocQueue(emailFax!.get(email_fax),emailFax!.get(email_fax+1),"",emailFax!.get(email_fax+2))    
            next email_fax
        endif
    endif

    viewerWindow!.destroy(err=*next)
    if tcb(13) then exit
    goto std_exit
    
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        goto std_exit
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- Functions

rem --- fngetPattern$: Build iReports 'Pattern' from Addon Mask
    def fngetPattern$(q$)
        q1$=q$
        if len(q$)>0
            if pos("-"=q$)
                q1=pos("-"=q$)
                if q1=len(q$)
                    q1$=q$(1,len(q$)-1)+";"+q$; rem Has negatives with minus at the end =>> ##0.00;##0.00-
                else
                    q1$=q$(2,len(q$)-1)+";"+q$; rem Has negatives with minus at the front =>> ##0.00;-##0.00
                endif
            endif
            if pos("CR"=q$)=len(q$)-1
                q1$=q$(1,pos("CR"=q$)-1)+";"+q$
            endif
            if q$(1,1)="(" and q$(len(q$),1)=")"
                q1$=q$(2,len(q$)-2)+";"+q$
            endif
        endif
        return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
    
rem #endinclude std_end.src

    end
