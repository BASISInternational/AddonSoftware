rem --- Invoice History Purge
rem --- Program opu_da v8.0.0 09Jul2007 (opu_da)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:29:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0397)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0149)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0155)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0168)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0169)
rem --- v7.x Administrator reference ["sys-01"; re] (Line 0183)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0195)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0200)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0205)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0222)
rem --- BBx reference ["syc_ra.bbx"] (Line 0222)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0227)
rem --- BBx reference ["syc_rs.bbx"] (Line 0227)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0248)
rem --- BBx reference ["syc_rs.bbx"] (Line 0248)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0266)
rem --- BBx reference ["syc_rs.bbx"] (Line 0266)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0281)
rem --- BBx reference ["syc_rs.bbx"] (Line 0281)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0298)
rem --- BBx reference ["syc_rs.bbx"] (Line 0298)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0302)
rem --- BBx reference ["syc_rs.bbx"] (Line 0302)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0313)
rem --- BBx reference ["syc_lc.bbx"] (Line 0313)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0318)
rem --- BBx reference ["syc_rs.bbx"] (Line 0318)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0319)
rem --- BBx reference ["syc_rs.bbx"] (Line 0319)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0338)
rem --- BBx reference ["syc_rs.bbx"] (Line 0338)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0342)
rem --- BBx reference ["syc_rs.bbx"] (Line 0342)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0353)
rem --- BBx reference ["syc_lc.bbx"] (Line 0353)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0359)
rem --- BBx reference ["syc_rs.bbx"] (Line 0359)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0360)
rem --- BBx reference ["syc_rs.bbx"] (Line 0360)
rem --- v7.x Administrator reference ["syc_wc.bbx"] (Line 0421)
rem --- BBx reference ["syc_wc.bbx"] (Line 0421)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0520)
rem --- BBx reference ["syc_rs.bbx"] (Line 0520)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0521)
rem --- BBx reference ["syc_rs.bbx"] (Line 0521)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- CLEAR statement removed [clear_screen]
rem --- CLEAR statement removed [clear_text:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file opt-51 referenced (Line 0134)
rem --- Cross-reference file opt-61 referenced (Line 0135)
rem --- Cross-reference file opt-51 referenced (Line 0191)
rem --- Cross-reference file opt-61 referenced (Line 0192)
rem --- Cross-reference file opt-51 referenced (Line 0475)
rem --- Cross-reference file opt-61 referenced (Line 0477)

rem --- The following IOLIST's were removed from this program:

rem --- arm01a: iolist *,x0$(1)
rem --- opt01a: iolist a0$,a1$,a[all]

rem --- The following channel references have been identified:

rem --- ars01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- art01a: Channel reference (Line 0191)
rem --- art63a: Channel reference (Line 0190)
rem --- ivs01a: (Generated by CodePort)
rem --- opt11a: Channel reference (Line 0188)
rem --- opt21a: Channel reference (Line 0187)
rem --- opt31a: Channel reference (Line 0186)
rem --- opt51a: Channel reference (Line 0185)
rem --- opt61a: Channel reference (Line 0184)
rem --- sys01a: Channel reference (Line 0183)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="art-01"
    files$[4]="art-63"
    files$[5]="opt-01"
    files$[6]="opt-11"
    files$[7]="opt-21"
    files$[8]="opt-31"
    files$[9]="opt-51"
    files$[10]="opt-61"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    art01_dev=channels[3]
    art63_dev=channels[4]
    opt01_dev=channels[5]
    opt11_dev=channels[6]
    opt21_dev=channels[7]
    opt31_dev=channels[8]
    opt51_dev=channels[9]
    opt61_dev=channels[10]

rem --- Dimension string templates

    dim arm01a$:templates$[2],art01a$:templates$[3],art63a$:templates$[4],
:       opt01a$:templates$[5],opt11a$:templates$[6],opt21a$:templates$[7],
:       opt31a$:templates$[8],opt51a$:templates$[9],opt61a$:templates$[10]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=9
    dim files$[files],options$[files],channels[files]
    files$[1]="opt-01"
    files$[2]="opt-11"
    files$[3]="opt-31"
    files$[4]="opt-21"
    files$[5]="opt-51"
    files$[6]="opt-61"
    files$[7]="arm-01"
    files$[8]="art-01"
    files$[9]="sys-01"; rem ESCAPE 
    FILES$[10]="ART-63"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    opt01_dev=channels[1]
    opt11_dev=channels[2]
    opt31_dev=channels[3]
    opt21_dev=channels[4]
    opt51_dev=channels[5]
    opt61_dev=channels[6]
    arm01_dev=channels[7]
    art01_dev=channels[8]
    sys01_dev=channels[9]; rem ESCAPE 
    ART63_DEV=CHANNELS[10]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    dim p[1]
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(3,2))

rem --- Initialize Data

    dim j0$(20,"0"),j$(80,"-"),j1$(40," ")
    dim a[13]
    k0=1
    k9=20

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations

l1000: rem --- Options

    call pgmdir$+"syc_rs.bbx","",my_context,13005,fill(80),0,"",status
    v0$="S"
    v1$="ERC"
    v2$=p9$
    v3$="ND"
    v4$="N=Leave A # Of Invoices PerCustomer, D=Through Invoice Date, <F4>=End"
    v0=1
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l1070,l1000,flow_control,l1000,std_exit,l1070,std_exit
l1070:
    if pos(v$="ND")=0 goto l1000
    p9$=v$
    goto flow_control

l1200: rem --- Purge Through Date

    if p8$="" p8$=sysinfo.system_date$
    if p9$="N" call pgmdir$+"syc_rs.bbx","",my_context,3001,"",0,"",status; goto flow_control
    v0$="D"
    v1$="C"
    v2$=p8$
    v3$=""
    v4$="Enter Invoice Date To Purge Through"
    v0=3
    v1=40
    v2=4
    control_id=3001
    gosub std_input
    on v3 goto l1280,l1200,flow_control,l1200,std_exit,l1280,std_exit
l1280:
    p8$=v$
    goto flow_control

l1400: rem --- # Of Invoices To Retain For Each Customer

    if p9$="D" call pgmdir$+"syc_rs.bbx","",my_context,3002,"",0,"",status; goto flow_control
    v0$="N"
    v1$="C"
    v2$=p7$
    v3$="###0"
    v4$="Enter Maximum Number Of Invoices To Retain For Each Customer"
    v0=3
    v1=40
    v2=5
    control_id=3002
    gosub std_input
    on v3 goto l1470,l1400,flow_control,l1400,std_exit,l1470,std_exit
l1470:
    p7=v
    p7$=str(v)
    call pgmdir$+"syc_rs.bbx","",my_context,3002,p7$,0,"",status
    goto flow_control

l1600: rem --- Beginning Customer Number

    v0$="M"
    v1$="CE"
    v2$=p6$
    v3$=m0$
    v4$="<F1>=First, <F3>=Customer Lookup"
    v0=p[0]
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1667,l1670,l1650,l1700,l1670,l1667,flow_control
l1650:
    gosub clear_text; let p6$=""; call pgmdir$+"syc_rs.bbx","",my_context,3003,j1$(1,p[0]),0,"",status; goto l1790
l1667:
    if v$<>"" goto l1690
l1670:
    gosub clear_text; let v3=1,p6$=""; call pgmdir$+"syc_rs.bbx","",my_context,13003,"First",0,"",status; goto l1790
l1690:
    goto l1730
l1700:
    v4=2
    v5=5
    v6=13
    v7=21
    v8=p[0]
    v5$="C"
    v3$=m0$
    call pgmdir$+"syc_lc.bbx",v$
    if len(v$)=0 goto l1600
l1730:
    dim x0$(30)
    find record (arm01_dev,key=firm_id$+v$,dom=*next) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3003,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13003,x0$,0,"",status
    p6$=v$
l1790:
    goto flow_control

l1800: rem --- Ending Customer Number

    v0$="M"
    v1$="C"
    v2$=p5$
    v3$=m0$
    v4$="<F1>=Last, <F3>=Customer Lookup"
    v0=p[0]
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l1865,l1870,l1850,l1900,l1870,l1865,flow_control
l1850:
    gosub clear_text; let p5$=""; call pgmdir$+"syc_rs.bbx","",my_context,3004,j1$(1,p[0]),0,"",status; goto l1990
l1865:
    if v$<>"" goto l1890
l1870:
    gosub clear_text; let v3=1,p5$=""; call pgmdir$+"syc_rs.bbx","",my_context,13004,"Last",0,"",status; goto l1990
l1890:
    goto l1930
l1900:
    v4=2
    v5=5
    v6=13
    v7=21
    v8=p[0]
    v5$="C"
    v3$=m0$
    call pgmdir$+"syc_lc.bbx",v$
    if len(v$)=0 goto l1800
l1930:
    if v$<p6$ goto l1800
    dim x0$(30)
    find record (arm01_dev,key=firm_id$+v$,dom=*next) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3004,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13004,x0$,0,"",status
    p5$=v$
l1990:
    goto flow_control

l2000: rem --- Display Processing Warning

    i0=5
    dim message$[1]
    if p9$="N" goto l2100
    message$[0]="Warning!! All Invoices With A Date Prior To "+fndate$(p8$)+" Will Be Purged"
    goto l2120
l2100:
    message$[0]="Warning!! This Will Retain Only "+p7$+" Invoices Per Customer!"
l2120:
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,19,-1,v$,v3
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l1800,l2000,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    exit_ctrl=1
    goto l5000

l5000: rem --- Process History Data

    for x=12 to 14 step 2
        call pgmdir$+"syc_wc.bbx",1,0,80,0,0,x,0
    next x
    if p9$="" goto std_exit
    if p9$="N" and p7=0 goto std_exit
    if p9$="D" and p8$="" goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","Purging","",20,0,1,meter_num,status
    read (opt01_dev,key=firm_id$+"  "+p6$,dom=*next)

l5100: rem --- Read Invoice History Header Records

    k$=key(opt01_dev,end=l5900)
    if k$(1,2)<>firm_id$ goto l5900
    if p5$<>"" and k$(5,6)>p5$ goto l5900
    read record (opt01_dev,key=k$) opt01a$
    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(k$(5,p[0]),m0$),0,0,1,meter_num,status
    if p9$="D" goto process_by_date
    if k$(1,10)<>t0$ gosub process_by_count
    t0=t0+1
    goto l5100

process_by_date: rem --- Process Invoice History By Invoice Date

    if a0$(24,3)>p8$ goto l5100
    gosub delete_history
    goto l5100

delete_history: rem --- Process History Detail Lines

    read (opt11_dev,key=a0$(1,17)+"000",dom=*next)
l5520:
    k2$=key(opt11_dev,end=delete_shipto)
    if pos(a0$(1,17)=k2$)<>1 goto delete_shipto
    remove (opt11_dev,key=k2$)

    goto l5520

delete_shipto: rem --- Remove Manual Ship-To

    remove (opt31_dev,key=a0$(1,2)+a0$(5,13),dom=*next)

rem --- Remove Serial/Lotted History Detail

    read (opt21_dev,key=a0$(1,17),dom=*next)
l5660:
    r0$=key(opt21_dev,end=l5700)
    if r0$(1,17)<>a0$(1,17) goto l5700
    remove (opt21_dev,key=r0$)

    goto l5660

l5700: rem --- Remove History Cross Reference Records

    find (art01_dev,key=a0$(1,17)+"00",dom=l5730)
    goto l5750
l5730: remove (opt51_dev,key=a0$(1,4)+a0$(11,7)+a0$(5,6),dom=*next)

remove (opt61_dev,key=a0$(1,4)+a0$(24,3)+a0$(11,7)+a0$(5,6),dom=*next)

rem --- ESCAPE REMOVE (ART63_DEV,KEY=A0$(1,4)+A0$(42,7)+A0$(11,7)+A0$(5,6),DOM=5746)

l5750: rem --- Remove History Header Record

    remove (opt01_dev,key=a0$(1,20))

    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(k$(5,p[0]),m0$)+"  "+k$(11,7)+"-"+k$(18,3),0,0,1,meter_num,status
    return

l5900: rem --- Finished

    if p9$="D" goto std_exit
    let t9$="E"
    gosub process_by_count
    goto std_exit

process_by_count: rem --- Purge Based On Number Of Invoices 

    if t0$="" goto l6500
    if t0<=p7 goto l6500
    let t1=t0-p7,t2=0
    read (opt01_dev,key=t0$,dom=*next)
l6120:
    let k2$=key(opt01_dev,end=std_exit)
    if k2$(1,10)<>t0$ goto l6500
    find record (opt01_dev,key=k2$) opt01a$
    gosub delete_history
    let t2=t2+1
    if t2<t1 goto l6120
l6500:
    if t9$="E" return
    let t0$=k$(1,10)
    let t0=0,t1=0,t2=0
    return

rem --- Clear Screen 

    for i=13 to 21
        print @(0,i),'CL',
    next i
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,"",0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fndate$(q1$)=fndate$(q1$(2),q1$)+fndate$(q1$(3),q1$)+fndate$(q1$(1),q1$)
    def fndate$(q$)=chr(fnyy_year(q$(5,2))+32)+chr(num(q$(1,2))+32)+chr(num(q$(3,2))+32)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
    let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
    let q=num(fnyy$(q1$)),q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8181)
l8181:
    if q<q9 q=q+100
    return q
    fnend
rem --- FNF$ AlphaNumeric Masking Function
    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    if pos("E"=cvs(q1$,4)) goto *next else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
