rem --- Sales Register (Lead Overlay)
rem --- Program opr_ha v8.0.0 06Jul2007 (opr_ha)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:47:22)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0261)
rem --- Undefined function fnyy_year (Line 0268)
rem --- Undefined function fnyy_year (Line 0273)
rem --- Undefined function fnv (Line 0698)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0172)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0179)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0196)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0197)
rem --- v7.x Administrator reference ["sys-01"] (Line 0216)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0230)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0237)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0251)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0256)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0262)
rem --- v7.x sys-01 reference [sys01_dev,p[] (Line 0274)
rem --- v7.x sys-01 reference [sys01_dev,i[] (Line 0275)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0284)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0324)
rem --- BBx reference ["syc_ra.bbx"] (Line 0324)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0349)
rem --- BBx reference ["syc_rs.bbx"] (Line 0349)
rem --- BBx reference ["opr_hb.bbx"] (Line 0677)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0732)
rem --- BBx reference ["syc_rs.bbx"] (Line 0732)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0733)
rem --- BBx reference ["syc_rs.bbx"] (Line 0733)
rem --- BBx reference ["ivc_lf.bbx"] (Line 0786)
rem --- BBx reference ["ivc_lf.bbx"] (Line 0791)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]

rem --- The following IOLIST's were removed from this program:

rem --- arm01a: iolist b0$,b1$
rem --- arm10c: iolist *,y3$
rem --- arm10d: iolist *,y4$
rem --- gls01a: iolist x$,g1$,g2$,g3$,g4$,g5$,g6$,g7$
rem --- ivm01a: iolist *,*,d2$,*,*,*,d6$
rem --- ivm02a: iolist d0$,d1$(1),*,d[all]
rem --- ivw05a: iolist w9$,icost
rem --- ope01a: iolist a0$(1),a1$,a[all]
rem --- ope11a: iolist w0$,w1$(1),w2$,w[all]
rem --- ope21a: iolist h0$,h9$,h5$,h[all]
rem --- ope41a: iolist z7$,z8$
rem --- opm02a: iolist y0$,y1$
rem --- opm06a: iolist y5$(1),y6$(1),tax0,tax1
rem --- ops10s: iolist v$,v[all]
rem --- opw01a: iolist opw01_k$
rem --- opw11a: iolist x0$,x0
rem --- opw21a: iolist x0$,x0
rem --- opw31a: iolist x0$,x0
rem --- sas01a: iolist sa0$,sa1$(1),sa2$(1)

rem --- The following channel references have been identified:

rem --- ars01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- glm01a: Channel reference (Line 0271)
rem --- glw11a: Channel reference (Line 0276)
rem --- ivm04a: Channel reference (Line 0269)
rem --- ivs01a: (Generated by CodePort)
rem --- ivw04a: Channel reference (Line 0273)
rem --- ope04a: Channel reference (Line 0256)
rem --- opw41a: Channel reference (Line 0270)
rem --- sys01a: Channel reference (Line 0255)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=23,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-10"
    files$[4]="glm-01"
    files$[5]="glw-11"
    files$[6]="ivm-01"
    files$[7]="ivm-02"
    files$[8]="ivm-04"
    files$[9]="ivw-04"
    files$[10]="ivw-05"
    files$[11]="ope-01"
    files$[12]="ope-04"
    files$[13]="ope-11"
    files$[14]="ope-21"
    files$[15]="ope-41"
    files$[16]="opm-02"
    files$[17]="opm-06"
    files$[18]="ops-10"
    files$[19]="opw-01"
    files$[20]="opw-11"
    files$[21]="opw-21"
    files$[22]="opw-31"
    files$[23]="opw-41"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm10_dev=channels[3]
    glm01_dev=channels[4]
    glw11_dev=channels[5]
    ivm01_dev=channels[6]
    ivm02_dev=channels[7]
    ivm04_dev=channels[8]
    ivw04_dev=channels[9]
    ivw05_dev=channels[10]
    ope01_dev=channels[11]
    ope04_dev=channels[12]
    ope11_dev=channels[13]
    ope21_dev=channels[14]
    ope41_dev=channels[15]
    opm02_dev=channels[16]
    opm06_dev=channels[17]
    ops10_dev=channels[18]
    opw01_dev=channels[19]
    opw11_dev=channels[20]
    opw21_dev=channels[21]
    opw31_dev=channels[22]
    opw41_dev=channels[23]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm10a$:templates$[3],glm01a$:templates$[4],
:       glw11a$:templates$[5],ivm01a$:templates$[6],ivm02a$:templates$[7],
:       ivm04a$:templates$[8],ivw04a$:templates$[9],ivw05a$:templates$[10],
:       ope01a$:templates$[11],ope04a$:templates$[12],ope11a$:templates$[13],
:       ope21a$:templates$[14],ope41a$:templates$[15],opm02a$:templates$[16],
:       opm06a$:templates$[17],ops10a$:templates$[18],opw01a$:templates$[19],
:       opw11a$:templates$[20],opw21a$:templates$[21],opw31a$:templates$[22],
:       opw41a$:templates$[23]

rem --- Retrieve miscellaneous templates

    files=6,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="arm-10D"
    ids$[2]="ars-01A"
    ids$[3]="gls-01A"
    ids$[4]="ivs-01A"
    ids$[5]="sas-01A"
    ids$[6]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim arm10d$:templates$[1],ars01a$:templates$[2],gls01a$:templates$[3],
:       ivs01a$:templates$[4],sas01a$:templates$[5],sys01a$:templates$[6]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sas01a_key$=firm_id$+"SA00"
    find record (ads01_dev,key=sas01a_key$,err=std_missing_params) sas01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open Files
rem --- ESCAPE LET CVF150=UNT; OPEN (CVF150)"CVF150
rem --- ESCAPE LET JCMDIS=UNT; OPEN (JCMDIS)"JCMDIS
rem --- ESCAPE LET CVF030=UNT; OPEN (CVF030)"CVF030
rem --- ESCAPE LET MBS_02=UNT; OPEN (MBS_02)"MBS-02

    files=23
    dim files$[files],options$[files],channels[files]
    files$[1]="ope-01"
    files$[2]="ope-04"
    files$[3]="ope-11"
    files$[4]="ope-41"
    files$[5]="arm-01"
    files$[6]="arm-10"
    files$[7]="ops-10"
    files$[8]="ivm-01"
    files$[9]="ivm-02"
    files$[10]="sys-01"
    files$[11]="opm-02"
    files$[12]="opm-06"
    call pgmdir$+"adc_fileopen.aon",1,1,12,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ope01_dev=channels[1]
    ope04_dev=channels[2]
    ope11_dev=channels[3]
    ope41_dev=channels[4]
    arm01_dev=channels[5]
    arm10_dev=channels[6]
    ops10_dev=channels[7]
    ivm01_dev=channels[8]
    ivm02_dev=channels[9]
    sys01_dev=channels[10]
    opm02_dev=channels[11]
    opm06_dev=channels[12]

rem --- Parameters

    dim g[4],i[6],p[3],v[15],sa1$(11),sa2$(11)
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n3$=sysinfo.task_desc$
    r9$="N"
    ih$="N"
    ls$="N"
    lf$="N"
    br$="N"
    gl$="N"
    jn$="N"
    sa$="N"
    po$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    if p3$(11,1)="Y" r9$="Y"
    if p3$(12,1)="Y" jn$="Y"
    if p3$(14,1)="Y" br$="Y"
    if p3$(77,1)="Y" ih$="Y"
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    for x=0 to 4
        g[x]=num(g2$(x*2+1,2),err=*next)
    l436:
    next x
    g[2]=fnyy_year(g2$(5,2))
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    if pos(i3$(17,1)="LS") ls$="Y"
    if pos(i3$(3,1)="LF") lf$="Y"
    i[0]=num(i2$(1,2))
    i[2]=num(i2$(5,1))
    i[3]=num(i4$(1,2))
    i[4]=fnyy_year(i4$(3,2))
    i[5]=num(i2$(7,2))
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(3,2))
    p[2]=num(p4$(1,2))
    p[3]=fnyy_year(p4$(3,2))
    call pgmdir$+"adc_perioddates.aon",sys01_dev,p[2],p[3],x$,g9$,status
    call pgmdir$+"adc_perioddates.aon",sys01_dev,i[3],i[4],x$,p9$,status
    call pgmdir$+"glc_ctlcreate.aon",err=l475,pgm(-2),n2$,glw11$,gl$,status
    if status goto std_exit
    call pgmdir$+"adc_application.aon","PO",info$[all]
l475:
    po$=info$[20]
    call pgmdir$+"adc_application.aon","SA",info$[all]
    sa$=info$[20]
    if sa$<>"Y" goto l490
    find record (sys01_dev,key=firm_id$+"SA00",dom=std_missing_params) sas01a$
l490:
    find record (ops10_dev,key=firm_id$+"S",dom=l500) ops10s$

rem --- ESCAPE FIND (MBS_02,KEY=N0$)IOL=MBS_02

l500: rem --- Initialize Data

    l9=59
    l=l9+1
    headings=3
    width=132
    page=0
    dim headings$[headings],lf_channels[10]
    headings$[0]=n1$
    headings$[1]=n3$
    clock$=""
    when$=sysinfo.system_date$
    dim a0$(200),a[13],w1$(64),w[17],t[6],u[6]
    seq$="C"
    call pgmdir$+"adc_sizemask.aon",m1$,m1,11,11
    m0=len(m0$)
    errors=0
    glstatus=0

rem --- Additional File Opens

    if gl$="Y" files$[13]="glm-01"
    if lf$="Y" files$[14]="ivm-04"
    if ls$="Y" files$[15]="ope-21"
    call pgmdir$+"adc_fileopen.aon",1,13,15,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[13]
    ivm04_dev=channels[14]
    ope21_dev=channels[15]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    gosub display_fields
    goto start_done

l800: rem --- Register Sequence

    v0$="S"
    v1$="C"
    v2$=seq$
    v3$="CI"
    v4$="C=Customer Number   I=Invoice Number"
    v0=1
    v1=40
    v2=3
    i0=0
    control_id=3000
    gosub std_input
    on v3 goto l835,l800,flow_control,l800,flow_control,l835,flow_control
l835:
    if pos(v$="CI")=0 goto l800
    seq$=v$
    if seq$="I" headings$[2]="By Invoice Number" else headings$[2]="By Customer Number"
    goto flow_control
l890:
    call pgmdir$+"syc_rs.bbx","",my_context,3001,"Invoice Register",0,"",status

rem --- Clear & Lock Files

    files$[16]="opw-11"
    options$[16]="CL"
    files$[17]="opw-01"
    options$[17]="CL"
    files$[18]="opw-21"
    options$[18]="CL"
    files$[19]="opw-41"
    options$[19]="CL"
    files$[20]="opw-31"
    options$[20]="CL"
    if gl$="Y" files$[21]=glw11$,options$[21]="CL"
    if lf$="Y" files$[22]="ivw-04",options$[22]="CL"
    if lf$="Y" files$[23]="ivw-05",options$[23]="CL"
    call pgmdir$+"adc_fileopen.aon",1,16,23,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    opw11_dev=channels[16]
    opw01_dev=channels[17]
    opw21_dev=channels[18]
    opw41_dev=channels[19]
    opw31_dev=channels[20]
    glw11_dev=channels[21]
    ivw04_dev=channels[22]
    ivw05_dev=channels[23]
    if lf$<>"Y" goto l980
    lf_channels[0]=ivm04_dev
    lf_channels[1]=ivw04_dev
    lf_channels[2]=ivm02_dev
l980:
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    gosub l6100
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",m0+8,0,1,0,ignore_status

rem --- Initial Read

    if seq$="C" goto l1040
    read (opw01_dev,key=firm_id$,dom=l1100)
    if seq$="I" goto l1100
l1040:
    read (ope04_dev,key=firm_id$+"I",dom=*next)

l1100: rem --- Main Read

    precision 4
    lines$=""
    if seq$="C" goto l1150
    k1$=key(opw01_dev,end=l4000)
    read (opw01_dev)
    if k1$(1,2)<>firm_id$ goto l4000
    extract record (ope01_dev,key=k1$(1,2)+"  "+k1$(10)+"000",dom=l1100) ope01a$
    if seq$="I" goto l1170
l1150:
    k1$=key(ope04_dev,end=l4000)
    read (ope04_dev)
    if k1$(1,3)<>firm_id$+"I" goto l4000
    extract record (ope01_dev,key=k1$(1,2)+k1$(4)+"000",dom=l1100) ope01a$
l1170:
    if a0$(68,1)<>"Y" or pos(a0$(69,1)="12")<>0 goto l1100
    z7$=""
    z8$=""
    if a0$(99,1)="Y" find record (ope41_dev,key=a0$(1,17),dom=*next) ope41a$
    a0$(69,1)="S"
    write record (ope01_dev,key=a0$(1,20)) ope01a$

rem --- Breaks

    if seq$="C" call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(5,p[0]),m0$)+""+a0$(42,7),0,0,1,0,ignore_status
    if seq$="I" call pgmdir$+"adc_progress.aon","S","","","",a0$(42,7)+" "+fnmask$(a0$(5,p[0]),m0$),0,0,1,0,ignore_status
    if a0$(22,1)<>"I" goto l1100

rem --- Heading

    dim t[6]
    t[2]=a[0]
    t[3]=a[1]
    t[5]=a[2]
    t0=0
    gosub l6000
    if a0$(21,1)<>"V" goto l1600

rem --- Void

    if l>l9 gosub report_heading
    print (printer_dev)'LF',fnmask$(a0$(5,p[0]),m0$),@(12),a0$(11,7),@(21),a0$(42,7),@(30),fndate$(a0$(24,3)),"      * Void *"
    print (printer_dev)@(0),b1$(1,30)
    l=l+3
    goto l1100

l1600: rem --- Determine GL Accounts

    dim y2$(80,"0"),y4$(80,"0"),y9$(80,"0")
    find record (arm10_dev,key=firm_id$+"D"+a0$(66,2),dom=l1625) arm10d$
    y2$(1)=y4$
l1625:
    y9$(1,10)=y2$(1,10)
    y9$(31,20)=y2$(31,20)
    if a0$(99,1)<>"Y" or len(z7$)<24 goto l1700
    dim y3$(20,"0")
    find record (arm10_dev,key=firm_id$+"C"+z7$(21,3),dom=*next) arm10c$
    y9$(1,10)=y3$(1,10)

l1700: rem --- Setup Invoice GL Variables

    gldate$=a0$(24,3)
    memo$=b1$(1,30)
    ref1$=fnmask$(a0$(5,p[0]),m0$)
    ref2$=a0$(42,7)

rem --- Position Invoice Detail File

    read (ope11_dev,key=a0$(1,17),dom=*next)

l2000: rem --- Detail

    k$=key(ope11_dev,end=l3000)
    if k$(1,17)<>a0$(1,17) goto l3000
    read record (ope11_dev) ope11a$
    dim y0$(32),y1$(12)
    find record (opm02_dev,key=firm_id$+w0$(21,1),dom=*next) opm02a$
    if y0$(27,1)="Y" and p3$(28,1)="Y" goto l2100
    if pos(y0$(25,1)="PS")>0 and w[4]<>0 gosub l6500; rem "Go get current cost
l2100:
    if w[6]<0 t[1]=t[1]+w[6]
    if w[6]>0 t[0]=t[0]+w[6]
    t0=t0+w[6]
    t[4]=t[4]+round(w[0]*w[4],2)

rem --- Write Misc

    x0$=firm_id$+a0$(3,2)+w0$(21,1)
    x0=0
    find record (opw21_dev,key=x0$,dom=*next) opw21a$
    x0=x0+w[6]
    write record (opw21_dev,key=x0$) opw21a$
    t[6]=t[6]+w[6]

rem --- Determine GL Postings Here

    if gl$<>"Y" goto l2900
    if y0$(25,1)<>"S" goto l2500
    if y0$(27,1)="Y" goto l2520
    if p3$(11,1)="N" y9$(21,10)=y2$(21,10),y9$(61,20)=d6$; goto l2700; rem "Distribute by Customer
    dim d1$(64),d[20]
    find record (ivm02_dev,key=firm_id$+w0$(31,2)+w0$(33,20),dom=*next) ivm02a$
    dim y4$(80,"0")
    find record (arm10_dev,key=firm_id$+"D"+d1$(13,2),dom=*next) arm10d$
    y9$(21,10)=y4$(21,10)
    y9$(61,20)=y4$(61,20)
    goto l2700

l2500: rem --- Non-Stock & 'P' Types Here

    if pos(y0$(25,1)="NP")=0 goto l2600
l2520:
    dim y4$(80,"0")
    if p3$(11,1)="N" and y0$(25,1)="N" y9$(21,10)=y2$(21,10),y9$(61,20)=y2$(61,20); goto l2700
    find record (arm10_dev,key=firm_id$+"D"+y1$(11,2),dom=*next) arm10d$
    y9$(21,10)=y4$(21,10)
    y9$(61,20)=y4$(61,20)
    goto l2700

l2600: rem --- Other Charges Here

    if y0$(25,1)<>"O" goto l2900
    y9$(21,10)=y1$(1,10)

l2700: rem --- Now Post Debit/Credit

    precision 2
    ref3$=w0$(18,3)
    account$=y9$(21,10)
    amount=-w[6]
    if a0$(99,1)="Y" ref3$=w0$(18,3)+" (Cash)"
    gosub glrecap
    account$=y9$(1,10)
    amount=w[6]
    gosub glrecap
    if y0$(25,1)="O" or w[0]*w[4]=0 goto l2900
    account$=y9$(61,10)
    amount=(-w[0])*w[4]
    gosub glrecap
    account$=y9$(71,10)
    amount=w[0]*w[4]
    if validlncd$<>"" account$=ab2$(111,10)
    gosub glrecap
l2900:

    precision 4
    goto l2000

l3000: rem --- Print

    if l+2>l9 gosub report_heading
    t=0
    t1=t[0]+t[1]
    if t1<>0 t=(t1-t[4])*100/t1
    if abs(t)>999 t=sgn(t)*999.99
    print (printer_dev)'LF',@(0),fnmask$(a0$(5,p[0]),m0$),@(12),a0$(11,7),@(21),a0$(42,7),@(30),fndate$(a0$(24,3)),@(38+12-m1),t[0]:m1$,@(50+12-m1),t[1]:m1$,@(62+12-m1),t[5]:m1$,@(74+12-m1),t[2]:m1$,@(86+12-m1),t[3]:m1$,@(98+12-m1),t[0]+t[2]+t[1]-t[5]+t[3]:m1$,@(111+12-m1),t[4]:m1$,@(124),t:"-##0.00%"
    print (printer_dev)@(0),b1$(1,30)
    l=l+3
    if gl$="Y" call pgmdir$+"glc_datecheck.aon",a0$(24,3),"N",period$,year$,glstatus
    if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,a0$(24,3),glstatus,l,errors,status
    if lines$="" goto l3050
    if l+len(lines$)/3>l9 gosub report_heading
    for x=1 to len(lines$) step 3
        print (printer_dev)"   **** Warning!! Missing Serial Numbers in Line: ",lines$(x,3)
        l=l+1
    next x
l3050:
    if g9$>=a0$(24,3) j=0 else j=8
    for x=0 to 5
    
        rem --- T(0)=GROSS SALES,T(1)=RETURNS,T(2)=TAX,T(3)=FREIGHT,T(4)=COGS,T(5)=DISCOUNT,T(6)=EXTENTION,T=GROSS PROFIT
    
        u[x]=u[x]+t[x]
        v[x+j]=v[x+j]+t[x]
    next x

rem --- Territory Codes

    x0$=firm_id$+a0$(3,2)+a0$(72,3)
    x0=0
    find record (opw11_dev,key=x0$,dom=*next) opw11a$
    x0=x0+t0
    write record (opw11_dev,key=x0$) opw11a$

rem --- Salesperson Codes

    x0$=firm_id$+a0$(3,2)+a0$(59,3)
    x0=0
    find record (opw31_dev,key=x0$,dom=*next) opw31a$
    x0=x0+t0
    write record (opw31_dev,key=x0$) opw31a$

rem --- GL Detail For Freight, Discount

    ref3$=""
    if a0$(99,1)="Y" ref3$="Cash Sale"
    if a[1]=0 goto l3450
    account$=y9$(41,10)
    amount=-a[1]
    ref3$=""
    gosub glrecap
l3450:
    if a[2]=0 goto l3500
    account$=y9$(31,10)
    amount=a[2]
    gosub glrecap

l3500: rem --- GL Detail for Taxes

    if a[0]=0 goto l3800
    precision 4
    dim tax$(60),y5$(4),y6$(60)
    tax0=0
    tax1=0
    tax=a[0]
    taxttl=0
    find record (opm06_dev,key=firm_id$+a0$(80,2),dom=l3582) opm06a$
    tax$(1)=y5$(1,2)+" "+y5$(3,2)+y6$(6)
    tax=tax0*a[4]/100
    precision 2
    tax=tax*1
    if tax1<>0 and abs(tax)>tax1 tax=tax1*sgn(tax)
    taxttl=tax
    account$=tax$(46,10)
    amount=-tax
    gosub glrecap
    for x9=1 to 10
        precision 4
        x1$=tax$(26+2*(x9-1),2)
        if x1$="  " goto l3580
        dim y5$(4),y6$(60); let tax0=0,tax1=0,tax=0
        find record (opm06_dev,key=firm_id$+x1$,dom=l3580) opm06a$
        tax=tax0*a[4]/100
        precision 2
        tax=tax*1
        if tax1<>0 and abs(tax)>tax1 tax=tax1*sgn(tax)
        taxttl=taxttl+tax
        account$=y6$(46,10)
        amount=-tax
        gosub glrecap
    l3580:
    next x9
l3582:
    precision 2
    if a[0]=taxttl goto l3595
    tax=a[0]-taxttl
    account$=tax$(46,10)
    amount=-tax
    gosub glrecap

l3595: rem --- End of Tax routine

l3800: rem --- Net AR/Cash Here

    if a[0]+a[1]-a[2]=0 goto l3900
    account$=y9$(1,10)
    amount=a[0]+a[1]-a[2]
    gosub glrecap
l3900:
    goto l1100

l4000: rem --- Totals

    if l>l9 gosub report_heading
    u=0
    u1=u[0]+u[1]
    if u1<>0 u=(u1-u[4])*100/u1
    if abs(u)>999 u=sgn(u)*999.99
    if l+6>l9 gosub report_heading
    print (printer_dev)@(39),fill(93,"-"),'LF',@(10),"Register Totals:",@(38+12-m1),u[0]:m1$,@(50+12-m1),u[1]:m1$,@(62+12-m1),u[5]:m1$,@(74+12-m1),u[2]:m1$,@(86+12-m1),u[3]:m1$,@(98+12-m1),u[0]+u[1]+u[2]+u[3]-u[5]:m1$,@(111+12-m1),u[4]:m1$,@(124),u:"-##0.00%"
    v=0
    v1=v[0]+v[1]
    if v1<>0 v=(v1-v[4])*100/v1
    if abs(v)>999 v=sgn(v)*999.99
    print (printer_dev)@(39),fill(93,"-"),'LF',@(10),"M-T-D Totals:",@(38+12-m1),v[0]:m1$,@(50+12-m1),v[1]:m1$,@(62+12-m1),v[5]:m1$,@(74+12-m1),v[2]:m1$,@(86+12-m1),v[3]:m1$,@(98+12-m1),v[0]+v[1]+v[2]+v[3]-v[5]:m1$,@(111+12-m1),v[4]:m1$,@(124),v:"-##0.00%"
    if v[8]=0 and v[9]=0 and v[10]=0 and v[11]=0 and v[12]=0 and v[13]=0 goto l4070
    y=0
    y1=v[8]+v[9]
    if y1<>0 y=(y1-v[12])*100/y1
l4070:
    if abs(y)>999 y=sgn(y)*999.99
    print (printer_dev)@(39),fill(93,"-"),'LF',@(5),"Next M-T-D Totals:",@(38+12-m1),v[8]:m1$,@(50+12-m1),v[9]:m1$,@(62+12-m1),v[13]:m1$,@(74+12-m1),v[10]:m1$,@(86+12-m1),v[11]:m1$,@(98+12-m1),v[8]+v[9]+v[10]+v[11]-v[13]:m1$,@(111+12-m1),v[12]:m1$,@(124),y:"-##0.00%"
    run pgmdir$+"opr_hb.bbx"
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l800,done,done,done,l800

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control
end_input:
    goto l890

report_heading: rem --- Report Heading

    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    l=headings+1
    print (printer_dev)""
    print (printer_dev)"Customer",@(12),"Order",@(21),"Invoice",@(44),"Gross",@(104),"Net",@(116),"Gross",@(126),"Gross"
    print (printer_dev)"No. & Name",@(12),"Number   Number     Date",@(44),"Sales",@(54),"Returns",@(65),"Discount",@(81),"Tax",@(90),"Freight",@(103),"Sales",@(116),"Cost",@(126),"Profit",'LF'
    l=l+4
    return
display_fields:
    control_id=3000
    cid_cnt=0
l5510:
    if cid_cnt=0 disp_inp$="C"
    if cid_cnt=1 disp_inp$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>2 goto l5550
    goto l5510
l5550:
    disp_inp$=""
    disp_desc$=""
    return

l6000: rem --- Find Customer

    dim b1$(30)
    if a0$(99,1)<>"Y" goto l6070
    if cvs(z8$,2)="" goto l6070
    b1$(1)=z8$
    goto l6090
l6070:
    b1$(1)="Not On File"
    find record (arm01_dev,key=firm_id$+a0$(5,6),dom=*next) arm01a$
l6090:
    return

l6100: rem --- Sort By Invoice Number

    if seq$="C" goto l6190
    call pgmdir$+"adc_progress.aon","N","",""," Sorting","",m0+8,0,1,meter_num,status
    read (ope04_dev,key=firm_id$+"I",dom=*next)
l6130:
    let k1$=key(ope04_dev,end=l6180)
    read (ope04_dev)
    if k1$(1,3)<>firm_id$+"I" goto l6180
    read record (ope01_dev,key=k1$(1,2)+k1$(4)+"000",dom=l6170) ope01a$
    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(5,p[0]),m0$)+" "+a0$(42,7),0,0,1,meter_num,status
    let opw01_k$=a0$(1,2)+a0$(42,7)+a0$(5,6)+a0$(11,7)
    write record (opw01_dev,key=opw01_k$) opw01a$
l6170:
    goto l6130
l6180:
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
l6190:
    return

l6200: rem --- LIFO/FIFO

    let cost=w[0],ret_cost=0
    let lf_action$=i3$(3,1)+"I",lf_date$=a0$(24,3)
    dim lf_item$[10]
    let lf_item$[0]=firm_id$,lf_item$[1]=w0$(31,2),lf_item$[2]=w0$(33,20)

rem --- Inquiry On Tier Cost For Returned Items

    if w[4]>=0 goto l6300
    let lf_action$(2,1)="R"
    call pgmdir$+"ivc_lf.bbx",lf_action$,"I",lf_date$,lf_channels[all],lf_item$[all],i[2],abs(w[4]),cost,ret_cost,status
    if ret_cost<>0 cost=ret_cost

l6300: rem --- Report On Tier Cost For Sold Items

    call pgmdir$+"ivc_lf.bbx",lf_action$,"R",lf_date$,lf_channels[all],lf_item$[all],i[2],abs(w[4]),cost,ret_cost,status
    if ret_cost<>0 icost=ret_cost
    let w9$=w0$(1,17)+w0$(33,20)+w0$(18,3)
    write record (ivw05_dev,key=w9$) ivw05a$
    return

l6500: rem --- Calculate Current Item Cost

    dim d2$(62),d[20],h[2]
    let q$="",q0=0,q1=0,icost=w[0]
    find record (ivm01_dev,key=firm_id$+w0$(33,20),dom=l6700) ivm01a$
    find record (ivm02_dev,key=firm_id$+w0$(31,2)+w0$(33,20),dom=*next) ivm02a$
    if d[11]<>0 icost=d[11]
    if lf$="Y" gosub l6200
    if ls$<>"Y" or d2$(19,1)<>"Y" w[0]=icost; goto l6850
    read (ope21_dev,key=w0$(1,20),dom=*next)
l6600:

    let k9$=key(ope21_dev,end=l6700)
    if k9$(1,20)<>w0$(1,20) goto l6700
    read record (ope21_dev) ope21a$
    if d2$(20,1)<>"Y" h[2]=icost; write record (ope21_dev,key=k9$) ope21a$; rem "Reset cost if not inventoried
    let q0=q0+h[1],q1=q1+h[1]*h[2]
    goto l6600
l6700:

    if q0=w[4] goto l6800
    let lines$=lines$+w0$(18,3)
    if d2$(20,1)<>"Y" noninv=1 else inv=1
l6800:

    if q0<>0 w[0]=q1/q0
l6850:
    write record (ope11_dev,key=w0$(1,20)) ope11a$
    return
rem --- Standard G/L Recap Routine
glrecap:
    if gl$<>"Y" goto l6990
    call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,0,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
l6990: return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
