rem --- Commit & Release Future Orders
rem --- Program opu_ea v8.0.0 06Jul2007 (opu_ea)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:08:59)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0403)
rem --- Undefined function fnyy_yy21$ (Line 0455)
rem --- Undefined function fnyy_yy21$ (Line 0460)
rem --- Undefined function fnyy_yy21$ (Line 0462)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0139)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0146)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0161)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0162)
rem --- v7.x Administrator reference ["sys-01"] (Line 0176)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0189)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0195)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0201)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0203)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0205)
rem --- v7.x sys-01 reference [sys01_dev] (Line 0218)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0244)
rem --- BBx reference ["syc_ra.bbx"] (Line 0244)
rem --- v7.x Administrator reference ["syc_df.bbx"] (Line 0246)
rem --- BBx reference ["syc_df.bbx"] (Line 0246)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0250)
rem --- BBx reference ["syc_rs.bbx"] (Line 0250)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0256)
rem --- BBx reference ["syc_rs.bbx"] (Line 0256)
rem --- BBx reference ["ivc_ua.bbx"] (Line 0307)
rem --- BBx reference ["ivc_ua.bbx"] (Line 0324)
rem --- BBx reference ["ivc_ua.bbx"] (Line 0326)
rem --- BBx reference ["opc_ca.bbx"] (Line 0355)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0379)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0381)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0427)
rem --- BBx reference ["syc_rs.bbx"] (Line 0427)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0428)
rem --- BBx reference ["syc_rs.bbx"] (Line 0428)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]

rem --- The following IOLIST's were removed from this program:

rem --- arm02a: iolist c0$,c1$(1),c[all]
rem --- arm10a: iolist x4$
rem --- ars01c: iolist c9$(1)
rem --- ivm01a: iolist *,*,x2$
rem --- ope01a: iolist a0$(1),a1$,a[all]
rem --- ope02a: iolist ope02_0$
rem --- ope03a: iolist ope03_0$
rem --- ope04a: iolist are04_0$
rem --- ope11a: iolist w0$,w1$(1),w2$,w[all]
rem --- ope21a: iolist b0$,b1$,b2$,b[all]
rem --- opm02a: iolist x0$

rem --- The following channel references have been identified:

rem --- ars01a: (Generated by CodePort)

rem --------------------------------------------------------------------------------
rem --- ivm02a: Channel reference (Line 0248)
rem --- ivm07a: Channel reference (Line 0252)
rem --- ivs01a: (Generated by CodePort)
rem --- sys01a: Channel reference (Line 0245)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=13,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-02"
    files$[3]="arm-10"
    files$[4]="ivm-01"
    files$[5]="ivm-02"
    files$[6]="ivm-07"
    files$[7]="ope-01"
    files$[8]="ope-02"
    files$[9]="ope-03"
    files$[10]="ope-04"
    files$[11]="ope-11"
    files$[12]="ope-21"
    files$[13]="opm-02"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm02_dev=channels[2]
    arm10_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ivm07_dev=channels[6]
    ope01_dev=channels[7]
    ope02_dev=channels[8]
    ope03_dev=channels[9]
    ope04_dev=channels[10]
    ope11_dev=channels[11]
    ope21_dev=channels[12]
    opm02_dev=channels[13]

rem --- Dimension string templates

    dim arm02a$:templates$[2],arm10a$:templates$[3],ivm01a$:templates$[4],
:       ivm02a$:templates$[5],ivm07a$:templates$[6],ope01a$:templates$[7],
:       ope02a$:templates$[8],ope03a$:templates$[9],ope04a$:templates$[10],
:       ope11a$:templates$[11],ope21a$:templates$[12],opm02a$:templates$[13]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ars-01C"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ars01c$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ars01c_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01c_key$,err=std_missing_params) ars01c$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=13
    dim files$[files],options$[files],channels[files]
    files$[1]="ope-01"
    files$[2]="ope-04"
    files$[3]="ope-11"
    files$[4]="arm-02"
    files$[5]="arm-10"
    files$[6]="ope-02"
    files$[7]="ivm-01"
    files$[8]="ivm-02"
    files$[9]="sys-01"
    files$[10]="ope-03"
    files$[11]="opm-02"
    call pgmdir$+"adc_fileopen.aon",1,1,11,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ope01_dev=channels[1]
    ope04_dev=channels[2]
    ope11_dev=channels[3]
    arm02_dev=channels[4]
    arm10_dev=channels[5]
    ope02_dev=channels[6]
    ivm01_dev=channels[7]
    ivm02_dev=channels[8]
    sys01_dev=channels[9]
    ope03_dev=channels[10]
    opm02_dev=channels[11]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    ls$="N"
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    dim c9$(55)
    find record (sys01_dev,key=firm_id$+n2$+"01",dom=std_missing_params) ars01c$
    c9$(35,1)="N"
    find record (sys01_dev,key=firm_id$+"IV"+"00",dom=std_missing_params) ivs01a$
    dim p[1],i[2]
    p[0]=num(p2$(1,2))
    i[2]=num(i2$(5,1))
    if pos(i3$(17,1)="LS") ls$="Y"

rem --- Initialize Data

    precision i[2]
    dim a0$(200),a[13],b[2],c1$(64),c[10],w1$(64),w[17]
    last$=p3$(89,3)
    call pgmdir$+"adc_daydates.aon",sysinfo.system_date$,next$,num(p3$(86,3))
    dim iv_files[44],iv_info$[3],iv_info[0],iv_params$[4],iv_refs$[11],iv_refs[5]
    iv_files[0]=sys01_dev
    iv_files[1]=ivm01_dev
    iv_files[2]=ivm02_dev
    iv_info$[0]=firm_id$
    iv_params$[0]=sysinfo.system_date$
    iv_params$[1]=sysinfo.user_id$
    iv_params$[2]=i2$
    iv_params$[3]=i3$
    iv_params$[4]=i4$

rem --- Additional File Opens

    if ls$<>"Y" goto display_resource
    files$[12]="ope-21"
    files$[13]="ivm-07"
    call pgmdir$+"adc_fileopen.aon",1,12,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ope21_dev=channels[12]
    ivm07_dev=channels[13]
    iv_files[7]=ivm07_dev

display_resource: rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    call pgmdir$+"syc_df.bbx",0,3000,my_context,status
    gosub display_fields
    goto start_done
l900:
    call pgmdir$+"syc_rs.bbx","",my_context,3000,fndate$(last$),0,"",status
    i0=0
    control_id=3000

l1000: rem --- Enter Options Here

    call pgmdir$+"syc_rs.bbx","",my_context,3001,fndate$(next$),0,"",status
    v0$="D"
    v1$="C"
    v2$=next$
    v4$="Commit All Orders Scheduled for Shipment Through This Date"
    v0=3
    v1=40
    v2=4
    v3$=""
    control_id=3001
    gosub std_input
    on v3 goto l1070,l1000,flow_control,l1000,flow_control,l1070,flow_control
l1070:
    next$=v$
    goto done

l2000: rem --- Verify Committed Here

    call pgmdir$+"adc_progress.aon","N","","","Processing","",18,0,1,meter_num,status
    read (ope01_dev,key=firm_id$+"  ",dom=*next)

l2100: rem --- Main Read

    k$=key(ope01_dev,end=l3000)
    if pos(firm_id$=k$)<>1 goto l3000
    read record (ope01_dev,key=k$) ope01a$
    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(a0$(5,p[0]),m0$)+"  "+a0$(11,7),0,0,1,meter_num,status
    if a0$(21,1)="P" goto l2990
    if a0$(22,1)="I" goto l2990
    if a0$(69,1)<>"N" goto l2990
    new$="NO"
    a0$(69,1)="Y"; rem "Lock it while processing
    write record (ope01_dev,key=k$) ope01a$

rem --- Process Lines Here

    read (ope11_dev,key=a0$(1,17),dom=*next)
l2210:
    k1$=key(ope11_dev,end=l2800)
    if pos(a0$(1,17)=k1$)<>1 goto l2800
    read record (ope11_dev,key=k1$) ope11a$
    if w1$(44,1)="Y" goto l2500
    if w1$(41,3)>next$ goto l2500
    find record (opm02_dev,key=firm_id$+w0$(21,1),dom=l2500) opm02a$
    call pgmdir$+"adc_progress.aon","S","","","",fnmask$(w0$(5,p[0]),m0$)+" "+w0$(11,7)+" "+w0$(18,3),0,0,1,meter_num,status
    if pos(x0$(25,1)="NOM")<>0 goto l2400
    if x0$(27,1)="Y" goto l2400
    iv_info$[1]=w0$(31,2)
    iv_info$[2]=w0$(33,20)
    iv_info$[3]=""
    iv_refs[0]=w[2]
    call pgmdir$+"ivc_ua.bbx","OE",iv_files[all],iv_info[all],iv_params$[all],iv_info$[all],iv_refs$[all],iv_refs[all],iv_status; rem "Commit warehouse quantities

rem --- Serialized/Lotted Items

    if ls$<>"Y" goto l2400
    read (ope21_dev,key=w0$(1,20),dom=*next)
l2320:
    are23_k$=key(ope21_dev,end=l2400)
    if pos(w0$(1,20)=are23_k$)<>1 goto l2400
    read record (ope21_dev) ope21a$

rem --- Commit Lot/Serial Quantities

    iv_info$[1]=w0$(31,2)
    iv_info$[2]=w0$(33,20)
    iv_info$[3]=""
    iv_refs[0]=b[1]
    call pgmdir$+"ivc_ua.bbx","UC",iv_files[all],iv_info[all],iv_params$[all],iv_info$[all],iv_refs$[all],iv_refs[all],iv_status; rem "Uncommit previous warehouse quantites
    iv_info$[3]=b1$
    call pgmdir$+"ivc_ua.bbx","OE",iv_files[all],iv_info[all],iv_params$[all],iv_info$[all],iv_refs$[all],iv_refs[all],iv_status; rem "Commit warehouse andlot/serial quantites
    goto l2320

l2400: rem --- Reset Order Amounts

    w1$(44,2)="YN"
    w[4]=w[2]
    x6=w[6]
    x7=w[7]
    precision 2
    if x0$(25,1)="O" and w[6]=0 and w[1]<>0 w[6]=w[1],w[1]=0
    if pos(x0$(25,1)="MO")=0 w[6]=w[1]*w[4]
    gosub l6000
    a[4]=a[4]+w[7]-x7
    a[6]=a[6]+w[6]-x6
    a[7]=a[7]+w[0]*w[4]
    precision i[2]
    write record (ope11_dev,key=k1$) ope11a$
    new$="YES"; rem "Changed one. Generate pick ticket."
l2500:
    goto l2210

l2800: rem --- End of Order Here

    if new$<>"YES" goto l2900
    a0$(68,1)="N"
    if c9$(7,1)<>"Y" goto l2875
    credit$="1"; rem "Initialize Credit Okay
    read record (arm02_dev,key=firm_id$+a0$(5,6)+a0$(3,2),dom=l2850) arm02a$
    call pgmdir$+"opc_ca.bbx",ope01_dev,arm02_dev,firm_id$,a0$(5,6),c9$,credit$,i6$,0
l2850:
    if credit$<>"1" goto l2890; rem "Credit Not Okay
    read record (arm10_dev,key=firm_id$+"A"+a0$(62,2),dom=l2875) arm10a$
    if x4$(27,1)="Y" goto l2890
l2875:
    are04_0$=firm_id$+"O"+a0$(3,15)
    write record (ope04_dev,key=are04_0$) ope04a$
    goto l2900
l2890:
    a0$(101,1)="C"
    gosub l6100

l2900: rem --- Unlock it here

    a0$(69,1)="N"
    write record (ope01_dev,key=a0$(1,20)) ope01a$
    if t9$="END" return
l2990:
    goto l2100

l3000: rem --- End of Job here

    t9$="END"; gosub l2800
    extract record (sys01_dev,key=firm_id$+n2$+"00") ars01a$
    p3$(89,3)=next$
    write record (sys01_dev,key=p0$) ars01a$
    goto std_exit
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l900,l1000,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control
end_input:
    exit_ctrl=1
    goto l2000
display_fields:
    control_id=3000
    cid_cnt=0
l5010:
    if cid_cnt=0 disp_inp$=fndate$(last$)
    if cid_cnt=1 disp_inp$=fndate$(next$)
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>1 goto l5050
    goto l5010
l5050:
    disp_inp$=""
    disp_desc$=""
    return

l6000: rem --- Check If Taxable

    let w[7]=0
    if x0$(26,1)="N" goto l6090
    read record (ivm01_dev,key=firm_id$+w0$(33,20),dom=l6090) ivm01a$
    if pos(x0$(25,1)="MNO")=0 if x2$(8,1)="N" goto l6090
    let w[7]=w[6]
l6090:
    return

l6100: rem --- Update Credit Manager Tickler File

    read (ope02_dev,key=firm_id$+a0$(5,6),dom=*next)
l6120:
    let k8$=key(ope02_dev,end=l6170)
    read (ope02_dev,key=k8$)
    if k8$(1,8)<>firm_id$+a0$(5,6) goto l6170
    if k8$(15,7)<>a0$(11,7) goto l6120
    if k8$(9,6)=fnyy_yy21$(fndate$(fndate$(a0$(77,3)))) goto l6190
    remove (ope02_dev,key=k8$,dom=*next)
remove (ope03_dev,key=firm_id$+k8$(9,6)+k8$(3,6)+k8$(15,7),dom=*next)

l6170:
    let ope02_0$=firm_id$+a0$(5,6)+fnyy_yy21$(fndate$(fndate$(a0$(77,3))))+a0$(11,7)
    write record (ope02_dev,key=ope02_0$) ope02a$
    let ope03_0$=firm_id$+fnyy_yy21$(fndate$(fndate$(a0$(77,3))))+a0$(5,13)
    write record (ope03_dev,key=ope03_0$) ope03a$
l6190:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
