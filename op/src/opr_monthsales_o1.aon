rem --- MTD Sales Report/Print
rem --- Program opr_eb v8.0.0 22Jan2008 (opr_eb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/22/2008 03:12:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
        precision 4

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open Printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Initializations
        more=1
        dim a[13],t0$(28),t1$(28),x[1],t[8],u[8]
        x0$="First Date"
        x1$="Last Date",page=0,width=132,l9=59,l=l9+1,headings=3
        dim headings$[headings]
        if p8$<>"" then let x0$=fndate$(p8$)
        if p9$<>"" then let x1$=fndate$(p9$)
        h3$="From "+x0$+" Thru "+x1$
        clock$="",when$=sysinfo.system_date$
        headings$[0]=n1$
        headings$[1]=n3$,headings$[2]=h3$
        m4$="-##0.00%"
        m4=len(m4$)
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","U","",m2$,0,m2
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","R","",m3$,0,m3
        call pgmdir$+"adc_sizemask.aon",m1$,m1,8,13

rem --- Background

        call pgmdir$+"adc_progress.aon","CN","","","","",0,opt01_dev,1,meter_num,status

rem --- Initial File Read

        read (opt01_dev,key=firm_id$+" "+p8$,knum=2,dom=*next)


rem --- Main Loop (Invoice Read)
While more

        read record(opt01_dev,end=*break)opt01a$
        if opt01a.firm_id$<>firm_id$ break

rem        if p8$<>"" then
rem           if opt01a.invoice_date$<p8$ then
rem                continue
rem            endif
rem        endif
        if p9$<>"" then
            if opt01a.invoice_date$>p9$ then
                break
            endif
        endif
        find record (opt01_dev,key=opt01a.firm_id$+opt01a.ar_type$+opt01a.invoice_date$+opt01a.ar_inv_no$+opt01a.customer_id$,dom=*continue) opt01a$
        if opt01a.firm_id$<>firm_id$ then break

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Void

        if opt01a.invoice_type$="V" then
            if l+1>l9 then gosub report_heading

            print (printer_dev)
:                               @(0),opt01a.ar_inv_no$,
:                               @(8),"Void"
            l=l+1
            continue
        endif


rem ---  Get Customer Name

        gosub Find_Customer

rem --- Print
        
        if l+2>l9 then gosub report_heading
        x0=0
        if opt01a.total_sales<>0 then
            let x0=100*(opt01a.total_sales-opt01a.total_cost)/opt01a.total_sales
        endif

        print (printer_dev)@(0),opt01a.ar_inv_no$,
:                          @(8),fnmask$(opt01a.customer_id$(1,p[0]),m0$),
:                          @(9+m0),fndate$(opt01a.invoice_date$),
:                          @(18+m0),opt01a.total_sales:m1$,
:                          opt01a.tax_amount:m1$,opt01a.freight_amt:m1$,opt01a.discount_amt:m1$,
:                          opt01a.total_sales+opt01a.tax_amount+opt01a.freight_amt-opt01a.discount_amt:m1$,
:                          opt01a.total_cost:m1$,opt01a.total_sales-opt01a.total_cost:m1$,x0:m4$
        print (printer_dev)@(10),arm01a.customer_name$
        l=l+2

rem --- Totals

        t0=t0+1
        rem for x=0 to 7ru
        t[5]=t[5]+opt01a.comm_amt
        t[6]=t[6]+opt01a.total_sales
        t[7]=t[7]+opt01a.total_cost
Wend
rem --- Main Loop Ends



        if h=0 or l+4>l9 then gosub report_heading
        x0=0
        if t[6]<>0 then let x0=100*(t[6]-t[7])/t[6]
        print (printer_dev)'lf',
:                               @(2),"Total Invoices:",t0
        print (printer_dev)
:                               @(2),"Totals:",
:                               @(18+m0),t[6]:m1$,t[0]:m1$,t[1]:m1$,t[2]:m1$,
:                                         t[6]+t[0]+t[1]-t[2]:m1$,t[7]:m1$,t[6]-t[7]:m1$,x0:m4$

rem --- Averages

        if t0<>0 then
            for x=0 to 7
                t[x]=t[x]/t0
            next x
            x0=0
            if t[6]<>0 then let x0=100*(t[6]-t[7])/t[6]
            print (printer_dev)@(2),"Averages:",@(18+m0),t[6]:m1$,t[0]:m1$,t[1]:m1$,t[2]:m1$,
:                                               t[6]+t[0]+t[1]-t[2]:m1$,t[7]:m1$,t[6]-t[7]:m1$,x0:m4$
        endif

        goto std_exit

report_heading: rem --- Report Heading

        l=headings+1
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
        if status then exitto std_exit
        print (printer_dev)"Invoice",@(8),"Customer",
:                                    @(18+m0+7*m1-6),"Gross"
        print (printer_dev)"Number",
:                                    @(8),"No.",
:                                    @(m0+11),"Date",
:                                    @(18+m0+m1-6),"Sales",
:                                    @(18+m0+2*m1-4),"Tax",
:                                    @(18+m0+3*m1-8),"Freight",
:                                    @(18+m0+4*m1-9),"Discount",
:                                    @(18+m0+5*m1-6),"Total",
:                                    @(18+m0+6*m1-5),"Cost",
:                                    @(18+m0+7*m1-7),"Profit",
:                                    @(18+m0+7*m1+m4-5),"GP %"
        print (printer_dev)""
        l=l+3
        return

rem --- Detail

        if l+3>l9 then gosub report_heading
        if opt01a.total_cost>999 then let opt01a.total_cost=999.99
        if opt01a.invoice_type$<>"V" then
             print (printer_dev)@(0),opt01a.customer_id$,@(15),fnmask$(opt01a.ar_inv_no$(1,p[0]),m0$),
:                              @(23),fndate$(opt01a.sequence_000$),@(33+12-m1),a[0]:m1$,
:                              @(46+12-m1),opt01a.freight_amt:m1$,@(59+12-m1),opt01a.discount_amt:m1$,
:                              @(72+12-m1),opt01a.comm_percent:m1$,@(85+12-m1),opt01a.taxable_amt:m1$,
:                              @(98+12-m1),opt01a.tax_amount+opt01a.discount_amt+opt01a.freight_amt-opt01a.comm_percent+
:                              opt01a.taxable_amt:m1$,@(111+12-m1),opt01a.total_sales:m1$,
:                              @(124),opt01a.total_cost:"-##0.00%"
            print (printer_dev)@(0),arm01a.customer_name$,'lf'
            l=l+3
            u[0]=u[0]+opt01a.tax_amount
            u[1]=u[1]+t[1]
            u[2]=u[2]+opt01a.discount_amt
            u[5]=u[5]+opt01a.comm_percent
            u[3]=u[3]+opt01a.taxable_amt
            u1=u1+opt01a.total_sales
            u=u+opt01a.total_cost
            return
        endif

rem --- Print VOID

        if l+2>l9 then gosub report_heading
        print (printer_dev)@(0),opt01a.customer_id$,@(15),fnmask$(opt01a.ar_inv_no$(1,p[0]),m0$),
:                          @(23),fndate$(opt01a.sequence_000$),"   ****Void****",'lf'
        l=l+2
        return

Find_Customer: rem --- Find Customer

        rem dim b1$(30)
        arm01a.customer_name$="Not On File"
        find record (arm01_dev,key=firm_id$+opt01a.customer_id$,dom=*next) arm01a$
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

        def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions
rem #include fndate.src

        def fndate$(q$)
            if cvs(q$,2)="" return ""
            if pos("9"<>q$)=0 return q$
            testdate$=""
            testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
            return testdate$
        fnend
rem        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src


std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem --- #endinclude std_end.src

        end
