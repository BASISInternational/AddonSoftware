rem --- Invoice Edit Report
rem --- Program opr_jb v8.0.0 25Jan2008 (opr_jb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/25/2008 03:03:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
       
rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open Printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Initialize Data
        n1$=sysinfo.firm_name$,n2$="AR",n4$=sysinfo.task_desc$
        more=1
        precision i[1]
        dim j$(h0,"-"),j1$(30," "),j2$(h0,"=")
        dim a0$(200),a[13],w1$(64),w[17],lf_item$[10],lf_channels[10]
        dim lf_item$[10],lf_channels[10]
        dim o[4],r[3,4],s[2],t[4],t9[100,3],u[3]
        ord=0
        ship=0,bo=0,l9=50,l=l9+1,h=0,nf$="(Not On File)"
        pbufwidth=200
        m8$="##0.00-"
        m9$="###.0%",clock$="",when$=sysinfo.system_date$
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1    
        call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
        call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
        m8=len(m8$)
        m9=len(m9$)
        r9$="SPN"
        if s6$="P" then  x1$="Printed Invoices"
        if s6$="U" then  x1$="Unprinted Invoices"
        if s6$="A" then  x1$="All Invoices"
        x2$="",h8$=x1$
        if s5$="" h9$="Invoiced By:All"  else h9$="Invoiced By: "+s5$
        if ivs01a.lotser_flag$="S" then  x2$="Ser#"
        if ivs01a.lotser_flag$="L" then  x2$="Lot#"
        if s0$="" then  h4$="First" else h4$=s0$
        if s1$="" then  h5$="Last"  else h5$=s1$
        if s2$="" then  h6$="First" else h6$=s2$
        if s3$="" then  h7$="Last"  else h7$=s3$

        while more
            if m2*3+m3*2+m1*3+27+i[0]<132 then break
            call pgmdir$+"adc_sizemask.aon",m1$,m1,max(10,m1-1),max(10,m1-1)
            call pgmdir$+"adc_sizemask.aon",m2$,m2,max(10,m2-1),max(10,m2-1)
            call pgmdir$+"adc_sizemask.aon",m3$,m3,max(10,m3-1),max(10,m3-1)
        wend

        dim columns$[1,10]
        columns = 1

        columns$[0,0]=" ",         columns$[0,1]="C",columns$[0,2]="250"

        dim pbuf$(pbufwidth)
        if s6$="P" or s6$="A" then
            pbuf$(1)="Customer No. & Name"
            pbuf$(40)="Order No"
            pbuf$(50)="Invoice No"
            pbuf$(62)="Invoice Date"
            pbuf$(75)="By"
            pbuf$(80)="Sls"
            pbuf$(85)="P.O No"
            pbuf$(92)="Ship Via"
            pbuf$(102)="Dist Code"
            pbuf$(112)="Terms"
            pbuf$(122)="Tax Code"
            pbuf$(132)="Printed?"
            OutVect!.addItem(pbuf$)
            OutVect!.addItem("")
            OutVect!.addItem("                                       ===================================================================================================")
            OutVect!.addItem("")
        else
            OutVect!.addItem("                                       ===================================================================================================")
            pbuf$(1)=""
            pbuf$(40)=""
            pbuf$(50)=""
            pbuf$(62)=""
            pbuf$(75)=""
            pbuf$(80)=""
            pbuf$(85)=""
            pbuf$(92)=""
            pbuf$(102)=""
            pbuf$(112)=""
            pbuf$(122)=""
            pbuf$(132)=""
            OutVect!.addItem(pbuf$)
            OutVect!.addItem("")
        endif

rem --- Headings

        headings=6
        dim headings$[6]
        headings$[0]=n1$
        headings$[1]=n4$
        headings$[2]=x1$
        headings$[3]=h9$
        headings$[4]="Beginning Customer : "+h4$+"      "+"Beginning Order #: "+h6$
        headings$[5]="Ending Customer     : "+h5$+"      "+"Ending Order     #: "+h7$

        rt$="Report Totals"
rem --- Print positions

        lw=m1*3+m3*2+m2*3+m8+m9
        o[0]=h0-m1*3-m3*2,o[1]=h0-m1*3-m3-m8

rem --- retrieve template for OPE_ORDHDR record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDHDR","PRIMARY",ope01a_key_tpl$,table_chans$[all],status$
        dim ope01a_key$:ope01a_key_tpl$

rem --- retrieve template for OPE_ORDDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","PRIMARY",ope11a_key_tpl$,table_chans$[all],status$
        dim ope11a_key$:ope11a_key_tpl$

rem --- retrieve template for OPE_ORDLSDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDLSDET","PRIMARY",ope21a_key_tpl$,table_chans$[all],status$
        dim ope21a_key$:ope21a_key_tpl$



rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,ope01_dev,1,meter_num,status

rem --- Initial Read

        read (ope01_dev,key=firm_id$+"  "+s0$+s2$,dom=*next)

rem --- Main Loop Starts

while more
        ope01a_key$=key(ope01_dev,end=done)
        if pos(firm_id$+"  "=ope01a_key$)<>1 then break
        if s1$<>"" and ope01a_key.firm_id$+ope01a_key.ar_type$+ope01a_key.customer_id$>firm_id$+"  "+s1$ then break
        if s3$<>"" and ope01a_key.order_no$>s3$ then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read record (ope01_dev,key=ope01a_key$) ope01a$
        if ope01a.ordinv_flag$<>"I" or ope01a.ar_inv_no$=j1$(1,7) then continue
        if s5$<>"" and ope01a.ord_taken_by$<>s5$ then continue
        if s6$<>"A" then
            if s6$="P" and ope01a.print_status$<>"Y" then continue
            if s6$="U" and ope01a.print_status$="Y" then continue
        endif

rem --- Heading
       
         
        if ope01a.invoice_type$="V" then

rem --- Void

rem            if l>l9 then gosub report_heading
            gosub find_customer
            pbuf$(1)=(ope01a.customer_id$+" "+arm01a.customer_name$)
            pbuf$(40)=ope01a.order_no$
            pbuf$(52)=ope01a.ar_inv_no$
            pbuf$(65)=fndate$(ope01a.invoice_date$)
            pbuf$(75)=ope01a.ord_taken_by$
            pbuf$(80)=ope01a.slspsn_code$
            pbuf$(85)="(Void)"
            OutVect!.addItem("")
            OutVect!.addItem("")
            OutVect!.addItem(pbuf$)

            l=l+2
            continue

        endif

rem --- Print

        gosub find_customer
        gosub order_header

    rem --- Detail

        read (ope11_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=*next)


        while more
            ope11a_key$=key(ope11_dev,end=*break)
            if ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$<>ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$ then break
            read record (ope11_dev) ope11a$
            desc$=ope11a.order_memo$
            find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$
            if pos(opm02a.line_type$="SP")<>0 then
              find record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=label_One) ivm01a$
                if opm02a.dropship$<>"Y" or ars10a.dropshp_cost$<>"Y" then
                    if cvs(desc$,2)="" then  desc$=fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])
                    find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=label_One) ivm02a$
                    if ivm02a.unit_cost<>0 then  ope11a.unit_cost=ivm02a.unit_cost
                    if ivs01a.lifofifo$<>"N" then
                        gosub lifo_fifo
                        ope11a.unit_cost=ret_cost
                    endif
                endif
            endif
label_one:
            gosub print_detail
            s[0]=s[0]+ope11a.ext_prince
            s[1]=s[1]+ope11a.unit_cost*ope11a.qty_shipped
            s[2]=s[2]+ope11a.comm_percent
            s0=s0+1
            u[0]=u[0]+ope11a.ext_price
            u[1]=u[1]+ope11a.unit_cost*ope11a.qty_shipped
            u[2]=u[2]+ope11a.comm_percent

            ord=ord+ope11a.qty_ordered
            bo=bo+ope11a.qty_backord
            ship=ship+ope11a.qty_shipped
            r9=0
            r9=pos(opm02a.line_type$=r9$)
            if r9<>0 then
                x=r9-1
                r[x,0]=r[x,0]+ope11a.ext_price
                r[x,1]=r[x,1]+ope11a.unit_cost*ope11a.qty_shipped
                r[x,2]=r[x,2]+ope11a.qty_ordered
                r[x,3]=r[x,3]+ope11a.qty_backord
                r[x,4]=r[x,4]+ope11a.qty_shipped
            endif

            if opm02a.line_type$="O" then  r[3,0]=r[3,0]+ope11a.ext_price
            if opm02a.prod_type_pr$="N" then continue
            if pos(ope11a.product_type$=t9$,3)=0 then  t9$=t9$+ope11a.product_type$
            x=pos(ope11a.product_type$=t9$,3)
            x=int(x/3)
            t9[x,0]=t9[x,0]+ope11a.ext_price
            t9[x,1]=t9[x,1]+ope11a.unit_cost*ope11a.qty_shipped
            t9[x,2]=t9[x,2]+ope11a.comm_percent
            t9[x,3]=t9[x,3]+ope11a.qty_shipped
        wend

rem --- Invioce Totals

        gosub sales_total
        dim s[2]
        s0=0
        ord=0,bo=0,ship=0
wend
rem --- Main Loop Ends

       
done: rem --- Totals

        precision 2

        e9$="E"
        if s4$="Y" then
            subheading$=""
            BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            HdrVect!.addItem(subheading$)
        endif
        OutVect!.addItem("")
        pbuf$(1)=rt$
        pbuf$(37)=str(ordt:m2$)
        pbuf$(49)=str(bot:m2$)
        pbuf$(63)=str(shipt:m2$)
        
        pbuf$(75)="Sales Total: "
        pbuf$(88)=str(u[0]:m1$)
        pbuf$(100)=str(u[1]:m1$)
        pbuf$(112)=str(u[0]-u[1]:m1$)
        pbuf$(124)=str(sgn(fnd(u[0]-u[1],u[0]))*min(999.99,abs(fnd(u[0]-u[1],u[0]))):m8$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(37)=" "
        pbuf$(49)=" "
        pbuf$(63)=" "
        pbuf$(75)="Sales Discount"
        pbuf$(88)=str(-t[2]:m1$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(37)=" "
        pbuf$(49)=" "
        pbuf$(63)=" "
        pbuf$(75)="Freight"
        pbuf$(88)=str(-t[1]:m1$)
        OutVect!.addItem(pbuf$)
        
        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(37)=" "
        pbuf$(49)=" "
        pbuf$(63)=" "
        pbuf$(75)="Sales Tax"
        pbuf$(88)=str(-t[4]:m1$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(37)=" "
        pbuf$(49)=" "
        pbuf$(63)=" "
        pbuf$(75)=" "
        pbuf$(88)="------------"
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=str(u2:"###0")+" Total Invoices"
        pbuf$(37)=" "
        pbuf$(49)=" "
        pbuf$(63)=" "
        pbuf$(75)=rt$
        pbuf$(88)=str(u[0]+t[1]-t[2]+t[4]:m1$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(37)=" "
        pbuf$(49)=" "
        pbuf$(63)=" "
        pbuf$(75)=" "
        pbuf$(88)=" "
        OutVect!.addItem(pbuf$)


        l=l+8

rem --- Totals By Product

        dim t[3]
        OutVect!.addItem("")
        pbuf$(1)="Product Type Totals"
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)="Products"
        pbuf$(35)="Units"
        pbuf$(46)="Sales"
        pbuf$(58)="Cost"
        pbuf$(68)="G.P"
        pbuf$(82)="GP %"
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=""
        pbuf$(35)="-----------------------------------------------------"
        OutVect!.addItem(pbuf$)


        if len(t9$)<>0 then
            for x=1 to len(t9$) step 3
                x0=int(x/3)
                ivm10a.code_desc$=nf$
                find record (ivm10_dev,key=firm_id$+"A"+t9$(x,3),dom=*next) ivm10a$
                if t9[x0,0]=0 and t9[x0,1]=0 then continue

                OutVect!.addItem("")
                pbuf$(1)=t9$(x,3)+" "+ivm10a.code_desc$
                pbuf$(30)=str(t9[x0,3]:m2$)
                pbuf$(38)=str(t9[x0,0]:m1$)
                pbuf$(50)=str(t9[x0,1]:m1$)
                pbuf$(62)=str(t9[x0,0]-t9[x0,1]:m1$)
                pbuf$(75)=str(fnd(t9[x0,0]-t9[x0,1],t9[x0,0]):m1$)
                OutVect!.addItem(pbuf$)

                t[0]=t[0]+t9[x0,0]
                t[1]=t[1]+t9[x0,1]
                t[2]=t[2]+t9[x0,2]
                t[3]=t[3]+t9[x0,3]
                l=l+1
            next x
        endif

        OutVect!.addItem("")
        pbuf$(1)=rt$
        pbuf$(30)=str(t[3]:m2$)
        pbuf$(38)=str(t[0]:m1$)
        pbuf$(50)=str(t[1]:m1$)
        pbuf$(62)=str(t[0]-t[1]:m1$)
        pbuf$(75)=str(fnd(t[0]-t[1],t[0]):m1$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(37)=" "
        pbuf$(49)=" "
        pbuf$(63)=" "
        pbuf$(75)=" "
        pbuf$(88)=" "
        OutVect!.addItem(pbuf$)

        l=l+2

rem --- Total By Line Type

rem        if l+9>l9 then gosub report_heading
        dim t[1]

        OutVect!.addItem("")
        pbuf$(1)="Line Type Total"
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)="Description"
        pbuf$(35)="Ord"
        pbuf$(46)="B/O"
        pbuf$(58)="Ship"
        pbuf$(68)="Sales"
        pbuf$(82)="Cost"
        OutVect!.addItem(pbuf$)

        if r[0,0]<>0 or r[0,1]<>0 or r[0,2]<>0 or r[0,3]<>0 or r[0,4]<>0 then

            OutVect!.addItem("")
            pbuf$(1)="Standard Items"
            pbuf$(30)=str(r[0,2]:m2$)
            pbuf$(38)=str(r[0,3]:m2$)
            pbuf$(50)=str(r[0,4]:m2$)
            pbuf$(62)=str(r[0,0]:m3$)
            pbuf$(75)=str(r[0,1]:m3$)
            OutVect!.addItem(pbuf$)

        endif

        if r[1,0]<>0 or r[1,1]<>0 or r[1,2]<>0 or r[1,3]<>0 or r[1,4]<>0 then

            OutVect!.addItem("")
            pbuf$(1)="Promotional Items"
            pbuf$(30)=str(r[1,2]:m2$)
            pbuf$(38)=str(r[1,3]:m2$)
            pbuf$(50)=str(r[1,4]:m2$)
            pbuf$(62)=str(r[1,0]:m3$)
            pbuf$(75)=str(r[1,1]:m3$)
            OutVect!.addItem(pbuf$)

        endif

        if r[2,1]<>0 or r[2,0]<>0 or r[2,2]<>0 or r[2,3]<>0 or r[2,4]<>0 then

            OutVect!.addItem("")
            pbuf$(1)="Non-Stock Items"
            pbuf$(30)=str(r[2,2]:m2$)
            pbuf$(38)=str(r[2,3]:m2$)
            pbuf$(50)=str(r[2,4]:m2$)
            pbuf$(62)=str(r[2,0]:m3$)
            pbuf$(75)=str(r[2,1]:m3$)
            OutVect!.addItem(pbuf$)

        endif

        if r[3,0]<>0 then 

            OutVect!.addItem("")
            pbuf$(1)="Other Charges"
            pbuf$(30)=" "
            pbuf$(38)=" "
            pbuf$(50)=" "
            pbuf$(62)=str(r[3,0]:m2$)
            OutVect!.addItem(pbuf$)

        endif

        for x=0 to 3
            t[0]=t[0]+r[x,0]
            t[1]=t[1]+r[x,1]
        next x


        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(30)=" "
        pbuf$(38)=" "
        pbuf$(50)=" "
        pbuf$(62)="------------"
        pbuf$(75)="------------"
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=rt$
        pbuf$(30)=" "
        pbuf$(38)=" "
        pbuf$(50)=" "
        pbuf$(62)=str(t[0]:m3$)
        pbuf$(75)=str(t[1]:m3$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")


        l=l+2
        goto std_exit


order_header: rem --- Order Header

rem        if l+7>l9 or s4$="Y" then gosub report_heading
        gosub terms_code

        OutVect!.addItem("")
        pbuf$(1)=(ope01a.customer_id$+" "+arm01a.customer_name$)
        pbuf$(40)=ope11a.order_no$
        pbuf$(52)=ope01a.ar_inv_no$
        pbuf$(65)=fndate$(ope01a.invoice_date$)
        pbuf$(75)=ope01a.ord_taken_by$
        pbuf$(80)=ope01a.slspsn_code$
        pbuf$(85)=ope01a.customer_po_no$
        pbuf$(92)=ope01a.ar_ship_via$
        pbuf$(100)=ope01a.terms_code$
        pbuf$(110)=arm10a.ar_terms_code$
        pbuf$(120)=ope01a.tax_code$
        pbuf$(130)=ope01a.print_status$
        OutVect!.addItem(pbuf$)

        if ope01a.lock_status$<>"N" then
            OutVect!.addItem("")
            pbuf$(1)=" "
            pbuf$(40)=("Lock Flag = "+ope01a.lock_status$)
            OutVect!.addItem(pbuf$)
             l=l+1
        endif

        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(40)=" "
        pbuf$(50)=" "
        pbuf$(60)=" "
        pbuf$(70)=" "
        pbuf$(80)=" "
        pbuf$(90)=" "
        pbuf$(100)=" "
        pbuf$(110)="Gross Extended"
        pbuf$(120)=" "
        pbuf$(130)=" "
        OutVect!.addItem(pbuf$)


        OutVect!.addItem("")
        pbuf$(1)="Ln Cd Prd Whs Item"
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)=" "
        pbuf$(40)="Ord"
        pbuf$(50)="B/O"
        pbuf$(60)="Ship"
        pbuf$(70)="Price"
        pbuf$(82)="Disc Cost"
        pbuf$(95)="Sales Cost"
        pbuf$(110)="Profit"
        pbuf$(125)="GP %"
        OutVect!.addItem(pbuf$)

        l=l+5
        return

sales_total: rem --- Sales Total/Freight/Sales Tax/Invoice Total

        precision 2
        if l+7>l9 then gosub order_header
        OutVect!.addItem("")
        pbuf$(1)="Sales Total"
        pbuf$(40)=str(ord:m2$)
        pbuf$(50)=str(bo:m2$)
        pbuf$(60)=str(ship:m2$)
        pbuf$(70)=str(s[0]:m1$)
        pbuf$(82)=str(s[1]:m1$)
        pbuf$(95)=str(s[0]-s[1]:m1$)
        pbuf$(110)=str(sgn(fnd(s[0]-s[1],s[0]))*min(999.99,abs(fnd(s[0]-s[1],s[0]))):m8$)
        pbuf$(125)="GP %"
        OutVect!.addItem(pbuf$)


        OutVect!.addItem("")
        pbuf$(1)="Sales Discount"+str(-ope01a.discount_amt:m1$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)="Freight"+str(ope01a.freight_amt:m1$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)="Sales Tax"+str(ope01a.tax_amount:m1$)
        OutVect!.addItem(pbuf$)

        OutVect!.addItem("")
        pbuf$(1)="   Invoice Total"+str(s[0]+ope01a.freight_amt-ope01a.discount_amt+ope01a.tax_amount:m1$)
        OutVect!.addItem(pbuf$)

        u[3]=u[3]+s[0]
        t2=t2+1
        u2=u2+1,l=l+7,ordt=ordt+ord,bot=bot+bo,shipt=shipt+ship
        t[2]=t[2]+ope01a.discount_amt
        t[1]=t[1]+ope01a.freight_amt
        t[4]=t[4]+ope01a.tax_amount
        precision i[1]
        return

serialized_inventory: rem --- Serialized/Lotted Inventory

        read (ope21_dev,key=ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$,dom=*next)

        while more
            ope21a_key$=key(ope21_dev,end=*break)
            if ope21a_key.firm_id$+ope21a_key.ar_type$+ope21a_key.customer_id$+ope21a_key.order_no$<>ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$ then break
            read record (ope21_dev,key=ope21a_key$) ope21a$
rem            if l+1>l9 then gosub report_heading

            OutVect!.addItem("")
            pbuf$(1)=x2$+" "+ope21a_key.sequence_no$+" "+ope21a.lotser_no$
            pbuf$(40)=str(r0:m2$)
            pbuf$(52)=str(r1:m2$)
            pbuf$(64)=str(r2:m3$)
            OutVect!.addItem(pbuf$)

            l=l+1
        wend

        return

print_detail: rem --- Print Detail


rem        if l>l9 then gosub report_heading
        gosub order_header

        OutVect!.addItem("")
        pbuf$(1)=ope11a.line_no$+" "+ope11a.line_code$+"   "+ope11a.warehouse_id$
        OutVect!.addItem(pbuf$)

        if pos(opm02a.line_type$="M")<=0 then
            if pos(opm02a.line_type$="O")<=0 then
                OutVect!.addItem("")
                pbuf$(1)=ope11a.product_type$
                OutVect!.addItem(pbuf$)

                if pos(opm02a.line_type$="SP")<>0 then OutVect!.addItem(ope11a.item_id$)
                if pos(opm02a.line_type$="SP")<>0 and pos(ivs01a.lotser_flag$="SL")<>0 and ivm01a.lotser_item$="Y" then gosub average_item_cost
                if ser_qty<>0 then  ope11a.unit_cost=ser_cost/ser_qty
                OutVect!.addItem(str(ope11a.qty_ordered:m2$)+str(ope11a.qty_backord:m2$)+str(ope11a.qty_shipped:m2$))

            endif

            OutVect!.addItem("")
            pbuf$(1)=str(ope11a.disc_percent:m9$)
            pbuf$(40)=str(ope11a.unit_price:m3$)
            pbuf$(50)=str(ope11a.ext_price:m1$)
            pbuf$(60)=str(ope11a.unit_cost:m3$)
            pbuf$(70)=str(ope11a.unit_cost*ope11a.qty_shipped:m1$)
            pbuf$(82)=str(ope11a.ext_price-ope11a.unit_cost*ope11a.qty_shipped:m1$)
            pbuf$(95)=str(sgn(fnd(ope11a.ext_price-ope11a.unit_cost*ope11a.qty_shipped,ope11a.ext_price))*min(999.99,abs(fnd(ope11a.ext_price-ope11a.unit_cost*ope11a.qty_shipped,ope11a.ext_price))):m8$)
            OutVect!.addItem(pbuf$)

            if opm02a.line_type$<>"O" then
                l=l+1
            endif
        endif
        OutVect!.addItem(desc$)

        l=l+1
        if pos(opm02a.line_type$="SP")<>0 and pos(ivs01a.lotser_flag$="SL")<>0 and ivm01a.lotser_item$="Y" then gosub serialized_inventory
        return

find_customer: rem --- Find Customer

        arm01a.firm_id$=firm_id$
        arm01a.customer_id$=ope01a.customer_id$
        arm01a.customer_name$=nf$
        find record (arm01_dev,key=arm01a.firm_id$+arm01a.customer_id$,dom=*next) arm01a$
        find record (arm02_dev,key=arm01a.firm_id$+arm01a.customer_id$+"  ",dom=*next) arm02a$
        return

lifo_fifo: rem --- LIFO/FIFO

        if ope11a.qty_shipped=0 then
            return
        endif
        ret_cost=ope11a.unit_cost
        if opm02a.dropship$="Y" or pos(opm02a.line_type$="SP")=0 then
            return
        endif
        lf_channels[0]=ivm04_dev
        lf_channels[1]=ivw04_dev
        lf_channels[2]=ivm02_dev
        lf_action$=ivs01a.lifofifo$+"I"
        lf_date$=ope01a.invoice_date$
        if ope11a.qty_shipped<0 then  lf_action$(2,1)="R"
        lf_item$[0]=firm_id$
        lf_item$[1]=ope11a.warehouse_id$
        lf_item$[2]=ope11a.item_id$
        call pgmdir$+"ivc_lf.bbx",lf_action$,"R",lf_date$,lf_channels[all],lf_item$[all],i[1],abs(ope11a.qty_shipped),ope11a.unit_cost,ret_cost,status

        return

average_item_cost: rem --- Get Average Of Serialized/Lotted Item Cost

        ser_qty=0
        ser_cost=0
        read (ope21_dev,key=ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$+ope11a_key.line_no$,dom=*next)

        while more
            ope21a_key$=key(ope21_dev,end=*break)
            if ope21a_key.firm_id$+ope21a_key.ar_type$+ope21a_key.customer_id$+ope21a_key.order_no$+ope21a_key.line_no$<>ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$+ope11a_key.line_no$ then break
            read record (ope21_dev,key=ope21a_key$) ope21a$
            ser_cost=ser_cost+r1*r2
            ser_qty=ser_qty+r1
        wend

        return

terms_code: rem --- Terms Code

        
        arm10a.code_desc$=nf$
        find record (arm10_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=*next) arm10a$
        w$=arm10a.code_desc$
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values
       rem FND(Q1,Q2)=SGN(Q2)*Q1*100/(Q2+ABS(SGN(Q2))-1)
        def fnd(q1,q2)=sgn(q2)*q1*100/(q2+abs(sgn(q2))-1)
        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
        def fnblank(q0)
            for q1=1 to q0
                OutVect!.addItem("")
            next q1
            return q1
        fnend

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

rem        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem #include fndate.src

        def fndate$(q$)
        if cvs(q$,2)="" return ""
        if pos("9"<>q$)=0 return q$
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        return testdate$
        fnend

rem #endinclude fndate.src



rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem #endinclude std_end.src

        end
