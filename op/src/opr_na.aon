rem --- Order/Picking List Batch Print
rem --- Program opr_na v8.0.0 06Jul2007 (opr_na)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:01:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0392)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0155)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0162)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0177)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0178)
rem --- v7.x Administrator reference ["sys-01"] (Line 0196)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0214)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0221)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0227)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0228)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0230)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0263)
rem --- BBx reference ["syc_ra.bbx"] (Line 0263)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0305)
rem --- BBx reference ["syc_rs.bbx"] (Line 0305)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0319)
rem --- BBx reference ["syc_lc.bbx"] (Line 0319)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0324)
rem --- BBx reference ["syc_rs.bbx"] (Line 0324)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0325)
rem --- BBx reference ["syc_rs.bbx"] (Line 0325)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0344)
rem --- BBx reference ["syc_rs.bbx"] (Line 0344)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0357)
rem --- BBx reference ["syc_rs.bbx"] (Line 0357)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0358)
rem --- BBx reference ["syc_rs.bbx"] (Line 0358)
rem --- v7.x Administrator reference ["sys_ac.bbx"] (Line 0408)
rem --- BBx reference ["sys_ac.bbx"] (Line 0408)
rem --- BBx reference ["opr_pa.bbx"] (Line 0409)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0419)
rem --- BBx reference ["syc_rs.bbx"] (Line 0419)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0420)
rem --- BBx reference ["syc_rs.bbx"] (Line 0420)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0427)
rem --- BBx reference ["syc_rs.bbx"] (Line 0427)
rem --- v7.x Administrator reference ["syc_lk.bbx"] (Line 0436)
rem --- BBx reference ["syc_lk.bbx"] (Line 0436)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- arm01a: iolist *,x0$
rem --- ars01c: iolist c9$(1)
rem --- ivm10c: iolist x0$
rem --- opm01a: iolist r0$,r1$,r2$

rem --- The following channel references have been identified:

rem --- arm03a: Channel reference (Line 0285)

rem --------------------------------------------------------------------------------
rem --- arm10a: Channel reference (Line 0284)
rem --- ars01a: (Generated by CodePort)
rem --- ivm01a: Channel reference (Line 0282)
rem --- ivm02a: Channel reference (Line 0281)
rem --- ivs01a: (Generated by CodePort)
rem --- ope01a: Channel reference (Line 0278)
rem --- ope04a: Channel reference (Line 0277)
rem --- ope11a: Channel reference (Line 0276)
rem --- ope21a: Channel reference (Line 0275)
rem --- ope31a: Channel reference (Line 0274)
rem --- opm02a: Channel reference (Line 0274)
rem --- opm04a: Channel reference (Line 0273)
rem --- opm14a: Channel reference (Line 0273)
rem --- sys01a: Channel reference (Line 0271)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=16,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-03"
    files$[4]="arm-10"
    files$[5]="ivm-01"
    files$[6]="ivm-02"
    files$[7]="ivm-10"
    files$[8]="ope-01"
    files$[9]="ope-04"
    files$[10]="ope-11"
    files$[11]="ope-21"
    files$[12]="ope-31"
    files$[13]="opm-01"
    files$[14]="opm-02"
    files$[15]="opm-04"
    files$[16]="opm-14"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm03_dev=channels[3]
    arm10_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm10_dev=channels[7]
    ope01_dev=channels[8]
    ope04_dev=channels[9]
    ope11_dev=channels[10]
    ope21_dev=channels[11]
    ope31_dev=channels[12]
    opm01_dev=channels[13]
    opm02_dev=channels[14]
    opm04_dev=channels[15]
    opm14_dev=channels[16]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm03a$:templates$[3],arm10a$:templates$[4],
:       ivm01a$:templates$[5],ivm02a$:templates$[6],ivm10a$:templates$[7],
:       ope01a$:templates$[8],ope04a$:templates$[9],ope11a$:templates$[10],
:       ope21a$:templates$[11],ope31a$:templates$[12],opm01a$:templates$[13],
:       opm02a$:templates$[14],opm04a$:templates$[15],opm14a$:templates$[16]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ars-01C"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ars01c$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ars01c_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01c_key$,err=std_missing_params) ars01c$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=16
    dim files$[files],options$[files],channels[files]
    files$[1]="ope-01"
    files$[2]="ope-04"
    files$[3]="ope-11"
    files$[4]="ope-21"
    files$[5]="ope-31"
    files$[6]="arm-01"
    files$[7]="arm-03"
    files$[8]="opm-01"
    files$[9]="arm-10"
    files$[10]="ivm-01"
    files$[11]="ivm-02"
    files$[12]="ivm-10"
    files$[13]="sys-01"
    files$[14]="opm-02"
    files$[15]="opm-04"
    files$[16]="opm-14"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ope01_dev=channels[1]
    ope04_dev=channels[2]
    ope11_dev=channels[3]
    ope21_dev=channels[4]
    ope31_dev=channels[5]
    arm01_dev=channels[6]
    arm03_dev=channels[7]
    opm01_dev=channels[8]
    arm10_dev=channels[9]
    ivm01_dev=channels[10]
    ivm02_dev=channels[11]
    ivm10_dev=channels[12]
    sys01_dev=channels[13]
    opm02_dev=channels[14]
    opm04_dev=channels[15]
    opm14_dev=channels[16]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    dim p3$(113)
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    dim c9$(55); let c9$(7,1)="N"
    find record (sys01_dev,key=firm_id$+"AR01",dom=*next) ars01c$
    whse$=i3$(6,2)
    find record (opm01_dev,key=firm_id$+pad(fid(0),4),dom=l460) opm01a$
    whse$=r2$(32,2)
l460:
    dim p[2],i[6]
    for i=0 to 6
        i[i]=num(i2$(i*2+1,2))
    next i
    desclen=i[4]+i[5]+i[6]
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(3,2))
    p[2]=num(p3$(4,1))
    m0=len(m0$)
    m2=len(m2$)
    m3=len(m3$)
    m4=len(m4$)
    call pgmdir$+"adc_sizemask.aon",m1$,m1,8,12

rem --- Initialize Data

    p5$=""
    p7$="N"
    p8$="N"
    p9$=sysinfo.system_date$
    which_ones$="B"
    dim a0$(150),a[13],w1$(64),w[14]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    gosub display_fields
    goto start_done

l1000: rem --- Print Prices?

    v0$="Y"
    v1$="R"
    v2$=p8$
    v0=1
    v1=40
    v2=3
    i0=0
    v3$=""
    v4$="Print Prices (Y/N): "
    control_id=3000
    gosub std_input
    on v3 goto l1060,l1000,flow_control,l1000,flow_control,l1060,flow_control
l1060:
    p8$=v$
    goto flow_control

l1200: rem --- Restart?

    v0$="Y"
    v1$="R"
    v2$=p7$
    v0=1
    v1=40
    v2=4
    v3$=""
    v4$="Restart (Y/N): "
    control_id=3001
    gosub std_input
    on v3 goto l1260,l1200,flow_control,l1200,flow_control,l1260,flow_control
l1260:
    p7$=v$
    goto flow_control

l1400: rem --- Customer

    if p7$="N" call pgmdir$+"syc_rs.bbx","",my_context,3002,fill(80),0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13002,fill(80),0,"",status; goto flow_control
l1420:
    v0$="M"
    v1$="CK"
    v2$=p5$
    v3$=m0$
    v0=p[1]
    v1=40
    v2=5
    v4$="Enter A Valid Customer Number, <F3>=Lookup"
    control_id=3002
    gosub std_input
    on v3 goto l1440,l1400,flow_control,l1436,flow_control,l1440,flow_control
l1436:
    call pgmdir$+"syc_lc.bbx",v$
    if v$="" goto l1420
l1440:
    p5$=v$
    find record (arm01_dev,key=firm_id$+p5$,dom=l1400) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3002,fnmask$(p5$,m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13002,x0$(1,30),0,"",status
    goto flow_control

l1600: rem --- Selected Warehouse

    v0$="S"
    v1$="CK"
    v2$=whse$
    v3$=""
    v4$="Print Pick Tickets for ItemsFrom This Warehouse, <F1>=All, <F3>=Lookup "
    v0=2
    v1=40
    v2=6
    control_id=3003
    gosub std_input
    on v3 goto l1650,l1645,flow_control,l1630,flow_control,l1650,flow_control
l1630:
    gosub l6600; goto l1650
l1645:
    whse$=""; gosub clear_text; call pgmdir$+"syc_rs.bbx"
    ""
    my_context
    13003
    "All Warehouses"
    0
    ""
    status; goto l1690
l1650:
    v$=v$+"  "
    v$=v$(1,2)
    find record (ivm10_dev,key=firm_id$+"C"+v$,dom=l1600) ivm10c$
    whse$=v$
    call pgmdir$+"syc_rs.bbx","",my_context,3003,whse$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13003,x0$(6,20),0,"",status
l1690:
    goto flow_control

l1800: rem --- Print picking list, quote, or both

    v0$="S"
    v1$="CR"
    v2$=which_ones$
    v3$="PQB"
    v4$="Print only Picking Lists, only Quotes, or Both? (P/Q/B)"
    v0=1
    v1=40
    v2=7
    control_id=3004
    gosub std_input
    on v3 goto l1840,l1800,flow_control,l1800,flow_control,l1840,flow_control
l1840:
    which_ones$=v$
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l1800,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    let v0$="S",v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    let o9$="sys_ac.bbx",o9=1
    run pgmdir$+"opr_pa.bbx"
display_fields:
    let control_id=3000,cid_cnt=0
l5010:
    if cid_cnt=0 disp_inp$=p8$
    if cid_cnt=1 disp_inp$=p7$
    if cid_cnt=2 disp_inp$="",disp_desc$=""
    find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
    if cid_cnt=3 disp_inp$=whse$,disp_desc$=x0$(6,20)
    if cid_cnt=4 disp_inp$=which_ones$
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>4 goto l5050
    goto l5010
l5050:
    let disp_inp$="",disp_desc$=""
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

l6600: rem --- Lookup Warehouse

    let nmbr=1
    dim descript$[nmbr],field[nmbr],position[nmbr],length[nmbr]
    let descript$[0]="Code",field[0]=1,position[0]=4,length[0]=2
    let descript$[1]="Warehouse",field[1]=1,position[1]=6,length[1]=20
    call pgmdir$+"syc_lk.bbx",ivm10_dev,"C",nmbr,"Warehouse Lookup",descript$[all],field[all],position[all],length[all],v1,v2,v$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
