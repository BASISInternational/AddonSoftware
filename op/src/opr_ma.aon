rem --- Sales Commission Report (Input Overlay)
rem --- Program opr_ma v8.0.0 06Jul2007 (opr_ma)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 03:01:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnv (Line 0359)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0126)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0132)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0145)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0146)
rem --- v7.x Administrator reference ["sys-01"] (Line 0159)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0169)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0174)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0179)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0198)
rem --- BBx reference ["syc_ra.bbx"] (Line 0198)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0222)
rem --- BBx reference ["syc_rs.bbx"] (Line 0222)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0242)
rem --- BBx reference ["syc_rs.bbx"] (Line 0242)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0265)
rem --- BBx reference ["syc_rs.bbx"] (Line 0265)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0269)
rem --- BBx reference ["syc_rs.bbx"] (Line 0269)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0270)
rem --- BBx reference ["syc_rs.bbx"] (Line 0270)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0296)
rem --- BBx reference ["syc_rs.bbx"] (Line 0296)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0300)
rem --- BBx reference ["syc_rs.bbx"] (Line 0300)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0301)
rem --- BBx reference ["syc_rs.bbx"] (Line 0301)
rem --- BBx reference ["opr_mb.bbx"] (Line 0373)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0385)
rem --- BBx reference ["syc_rs.bbx"] (Line 0385)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0386)
rem --- BBx reference ["syc_rs.bbx"] (Line 0386)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0393)
rem --- BBx reference ["syc_rs.bbx"] (Line 0393)
rem --- v7.x Administrator reference ["syc_lk.bbx"] (Line 0404)
rem --- BBx reference ["syc_lk.bbx"] (Line 0404)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following IOLIST's were removed from this program:

rem --- arm10f: iolist x0$

rem --- The following channel references have been identified:

rem --- arm01a: Channel reference (Line 0249)

rem --------------------------------------------------------------------------------
rem --- ars01a: (Generated by CodePort)
rem --- art01a: Channel reference (Line 0248)
rem --- art11a: Channel reference (Line 0247)
rem --- ivs01a: (Generated by CodePort)
rem --- opt41a: Channel reference (Line 0245)
rem --- opt71a: Channel reference (Line 0244)
rem --- opw03a: Channel reference (Line 0243)
rem --- sys01a: Channel reference (Line 0242)

    precision 4
    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-10"
    files$[4]="art-01"
    files$[5]="art-11"
    files$[6]="opt-41"
    files$[7]="opt-71"
    files$[8]="opw-03"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm10_dev=channels[3]
    art01_dev=channels[4]
    art11_dev=channels[5]
    opt41_dev=channels[6]
    opt71_dev=channels[7]
    opw03_dev=channels[8]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm10a$:templates$[3],art01a$:templates$[4],
:       art11a$:templates$[5],opt41a$:templates$[6],opt71a$:templates$[7],
:       opw03a$:templates$[8]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="ivs-01A"
    ids$[3]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],ivs01a$:templates$[2],sys01a$:templates$[3]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=8
    dim files$[files],options$[files],channels[files]
    files$[1]="arm-01"
    files$[2]="arm-10"
    files$[3]="art-01"
    files$[4]="opt-71"
    files$[5]="opt-41"
    files$[6]="art-11"
    files$[7]="opw-03"
    files$[8]="sys-01"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],barch,status
    if status goto std_exit
    arm01_dev=channels[1]
    arm10_dev=channels[2]
    art01_dev=channels[3]
    opt71_dev=channels[4]
    opt41_dev=channels[5]
    art11_dev=channels[6]
    opw03_dev=channels[7]
    sys01_dev=channels[8]

rem --- Parameters

    dim p[2]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    p[0]=num(p2$(1,2))

rem --- Initialize Data

    s2$="S"
    p7$="B"
    dim j1$(80," ")
    m4$="-##0.00%"
    m0=len(m0$)
    m1=len(m1$)
    m3=len(m3$)
    m4=len(m4$)

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    goto start_done

rem --- Options

l1000: rem --- From Date

    v0$="D"
    v1$="C"
    v2$=p8$
    v4$="Enter The Starting Date (<F1>=First Date)"
    v0=6
    v1=40
    v2=3
    i0=0
    v3$=""
    control_id=3000
    gosub std_input
    on v3 goto l1070,l1060,flow_control,l1000,flow_control,l1070,flow_control
l1060:
    v$=""
l1070:
    p8$=v$
    if p8$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13000,"First",0,"",status
    goto flow_control

l1200: rem --- Through Date

    v0$="D"
    v1$="C"
    v2$=p9$
    v4$="Enter The Ending Date (<F1>=Last Date)"
    v0=6
    v1=40
    v2=4
    v3$=""
    control_id=3001
    gosub std_input
    on v3 goto l1260,l1250,flow_control,l1200,flow_control,l1260,flow_control
l1250:
    v$=""
l1260:
    p9$=v$
    if p9$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13001,"Last",0,"",status
    goto flow_control

l1300: rem --- Beginning Salesperson

    v0$="S"
    v1$="C"
    v2$=s0$
    v3$=""
    v4$="Enter A Valid Salesperson Code (<F1>=First/<F3>=Lookup)"
    v0=3
    v1=40
    v2=5
    x3$=""
    control_id=3002
    gosub std_input
    on v3 goto l1360,l1350,flow_control,l1344,flow_control,l1360,flow_control
l1344:
    gosub l6100
    if v$="" goto l1300 else goto l1360
l1350:
    v$=""
l1360:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13002,"First",0,"",status; goto l1390
    v$=v$+j1$
    v$=v$(1,3)
    find record (arm10_dev,key=firm_id$+"F"+v$,dom=l1300) arm10f$
    call pgmdir$+"syc_rs.bbx","",my_context,3002,x0$(4,3),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13002,x0$(7,20),0,"",status
    x3$=x0$(7,20)
l1390:
    s0$=v$
    goto flow_control

l1400: rem --- Ending Salesperson

    v0$="S"
    v1$="C"
    v2$=s1$
    v3$=""
    v4$="Enter A Valid Salesperson Code (<F1>=Last/<F3>=Lookup)"
    v0=3
    v1=40
    v2=6
    x4$=""
    control_id=3003
    gosub std_input
    on v3 goto l1460,l1450,flow_control,l1444,flow_control,l1460,flow_control
l1444:
    gosub l6100
    if v$="" goto l1400 else goto l1460
l1450:
    v$=""
l1460:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13003,"Last",0,"",status; goto l1490
    v$=v$+j1$
    v$=v$(1,3)
    find record (arm10_dev,key=firm_id$+"F"+v$,dom=l1400) arm10f$
    call pgmdir$+"syc_rs.bbx","",my_context,3003,x0$(4,3),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13003,x0$(7,20),0,"",status
    x4$=x0$(7,20)
l1490:
    s1$=v$
    goto flow_control

l1600: rem --- Sales/Gross Profit

    v0$="S"
    v1$="C"
    v2$=s2$
    v3$=""
    v4$="S=Gross Sales     P=Gross Profit"
    v0=1
    v1=40
    v2=7
    control_id=3004
    if v2$="" v2$="S"
    gosub std_input
    on v3 goto l1660,l1600,flow_control,l1600,flow_control,l1660,flow_control
l1660:
    if pos(v$="SP")=0 goto l1600
    s2$=v$
    goto flow_control

l1800: rem --- Options

    v0$="S"
    v1$="CR"
    v2$=p7$
    v3$="BP"
    v4$="B=Booked Invoices     P=PaidInvoice"
    v0=1
    v1=40
    v2=8
    control_id=3005
    if v2$="" v2$="B"
    gosub std_input
    on v3 goto l1855,l1800,flow_control,l1800,flow_control,l1855,flow_control
l1855:
    if pos(v$="BP")=0 goto l1800
    p7$=v$
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1300,l1400,l1600,l1800,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    let v0$="S",v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    let validate=1,old_control_id=0
do_nonkey1:
    let v3=0,i0=i0_nonkey1-1
    goto flow_control

end_input: rem --- Run report overlay

    run pgmdir$+"opr_mb.bbx"
display_fields:
    let control_id=3000,cid_cnt=0
l5006:
    if cid_cnt=0 if p8$="" disp_inp$="",disp_desc$="First" else disp_inp$=fndate$(p8$),disp_desc$=""
    if cid_cnt=1 if p9$="" disp_inp$="",disp_desc$="Last" else disp_inp$=fndate$(p9$),disp_desc$=""
    find record (arm10_dev,key=firm_id$+"F"+s0$,dom=*next) arm10f$
    if cid_cnt=2 if s0$="" disp_inp$="",disp_desc$="First" else disp_inp$=s0$,disp_desc$=x0$(7,20)
    find record (arm10_dev,key=firm_id$+"F"+s1$,dom=*next) arm10f$
    if cid_cnt=3 if s1$="" disp_inp$="",disp_desc$="Last" else disp_inp$=s1$,disp_desc$=x0$(7,20)
    if cid_cnt=4 disp_inp$=s2$,disp_desc$=""
    if cid_cnt=5 disp_inp$=p7$,disp_desc$=""
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>5 goto l5050
    goto l5006
l5050:
    let disp_inp$="",disp_desc$=""
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

l6100: rem --- Salesperson Lookup

    dim description$[1],length[1],position[1],field[1]
    let number=1,title$="Salesperson Lookup",record$="F"
    let description$[0]="Code",description$[1]="Salesperson"
    let field[0]=1,position[0]=4,length[0]=3,v$="SKIP"
    let field[1]=1,position[1]=7,length[1]=20,channel=arm10_dev
    let row=v2+1,column=79-length[0]-length[1]-2-number*4
    call pgmdir$+"syc_lk.bbx",channel,record$,number,title$,description$[all],field[all],position[all],length[all],column,row,v$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
