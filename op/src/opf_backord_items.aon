rem --- Backordered Items query filter program
rem --- Program ID: opf_backord_items.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- Run by Barista as part of the OP_BACKORD_ITEMS query.
rem --- For each row in the result set, apply various filters to show non-stock item description, qty backordered and total available.

    use ::bbtranslator.bbj::BBTranslator

    setesc std_error
    seterr std_error

    enter inq_mode$,rec_tpl$,calc_tpl$,table_chans$[all],status$

rem inq_mode$      - not used until recently - current use not yet documented
rem rec_tpl$       - Current row database columns
rem calc_tpl$      - Current row calculated columns
rem table_chans$[] - Barista opened channels array
rem status$        - Returned status: "SKIP" = Skip current record

rem --- Initialize data
    status$=""

rem --- Get BBTranslator from Group Namespace
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif

rem --- Open tables
    num_files=3
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="OPC_LINECODE",open_opts$[1]="OTA"
    open_tables$[2]="OPT_INVHDR",open_opts$[2]="OTA@"
    open_tables$[3]="IVM_ITEMWHSE",open_opts$[3]="OTA"
            
    gosub open_tables        

    opcLineCode_dev=num(open_chans$[1])
    optInvHdr_dev=num(open_chans$[2])
    ivmItemWhse_dev=num(open_chans$[3])
    dim opcLineCode$:open_tpls$[1]
    dim optInvHdr$:open_tpls$[2]
    dim ivmItemWhse$:open_tpls$[3]

rem --- Exclude Dropship, Memo and Other detail lines
    readrecord(opcLineCode_dev,key=rec_tpl.firm_id$+rec_tpl.line_code$)opcLineCode$
    if opcLineCode.dropship$="Y" or pos(opcLineCode.line_type$="MO") then
        status$="SKIP"
        goto exit_prog
    endif

rem --- Set Item Description for non-stock items
    if cvs(rec_tpl.item_id$,2)="" then
        rec_tpl.item_desc$=rec_tpl.order_memo$
    endif
    
rem --- Set Qty Backordered when the Order is backordered
    optInvHdr_key$=rec_tpl.firm_id$+rec_tpl.ar_type$+rec_tpl.customer_id$+rec_tpl.order_no$+rec_tpl.ar_inv_no$
    findrecord(optInvHdr_dev,key=optInvHdr_key$)optInvHdr$
    if optInvHdr.backord_flag$="B" then
        rec_tpl.qty_backord$=rec_tpl.qty_shipped$
    endif

rem --- Set item's total available for all warehouses
    ttlOnHand=0
    ttlComitted=0
    if cvs(rec_tpl.item_id$,2)<>"" then
        rem --- Not a non-stock item
        ivmItemWhse_key$=rec_tpl.firm_id$+rec_tpl.item_id$
        read(ivmItemWhse_dev,key=ivmItemWhse_key$,knum="AO_ITEM_WH",dom=*next)
        while 1
            thisKey$=key(ivmItemWhse_dev,end=*break)
            if pos(ivmItemWhse_key$=thisKey$)<>1 then break
            readrecord(ivmItemWhse_dev)ivmItemWhse$
            ttlOnHand=ttlOnHand+ivmItemWhse.qty_on_hand
            ttlCommitted=ttlCommitted+ivmItemWhse.qty_commit
        wend
    endif
    rec_tpl.total_available=ttlOnHand-ttlCommitted
    
rem --- Done
    goto exit_prog

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
    
exit_prog:rem --- Exit Program

    exit
