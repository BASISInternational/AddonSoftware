rem --- Customer/Job Report
rem --- Program opr_fb v8.0.0 17Jul2007 (opr_fb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 09:49:28)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
rem milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
rem value_01$=fnget_fld_data$(table$,"dataname_01")
    Begin_Customer$=fnget_fld_data$(table$,"Begin_Customer")
    Ending_Customer$=fnget_fld_data$(table$," Ending_Customer")

rem --- Initialize Data

    dim headings$[2],a[1]
    headings$[0]=n1$
    headings$[1]=n3$
    clock$=""
    when$=sysinfo.system_date$
    h0=132
    l9=55
    l=l9+1
    h=0
    more=1
rem --- Background

rem call pgmdir$+"adc_progress.aon","CN",sysinfo.task_desc$,"","Printing","",m0+11,opm09_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,opm09_dev,1,meter_num,status
rem --- Initial Read

    read (opm09_dev,key=firm_id$,dom=*next)



while more


        k$=key(opm09_dev,end=*break)
        if pos(firm_id$=k$)<>1 break
        read record (opm09_dev,end=*break) opm09a$

rem --- Control Breaks

        if p9$<>"" then 
           if opm09a.CUSTOMER_ID$<p9$ then 
             continue 
           endif
        endif

        if p8$<>""then
          if opm09a.CUSTOMER_ID$>p8$ then
            continue
          endif
        endif 

rem --- Break

        if opm09a.CUSTOMER_ID$<>t0$ gosub Customer_Break

rem --- Print

        rem call pgmdir$+"adc_progress.aon","S","","","",fnmask$(opm09a_key$(3,p[0]),m0$)+" "+opm09a.JOB_NO$,0,0,1,0,ignore_status
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if l>l9 gosub Sub_Head
        print (printer_dev)
:                           @(32+m0),opm09a.JOB_NO$,
:                           @(43+m0),opm09a.CUSTOMER_NAME$,
:                           @(74+m0),opm09a.LIEN_NO$,
:                           @(87+m0),fndate$(opm09a.LIEN_DATE$),
:                           @(98+m0),opm09a.LIEN_AMOUNT:m1$
        print (printer_dev)
:                           @(43+m0),opm09a$.CONTACT_NAME$,
:                           @(74+m0),fndate$(opm09a.FST_SHP_DATE$),
:                           @(87+m0),fndate$(opm09a.LSTINV_DATE$),
:                           @(98+m0),opm09a.TOTAL_SALES:m1$
        l=l+2
        t0=t0+1
wend  

done: rem --- End

    if l>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)t0," Total Jobs"
    goto std_exit

report_heading: rem --- Report Heading

        l=0
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],2,h,h0,when$,clock$,status
        if status exitto std_exit
        print (printer_dev)"Customer",
:                            @(32+m0),"Job",
:                            @(43+m0),"Job Name/",
:                            @(74+m0),"Lien Number",
:                            @(87+m0),"Lien Date",
:                            @(98+m0+m1-12),"Lien Amount"
        print (printer_dev)"No.",
:                            @(1+m0),"Name",
:                            @(32+m0),"Number",
:                            @(43+m0),"Contact",
:                            @(74+m0),"First Ship",
:                            @(87+m0),"Last Inv",
:                            @(98+m0+m1-12),"Sls-To-Date"
    return

Sub_Head: rem --- Subhead

        if l>l9-2 gosub report_heading
        print (printer_dev)""
        print (printer_dev)fnmask$(t0$(1,p[0]),m0$),@(m0+1),arm01a.customer_name$(1,30),
        l=l+1
        return

Customer_Break: rem --- Customer Break

        if t9$=""  
           rem dim b1$(30)
             t0$=opm09a_key$(3,6)
             arm01a.customer_name$(1)="(Not On File)"
            find record (arm01_dev,key=opm09a.firm_id$+t0$,dom=*break) arm01a$
          gosub Sub_Head
      return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
