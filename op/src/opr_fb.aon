rem --- Customer/Job Report
rem --- Program opr_fb v8.0.0 28Jan2008 (opr_fb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/28/2008 11:11:03)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        seterr std_error
        setesc std_error



rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
       
rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open Printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Initialize Data

        more=1
        dim headings$[2],a[1]
        headings$[0]=n1$
        headings$[1]=n3$,clock$="",when$=sysinfo.system_date$
        h0=132
        l9=55,l=l9+1,h=0

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,opm09_dev,1,meter_num,status

rem --- Initial Read

        read (opm09_dev,key=firm_id$,dom=*next)

rem --- retrieve template for OPM_CUSTJOBS record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPM_CUSTJOBS","PRIMARY",opm09a_key_tpl$,table_chans$[all],status$
        dim opm09a_key$:opm09a_key_tpl$



rem --- Main Loop Starts
While more
        opm09a_key$=key(opm09_dev,end=*break)
        if pos(firm_id$=opm09a_key$)<>1 then break
        read record (opm09_dev,end=done) opm09a$

rem --- Control Breaks

        if p9$<>"" then
            if opm09a.customer_id$<p9$ then
                continue
            endif
        endif
        if p8$<>"" then
            if opm09a.customer_id$>p8$ then
                continue
            endif
        endif

rem --- Break

        if opm09a.customer_id$<>t0$ then gosub Customer_Break

rem --- Print

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if l>l9 then gosub Sub_Head
        print (printer_dev)@(32+m0),opm09a.job_no$,@(43+m0),opm09a.customer_name$,
:                      @(74+m0),opm09a.lien_no$,@(87+m0),fndate$(opm09a.lien_date$),
:                      @(98+m0),opm09a.lien_amount:ars01a.amount_mask$
        print (printer_dev)@(43+m0),opm09a.contact_name$,@(74+m0),fndate$(opm09a.fst_shp_date$),
:                      @(87+m0),fndate$(opm09a.lstinv_date$),@(98+m0),opm09a.total_sales:ars01a.amount_mask$
        l=l+2
        t0=t0+1

Wend
rem --- Main Loop Ends

done: rem --- End

        if l>l9 then gosub report_heading
        print (printer_dev)""
        print (printer_dev)t0," Total Jobs"
        goto std_exit

report_heading: rem --- Report Heading

        l=0
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],2,h,h0,when$,clock$,status
        if status then exitto std_exit
        print (printer_dev)"Customer",@(32+m0),"Job",@(43+m0),"Job Name/",@(74+m0),"Lien Number",
:                                 @(87+m0),"Lien Date",@(98+m0+m1-12),"Lien Amount"
        print (printer_dev)"No.",@(1+m0),"Name",@(32+m0),"Number",@(43+m0),"Contact",
:                            @(74+m0),"First Ship",@(87+m0),"Last Inv",@(98+m0+m1-12),"Sls-To-Date"
        return

Sub_Head: rem --- Subhead

        if l>l9-2 then gosub report_heading
        print (printer_dev)""
        print (printer_dev)fnmask$(t0$(1,p[0]),ars10a.customer_output$),@(m0+1),arm01a.customer_name$,
        l=l+1
        return

Customer_Break: rem --- Customer Break

        if t9$<>"" then
            return
        endif
        rem dim b1$(30)
        t0$=opm09a.customer_id$
        arm01a.customer_name$="(Not On File)"
        find record (arm01_dev,key=opm09a.firm_id$+t0$,dom=*next) arm01a$
        gosub Sub_Head

        return


rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

        def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release

rem --- #endinclude std_end.src

        end
