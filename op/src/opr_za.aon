rem --- Monthly Sales Register
rem --- Program opr_za v8.0.0 09Jul2007 (opr_za)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:29:08)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



                seterr std_error
                setesc std_error

rem --- Retrieve the program path

                pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

                sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
                dim sysinfo$:sysinfo_template$
                sysinfo$=stbl("+SYSINFO",err=*next)
                milestone=num(stbl("+MILESTONE",err=*next),err=*next)
                firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

                files=14,begfile=1,endfile=files
                dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
                files$[1]="ads-01"
                files$[2]="arm-01"
                files$[3]="arm-02"
                files$[4]="arm-04"
                files$[5]="arm-10"
                files$[6]="glm-01"
                files$[7]="glw-04"
                files$[8]="ivm-02"
                files$[9]="opm-02"
                files$[10]="opm-06"
                files$[11]="opt-01"
                files$[12]="opt-11"
                files$[13]="opt-31"
                files$[14]="opw-04"
                call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
                if status goto std_exit
                ads01_dev=channels[1]
                arm01_dev=channels[2]
                arm02_dev=channels[3]
                arm04_dev=channels[4]
                arm10_dev=channels[5]
                glm01_dev=channels[6]
                glw04_dev=channels[7]
                ivm02_dev=channels[8]
                opm02_dev=channels[9]
                opm06_dev=channels[10]
                opt01_dev=channels[11]
                opt11_dev=channels[12]
                opt31_dev=channels[13]
                opw04_dev=channels[14]

rem --- Dimension string templates

                dim arm01a$:templates$[2],arm02a$:templates$[3],arm04a$:templates$[4],
:               arm10a$:templates$[5],glm01a$:templates$[6],glw04a$:templates$[7],
:               ivm02a$:templates$[8],opm02a$:templates$[9],opm06a$:templates$[10],
:               opt01a$:templates$[11],opt11a$:templates$[12],opt31a$:templates$[13],
:               opw04a$:templates$[14]

rem --- Retrieve miscellaneous templates

                files=3,begfile=1,endfile=files
                dim ids$[files],templates$[files]
                ids$[1]="ars-01A"
                ids$[2]="gls-01A"
                ids$[3]="ivs-01A"

                call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
                if status goto std_exit

rem --- Dimension miscellaneous string templates

                dim ars01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3]


rem --- Assign form input values to local variables

       alpha_numeric_sort$=        option!.getOptionData("alpha_numeric_sort")
            begining_cust$=             option!.getOptionData("begining_cust")
              ending_cust$=               option!.getOptionData("ending_cust")
    begining_invoice_date$=     option!.getOptionData("begining_invoice_date")
      ending_invoice_date$=               option!.getOptionData("invoiced_by")
                  summary$=                   option!.getOptionData("summary")
    
rem --- Retrieve parameter records

                ars01a_key$=firm_id$+"AR00"
                find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
                gls01a_key$=firm_id$+"GL00"
                find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
                ivs01a_key$=firm_id$+"IV00"
                find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$



rem --- Parameters

                dim p[2],g[4],info$[20]
                n1$=sysinfo.firm_name$
                n2$="AR"
                n3$=sysinfo.task_desc$
                find record (ads01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
                call pgmdir$+"adc_application.aon","OP",info$[all]
                if info$[9]="Y" then
                find record (ads01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
                for x=0 to 4
                    g[x]=num(gls01a$(x*2+1,2),err=*next)
                next x
                g[2]=fnyy_year(gls01a.current_year$)
                p[0]=num(ars01a.customer_size$)
                p[1]=num(ars01a.max_customer_len$)
                p[2]=fnyy_year(ars01a.current_year$)

rem --- Initializations

                r0$="N"
                r5$="S"

rem --- Run overlay 
   
                run pgmdir$+"opr_zb.bbx"
                endif
                dim message$[1]
                let message$[0]="General Ledger Is Required For The "+n3$
                let message$[1]="               Press <Enter> To Continue"
                call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
                goto std_exit

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
    let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
    let q=num(fnyy$(q1$)),q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8181)
l8181:
    if q<q9 q=q+100
    return q
    fnend

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    if pos("E"=cvs(q1$,4)) goto alpha_fnf else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
