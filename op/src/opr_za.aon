rem --- Monthly Sales Register
rem --- Program opr_za v8.0.0 09Jul2007 (opr_za)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:29:08)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnyy_year (Line 0245)
rem --- Undefined function fnyy_year (Line 0248)
rem --- Undefined function fnv (Line 0422)
rem --- v7.x Administrator reference ["sys-01A"] (Line 0163)
rem --- v7.x sys-01 reference [sys01a$:temp] (Line 0170)
rem --- v7.x sys-01 reference [sys01a_key$=] (Line 0185)
rem --- v7.x sys-01 reference [sys01a_key$,] (Line 0186)
rem --- v7.x Administrator reference ["sys-01"] (Line 0199)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0217)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0232)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0237)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0240)
rem --- v7.x Administrator reference ["syc_ra.bbx"] (Line 0262)
rem --- BBx reference ["syc_ra.bbx"] (Line 0262)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0283)
rem --- BBx reference ["syc_rs.bbx"] (Line 0283)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0301)
rem --- BBx reference ["syc_lc.bbx"] (Line 0301)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0305)
rem --- BBx reference ["syc_rs.bbx"] (Line 0305)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0308)
rem --- BBx reference ["syc_rs.bbx"] (Line 0308)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0309)
rem --- BBx reference ["syc_rs.bbx"] (Line 0309)
rem --- v7.x Administrator reference ["syc_lc.bbx"] (Line 0329)
rem --- BBx reference ["syc_lc.bbx"] (Line 0329)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0333)
rem --- BBx reference ["syc_rs.bbx"] (Line 0333)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0336)
rem --- BBx reference ["syc_rs.bbx"] (Line 0336)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0337)
rem --- BBx reference ["syc_rs.bbx"] (Line 0337)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0359)
rem --- BBx reference ["syc_rs.bbx"] (Line 0359)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0379)
rem --- BBx reference ["syc_rs.bbx"] (Line 0379)
rem --- BBx reference ["opr_zb.bbx"] (Line 0438)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0460)
rem --- BBx reference ["syc_rs.bbx"] (Line 0460)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0461)
rem --- BBx reference ["syc_rs.bbx"] (Line 0461)
rem --- v7.x Administrator reference ["syc_rs.bbx"] (Line 0468)
rem --- BBx reference ["syc_rs.bbx"] (Line 0468)

rem --- The following reset verbs were removed from this program:

rem --- BEGIN statement removed [begin]
rem --- START statement removed [start_itaic:]
rem --- CLEAR statement removed [clear_text:]

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file arm-04 referenced (Line 0136)
rem --- Cross-reference file arm-04 referenced (Line 0215)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record arm04a replaced by index on arm-01 (Line 0150)

rem --- The following IOLIST's were removed from this program:

rem --- arm01a: iolist *,x0$
rem --- gls01a: iolist x$,g1$,g2$,g3$,g4$,g5$,g6$,g7$

rem --- The following channel references have been identified:

rem --- arm02a: Channel reference (Line 0230)

rem --------------------------------------------------------------------------------
rem --- arm04a: Channel reference (Line 0229)
rem --- arm10a: Channel reference (Line 0227)
rem --- ars01a: (Generated by CodePort)
rem --- glm01a: Channel reference (Line 0226)
rem --- glw04a: Channel reference (Line 0225)
rem --- ivm02a: Channel reference (Line 0224)
rem --- ivs01a: (Generated by CodePort)
rem --- opm02a: Channel reference (Line 0222)
rem --- opm06a: Channel reference (Line 0221)
rem --- opt01a: Channel reference (Line 0219)
rem --- opt11a: Channel reference (Line 0218)
rem --- opt31a: Channel reference (Line 0217)
rem --- opw04a: Channel reference (Line 0217)
rem --- sys01a: Channel reference (Line 0216)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="arm-01"
    files$[3]="arm-02"
    files$[4]="arm-04"
    files$[5]="arm-10"
    files$[6]="glm-01"
    files$[7]="glw-04"
    files$[8]="ivm-02"
    files$[9]="opm-02"
    files$[10]="opm-06"
    files$[11]="opt-01"
    files$[12]="opt-11"
    files$[13]="opt-31"
    files$[14]="opw-04"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm04_dev=channels[4]
    arm10_dev=channels[5]
    glm01_dev=channels[6]
    glw04_dev=channels[7]
    ivm02_dev=channels[8]
    opm02_dev=channels[9]
    opm06_dev=channels[10]
    opt01_dev=channels[11]
    opt11_dev=channels[12]
    opt31_dev=channels[13]
    opw04_dev=channels[14]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm02a$:templates$[3],arm04a$:templates$[4],
:       arm10a$:templates$[5],glm01a$:templates$[6],glw04a$:templates$[7],
:       ivm02a$:templates$[8],opm02a$:templates$[9],opm06a$:templates$[10],
:       opt01a$:templates$[11],opt11a$:templates$[12],opt31a$:templates$[13],
:       opw04a$:templates$[14]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ars-01A"
    ids$[2]="gls-01A"
    ids$[3]="ivs-01A"
    ids$[4]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ars01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       sys01a$:templates$[4]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ads01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Open/Lock Files

    files=14
    dim files$[files],options$[files],channels[files]
    files$[1]="opt-01"
    files$[2]="opt-11"
    files$[3]="opt-31"
    files$[4]="arm-01"
    files$[5]="arm-10"
    files$[6]="arm-04"
    files$[7]="arm-02"
    files$[8]="sys-01"
    files$[9]="opw-04"
    files$[10]="ivm-02"
    files$[11]="glm-01"
    files$[12]="glw-04"
    files$[13]="opm-02"
    files$[14]="opm-06"
    options$[9]="CL"
    options$[12]="CL"
    call pgmdir$+"adc_fileopen.aon",1,1,files,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    opt01_dev=channels[1]
    opt11_dev=channels[2]
    opt31_dev=channels[3]
    arm01_dev=channels[4]
    arm10_dev=channels[5]
    arm04_dev=channels[6]
    arm02_dev=channels[7]
    sys01_dev=channels[8]
    opw04_dev=channels[9]
    ivm02_dev=channels[10]
    glm01_dev=channels[11]
    glw04_dev=channels[12]
    opm02_dev=channels[13]
    opm06_dev=channels[14]

rem --- ESCAPE DIM AFILES$[4],AOPTIONS$[4],ACHANNELS[4]
rem --- ESCAPE LET AFILES$[1]="CVF030",AFILES$[2]="CVF150",AFILES$[3]="CVH150",AFILES$[4]="JCMDIS
rem --- ESCAPE CALL "adc_fileopen.aon",1,1,4,AFILES$[ALL],AOPTIONS$[ALL],ACHANNELS[ALL],BATCH,STATUS
rem --- ESCAPE LET CVF030=ACHANNELS[1],CVF150=ACHANNELS[2],CVH150=ACHANNELS[3],JCMDIS=ACHANNELS[4]
rem --- Parameters

    dim p[2],g[4],info$[20]
    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=f0$(16,2)
    n1$=sysinfo.firm_name$
    n2$="AR"
    n3$=sysinfo.task_desc$
    find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    call pgmdir$+"adc_application.aon","OP",info$[all]
    if info$[9]<>"Y" goto l4900
    find record (sys01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    for x=0 to 4
        g[x]=num(g2$(x*2+1,2),err=*next)
    l470:
    next x
    g[2]=fnyy_year(g2$(5,2))
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(3,2))
    p[2]=fnyy_year(p4$(3,2))

rem --- Initializations

    r0$="N"
    r5$="S"

rem --- Additional File Opens

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    gosub flow_initializations
    goto start_done

l1000: rem --- Alpha/Numeric

    v0$="S"
    v1$="KRCE"
    v2$=r0$
    v3$="AN"
    v0=1
    v1=40
    v2=3
    v4$="<A>=Alternate Seq, <N>=Customer Number"
    i0=0
    control_id=3000
    if pos(v2$="AN")=0 v2$="N"
    gosub std_input
    on v3 goto l1030,l1000,flow_control,l1000,flow_control,l1030,flow_control
l1030:
    r0$=v$
    if r0$="A" call pgmdir$+"syc_rs.bbx","",my_context,13000,"Alpha",0,"",status else call pgmdir$+"syc_rs.bbx","",my_context,13000,"Numeric",0,"",status
    goto flow_control

l1200: rem --- Beginning Customer

    v0$="M"
    v1$="KC"
    v2$=r1$
    v3$=p1$
    v4$="Enter A Valid Customer Number, <F1>=First, <F3>=Lookup"
    v0=6
    v1=40
    v2=4
    control_id=3001
    if r0$="A" v0$="S",v1$="C",v3$="",v4$="Enter The Beginning Alternate Sequence, <F1>=First",v0=10
    gosub std_input
    on v3 goto l1255,l1250,flow_control,l1242,flow_control,l1255,flow_control
l1242:
    if r0$<>"A" call pgmdir$+"syc_lc.bbx",v$; goto l1255
l1250:
    v$=""
l1255:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13001,"First",0,"",status
    if r0$="A" or (r0$="N" and v$="") goto l1280
    read record (arm01_dev,key=firm_id$+v$,dom=l1200) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3001,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13001,x0$(1,30),0,"",status
l1280:
    r1$=v$
    goto flow_control

l1400: rem --- Ending Customer

    v0$="M"
    v1$="KC"
    v2$=r2$
    v3$=p1$
    v4$="Enter A Valid Customer Number, <F1>=Last, <F3>=Lookup"
    v0=6
    v1=40
    v2=5
    control_id=3002
    if r0$="A" v0$="S",v1$="C",v3$="",v4$="Enter The Ending Alternate Sequence, <F1>=Last",v0=10
    gosub std_input
    on v3 goto l1455,l1450,flow_control,l1442,flow_control,l1455,flow_control
l1442:
    if r0$<>"A" call pgmdir$+"syc_lc.bbx",v$; goto l1455
l1450:
    v$=""
l1455:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13002,"Last",0,"",status
    if r0$="A" or (r0$="N" and v$="") goto l1480
    read record (arm01_dev,key=firm_id$+v$,dom=l1400) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3002,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13002,x0$(1,30),0,"",status
l1480:
    r2$=v$
    if r2$<>"" if r2$<r1$ goto l1400
    goto flow_control

l1600: rem --- Beginning Date

    v0$="D"
    v1$=""
    v2$=r3$
    v0=8
    v1=40
    v2=6
    v4$="Enter Starting Invoice Date, <F1>=First"
    v3$=""
    control_id=3003
    gosub std_input
    on v3 goto l1660,l1650,flow_control,l1600,flow_control,l1660,flow_control
l1650:
    v$=""
l1660:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13003,"First",0,"",status
    r3$=v$
    goto flow_control

l1800: rem --- Ending Date

    v0$="D"
    v1$=""
    v2$=r4$
    v0=8
    v1=40
    v2=7
    v4$="Enter Ending Invoice Date, <F1>=Last"
    v3$=""
    control_id=3004
    gosub std_input
    on v3 goto l1860,l1850,flow_control,l1800,flow_control,l1860,flow_control
l1850:
    v$=""
l1860:
    if v$="" gosub clear_text; call pgmdir$+"syc_rs.bbx","",my_context,13004,"Last",0,"",status
    r4$=v$
    goto flow_control

l1900: rem --- Summary Or Detail

    v0$="S"
    v1$="C"
    v2$=r5$
    v3$="SD"
    v4$="<S>=Summary, <D>=Detail"
    v0=1
    v1=40
    v2=8
    control_id=3005
    if pos(v2$="SD")=0 v2$="S"
    gosub std_input
    on v3 goto l1960,l1900,flow_control,l1900,flow_control,l1960,flow_control
l1960:
    if pos(v$="SD")=0 goto l1900
    r5$=v$
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto l1000,l1200,l1400,l1600,l1800,l1900,done,done

done: rem --- Correct?

    if validate validate=0; goto end_input
    gosub display_fields
    v0$="S"
    v1$="KC"
    v2$="Y"
    v3$=""
    v4$="ITAC=Y"
    v0=6
    v1=fnv(v4$)
    v2=22
    control_id=i0-i0_done+1
    gosub std_input
done_v3:
    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
    validate=1
    old_control_id=0
do_nonkey1:
    v3=0
    i0=i0_nonkey1-1
    goto flow_control
end_input:
    run pgmdir$+"opr_zb.bbx"

l4900: rem --- G/L Not Installed

    dim message$[1]
    let message$[0]="General Ledger Is Required For The "+n3$
    let message$[1]="               Press <Enter> To Continue"
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
    goto std_exit
display_fields:
    let control_id=3000,cid_cnt=0
l5006:
    if cid_cnt=0 if r0$="N" disp_inp$=r0$,disp_desc$="Numeric" else disp_inp$=r0$,disp_desc$="Alpha"
    read record (arm01_dev,key=firm_id$+r1$,dom=*next) arm01a$
    if cid_cnt=1 if r0$="N" if r1$="" disp_inp$="",disp_desc$="First" else disp_inp$=fnmask$(r1$,m0$),disp_desc$=x0$(1,30)
    read record (arm01_dev,key=firm_id$+r2$,dom=*next) arm01a$
    if cid_cnt=2 if r0$="N" if r2$="" disp_inp$="",disp_desc$="Last" else disp_inp$=fnmask$(r2$,m0$),disp_desc$=x0$(1,30)
    if cid_cnt=1 if r0$="A" if r1$="" disp_inp$="",disp_desc$="First" else disp_inp$=r1$,disp_desc$=""
    if cid_cnt=2 if r0$="A" if r2$="" disp_inp$="",disp_desc$="Last" else disp_inp$=r2$,disp_desc$=""
    if cid_cnt=3 if r3$="" disp_inp$="",disp_desc$="First" else disp_inp$=fndate$(r3$),disp_desc$=""
    if cid_cnt=4 if r4$="" disp_inp$="",disp_desc$="Last" else disp_inp$=fndate$(r4$),disp_desc$=""
    if cid_cnt=5 disp_inp$=r5$
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
    let cid_cnt=cid_cnt+1; let control_id=control_id+1
    if cid_cnt>i0_done-1 goto l5050
    goto l5006
l5050:
    let disp_inp$="",disp_desc$=""
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
    let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
    let q=num(fnyy$(q1$)),q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8181)
l8181:
    if q<q9 q=q+100
    return q
    fnend

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    if pos("E"=cvs(q1$,4)) goto *next else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
