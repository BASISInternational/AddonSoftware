rem --- Monthly Sales Register
rem --- Program opr_zb v8.0.0 22Jan2008 (opr_zb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/22/2008 04:35:26)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open Printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Parameters

        g5=len(gls01a.acct_output$)
        m0=len(ars01a.customer_output$)
        m1=len(ars01a.amount_mask$)

rem --- Initializations
        more=1
        dim a[13],b[17]
        t0$=""
        t1$="",d1=0,d2=0,d3=0,c1=0,c2=0,c3=0

        if r1$="" then 
            let h5$="First"
        else
            if r0$="A" then
                let h5$=r1$
            else
                let h5$=fnmask$(r1$,ars01a.customer_output$)
            endif
        endif

        if r2$="" then
            let h6$="Last"
        else
            if r0$="A" then
                let h6$=r2$
            else
                let h6$=fnmask$(r2$,ars01a.customer_output$)
            endif
        endif

        if r3$="" then let h7$="First" else let h7$=fndate$(r3$)
        if r4$="" then let h8$="Last" else let h8$=fndate$(r4$)
        if r5$="S" then
            let h9$="*** Summary ***",x8$="",x9$=""
        else
            let h9$="*** Detail ***",x8$="No.",x9$="Line"
        endif

        when$=sysinfo.system_date$
        clock$="",page=0,width=132,l9=55,l=l9+1,headings=5
        dim headings$[headings],j1$(width),j2$(width,"-"),j3$(width,"=")
        headings$[0]=n1$
        headings$[1]=n3$
        headings$[2]=""
        dim x$(width)
        x$(1)="Beginning Customer: "+h5$
        x$(int((width-len(h9$))/2))=h9$
        x$(100)="Beginning Invoice Date: "+h7$
        headings$[3]=x$
        dim x$(width)
        x$(4)="Ending Customer: "+h6$
        x$(103)="Ending Invoice Date: "+h8$
        headings$[4]=x$

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,opt01_dev,1,meter_num,status

rem --- Create Work File

        if r0$="N" then read (opt01_dev,key=firm_id$+"  "+r1$,dom=Label_One)
        read (arm04_dev,key=firm_id$+"A"+r1$,dom=*next)



rem --- retrieve template for ARX_CUSTALT record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","ARX_CUSTALT","PRIMARY",arm04a_key_tpl$,table_chans$[all],status$
        dim arm04a_key$:arm04a_key_tpl$


rem --- retrieve template for OPT_ORDHDR record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_ORDHDR","PRIMARY",opt01a_key_tpl$,table_chans$[all],status$
        dim opt01a_key$:opt01a_key_tpl$


rem --- retrieve template for OPT_ORDDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_ORDDET","PRIMARY",opt11a_key_tpl$,table_chans$[all],status$
        dim opt11a_key$:opt11a_key_tpl$


rem --- retrieve template for OPW_MTDGLJRN record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPW_MTDGLJRN","PRIMARY",opw04a_key_tpl$,table_chans$[all],status$
        dim opw04a_key$:opw04a_key_tpl$


rem --- arm04 is no longer used in version.8, please check

While more
        arm04a_key$=key(arm04_dev,end=*break)
        if arm04a_key.firm_id$+arm04a_key.record_id_a$<>firm_id$+"A" then break
        if r2$<>"" and arm04a_key.alt_sequence$(1,len(r2$))>r2$ then break
        read (arm04_dev)
        if r0$="A" then read (opt01_dev,key=firm_id$+"  "+arm04a_key.customer_id$,dom=*next)

Init_Read: rem --- Initial Read


Label_One:
        if r0$="N" then
            let opt01a_key$=key(opt01_dev,end=Init_Read)
        else
            if r0$="A" then
                let opt01a_key$=key(opt01_dev,end=*continue)
            endif
        endif
        if opt01a_key.firm_id$=firm_id$ then
            if r0$="A" then
                if opt01a_key.customer_id$<>arm04a_key.customer_id$ then
                    continue
                endif
            endif
            if r0$="N" and r2$<>"" and opt01a_key.customer_id$>r2$ then break
            read record (opt01_dev,key=opt01a_key$) opt01a$
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            if r3$<>"" and opt01a.invoice_date$<r3$ then goto Init_Read
            if r4$<>"" and opt01a.invoice_date$>r4$ then goto Init_Read
            arm10d.dist_code$=opt10a.dist_code$
            gosub AR_Account_Cash_Account

rem ------- Read Detail

            read (opt11_dev,key=opt01a.firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$,dom=*next)

            While more
                opt11a_key$=key(opt11_dev,end=Init_Read)
                if (opt11a_key.firm_id$+opt11a_key.ar_type$+customer_id$+opt11a_key.order_no$)<>(opt01a.firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$) then goto Init_Read
                read record (opt11_dev,key=opt11a_key$) opt11a$

rem ----------- Line Type

                rem dim y0$(32),y1$(12)
                d1$=""
                find record (opm02_dev,key=opt11a_key.firm_id$+opt11a_key.line_code$,dom=Find_Revenue_Account) opm02a$
                if opm02a.line_type$="M" then continue
                if opm02a.line_type$<>"S" then
                    if opm02a.line_type$<>"O" then let arm10d.dist_code$=opm02a.dist_code$; goto Find_Revenue_Account
                    find (glm01_dev,key=opt11a_key.firm_id$+opm02a.gl_rev_acct$,dom=Find_Revenue_Account)
                    arm10d.gl_ar_acct$=opm02a.gl_rev_acct$; goto Label_Two
                endif

rem ---------- Standard Item

                arm10d.dist_code$=opt01a.dist_code$
                if ars01a.dist_by_item$="Y" then
                    find record (ivm02_dev,key=opt11a_key.firm_id$+opt11a_key.warehouse_id$,dom=Find_Revenue_Account) ivm02a$
                    arm10d.dist_code$=ivm02a.dist_code$
                endif

Find_Revenue_Account: rem ---- Find Revenue Account

                if d1$="" then
                    rem dim d9$(80)
                    find record (arm10_dev,key=opt11a_key.firm_id$+"D"+d0$,dom=*continue) arm10d$
                    d1$=arm10d.gl_sls_acct$
                endif
Label_Two:
                d0=-opt11a.ext_price
                if r5$="D" then 
                    let z9$=opt11a_key.line_no$
                else
                    let z9$="   "
                endif
                gosub Write_To_WorkFile
            Wend

AR_Account_Cash_Account: rem --- A/R Account, Cash Account

            rem dim d9$(80)
            find record (arm10_dev,key=firm_id$+"D"+opt01a.terms_code$,dom=Rtn_1) arm10d$
            if opt01a.cash_sale$="Y" then
                let d1$=arm10d.gl_cash_acct$
            else
                let d1$=arm10d.gl_ar_acct$
            endif
            d0=opt01a.total_sales+opt01a.tax_amount+opt01a.freight_amt-opt01a.discount_amt
            z9$="   "
            gosub Write_To_WorkFile

rem --- Discount Amount

            if opt01a.discount_amt<>0 then
                d1$=arm10d.gl_disc_acct$
                d0=opt01a.discount_amt,z9$="   "
                gosub Write_To_WorkFile
            endif

rem --- Freight Amount

            if opt01a.freight_amt<>0 then
                d1$=arm10d.gl_frgt_acct$
                d0=-opt01a.freight_amt,z9$="   "
                gosub Write_To_WorkFile
            endif

rem --- Tax Account

            precision 4
            rem dim tax$(60),x0$(60)
            find record (opm06_dev,key=firm_id$+opt01a.tax_code$,dom=Rtn_1) opm06a$
            x=x0*opt01a.taxable_amt/100
            precision 2
            x=x*1
            if x1<>0 and abs(x)>x1 then let x=x1*sgn(x)
            y=x
            arm10d.gl_ar_acct$=opm06a.gl_account$(1,g[4])
            d0=-x
            if d0<>0 then gosub Write_To_WorkFile
            rem x0$(1)=tax$
            arm01a.CUSTOMER_NAME$=opm06a$
            for x9=1 to 10
                precision 4
                x1$=tax$(1+2*(x9-1),2)
                if x1$<>"  " then
                    find record (opm06_dev,key=firm_id$+x1$,dom=*continue) opm06a2$
                    x=x0*opt01a.taxable_amt/100
                    precision 2
                    x=x*1
                    if x1<>0 and abs(x)>x1 then let x=x1*sgn(x)
                    y=y+x
                    arm10d.gl_ar_acct$=opm06a.gl_account$(1,g[4])
                    d0=-x
                    if d0<>0 then gosub Write_To_WorkFile
                endif
            next x9
            precision 2
            if opt01a.tax_amount=y then
                return
            endif
            x=opt01a.tax_amount-y
            d1$=opm06a.gl_account$(1,g[4])
            d0=-x
            if d0<>0 then gosub Write_To_WorkFile
Rtn_1:
            return
    endif

End_Of_File: rem --- End Of File?
    if r0$="A" then
        continue
    else
        break
    endif
Wend



rem --- Initial Read From Work File

        if r0$="N" then
            read (opw04_dev,key=firm_id$,dom=Heading_Read)
        endif


rem --- arm04 is no longer used in version.8, please check

        read (arm04_dev,key=firm_id$+"A"+r1$,dom=*next)

While more
        arm04a_key$=key(arm04_dev,end=done)
        if arm04a_key.firm_id$+arm04a_key.record_id_a$<>firm_id$+"A" then break
        if r2$<>"" and arm04a_key.alt_sequence$(1,len(r2$))>r2$ then break
        read (arm04_dev)
        read (opw04_dev,key=firm_id$+"  "+arm04a_key.customer_id$,dom=*next)

Heading_Read: rem --- Heading Read

        if r0$="A" then
            let opw04a_key$=key(opw04_dev,end=*continue)
        else
            let opw04a_key$=key(opw04_dev,end=done)
        endif

        if opw04a_key.firm_id$=firm_id$ then
                if r0$="A" then
                    if opw04a_key.customer_id$<>arm04a_key.customer_id$ then
                        continue
                    endif
                endif
                read record (opw04_dev,key=opw04a_key$) opw04a$

rem ----------- Breaks

                if opw04a_key.customer_id$<>t0$ then gosub Customer_Break
                if opw04a_key.ar_inv_no$<>t1$ then
                        if d3-abs(c3)<>0 then gosub Previous_Invoice_Outof_Balance

rem ----------- Find Invoice Date

                        rem dim a0$(200)
                        read record (opt01_dev,key=opw04a_key.firm_id$+opw04a_key.ar_type$+opw04a_key.customer_id$+opw04a_key.ar_inv_no$+"000",dom=*next) opt01a$

rem ------------------- Print Invoice Number & Date

                        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                        if r5$="D" then
                            if l+1>l9 then gosub report_heading
                            print (printer_dev)@(39),opw04a_key.ar_inv_no$,@(48),fndate$(opt01a.invoice_date$),
                        else
                            t1$=opw04a_key.ar_inv_no$
                            d3=0,c3=0
                        endif
                endif

rem ----------- Find G/L Name

                rem dim x1$(35)
                glm01a.gl_acct_desc$="*** Not On File ***"
                find record (glm01_dev,key=firm_id$+opw04a_key.gl_account$,dom=Print_1) glm01a$
                x1$=glm01a.gl_acct_desc$

Print_1: rem ---- Print

                if r5$="D" then
                    if l+1>l9 then gosub report_heading
                    print (printer_dev)@(58),opw04a_key.line_no$,@(63),fnmask$(opw04a_key.gl_account$(1,g[3]),gls01a.acct_output$),
:                                      @(64+g5),x1$,
                    if w0>0 then
                        print (printer_dev)@(131-2*m1+2),w0:ars01a.amount_mask$
                    else
                        print (printer_dev)@(132-m1),abs(w0):ars01a.amount_mask$
                    endif
                    l=l+1
                else
                    if w0>0 then
                        let d1=d1+w0,d2=d2+w0,d3=d3+w0
                    else
                        let c1=c1+w0,c2=c2+w0,c3=c3+w0
                    endif
                    goto Heading_Read
                endif
        endif


rem --- End of file?

        if r0$="A" then
            continue
        else
            continue
        endif
Wend


done: rem --- End

        t9$="E"
        gosub Customer_Break
        if r5$="D" then
            if l+2>l9 then gosub report_heading
            print (printer_dev)@(132-2*m1),j3$(1,2*m1)
            print (printer_dev)@(10),"Grand Total:",
            if d2-abs(c2)<>0 then print (printer_dev)@(131-3*m1),"***",
            print (printer_dev)@(131-2*m1+2),d2:ars01a.amount_mask$,@(132-m1),abs(c2):ars01a.amount_mask$,
        endif

rem --- G/L Account Totals

        retain$="YES"
        run pgmdir$+"glr_xb.bbx"

report_heading: rem --- Report Heading

        if r5$<>"D" then
            return
        endif
        l=0
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
        if status then exitto std_exit
        print (printer_dev)@(0),"Customer",@(39),"Invoice",@(49),"Invoice",@(58),x9$,@(65),"G/L"
        print (printer_dev)@(0),"Number",@(7),"Name",@(39),"Number",@(51),"Date",@(58),x8$,@(65),"No.",
:                          @(64+g5),"Description",@(width-m1-5),"Debit",@(width-7),"Credit",'lf'
        l=4

        return
        l=l+1

Customer_Break: rem --- Customer Break

        if t0$<>"" then
            if d3-abs(c3)<>0 then gosub Previous_Invoice_Outof_Balance
            if l+3>l9 then gosub report_heading
            if r5$="D" then
                print (printer_dev)@(132-2*m1),j2$(1,2*m1)
                print (printer_dev)@(10),"Customer ",fnmask$(t0$,ars01a.customer_output$)," Total: ",@(131-2*m1+2),d1:ars01a.amount_mask$,
:                                  @(132-m1),abs(c1):ars01a.amount_mask$,'lf'
                l=l+3
            endif
        endif

        if t9$="E" then
            return
        endif
        rem dim x0$(30)
        arm01a.customer_name$="*** Not On File ***"
        find record (arm01_dev,key=opw04a_key.firm_id$+opw04a_key.customer_id$,dom=Label_Three) arm01a$
        x0$=fnmask$(opw04a_key.customer_id$(1,p[0]),ars01a.customer_output$)+" "+arm01a.customer_name$
        if r5$="D" then
Label_Three:
            if l+1>l9 then gosub report_heading
            print (printer_dev)@(0),x0$,
        endif

        t0$=opw04a_key.customer_id$
        d1=0,c1=0,d3=0,c3=0

        return

Previous_Invoice_Outof_Balance: rem --- Previous Invoice Out Of Balance

        gosub Invoice_History
        if d3-abs(c3)=0 then
            return
        endif
        if r5$<>"D" then
            return
        endif
        print (printer_dev)@(131-2*m1),"**",d3:ars01a.amount_mask$,@(132-m1),abs(c3):ars01a.amount_mask$,'lf'
        l=l+2

        return

Invoice_History: rem --- Invoice History Detail Retained?

        read (opt11_dev,key=opw04a_key.firm_id$+opw04a.ar_type$+opw04a_key.customer_id$+opw04a.ar_inv_no$,dom=*next)
        opt11k$=""
        opt11a_key$=key(opt11_dev,end=Label_Four)
Label_Four:
        if pos((opw04a_key.firm_id$+opw04a.ar_type$+opw04a_key.customer_id$+opw04a.ar_inv_no$)=opt11a_key$)=1
            return; rem "History retained
        endif
        oob=-(d3-abs(c3))

rem --- Summarize Non-Retained Postings

        d1$=fill(g[4],"?")
        d0=oob
        gosub Update_GL_Summary
        if r5$<>"D" then
            return
        endif
        if l+1>l9 then gosub report_heading
        print (printer_dev)@(58),"???",@(63),fnmask$(arm10d.gl_ar_acct$(1,g[3]),gls01a.acct_output$),@(64+g5),"***Detail Not Retained***",

        if oob>0 then
            print (printer_dev)@(131-2*m1+2),oob:ars01a.amount_mask$
        else
            print (printer_dev)@(132-m1),abs(oob):ars01a.amount_mask$
        endif

        if oob>0 then
            let d1=d1+oob,d2=d2+oob,d3=d3+oob
        else
            let c1=c1+oob,c2=c2+oob,c3=c3+oob
        endif

        return

Write_To_WorkFile: rem --- Write To Work File

        rem dim z0$(30)
        z0=0
        rem z0$(1)=opt01a.firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$+d1$+z9$
        opw04a.firm_id$=opt01a.firm_id$
        opw04a.ar_type$=opt01a.ar_type$
        opw04a.customer_id$=opt01a.customer_id$
        opw04a.ar_inv_no$=opt01a.ar_inv_no$
        opw04a.gl_account$=d1$
        opw04a.line_no$=z9$

        find record (opw04_dev,key=opw04a.firm_id$+opw04a.ar_type$+opw04a.customer_id$+opw04a.ar_inv_no$+opw04a.gl_account$+opw04a.line_no$,dom=*next) opw04a2$
        z0=z0+d0
        write record (opw04_dev,key=opw04a.firm_id$+opw04a.ar_type$+opw04a.customer_id$+opw04a.ar_inv_no$+opw04a.gl_account$+opw04a.line_no$) opw04a2$

Update_GL_Summary: rem --- Update G/L Summary

        if d0=0 then
            return
        endif
        glw04a.firm_id$=opt01a.firm_id$
        glw04a.gl_account$=gl_ar_acct$
        z0=0,z1=0
        read record (glw04_dev,key=glw04a.firm_id$+glw04a.gl_account$,dom=*next) glw04a$
        z0=z0+d0
        write record (glw04_dev,key=glw04a.firm_id$+glw04a.gl_account$) glw04a$

        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem --- #endinclude std_end.src

        end
