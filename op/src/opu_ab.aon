rem --- Sales Commission File
rem --- Program opu_ab v8.0.0 17Jul2007 (opu_ab)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 09:51:45)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$


rem --- Assign form input values to local variables

        table$=fnget_table$("")
rem     value_01$=fnget_fld_data$(table$,"dataname_01")
        Purge_Date$=fnget_fld_data$(table$,"Purge_Date")

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$


rem --- Initialize data

 rem    dim x[2],c[2]
        more=1

rem --- Background

rem     call pgmdir$+"adc_progress.aon","CN","","","Removing Invoice","",7,opt71_dev,1,meter_num,status
        call pgmdir$+"adc_progress.aon","CN","","","","",0,opt71_dev,1,meter_num,status

rem --- Disallow 'M'enu option in Error Routine

        exit_ctrl=1

rem --- Initial File Read

        read (opt71_dev,key=firm_id$,dom=*next)

while more
        opt71a_key$=key(opt71_dev,end=*break)
        read record (opt71_dev,end=*break) opt71a$
        if pos(firm_id$=opt71a_key.FIRM_ID$+opt71a_key.AR_TYPE$+opt71a_key.SLSPSN_CODE$+opt71a_key.AR_INV_NO$+opt71a.CUSTOMER_ID$+opt71a.INVOICE_TYPE$+opt71a.INVOICE_DATE$)<>1 break

rem --- Check

                if opt71a.INVOICE_DATE$>p9$ then
                        continue
                endif

rem --- Initialize Totals

                t0=0
                o9=0

rem --- Open Invoice ?

                find record (art01a_dev,key=opt71a_key.FIRM_ID$+opt71a_key.AR_TYPE$+opt71a.CUSTOMER_ID$+opt71a_key.AR_INV_NO$+"00",dom=Remove_Invoice) art01a$
                if art01a.INVOICE_DATE$>p9$  then
                        continue
                endif
                t0=art01a.INVOICE_AMT

rem --- Invoice Detail

                read (art11_dev,key=art01a_key.FIRM_ID$+art01a_key.AR_TYPE$+art01a_key.CUSTOMER_ID$+art01a_key.AR_INV_NO$+art01a_key.SEQUENCE_00$,dom=*next)
            while more 
                art11a_key$=key(art11_dev,end=*break)
                if pos(art11a_key.FIRM_ID$+art11a_key.AR_TYPE$+art11a_key.CUSTOMER_ID$+art11a_key.AR_INV_NO$=art01a_key.FIRM_ID$+art01a_key.AR_TYPE$+art01a_key.CUSTOMER_ID$+art01a_key.AR_INV_NO$+art01a_key.SEQUENCE_00$)=0 break
                read record (art11_dev,key=art11a_key$) art11a$
                t0=t0+art11a.TRANS_AMT+art11a.ADJDISC_AMT
            wend



                if t0<>0 then 
                   continue
                endif
                

 Remove_Invoice: rem --- Remove Invoice

rem          call pgmdir$+"adc_progress.aon","S",sysinfo.task_desc$,"","",opt71a_key.SLSPSN_CODE$+opt71a_key.AR_INV_NO$,0,0,1,0,ignore_status
             call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,ignore_status
           
wend

 

goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
