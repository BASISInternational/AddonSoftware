rem --- Sales Commission Report (Report Overlay)
rem --- Program opr_mb v8.0.0 17Jul2007 (opr_mb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 09:51:22)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    precision 4

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Initializations

    dim a[10],c[1],d[1],t[9],u[9],w[1],x[1],o[11],headings$[6]
    x0$="First Date"
    x1$="Last Date"
    h5$=""
    if beg_date$<>"" x0$=fndate$(beg_date$)
    if end_date$<>"" x1$=fndate$(end_date$)
    h4$="Paid Invoices"
    when$=sysinfo.system_date$
    clock$=""
    if option$="B" h4$="Booked Invoices"
    if begin_salesperson$<>"" h6$=begin_salesperson$ else h6$="First"
    if end_salesperson$<>"" h7$=end_salesperson$ else h7$="Last"
    if commission$="S" h8$="Commission Based On Gross Sales"
    if commission$="P" h8$="Commission Based On Gross Profit"
    t0$=""
    t0=0
    t1=0
    l9=55
    l=l9+1
    h=0
    h0=132
    x0$="Beginning Date: "+x0$
    x1$="   Ending Date: "+x1$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,11,13
    more=1
rem --- Headings

    dim h1$(h0),h2$(h0),j$(5*m1+2*m4,"-")
    headings$[0]=n1$
    headings$[1]=n3$
    h1$(1)="Beginning Salesperson: "+h6$
    h1$(fncenter(h4$,h0),len(h4$))=h4$
    h1$(h0-len(x0$))=x0$
    h2$(1)="   Ending Salesperson: "+h7$
    h2$(fncenter(h8$,h0),len(h8$))=h8$
    h2$(h0-len(x1$))=x1$
    headings$[2]=h1$
    headings$[3]=h2$

rem --- Print positions

    o[11]=h0-m1
    h1$="Commission"
    h2$="   Due    "
    h1=o[11]+m1-11
    if option$<>"P" o[11]=h0-1,h1=o[11],h1$="",h2$=""
    o[1]=8
    o[2]=o[1]+m0+1
    o[10]=o[11]-m1
    o[9]=o[10]-m4
    o[8]=o[9]-m4
    o[7]=o[8]-m1
    o[6]=o[7]-m1
    o[5]=o[6]-m1
    o[4]=o[5]-m1
    o[3]=o[4]-9
    h2=h1
    width=min(30,o[3]-o[2]-1)

rem retrieve template for OPT_SALESCOM record key

call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_SALESCOM","PRIMARY",opt71a_key_tpl$,table_chans$[all],status$
dim opt71a_key$:opt71a_key_tpl$
call stbl("+DIR_SYP")+"bac_key_template.bbj","ART_INVDET","PRIMARY",art11a_key_tpl$,table_chans$[all],status$
dim art11a_key$:art11a_key_tpl$



rem --- Background

rem     call pgmdir$+"adc_progress.aon","CN",sysinfo.task_desc$,"","Printing","",7,opt71_dev,1,0,ignore_status
        call pgmdir$+"adc_progress.aon","CN","","","","",0,opt71_dev,1,meter_num,status
rem --- Position File Pointer

    read (opt71_dev,key=firm_id$,dom=*next)

while more

                opt71a_key$=key(opt71_dev,end=*break)
                read record (opt71_dev,end=Control_Breaks) opt71a$
                call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,ignore_status
                if pos(firm_id$=opt71a.firm_id$)<>1 break
                if option$="B" if beg_date$<>"" if opt71a.INVOICE_DATE$<beg_date$ continue
                if option$="B" if end_date$<>"" if opt71a.INVOICE_DATE$>end_date$ continue
                if begin_salesperson$<>"" if opt71a_key.SLSPSN_CODE$<begin_salesperson$  continue
                if end_salesperson$<>"" if opt71a_key.SLSPSN_CODE$>end_salesperson$  continue
                if opt71a.invoice_type$="V" continue

Control_Breaks: rem --- Control Breaks

                if opt71a_key.SLSPSN_CODE$<>t0$ gosub Salesperson_Break
                if option$<>"B" then
rem --- Calculate commission due

                     gosub Search_Invoice
                     if paid=0 continue
                     a[9]=0
                     if commission$="S" if sold<>0 a[9]=(-paid)/sold*opt71a.TOTAL_SALES*opt71a.COMM_PERCENT/100
                     if commission$="P" if sold<>0 a[9]=(-paid)/sold*(opt71a.TOTAL_SALES-opt71a.TOTAL_COST)*opt71a.COMM_PERCENT/100

                endif

rem             dim b1$(width)
rem             b1$(1)="(Not On File)"
                arm01a.CUSTOMER_NAME$="(Not On File)"
                find record (arm01_dev,key=firm_id$+opt71a.CUSTOMER_ID$,dom=*next) arm01a$
              

rem --- Print

                if l>l9 gosub report_heading
                x0=0
                a[8]=opt71a.TOTAL_SALES*opt71a.COMM_PERCENT/100
                due$=""
                if opt71a.TOTAL_SALES<>0 x0=100*(opt71a.TOTAL_SALES-opt71a.TOTAL_COST)/opt71a.TOTAL_SALES
                if commission$="P" a[8]=(opt71a.TOTAL_SALES-opt71a.TOTAL_COST)*opt71a.COMM_PERCENT/100
                if option$="P" due$=str(a[9]:m1$)
                print (printer_dev)
:                                @(o[0]),opt71a_key.AR_INV_NO$,
:                                @(o[1]),fnmask$(opt71a.CUSTOMER_ID$,m0$),
:                                @(o[2]),arm01a.customer_name$,
:                                @(o[3]),fndate$(opt71a.INVOICE_DATE$),
:                                @(o[4]),opt71a.TOTAL_SALES:m1$,
:                                @(o[5]),opt71a.COMM_AMT:m1$,
:                                @(o[6]),opt71a.TOTAL_COST:m1$,
:                                @(o[7]),opt71a.TOTAL_SALES-opt71a.TOTAL_COST:m1$,
:                                @(o[8]),x0:m4$,
:                                @(o[9]),a[0]:m4$,
:                                @(o[10]),a[8]:m1$,
:                                @(o[11]),due$
                l=l+1
                l1=l1+1
                t1=t1+1

rem --- Accumulate totals

                precision 2
                t[5]=t[5]+opt71a.COMM_AMT
                u[5]=u[5]+opt71a.COMM_AMT
                t[6]=t[6]+opt71a.TOTAL_SALES
                u[6]=u[6]+opt71a.TOTAL_SALES
                t[7]=t[7]+opt71a.TOTAL_COST
                u[7]=u[7]+opt71a.TOTAL_COST
                t[8]=t[8]+a[8]
                u[8]=u[8]+a[8]
                t[9]=t[9]+a[9]
                u[9]=u[9]+a[9]
                precision 4

rem --- Next record

wend



done: rem --- All done

    t9$="E"
    gosub Salesperson_Break
    x0=0
    t0$=""
    x$="Report Totals"
    h5$="Report Summary"
    gosub report_heading
    print (printer_dev)t0," Total Salespersons"
    if u[6]<>0 x0=100*(u[6]-u[7])/u[6]
    if option$="P" due$=str(u[9]:m1$)
             print (printer_dev)
:                               @(o[4]-len(x$)),x$,
:                               @(o[4]),u[6]:m1$,
:                               @(o[5]),u[5]:m1$,
:                               @(o[6]),u[7]:m1$,
:                               @(o[7]),u[6]-u[7]:m1$,
:                               @(o[8]),x0:m4$,
:                               @(o[10]),u[8]:m1$,
:                               @(o[11]),due$

rem --- Averages

    if t0=0 goto std_exit
    for x=0 to 9
        u[x]=u[x]/t0
    next x
    x0=0
    x$="Report Averages"
    if u[6]<>0 x0=100*(u[6]-u[7])/u[6]
    if option$="P" due$=str(u[9]:m1$)
    u[3]=0
    if commission$="S" and u[6]<>0 u[3]=100*u[8]/u[6]
    if commission$="P" and u[6]-u[7]<>0 u[3]=100*u[8]/(u[6]-u[7])
             print (printer_dev)
:                               @(o[4]-len(x$)),x$,
:                               @(o[4]),u[6]:m1$,
:                               @(o[5]),u[5]:m1$,
:                               @(o[6]),u[7]:m1$,
:                               @(o[7]),u[6]-u[7]:m1$,
:                               @(o[8]),x0:m4$,
:                               @(o[9]),u[3]:m4$,
:                               @(o[10]),u[8]:m1$,
:                               @(o[11]),due$
    goto std_exit

report_heading: rem --- Report Heading

    l=9


rem doubt    h5$=arm10f_key.FIRM_ID$+arm10f_key.RECORD_ID_F$+arm10f_key.SLSPSN_CODE$+arm10f.CODE_DESC$


    headings$[5]=h5$
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],6,h,h0,when$,clock$,status
    if status exitto std_exit
             print (printer_dev)
:                               @(o[0]),"Invoice",
:                               @(o[4]+m1-6),"Gross",
:                               @(o[7]+m1-6),"Gross",
:                               @(h1),h1$
             print (printer_dev)
:                               @(o[0]),"Number",
:                               @(o[1]),"Customer",
:                               @(o[3]+2),"Date",
:                               @(o[4]+m1-6),"Sales",
:                               @(o[5]+m1-6),"Other",
:                               @(o[6]+m1-5),"Cost",
:                               @(o[7]+m1-7),"Profit",
:                               @(o[8]+m4-5),"GP %",
:                               @(o[9]+m4-7),"Comm %",
:                               @(o[10]+m1-11),"Commission",
:                               @(h2),h2$
    print (printer_dev)""
    return

Salesperson_Break: rem --- Salesperson Break

    if t0$<>"" then
          if l1<>0 then   
                x0=0
                 x$="Total For "+h5$
                if len(x$)>o[4] x$=x$(1,o[4]-1)
                if t[6]<>0 x0=100*(t[6]-t[7])/t[6]
                if option$="P" due$=str(t[9]:m1$)
                print (printer_dev)@(o[4]),j$
                print (printer_dev)@(o[4]-len(x$)),x$,@(o[4]),t[6]:m1$,@(o[5]),t[5]:m1$,@(o[6]),t[7]:m1$,@(o[7]),t[6]-t[7]:m1$,@(o[8]),x0:m4$,@(o[10]),t[8]:m1$,@(o[11]),due$
                t0=t0+1
           endif
    endif
Find_Record:
    if t9$<>"" return
rem dim h5$(32),
    dim t[9]
    t0$=opt71a_key.SLSPSN_CODE$
    arm10f.SLSPSN_CODE$="(Not On File)"
    l=l9+1
    l1=0
    find record (arm10_dev,key=firm_id$+"F"+t0$,dom=*next) arm10f$
    let h5$="Salesperson"+t0$+" "+cvs(arm10f.CODE_DESC$,2)
    return

Search_Invoice: rem --- Search Invoice Transactions

    let paid=0,sold=0
    read record (art01_dev,key=opt71a_key.FIRM_ID$+opt71a_key.AR_TYPE$+opt71a.CUSTOMER_ID$+opt71a_key.AR_INV_NO$+"00",dom=Invoice_Balance) art01a$
    let sold=w[0]
    read record (art11_dev,key=opt71a_key.FIRM_ID$+opt71a_key.AR_TYPE$+opt71a.CUSTOMER_ID$+opt71a_key.AR_INV_NO$,dom=*next) art11a$


    while more
        let art11a_key$=key(art11_dev,end=Return4)
        if art11a_key.FIRM_ID$+art11a_key.AR_TYPE$+art11a_key.CUSTOMER_ID$+art11a_key.AR_INV_NO$<>opt71a_key.FIRM_ID$+opt71a_key.AR_TYPE$+opt71a.CUSTOMER_ID$+opt71a_key.AR_INV_NO$ exitto Return4
        read record (art11_dev,key=art11a_key$) art11a$
        if beg_date$<>"" if art11a.TRANS_DATE$<beg_date$ continue
        if end_date$<>"" if art11a.TRANS_DATE$>end_date$ continue
        if art11a_key.FIRM_ID$(1,1)="C" paid=paid+art11a.TRANS_AMT+art11a.ADJDISC_AMT else sold=sold+art11a.TRANS_AMT+art11a.ADJDISC_AMT
    wend


Invoice_Balance: rem --- Zero Balance Cash Invoice ?

    read record (opt41_dev,key=opt71a_key.FIRM_ID$+opt71a_key.AR_TYPE$+CUSTOMER_ID$+opt71a_key.AR_INV_NO$,dom=Return4) opt41a$
    if beg_date$<>"" if opt41a.INVOICE_DATE$<beg_date$ return
    if end_date$<>"" if opt41a.INVOICE_DATE$>end_date$ return
    let sold=-d[0],paid=d[1]
Return4:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call stbl("+DIR_PGM")+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end

