rem Callpoint program for ARR_AGINGREPORT - Aging Report
rem Program arr_agingreport_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("ARR_AGINGREPORT.AGEDATE_30_FROM.AVAL",40)+
:		pad("ARR_AGINGREPORT.AGEDATE_60_FROM.AVAL",40)+
:		pad("ARR_AGINGREPORT.AGEDATE_90_FROM.AVAL",40)+
:		pad("ARR_AGINGREPORT.AGEDATE_CUR_FROM.AVAL",40)+
:		pad("ARR_AGINGREPORT.AGEDATE_FUT_FROM.AVAL",40)+
:		pad("ARR_AGINGREPORT.AREC",40)+
:		pad("ARR_AGINGREPORT.DAYS_IN_PER.AVAL",40)+
:		pad("ARR_AGINGREPORT.FIXED_PERIODS.AVAL",40)+
:		pad("ARR_AGINGREPORT.REPORT_DATE.AVAL",40)+
:		pad("ARR_AGINGREPORT.REPORT_OPTION.AVAL",40)+
:		pad("ARR_AGINGREPORT.REPORT_SEQUENCE.AVAL",40)+
:		pad("ARR_AGINGREPORT.UPDATE_AGING.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("ARR_AGINGREPORT.AGEDATE_30_FROM.AVAL",40),callpoint_event_str$,40)			
			tmp_cur_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_CUR_FROM")
			tmp_30_from$=callpoint!.getUserInput()
			tmp_60_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_60_FROM")
			tmp_90_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_90_FROM")
			
			gosub calc_dates2
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.AGEDATE_60_FROM.AVAL",40),callpoint_event_str$,40)			
			tmp_cur_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_CUR_FROM")
			tmp_30_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_30_FROM")
			tmp_60_from$=callpoint!.getUserInput()
			tmp_90_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_90_FROM")
			
			gosub calc_dates3
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.AGEDATE_90_FROM.AVAL",40),callpoint_event_str$,40)			
			tmp_cur_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_CUR_FROM")
			tmp_30_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_30_FROM")
			tmp_60_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_60_FROM")
			tmp_90_from$=callpoint!.getUserInput()
			
			gosub calc_dates4
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.AGEDATE_CUR_FROM.AVAL",40),callpoint_event_str$,40)			
			tmp_cur_from$=callpoint!.getUserInput()
			tmp_30_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_30_FROM")
			tmp_60_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_60_FROM")
			tmp_90_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_90_FROM")
			
			gosub calc_dates1
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.AGEDATE_FUT_FROM.AVAL",40),callpoint_event_str$,40)			
			tmp_cur_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_CUR_FROM")
			tmp_30_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_30_FROM")
			tmp_60_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_60_FROM")
			tmp_90_from$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_90_FROM")
			
			gosub calc_dates1
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.AREC",40),callpoint_event_str$,40)			
			tmp_rpt_opt$=callpoint!.getColumnData("ARR_AGINGREPORT.REPORT_OPTION")
			tmp_rpt_seq$=callpoint!.getColumnData("ARR_AGINGREPORT.REPORT_SEQUENCE")
			gosub set_selections
			fixed_periods$=callpoint!.getColumnData("ARR_AGINGREPORT.FIXED_PERIODS")
			days_in_per=num(callpoint!.getColumnData("ARR_AGINGREPORT.DAYS_IN_PER"))
			start_date$=callpoint!.getColumnData("ARR_AGINGREPORT.REPORT_DATE")
			gosub calc_dates_fixed
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.DAYS_IN_PER.AVAL",40),callpoint_event_str$,40)			
			fixed_periods$=callpoint!.getColumnData("ARR_AGINGREPORT.FIXED_PERIODS")
			days_in_per=num(callpoint!.getUserInput())
			start_date$=callpoint!.getColumnData("ARR_AGINGREPORT.REPORT_DATE")
			gosub calc_dates_fixed
			callpoint!.setStatus("REFRESH")
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.FIXED_PERIODS.AVAL",40),callpoint_event_str$,40)			
			rem --- Recalc dates if fixed periods
			if callpoint!.getUserInput()="Y"
				fixed_periods$=callpoint!.getUserInput()
				days_in_per=num(callpoint!.getColumnData("ARR_AGINGREPORT.DAYS_IN_PER"))
				start_date$=callpoint!.getColumnData("ARR_AGINGREPORT.REPORT_DATE")
				gosub calc_dates_fixed
				callpoint!.setStatus("REFRESH")
			else
				if callpoint!.getColumnData("ARR_AGINGREPORT.UPDATE_AGING")="Y"
					callpoint!.setMessage("FIXED_PERIODS")
					callpoint!.setUserInput("Y")
					callpoint!.setStatus("REFRESH")
				endif
			endif
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.REPORT_DATE.AVAL",40),callpoint_event_str$,40)			
			fixed_periods$=callpoint!.getColumnData("ARR_AGINGREPORT.FIXED_PERIODS")
			days_in_per=num(callpoint!.getColumnData("ARR_AGINGREPORT.DAYS_IN_PER"))
			start_date$=callpoint!.getUserInput()
			gosub calc_dates_fixed
			callpoint!.setStatus("REFRESH")
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.REPORT_OPTION.AVAL",40),callpoint_event_str$,40)			
			tmp_rpt_opt$=callpoint!.getUserInput()
			tmp_rpt_seq$=callpoint!.getColumnData("ARR_AGINGREPORT.REPORT_SEQUENCE")
			gosub set_selections
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.REPORT_SEQUENCE.AVAL",40),callpoint_event_str$,40)			
			tmp_rpt_opt$=callpoint!.getColumnData("ARR_AGINGREPORT.REPORT_OPTION")
			tmp_rpt_seq$=callpoint!.getUserInput()
			gosub set_selections
		break
		case fnstr_pos(pad("ARR_AGINGREPORT.UPDATE_AGING.AVAL",40),callpoint_event_str$,40)			
			if callpoint!.getColumnData("ARR_AGINGREPORT.FIXED_PERIODS")="N"
				if callpoint!.getUserInput()="Y"
					callpoint!.setMessage("FIXED_PERIODS")
					callpoint!.setUserInput("N")
					callpoint!.setStatus("REFRESH")
				endif
			endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[ARR_AGINGREPORT.<CUSTOM>]]

calc_dates_fixed:rem --- Calculate Aging Dates
rem --- fixed_periods$,days_in_per,start_date$ being set prior to gosub
	if days_in_per=0 days_in_per=30
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_FUT_FROM",start_date$)
	prev_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_FUT_FROM")
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_CUR_THRU",new_date$)
	prev_date$=new_date$
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-(days_in_per-1):"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_CUR_FROM",new_date$)
	prev_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_CUR_FROM")
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_30_THRU",new_date$)
	prev_date$=new_date$
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-(days_in_per-1):"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_30_FROM",new_date$)
	prev_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_30_FROM")
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_60_THRU",new_date$)
	prev_date$=new_date$
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-(days_in_per-1):"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_60_FROM",new_date$)
	prev_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_60_FROM")
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_90_THRU",new_date$)
	prev_date$=new_date$
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-(days_in_per-1):"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_90_FROM",new_date$)
	prev_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_90_FROM")
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_120_THRU",new_date$)
return
calc_dates1: 
	rem --- tmp_cur_from$ set prior to gosub
	days_in_per=num(callpoint!.getColumnData("ARR_AGINGREPORT.DAYS_IN_PER"))
	if days_in_per=0 days_in_per=30
	err_stat$="N"
	last_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_CUR_THRU")
	prev_date$=tmp_cur_from$
	gosub check_dates
	if err_stat$="Y" goto date_abend
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_30_THRU",new_date$)
	prev_date$=date(jul(new_date$,"%Yd%Mz%Dz")-days_in_per+1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_30_FROM",prev_date$)
calc_dates2:
	rem --- tmp_30_from$ set prior to gosub
	days_in_per=num(callpoint!.getColumnData("ARR_AGINGREPORT.DAYS_IN_PER"))
	if days_in_per=0 days_in_per=30
	last_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_30_THRU")
	prev_date$=tmp_30_from$
	gosub check_dates
	if err_stat$="Y" goto date_abend
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_60_THRU",new_date$)
	prev_date$=date(jul(new_date$,"%Yd%Mz%Dz")-days_in_per+1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_60_FROM",prev_date$)
calc_dates3:
	rem --- tmp_60_from$ set prior to gosub
	days_in_per=num(callpoint!.getColumnData("ARR_AGINGREPORT.DAYS_IN_PER"))
	if days_in_per=0 days_in_per=30
	last_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_60_THRU")
	prev_date$=tmp_60_from$
	gosub check_dates
	if err_stat$="Y" goto date_abend
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_90_THRU",new_date$)
	prev_date$=date(jul(new_date$,"%Yd%Mz%Dz")-days_in_per+1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_90_FROM",prev_date$)
calc_dates4:
	rem --- tmp_90_from$ set prior to gosub
	days_in_per=num(callpoint!.getColumnData("ARR_AGINGREPORT.DAYS_IN_PER"))
	if days_in_per=0 days_in_per=30
	last_date$=callpoint!.getColumnData("ARR_AGINGREPORT.AGEDATE_90_THRU")
	prev_date$=tmp_90_from$
	gosub check_dates
	if err_stat$="Y" goto date_abend
	new_date$=date(jul(prev_date$,"%Yd%Mz%Dz")-1:"%Yd%Mz%Dz")
	callpoint!.setColumnData("ARR_AGINGREPORT.AGEDATE_120_THRU",new_date$)
	callpoint!.setStatus("REFRESH")
date_abend:
	if err_stat$="Y"
		callpoint!.setStatus("ABORT-REFRESH")
	endif
return
check_dates: rem Check validity of entered FROM dates against THRU dates
	if prev_date$>last_date$
		err_stat$="Y"
		out1$=date(jul(prev_date$,"%Yd%Mz%Dz"):"%Mz/%Dz/%Yd")
		out2$=date(jul(last_date$,"%Yd%Mz%Dz"):"%Mz/%Dz/%Yd")
		msg_id$="ENTRY_FROM_TO"
		dim msg_tokens$[2]
		msg_tokens$[1]=out1$
		msg_tokens$[2]=out2$
		gosub disp_message
	endif
return
set_selections: rem --- Enable/Disable Selection columns based on entries
rem --- tmp_rpt_opt$,tmp_rpt_seq$ set prior to gosub
dim ctl_name$[6]
dim ctl_stat$[6]
ctl_name$[1]="ARR_AGINGREPORT.CUSTOMER_ID_1"
ctl_name$[2]="ARR_AGINGREPORT.CUSTOMER_ID_2"
ctl_name$[3]="ARR_AGINGREPORT.ALT_SEQUENCE_1"
ctl_name$[4]="ARR_AGINGREPORT.ALT_SEQUENCE_2"
ctl_name$[5]="ARR_AGINGREPORT.SALESPERSON_1"
ctl_name$[6]="ARR_AGINGREPORT.SALESPERSON_2"
if tmp_rpt_opt$<> "C"
	ctl_stat$[1]="D"
	ctl_stat$[2]="D"
	ctl_stat$[3]="D"
	ctl_stat$[4]="D"
	ctl_stat$[5]=" "
	ctl_stat$[6]=" "
	callpoint!.setColumnData("ARR_AGINGREPORT.CUSTOMER_ID_1","")
	callpoint!.setColumnData("ARR_AGINGREPORT.CUSTOMER_ID_2","")
	callpoint!.setColumnData("ARR_AGINGREPORT.ALT_SEQUENCE_1","")
	callpoint!.setColumnData("ARR_AGINGREPORT.ALT_SEQUENCE_2","")
else
	ctl_stat$[5]="D"
	ctl_stat$[6]="D"
	callpoint!.setColumnData("ARR_AGINGREPORT.SALESPERSON_1","")
	callpoint!.setColumnData("ARR_AGINGREPORT.SALESPERSON_2","")
	if tmp_rpt_seq$="A"
		ctl_stat$[1]="D"
		ctl_stat$[2]="D"
		ctl_stat$[3]=" "
		ctl_stat$[4]=" "
		callpoint!.setColumnData("ARR_AGINGREPORT.CUSTOMER_ID_1","")
		callpoint!.setColumnData("ARR_AGINGREPORT.CUSTOMER_ID_2","")
	else
		ctl_stat$[1]=" "
		ctl_stat$[2]=" "
		ctl_stat$[3]="D"
		ctl_stat$[4]="D"
		callpoint!.setColumnData("ARR_AGINGREPORT.ALT_SEQUENCE_1","")
		callpoint!.setColumnData("ARR_AGINGREPORT.ALT_SEQUENCE_2","")
	endif
endif
gosub disable_fields
return
disable_fields:
rem --- used to disable/enable controls depending on parameter settings
rem --- send in control to toggle (format "ALIAS.CONTROL_NAME"), and D or space to disable/enable
	for x=1 to 6
		wctl$=str(num(callpoint!.getTableColumnAttribute(ctl_name$[x],"CTLI")):"00000")
		wmap$=callpoint!.getAbleMap()
		wpos=pos(wctl$=wmap$,8)
		wmap$(wpos+6,1)=ctl_stat$[x]
		callpoint!.setAbleMap(wmap$)
		callpoint!.setStatus("ABLEMAP-REFRESH-ACTIVATE")
	next x 
return


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

