rem Callpoint program for OPE_CREDMAINT - Credit Maintenance
rem Program ope_credmaint_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("OPE_CREDMAINT.AOPT-COMM",40)+
:		pad("OPE_CREDMAINT.AOPT-DELO",40)+
:		pad("OPE_CREDMAINT.AOPT-IDTL",40)+
:		pad("OPE_CREDMAINT.AOPT-MDAT",40)+
:		pad("OPE_CREDMAINT.AOPT-ORIV",40)+
:		pad("OPE_CREDMAINT.AOPT-RELO",40)+
:		pad("OPE_CREDMAINT.ARER",40)+
:		pad("OPE_CREDMAINT.BEND",40)+
:		pad("OPE_CREDMAINT.BSHO",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("OPE_CREDMAINT.AOPT-COMM",40),callpoint_event_str$,40)			
			rem --- Comment Maintenance
				gosub update_tickler
				cust_id$=callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")
				user_id$=stbl("+USER_ID")
				dim dflt_data$[2,1]
				dflt_data$[1,0]="CUSTOMER_ID"
				dflt_data$[1,1]=cust_id$
				call stbl("+DIR_SYP")+"bam_run_prog.bbj",
:			                       "ARM_CUSTCMTS",
:			                       user_id$,
:			                   	"MNT",
:			                       firm_id$+cust_id$,
:			                       table_chans$[all],
:			                       "",
:			                       dflt_data$[all]
			
				gosub disp_cust_comments
		break
		case fnstr_pos(pad("OPE_CREDMAINT.AOPT-DELO",40),callpoint_event_str$,40)			
			rem --- Delete the Order or the Followup date for the Customer
			
				cust$=callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")
				ord$=callpoint!.getColumnData("OPE_CREDMAINT.ORDER_NO")
				if cvs(ord$,2)=""
					msg_id$="OP_REM_FOLLOWUP"
				else
					msg_id$="OP_ORD_FOLLOWUP"
				endif
				gosub disp_message
				if msg_opt$="N" goto no_delete
			
				if cvs(ord$,2)="" goto del_followup
			
			rem --- Delete the order
				ope01_dev=fnget_dev("OPE_ORDHDR")
				dim ope01a$:fnget_tpl$("OPE_ORDHDR")
				ope11_dev=fnget_dev("OPE_ORDDET")
				dim ope11a$:fnget_tpl$("OPE_ORDDET")
				opc_linecode_dev=fnget_dev("OPC_LINECODE")
				dim opc_linecode$:fnget_tpl$("OPC_LINECODE")
				ivs_params_dev=fnget_dev("IVS_PARAMS")
				dim ivs_params$:fnget_tpl$("IVS_PARAMS")
				ope_ordlsdet_dev=fnget_dev("OPE_ORDLSDET")
				dim ope_ordlsdet$:fnget_tpl$("OPE_ORDLSDET")
				ope_ordship_dev=fnget_dev("OPE_ORDSHIP")
				dim ope_ordship$:fnget_tpl$("OPE_ORDSHIP")
				ope_prntlist_dev=fnget_dev("OPE_PRNTLIST")
				ivm_itemmast_dev=fnget_dev("IVM_ITEMMAST")
			
				readrecord(ivs_params_dev,key=firm_id$+"IV00")ivs01a$
				readrecord(ope01_dev,key=firm_id$+ope01a.ar_type$+cust$+ord$,dom=no_delete)ope01a$
				if ope01a.invoice_type$="I" goto no_delete
			
				call "ivc_itemupdt.aon::init",channels[all],ivs01a$,items$[all],refs$[all],refs[all],table_chans$[all],status
			
				read (ope11_dev,key=firm_id$+ope01a.ar_type$+cust$+ord$,dom=*next)
				while 1
					readrecord(ope11_dev,end=*break)ope11a$
					if pos(firm_id$+ope01a.ar_type$+cust$+ord$=ope11a$)<>1 break
					readrecord(opc_linecode_dev,key=firm_id$+ope11a.line_code$,dom=remove_line)opc_linecode$
					if pos(opc_linecode.line_type$="SP")=0 goto remove_line
					if ope01a.invoice_type$="P" goto remove_line
					if opc_linecode.dropship$="Y" or ope11a.commit_flag$="N" or ope11a.dropship$="Y" goto remove_line
					if ope11a.commit_flag$<>"Y" goto remove_line
			
			rem --- Uncommit Inventory
			
					dim ivm_itemmast$:fnget_tpl$("IVM_ITEMMAST")
					readrecord(ivm_itemmast_dev,key=firm_id$+ope11a.item_id$,dom=*next)ivm_itemmast$
					items$[1]=ope11a.warehouse_id$
					items$[2]=ope11a.item_id$
					action$="UC"
					refs[0]=ope11a.qty_ordered
					if ivm_itemmast.lotser_item$<>"Y" or ivm_itemmast.inventoried$<>"Y"
						call "ivc_itemupdt.aon",action$,channels[all],ivs01a$,items$[all],refs$[all],refs[all],table_chans$[all],status
						goto remove_line
					else
						found_lot=0
						readrecord(ope_ordlsdet_dev,key=firm_id$+ope11a.ar_type$+cust$+
:								ord$+ope11a.internal_seq_no$,dom=*next)
						while 1
							readrecord(ope_ordlsdet_dev,end=*break)ope_ordlsdet$
							if pos(firm_id$+ope11a.ar_type$+cust$+ord$+ope11a.internal_seq_no$=ope_ordlsdet$)<>1 break
							items$[3]=ope_ordlsdet.lotser_no$
							refs[0]=ope_ordlsdet.qty_ordered
							call "ivc_itemupdt.aon",action$,channels[all],ivs01a$,items$[all],refs$[all],refs[all],table_chans$[all],status
							remove (ope_ordlsdet_dev,key=ope_ordlsdet.firm_id$+ope_ordlsdet.ar_type$+cust$+
:								ord$+ope_ordlsdet.internal_seq_no$+ope_ordlsdet.sequence_no$)
							found_lot=1
						wend
						if found_lot=0
							call "ivc_itemupdt.aon",action$,channels[all],ivs01a$,items$[all],refs$[all],refs[all],table_chans$[all],status
						endif
					endif
			remove_line:
						remove (ope11_dev,key=firm_id$+ope01a.ar_type$+cust$+ord$+ope11a.internal_seq_no$,dom=*next)
					endif
				wend
			
			rem	 --- Remove Header
				remove(ope_ordship_dev,key=firm_id$+cust$+ord$,dom=*next)
				remove(ope01_dev,key=firm_id$+ope01a.ar_type$+cust$+ord$)
				remove(ope_prntlist_dev,key=firm_id$+"O"+ope01a.ar_type$+cust$+ord$,dom=*next)
			
			del_followup:
				gosub remove_tickler
				callpoint!.setStatus("EXIT")
			
			no_delete:
		break
		case fnstr_pos(pad("OPE_CREDMAINT.AOPT-IDTL",40),callpoint_event_str$,40)			
			rem Invoice Dtl Inquiry
				gosub update_tickler
				cp_cust_id$=callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")
				user_id$=stbl("+USER_ID")
				dim dflt_data$[2,1]
				dflt_data$[1,0]="CUSTOMER_ID"
				dflt_data$[1,1]=cp_cust_id$
				call stbl("+DIR_SYP")+"bam_run_prog.bbj",
:			                       "ARR_INVDETAIL",
:			                       user_id$,
:			                   	"",
:			                       "",
:			                       table_chans$[all],
:			                       "",
:			                       dflt_data$[all]
		break
		case fnstr_pos(pad("OPE_CREDMAINT.AOPT-MDAT",40),callpoint_event_str$,40)			
			rem --- Modify Information
			
				callpoint!.setDevObject("tick_date",callpoint!.getColumnData("OPE_CREDMAINT.REV_DATE"))
				callpoint!.setDevObject("cred_hold",callpoint!.getColumnData("OPE_CREDMAINT.CRED_HOLD"))
				callpoint!.setDevObject("cred_limit",callpoint!.getColumnData("OPE_CREDMAINT.CREDIT_LIMIT"))
				call stbl("+DIR_SYP")+"bam_run_prog.bbj","OPE_CREDMOD",stbl("+USER_ID"),"MNT","",table_chans$[all]
				tick_date$=callpoint!.getDevObject("tick_date")
				cred_hold$=callpoint!.getDevObject("cred_hold")
				cred_limit$=callpoint!.getDevObject("cred_limit")
				callpoint!.setColumnData("OPE_CREDMAINT.REV_DATE",tick_date$)
				callpoint!.setColumnData("OPE_CREDMAINT.CRED_HOLD",cred_hold$)
				callpoint!.setColumnData("OPE_CREDMAINT.CREDIT_LIMIT",cred_limit$)
				callpoint!.setStatus("REFRESH")
			
			rem --- Update Credit changes to master file
				arm02_dev=fnget_dev("ARM_CUSTDET")
				dim arm02a$:fnget_tpl$("ARM_CUSTDET")
				readrecord(arm02_dev,key=firm_id$+callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")+"  ")arm02a$
				arm02a.cred_hold$=cred_hold$
				arm02a.credit_limit=num(cred_limit$)
				arm02a$=field(arm02a$)
				writerecord(arm02_dev)arm02a$
		break
		case fnstr_pos(pad("OPE_CREDMAINT.AOPT-ORIV",40),callpoint_event_str$,40)			
			rem Order/Invoice History Inq
				gosub update_tickler
				cp_cust_id$=callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")
				user_id$=stbl("+USER_ID")
				dim dflt_data$[2,1]
				dflt_data$[1,0]="CUSTOMER_ID"
				dflt_data$[1,1]=cp_cust_id$
				call stbl("+DIR_SYP")+"bam_run_prog.bbj",
:					"ARR_ORDINVHIST",
:					user_id$,
:					"",
:					"",
:					table_chans$[all],
:					"",
:					dflt_data$[all]
		break
		case fnstr_pos(pad("OPE_CREDMAINT.AOPT-RELO",40),callpoint_event_str$,40)			
			rem --- Release an Order from Credit Hold
				gosub update_tickler
				cust$=callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")
				ord$=callpoint!.getColumnData("OPE_CREDMAINT.ORDER_NO")
				if cvs(ord$,2)="" goto no_rel
			
				dim msg_tokens$[1]
				msg_tokens$[1]=ord$
				msg_id$="OP_CONFIRM_REL"
				gosub disp_message
				if msg_opt$="N" goto no_rel
			
				ope01_dev=fnget_dev("OPE_ORDHDR")
				dim ope01a$:fnget_tpl$("OPE_ORDHDR")
				arc_terms_dev=fnget_dev("ARC_TERMCODE")
				while 1
					readrecord(ope01_dev,key=firm_id$+"  "+cust$+ord$,dom=*break)ope01a$
					rem --- allow change to Terms Code
					callpoint!.setDevObject("terms",ope01a.terms_code$)
					call stbl("+DIR_SYP")+"bam_run_prog.bbj","OPE_CREDTERMS",stbl("+USER_ID"),"MNT","",table_chans$[all]
					ope01a.terms_code$=callpoint!.getDevObject("terms")
					readrecord(arc_terms_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=*next);goto good_code
					continue
			good_code:
					ope01a.credit_flag$="R"
					ope01a$=field(ope01a$)
					writerecord(ope01_dev)ope01a$
					break
				wend
			
				gosub remove_tickler
			
			rem --- Print the order?
			
				msg_id$="OP_ORDREL"
				gosub disp_message
				if msg_opt$="Y"
					call "opc_picklist.aon", cust$, ord$, table_chans$[all], status
				endif
				callpoint!.setStatus("EXIT")
			
			no_rel:
				if pos("EXIT"=callpoint!.getStatus())=0
					callpoint!.setStatus("REFRESH")
				endif
		break
		case fnstr_pos(pad("OPE_CREDMAINT.ARER",40),callpoint_event_str$,40)			
			rem --- Set dates to CCYYMMDD
				tick_date$=callpoint!.getColumnData("OPE_CREDMAINT.REV_DATE")
				tick_date$=tick_date$(5,4)+tick_date$(1,4)
				callpoint!.setColumnData("OPE_CREDMAINT.REV_DATE",tick_date$)
				callpoint!.setDevObject("old_tick_date",tick_date$)
				ord_date$=callpoint!.getColumnData("OPE_CREDMAINT.ORDER_DATE")
				if len(ord_date$)>0
					ord_date$=ord_date$(5,4)+ord_date$(1,4)
					callpoint!.setColumnData("OPE_CREDMAINT.ORDER_DATE",ord_date$)
				endif
				ship_date$=callpoint!.getColumnData("OPE_CREDMAINT.SHIPMNT_DATE")
				if len(ship_date$)>0
					ship_date$=ship_date$(5,4)+ship_date$(1,4)
					callpoint!.setColumnData("OPE_CREDMAINT.SHIPMNT_DATE",ship_date$)
				endif
			
			rem --- Display Comments
				cust_id$=callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")
				gosub disp_cust_comments
		break
		case fnstr_pos(pad("OPE_CREDMAINT.BEND",40),callpoint_event_str$,40)			
			rem --- One last chance to update the tickler date
				gosub update_tickler
		break
		case fnstr_pos(pad("OPE_CREDMAINT.BSHO",40),callpoint_event_str$,40)			
			rem --- Open tables
				num_files=12
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]="ARM_CUSTCMTS",open_opts$[1]="OTA"
				open_tables$[2]="OPE_ORDHDR",open_opts$[2]="OTA"
				open_tables$[3]="ARC_TERMCODE",open_opts$[3]="OTA"
				open_tables$[4]="OPE_CREDDATE",open_opts$[4]="OTA"
				open_tables$[5]="ARM_CUSTDET",open_opts$[5]="OTA"
				open_tables$[6]="OPE_ORDDET",open_opts$[6]="OTA"
				open_tables$[7]="OPC_LINECODE",open_opts$[7]="OTA"
				open_tables$[8]="IVS_PARAMS",open_opts$[8]="OTA"
				open_tables$[9]="OPE_ORDLSDET",open_opts$[9]="OTA"
				open_tables$[10]="OPE_ORDSHIP",open_opts$[10]="OTA"
				open_tables$[11]="OPE_PRNTLIST",open_opts$[11]="OTA"
				open_tables$[12]="IVM_ITEMMAST",open_opts$[12]="OTA"
				gosub open_tables
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[OPE_CREDMAINT.<CUSTOM>]]

disp_cust_comments:
	
rem --- You must pass in cust_id$ because we don't know whether it's verified or not
	cmt_text$=""
	arm05_dev=fnget_dev("ARM_CUSTCMTS")
	dim arm05a$:fnget_tpl$("ARM_CUSTCMTS")
	arm05_key$=firm_id$+cust_id$
	more=1
	read(arm05_dev,key=arm05_key$,dom=*next)
	while more
		readrecord(arm05_dev,end=*break)arm05a$
		 
		if arm05a.firm_id$ = firm_id$ and arm05a.customer_id$ = cust_id$ then
			cmt_text$ = cmt_text$ + cvs(arm05a.std_comments$,3)+$0A$
		endif				
	wend
	callpoint!.setColumnData("<<DISPLAY>>.comments",cmt_text$)
	callpoint!.setStatus("REFRESH")
return

update_tickler: rem --- Modify Tickler date
	ope03_dev=fnget_dev("OPE_CREDDATE")
	dim ope03a$:fnget_tpl$("OPE_CREDDATE")
	gosub remove_tickler
	tick_date$=callpoint!.getColumnData("OPE_CREDMAINT.REV_DATE")
	callpoint!.setDevObject("old_tick_date",tick_date$)
	ord$=callpoint!.getColumnData("OPE_CREDMAINT.ORDER_NO")
	cust_no$=callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")
	ope03a.firm_id$=firm_id$
	ope03a.rev_date$=tick_date$
	ope03a.customer_id$=cust_no$
	ope03a.order_no$=ord$
	ope03a$=field(ope03a$)
	writerecord(ope03_dev)ope03a$
	callpoint!.setDevObject("tick_date",tick_date$)
return

remove_tickler:
	ope03_dev=fnget_dev("OPE_CREDDATE")
	dim ope03a$:fnget_tpl$("OPE_CREDDATE")
	old_tick_date$=callpoint!.getDevObject("old_tick_date")
	ord$=callpoint!.getColumnData("OPE_CREDMAINT.ORDER_NO")
	cust_no$=callpoint!.getColumnData("OPE_CREDMAINT.CUSTOMER_ID")
	remove(ope03_dev,key=firm_id$+old_tick_date$+cust_no$+ord$,dom=*next)
	if len(ord$)=0
		ord$=fill(num(callpoint!.getTableColumnAttribute("OPE_CREDMAINT.ORDER_NO","MAXL")))
		remove(ope03_dev,key=firm_id$+old_tick_date$+cust_no$+ord$,dom=*next)
	endif
return


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

