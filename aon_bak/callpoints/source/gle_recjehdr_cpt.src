rem Callpoint program for GLE_RECJEHDR - Recurring Journal Entry Header
rem Program gle_recjehdr_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("GLE_RECJEHDR.ADIS",40)+
:		pad("GLE_RECJEHDR.BSHO",40)+
:		pad("GLE_RECJEHDR.BWRI",40)+
:		pad("GLE_RECJEHDR.JOURNAL_ID.AVAL",40)+
:		pad("GLE_RECJEHDR.REVERSE_DATE.AVAL",40)+
:		pad("GLE_RECJEHDR.TRANS_DATE.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("GLE_RECJEHDR.ADIS",40),callpoint_event_str$,40)			
			rem --- perform date validation
			if user_tpl.glint$="Y"
				
				call stbl("+DIR_PGM")+"glc_datecheck.aon",callpoint!.getColumnData("GLE_RECJEHDR.TRANS_DATE"),"N",period$,year$,status	
				if status>100 callpoint!.setStatus("ABORT")	
				
				if cvs(callpoint!.getColumnData("GLE_RECJEHDR.REVERSE_DATE"),3)<>""
					call stbl("+DIR_PGM")+"glc_datecheck.aon",callpoint!.getColumnData("GLE_RECJEHDR.REVERSE_DATE"),"N",period$,year$,status
					if status>100 then callpoint!.setStatus("ABORT")	
				endif
			endif
			gosub calc_grid_tots
			gosub disp_totals
		break
		case fnstr_pos(pad("GLE_RECJEHDR.BSHO",40),callpoint_event_str$,40)			
			num_files=1
			dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
			open_tables$[1]="GLS_PARAMS",open_opts$[1]="OTA"
			gosub open_tables
			gls01_dev=num(open_chans$[1]),gls_params_tpl$=open_tpls$[1]
			dim gls01a$:gls_params_tpl$
			read record(gls01_dev,key=firm_id$+"GL00",dom=std_missing_params)gls01a$
			user_tpl_str$="glint:c(5*),glworkfile:c(16*),je:c(1*),cycles:c(5*),debits_ofst:c(5*),credits_ofst:c(5*),bal_ofst:c(5*),units_ofst:c(5*)," +
:						"gls01a_ofst:c(5*),tot_db:c(10*),tot_cr:c(10*),tot_bal:c(10*),tot_units:c(10*)"
			dim user_tpl$:user_tpl_str$
			gl$="N"
			status=0
			source$=pgm(-2)
			call stbl("+DIR_PGM")+"glc_ctlcreate.aon",err=*next,source$,"GL",glw11$,gl$,status
			if status<>0 goto std_exit
			user_tpl.glint$=gl$
			user_tpl.glworkfile$=glw11$
			user_tpl.je$="N"
			user_tpl.cycles$="Y"
			rem --- set up UserObj! as vector to store display controls (total debits, total credits, balance, units) and store param rec
			UserObj!=SysGUI!.makeVector()
			ctlContext=num(callpoint!.getTableColumnAttribute("<<DISPLAY>>.DEBIT_AMT","CTLC"))
			ctlID=num(callpoint!.getTableColumnAttribute("<<DISPLAY>>.DEBIT_AMT","CTLI"))
			debits!=SysGUI!.getWindow(ctlContext).getControl(ctlID)
			ctlContext=num(callpoint!.getTableColumnAttribute("<<DISPLAY>>.CREDIT_AMT","CTLC"))
			ctlID=num(callpoint!.getTableColumnAttribute("<<DISPLAY>>.CREDIT_AMT","CTLI"))
			credits!=SysGUI!.getWindow(ctlContext).getControl(ctlID)
			ctlContext=num(callpoint!.getTableColumnAttribute("<<DISPLAY>>.BALANCE","CTLC"))
			ctlID=num(callpoint!.getTableColumnAttribute("<<DISPLAY>>.BALANCE","CTLI"))
			bal!=SysGUI!.getWindow(ctlContext).getControl(ctlID)
			ctlContext=num(callpoint!.getTableColumnAttribute("<<DISPLAY>>.UNITS","CTLC"))
			ctlID=num(callpoint!.getTableColumnAttribute("<<DISPLAY>>.UNITS","CTLI"))
			units!=SysGUI!.getWindow(ctlContext).getControl(ctlID)
			UserObj!.addItem(debits!)
			user_tpl.debits_ofst$="0"
			UserObj!.addItem(credits!)
			user_tpl.credits_ofst$="1"
			UserObj!.addItem(bal!)
			user_tpl.bal_ofst$="2"
			UserObj!.addItem(units!)
			user_tpl.units_ofst$="3"
			UserObj!.addItem(gls01a$)
			user_tpl.gls01a_ofst$="4"
			rem need to disable units column in grid if gls01a.units_flag$ isn't "Y"
			if gls01a.units_flag$="Y"
				w!=Form!.getChildWindow(1109)
				c!=w!.getControl(5900)
				c!.setColumnEditable(5,1)
			else
				w!=Form!.getChildWindow(1109)
				c!=w!.getControl(5900)
				c!.setColumnEditable(5,0)
			endif
			rem --- Disable display only columns
				dctls!=SysGUI!.makeVector()
				dctls!.addItem("<<DISPLAY>>.DEBIT_AMT")
				dctls!.addItem("<<DISPLAY>>.CREDIT_AMT")
				dctls!.addItem("<<DISPLAY>>.BALANCE")
				dctls!.addItem("<<DISPLAY>>.UNITS")
				gosub disable_ctls
			
		break
		case fnstr_pos(pad("GLE_RECJEHDR.BWRI",40),callpoint_event_str$,40)			
			rem  --- see if in balance
			bal=num(user_tpl.tot_bal$)
			if bal<>0
				msg_id$="GL_JOURNAL_OOB"
				dim msg_tokens$[1]
				msg_tokens$[1]=str(bal)
				gosub disp_message
				callpoint!.setStatus("ABORT")
			endif
		break
		case fnstr_pos(pad("GLE_RECJEHDR.JOURNAL_ID.AVAL",40),callpoint_event_str$,40)			
			rem --- read glm03 -- make sure PERMIT_JE is "Y",
			rem --- and update +GLCONTROL with POST_YR_END and POST_LOCKED flags, plus PERMIT_JE, if "Y"
			if user_tpl.glint$="Y"
				status=1
				more=1
				glm03_dev=fnget_dev("GLC_JOURNALCODE")
				dim glm03a$:fnget_tpl$("GLC_JOURNALCODE")
				while more
					find(glm03_dev,key=firm_id$+callpoint!.getUserInput(),dom=*break)glm03a$
					status=0
					if glm03a.permit_je$="Y"
						dim glcontrol$:stbl("+GLCONTROL_TPL")
						glcontrol$=stbl("+GLCONTROL")
						glcontrol.journal_id$=glm03a.journal_id$
						glcontrol.post_yr_end$=glm03a.post_yr_end$
						glcontrol.post_locked$=glm03a.post_locked$
						if user_tpl.je$="Y"
							glcontrol.permit_je$="Y"
						endif
						glcontrol$=stbl("!GLCONTROL",glcontrol$)
					else
						msg_id$="GL_JID"
						gosub disp_message
						status=1
					endif
				
					break
				wend
				if status<>0 callpoint!.setStatus("ABORT")
				
			endif
		break
		case fnstr_pos(pad("GLE_RECJEHDR.REVERSE_DATE.AVAL",40),callpoint_event_str$,40)			
			rem perform date validation
			if user_tpl.glint$="Y"
				
				if cvs(callpoint!.getUserInput(),3)<>""
					call stbl("+DIR_PGM")+"glc_datecheck.aon",callpoint!.getUserInput(),"N",period$,year$,status
					if status>100 then callpoint!.setStatus("ABORT")	
				endif
			endif
		break
		case fnstr_pos(pad("GLE_RECJEHDR.TRANS_DATE.AVAL",40),callpoint_event_str$,40)			
			rem --- perform date validation 
			if user_tpl.glint$="Y"
				
				call stbl("+DIR_PGM")+"glc_datecheck.aon",callpoint!.getUserInput(),"N",period$,year$,status	
				if status>100 callpoint!.setStatus("ABORT")
			endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[GLE_RECJEHDR.<CUSTOM>]]

disable_ctls:rem --- disable selected control
	dctl=dctls!.size()	
	for wk=0 to dctl-1
		dctl$=dctls!.getItem(wk)
		if dctl$<>""
			wctl$=str(num(callpoint!.getTableColumnAttribute(dctl$,"CTLI")):"00000")
			wmap$=callpoint!.getAbleMap()
			wpos=pos(wctl$=wmap$,8)
			wmap$(wpos+6,1)="I"
			callpoint!.setAbleMap(wmap$)
			callpoint!.setStatus("ABLEMAP")
		endif
	next wk
	return
rem --- calculate total debits/credits/units and display in form header
calc_grid_tots:
        recVect!=GridVect!.getItem(0)
        dim gridrec$:dtlg_param$[1,3]
        numrecs=recVect!.size()
        if numrecs>0
            for reccnt=0 to numrecs-1
                gridrec$=recVect!.getItem(reccnt)
                tdb=tdb+num(gridrec.debit_amt$)
                tcr=tcr+num(gridrec.credit_amt$)
	        tunits=tunits+num(gridrec.units$)
            next reccnt
	   tbal=tdb-tcr
            user_tpl.tot_db$=str(tdb)
	    user_tpl.tot_cr$=str(tcr)
	    user_tpl.tot_units$=str(tunits)
	    user_tpl.tot_bal$=str(tbal)
        endif
    return
disp_totals:
    rem --- get context and ID of display controls, and redisplay w/ amts from calc_grid_tots
    
    debits!=UserObj!.getItem(num(user_tpl.debits_ofst$))
    debits!.setValue(num(user_tpl.tot_db$))
    credits!=UserObj!.getItem(num(user_tpl.credits_ofst$))
    credits!.setValue(num(user_tpl.tot_cr$))
    bal!=UserObj!.getItem(num(user_tpl.bal_ofst$))
    bal!.setValue(num(user_tpl.tot_bal$))
    units!=UserObj!.getItem(num(user_tpl.units_ofst$))
    units!.setValue(num(user_tpl.tot_units$))
    return
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src



open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

