rem Callpoint program for IVE_PRICECHG - Price Change Entry
rem Program ive_pricechg_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("IVE_PRICECHG.ADIS",40)+
:		pad("IVE_PRICECHG.ARAR",40)+
:		pad("IVE_PRICECHG.BEND",40)+
:		pad("IVE_PRICECHG.BSHO",40)+
:		pad("IVE_PRICECHG.BTBL",40)+
:		pad("IVE_PRICECHG.BWRI",40)+
:		pad("IVE_PRICECHG.PRICE_CODE.AVAL",40)+
:		pad("IVE_PRICECHG.UNIT_PRICE.BINP",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("IVE_PRICECHG.ADIS",40),callpoint_event_str$,40)			
			print "in ADIS"; rem debug
			
			rem --- Display current price
			
				whse$ = callpoint!.getColumnData("IVE_PRICECHG.WAREHOUSE_ID")
				item$ = callpoint!.getColumnData("IVE_PRICECHG.ITEM_ID")
				new_price = num( callpoint!.getColumnData("IVE_PRICECHG.UNIT_PRICE") )
			
				gosub check_item_whse
			
				if !failed then gosub set_display_price
		break
		case fnstr_pos(pad("IVE_PRICECHG.ARAR",40),callpoint_event_str$,40)			
			rem --- Set default warehouse if necessary
			
				if user_tpl.default_whse$ <> "" then 
					callpoint!.setColumnData("IVE_PRICECHG.WAREHOUSE_ID", user_tpl.default_whse$)
					callpoint!.setStatus("REFRESH")
					callpoint!.setColumnEnabled("IVE_PRICECHG.WAREHOUSE_ID",-1); rem permanent disable
				endif
			
			rem --- Set price code to the last one used
			
				if cvs(user_tpl.last_price_cd$, 2) <> "" then
					callpoint!.setColumnData("IVE_PRICECHG.PRICE_CODE", user_tpl.last_price_cd$)
					callpoint!.setStatus("REFRESH")
				endif
		break
		case fnstr_pos(pad("IVE_PRICECHG.BEND",40),callpoint_event_str$,40)			
			rem --- remove software lock on batch, if batching
			
				batch$=stbl("+BATCH_NO",err=*next)
				if num(batch$)<>0
					lock_table$="ADM_PROCBATCHES"
					lock_record$=firm_id$+stbl("+PROCESS_ID")+batch$
					lock_type$="U"
					lock_status$=""
					call stbl("+DIR_SYP")+"bac_lock_record.bbj",lock_table$,lock_record$,lock_type$,table_chans$[all],lock_status$
				endif
		break
		case fnstr_pos(pad("IVE_PRICECHG.BSHO",40),callpoint_event_str$,40)			
			rem print 'show',"in BSHO"; rem debug
			
			rem --- Open files
			
				num_files=3
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]="IVM_ITEMMAST", open_opts$[1]="OTA"
				open_tables$[2]="IVM_ITEMWHSE", open_opts$[2]="OTA"
				open_tables$[3]="IVS_PARAMS",   open_opts$[3]="OTA"
			
				gosub open_tables
			
				ivs_params_dev = num(open_chans$[3])
				dim ivs_params_rec$:open_tpls$[3]
			
			rem --- Get params
			
				find record (ivs_params_dev, key=firm_id$+"IV00", dom=std_missing_params) ivs_params_rec$
			
			rem --- Globals
			
				dim user_tpl$:"default_whse:c(1*), last_price_cd:c(1*)"
			
			rem --- If this company is not multi-warehouse, set default warehouse
			
				if ivs_params_rec.multi_whse$ <> "Y" then 
					user_tpl.default_whse$ = ivs_params_rec.warehouse_id$
				endif
		break
		case fnstr_pos(pad("IVE_PRICECHG.BTBL",40),callpoint_event_str$,40)			
			rem --- Get Batch information
			
			call stbl("+DIR_PGM")+"adc_getbatch.aon",callpoint!.getAlias(),"",table_chans$[all]
			callpoint!.setTableColumnAttribute("IVE_PRICECHG.BATCH_NO","PVAL",$22$+stbl("+BATCH_NO")+$22$)
		break
		case fnstr_pos(pad("IVE_PRICECHG.BWRI",40),callpoint_event_str$,40)			
			print "in BWRI"; rem debug
			
			rem --- Is the warehouse / item combination valid?
			
				whse$ = callpoint!.getColumnData("IVE_PRICECHG.WAREHOUSE_ID")
				item$ = callpoint!.getColumnData("IVE_PRICECHG.ITEM_ID")
			
				gosub check_item_whse
			
				if failed then
					callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("IVE_PRICECHG.PRICE_CODE.AVAL",40),callpoint_event_str$,40)			
			rem --- Set last price code
			
				user_tpl.last_price_cd$ = callpoint!.getColumnData("IVE_PRICECHG.PRICE_CODE")
		break
		case fnstr_pos(pad("IVE_PRICECHG.UNIT_PRICE.BINP",40),callpoint_event_str$,40)			
			print "in UNIT_PRICE.BINP"; rem debug
			
			rem --- Display current price
			
				whse$ = callpoint!.getColumnData("IVE_PRICECHG.WAREHOUSE_ID")
				item$ = callpoint!.getColumnData("IVE_PRICECHG.ITEM_ID")
				new_price = num( callpoint!.getColumnData("IVE_PRICECHG.UNIT_PRICE") )
				print "Price from getColumnData():", new_price
			
				gosub check_item_whse
			
				if failed then 
					callpoint!.setStatus("ABORT")
				else
					gosub set_display_price
				endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[IVE_PRICECHG.<CUSTOM>]]

rem ===========================================================================
check_item_whse: rem --- Check that a warehouse record exists for this item
                 rem      IN: whse$
                 rem          item$
                 rem     OUT: failed  (true/false)
                 rem          itemwhse_rec$ (item/whse record)
rem ===========================================================================

	whse_file$ = "IVM_ITEMWHSE"
	dim itemwhse_rec$:fnget_tpl$(whse_file$)

	failed = 1
	find record (fnget_dev(whse_file$), key=firm_id$+whse$+item$, dom=check_item_whse_missing) itemwhse_rec$
	failed = 0

	goto check_item_whse_done

check_item_whse_missing:

	callpoint!.setMessage("IV_NO_ITEM_WH")

check_item_whse_done:

return

rem ===========================================================================
set_display_price: rem --- Display current price; set default price
                   rem      IN: itemwhse_rec$
                   rem          new_price
                   rem     OUT: new price set, if it was zero
rem ===========================================================================

	if new_price = 0 then
		print "Setting price to: ", itemwhse_rec.cur_price$
		callpoint!.setColumnData("IVE_PRICECHG.UNIT_PRICE", itemwhse_rec.cur_price$)
		callpoint!.setStatus("MODIFIED")
	endif

	callpoint!.setColumnData("<<DISPLAY>>.CUR_PRICE", itemwhse_rec.cur_price$)
	callpoint!.setStatus("REFRESH")

return

rem ===========================================================================
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem ===========================================================================


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

