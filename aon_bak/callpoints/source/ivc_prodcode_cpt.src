rem Callpoint program for IVC_PRODCODE - Product Type
rem Program ivc_prodcode_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("IVC_PRODCODE.BDEL",40)+
:		pad("IVC_PRODCODE.BSHO",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("IVC_PRODCODE.BDEL",40),callpoint_event_str$,40)			
			rem --- Make sure prod type being deleted isn't used in ivm-01
			
			ivm01_dev=fnget_dev("IVM_ITEMMAST")
			ivs_defaults=fnget_dev("IVS_DEFAULTS")
			dim ivs_defaults$:fnget_tpl$("IVS_DEFAULTS")
			prod_type$ = callpoint!.getColumnData("IVC_PRODCODE.PRODUCT_TYPE")
			
			read (ivm01_dev,key=firm_id$+prod_type$,knum=2,dom=*next)
			k$="", k$=key(ivm01_dev,err=*next)
			if pos(firm_id$+prod_type$=k$)=1
				dim msg_tokens$[1]
				msg_tokens$[1]="This Product Type is assigned to one or more Inventory items."
				msg_id$="IV_NO_DELETE"
				gosub disp_message
				callpoint!.setStatus("ABORT")
			endif
			
			rem --- Make sure this prod type isn't a default
			
			readrecord (ivs_defaults,key=firm_id$+"D",dom=*next)ivs_defaults$
			
			if ivs_defaults.product_type$=prod_type$ then
				msg_id$="IV_PROD_DEFAULT"
				gosub disp_message
				callpoint!.setStatus("ABORT")
			endif
		break
		case fnstr_pos(pad("IVC_PRODCODE.BSHO",40),callpoint_event_str$,40)			
			rem --- Open/Lock files
			
			files=3,begfile=1,endfile=files
			dim files$[files],options$[files],chans$[files],templates$[files]
			files$[1]="IVS_PARAMS",options$[1]="OTA"
			files$[2]="IVM_ITEMMAST",options$[2]="OTA"
			files$[3]="IVS_DEFAULTS",options$[3]="OTA"
			call dir_pgm$+"bac_open_tables.bbj",begfile,endfile,files$[all],options$[all],
:			                                 chans$[all],templates$[all],table_chans$[all],batch,status$
			if status$<>"" then
				remove_process_bar:
				bbjAPI!=bbjAPI()
				rdFuncSpace!=bbjAPI!.getGroupNamespace()
				rdFuncSpace!.setValue("+build_task","OFF")
				release
			endif
			ivs01_dev=num(chans$[1])
			rem Needed? ivm01_dev=num(chans$[2])
			
			rem --- Dimension miscellaneous string templates
			
			dim ivs01a$:templates$[1]
			
			rem --- init/parameters
			
			ivs01a_key$=firm_id$+"IV00"
			find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
			
			call stbl("+DIR_PGM")+"adc_application.aon","SA",info$[all]
			sa$=info$[20]
			if sa$<>"Y"
				ctl_name$="IVC_PRODCODE.SA_LEVEL"
				ctl_stat$="I"
				gosub disable_fields
				callpoint!.setTableColumnAttribute("IVC_PRODCODE.SA_LEVEL","DFLT","N")
			endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[IVC_PRODCODE.<CUSTOM>]]

rem #include disable_fields.src

disable_fields:
	rem --- used to disable/enable controls
	rem --- ctl_name$ sent in with name of control to enable/disable (format "ALIAS.CONTROL_NAME")
	rem --- ctl_stat$ sent in as D or space, meaning disable/enable, respectively

	wctl$=str(num(callpoint!.getTableColumnAttribute(ctl_name$,"CTLI")):"00000")
	wmap$=callpoint!.getAbleMap()
	wpos=pos(wctl$=wmap$,8)
	wmap$(wpos+6,1)=ctl_stat$
	callpoint!.setAbleMap(wmap$)
	callpoint!.setStatus("ABLEMAP-REFRESH-ACTIVATE")

return

rem #endinclude disable_fields.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src



open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

