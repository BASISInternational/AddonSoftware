rem Callpoint program for OPE_ORDLSDET - Lot/Serial Detail File
rem Program ope_ordlsdet_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("OPE_ORDLSDET.AGRE",40)+
:		pad("OPE_ORDLSDET.AOPT-LLOK",40)+
:		pad("OPE_ORDLSDET.BEND",40)+
:		pad("OPE_ORDLSDET.BSHO",40)+
:		pad("OPE_ORDLSDET.LOTSER_NO.AINQ",40)+
:		pad("OPE_ORDLSDET.LOTSER_NO.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("OPE_ORDLSDET.AGRE",40),callpoint_event_str$,40)			
			rem --- Check if Serial and validate quantity
			
				qty_shipped = num(callpoint!.getColumnData("OPE_ORDLSDET.QTY_SHIPPED"))
				qty_ordered = num(callpoint!.getColumnData("OPE_ORDLSDET.QTY_ORDERED"))
			
				gosub valid_quantities
				if aborted then break; rem --- exit callpoint
			
			rem --- Now check for Sales Line quantity
			
				line_qty = num(callpoint!.getDevObject("ord_qty"))
				lot_qty  = qty_ordered
			
				gosub check_avail
		break
		case fnstr_pos(pad("OPE_ORDLSDET.AOPT-LLOK",40),callpoint_event_str$,40)			
				rem jpb grid! = Form!.getChildWindow(1109).getControl(5900)
			
			rem --- Set data for the lookup form
			
				wh$ = callpoint!.getDevObject("wh")
				item$ = callpoint!.getDevObject("item")
				lsmast_dev = num(callpoint!.getDevObject("lsmast_dev"))
				dim lsmast_tpl$:callpoint!.getDevObject("lsmast_tpl")
			
			rem --- See if there are any open lots
			
				read (lsmast_dev, key=firm_id$+wh$+item$+" ", knum=4, dom=*next)
				lsmast_key$=key(lsmast_dev, end=*next)
			
				if pos(firm_id$+wh$+item$+" " = lsmast_key$) = 1 then 
					dim dflt_data$[3,1]
					dflt_data$[1,0] = "ITEM_ID"
					dflt_data$[1,1] = item$
					dflt_data$[2,0] = "WAREHOUSE_ID"
					dflt_data$[2,1] = wh$
					dflt_data$[3,0] = "LOTS_TO_DISP"
					dflt_data$[3,1] = "O"; rem --- default to open lots
			
				rem --- Call the lookup form
				rem      IN: call/enter list
				rem     OUT: DevObject("selected_lot"): The lot/serial# selected for this item
				rem          DevObject("selected_lot_avail"): The amount select for this lot, or 1 for serial#
			
					call stbl("+DIR_SYP")+"bam_run_prog.bbj","IVC_LOTLOOKUP",stbl("+USER_ID"),"","",table_chans$[all],"",dflt_data$[all]
			
				rem --- Set the detail grid to the data selected in the lookup
			
					if callpoint!.getDevObject("selected_lot") <> null() then 
						callpoint!.setColumnData( "OPE_ORDLSDET.LOTSER_NO", str(callpoint!.getDevObject("selected_lot")) )
						lot_avail = num(callpoint!.getDevObject("selected_lot_avail"))
						callpoint!.setColumnData("OPE_ORDLSDET.QTY_ORDERED", str(lot_avail))
						callpoint!.setStatus("MODIFIED;REFRESH")
					endif
			
				else
					msg_id$="IV_NO_OPENLOTS"
					gosub disp_message
				endif
		break
		case fnstr_pos(pad("OPE_ORDLSDET.BEND",40),callpoint_event_str$,40)			
			rem --- Check total quantity from all lines against ordered quantity
			
				lot_qty=0
				dim gridrec$:fattr(rec_data$)
				numrecs=GridVect!.size()
			
				if numrecs>0 then 
					for reccnt=0 to numrecs-1
						gridrec$=GridVect!.getItem(reccnt)
			
						if cvs(gridrec$,3) <> "" and callpoint!.getGridRowDeleteStatus(reccnt) <> "Y" then 
							lot_qty = lot_qty + gridrec.qty_ordered
						endif
					next reccnt
				endif
			
			rem --- Warn that selected lot/serial#'s does not match order qty
			
				if lot_qty <> num(callpoint!.getDevObject("ord_qty")) then 
					msg_id$ = "OP_LOT_QTY_UNEQUAL"
					dim msg_tokens$[3]
					msg_tokens$[1] = str(lot_qty)
			
					if callpoint!.getDevObject("lotser_flag") = "L" then 
						msg_tokens$[2] = "Lot numbers"
					else
						msg_tokens$[2] = "Serial numbers"
					endif
			
					msg_tokens$[3] = str(callpoint!.getDevObject("ord_qty"))
					gosub disp_message
					if msg_opt$ = "N" then callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("OPE_ORDLSDET.BSHO",40),callpoint_event_str$,40)			
			rem --- Set Lot/Serial button up properly
			
				switch pos(callpoint!.getDevObject("lotser_flag")="LS")
					case 1; callpoint!.setOptionText("LLOK","Lot Lookup"); break
					case 2; callpoint!.setOptionText("LLOK","Serial Lookup"); break
					case default; callpoint!.setOptionEnabled("LLOK",0); break
				swend
		break
		case fnstr_pos(pad("OPE_ORDLSDET.LOTSER_NO.AINQ",40),callpoint_event_str$,40)			
			escape; rem ainq
		break
		case fnstr_pos(pad("OPE_ORDLSDET.LOTSER_NO.AVAL",40),callpoint_event_str$,40)			
			rem --- Validate open lot number
			
				wh$    = callpoint!.getDevObject("wh")
				item$  = callpoint!.getDevObject("item")
			   ls_no$ = callpoint!.getUserInput()
			
				lsmast_dev = num(callpoint!.getDevObject("lsmast_dev"))
				dim lsmast_tpl$:callpoint!.getDevObject("lsmast_tpl")
			
				got_rec$ = "N"
				start_block = 1
			
				if start_block then
					read record (lsmast_dev, key=firm_id$+wh$+item$+ls_no$, dom=*endif) lsmast_tpl$
					got_rec$ = "Y"
				endif
			
				if got_rec$ = "N" then
					msg_id$ = "IV_LOT_MUST_EXIST"
					gosub disp_message
					callpoint!.setStatus("ABORT")
				else
					if lsmast_tpl.closed_flag$ = "C" then
						msg_id$ = "IV_SERLOT_CLOSED"
						gosub disp_message
						callpoint!.setStatus("ABORT")
					else
				endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[OPE_ORDLSDET.<CUSTOM>]]

rem ==========================================================================
check_avail: rem --- Check for available quantity
             rem      IN: line_qty 
	          rem          lot_qty 
rem ==========================================================================

	wh$     = callpoint!.getDevObject("wh")
	item$   = callpoint!.getDevObject("item")
	ls_no$  = callpoint!.getColumnData("OPE_ORDLSDET.LOTSER_NO")

	lsmast_dev = num(callpoint!.getDevObject("lsmast_dev"))
	dim lsmast_tpl$:callpoint!.getDevObject("lsmast_tpl")
	start_block = 1

	if start_block then
		read record(lsmast_dev, key=firm_id$+wh$+item$+ls_no$, dom=*endif) lsmast_tpl$

		if lot_qty >= 0 and lot_qty > lsmast_tpl.qty_on_hand - lsmast_tpl.qty_commit
			dim msg_tokens$[1]
			msg_tokens$[1] = str(lsmast_tpl.qty_on_hand - lsmast_tpl.qty_commit)
			msg_id$ = "IV_QTY_OVER_AVAIL"
			gosub disp_message
			callpoint!.setStatus("ABORT")
		endif
	endif

return

rem ==========================================================================
valid_quantities: rem --- Validate Quantities
                  rem       IN: qty_shipped
                  rem           qty_ordered
                  rem      OUT: aborted - true/false
rem ==========================================================================

	aborted = 0

rem --- Serial numbers can only have a quantity of 1 or -1

	if callpoint!.getDevObject("lotser_flag") = "S" and abs(qty_shipped) <> 1 then 
		msg_id$ = "IV_SERIAL_ONE"
		gosub disp_message
		callpoint!.setStatus("ABORT")
		aborted = 1
	else

	rem --- Ship Qty must be <= Order Qty

		if abs(qty_ordered) < abs(qty_shipped) then 
			msg_id$ = "SHIP_EXCEEDS_ORD"
			gosub disp_message
			callpoint!.setStatus("ABORT")
			aborted = 1
		endif

	endif

return


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

