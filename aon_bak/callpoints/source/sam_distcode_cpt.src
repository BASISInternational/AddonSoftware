rem Callpoint program for SAM_DISTCODE - Dist Code/Product/Item Record
rem Program sam_distcode_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("SAM_DISTCODE.AOPT-SUMM",40)+
:		pad("SAM_DISTCODE.ARAR",40)+
:		pad("SAM_DISTCODE.AREC",40)+
:		pad("SAM_DISTCODE.AR_DIST_CODE.AVAL",40)+
:		pad("SAM_DISTCODE.BSHO",40)+
:		pad("SAM_DISTCODE.ITEM_ID.AVAL",40)+
:		pad("SAM_DISTCODE.PRODUCT_TYPE.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("SAM_DISTCODE.AOPT-SUMM",40),callpoint_event_str$,40)			
			rem --- Calculate and display summary info
				tcst=0
				tqty=0
				tsls=0
				trip_key$=firm_id$+callpoint!.getColumnData("SAM_DISTCODE.YEAR")+callpoint!.getColumnData("SAM_DISTCODE.AR_DIST_CODE")
				prod_type$=callpoint!.getColumnData("SAM_DISTCODE.PRODUCT_TYPE")
				item_no$=callpoint!.getColumnData("SAM_DISTCODE.ITEM_ID")
				if cvs(prod_type$,2)<>"" 
					trip_key$=trip_key$+prod_type$
				else
					callpoint!.setColumnData("SAM_DISTCODE.PRODUCT_TYPE","**")
				endif
				callpoint!.setColumnData("SAM_DISTCODE.ITEM_ID","** Summary **")
			
			rem --- Start progress meter
				task_id$=info(3,0)
				Window_Name$="Summarizing"
				Progress! = bbjapi().getGroupNamespace()
				Progress!.setValue("+process_task",task_id$+"^C^"+Window_Name$+"^CNC-IND^"+str(n)+"^")
			
				sam_dev=	fnget_dev("SAM_DISTCODE")
				dim sam_tpl$:fnget_tpl$("SAM_DISTCODE")
				dim qty[13],cost[13],sales[13]
				read(sam_dev,key=trip_key$,dom=*next)
				while 1
					read record(sam_dev,end=*break)sam_tpl$
			
					Progress!.getValue("+process_task_"+task_id$,err=*next);break
			
					if pos(trip_key$=sam_tpl$)<>1 break
					for x=1 to 13
						qty[x]=qty[x]+nfield(sam_tpl$,"qty_shipped_"+str(x:"00"))
						cost[x]=cost[x]+nfield(sam_tpl$,"total_cost_"+str(x:"00"))
						sales[x]=sales[x]+nfield(sam_tpl$,"total_sales_"+str(x:"00"))
					next x
				wend
				For x=1 to 13
					tcst=tcst+cost[x]
					tqty=tqty+qty[x]
					tsls=tsls+sales[x]
				next x
			
			Progress!.setValue("+process_task",task_id$+"^D^")
			
			rem --- Now display all of these things and disable key fields
				for x=1 to 13
					callpoint!.setColumnData("SAM_DISTCODE.TOTAL_SALES_"+str(x:"00"),str(sales[x]))
					callpoint!.setColumnData("SAM_DISTCODE.TOTAL_COST_"+str(x:"00"),str(cost[x]))
					callpoint!.setColumnData("SAM_DISTCODE.QTY_SHIPPED_"+str(x:"00"),str(qty[x]))
				next x
				callpoint!.setColumnData("<<DISPLAY>>.TCST",str(tcst))
				callpoint!.setColumnData("<<DISPLAY>>.TQTY",str(tqty))
				callpoint!.setColumnData("<<DISPLAY>>.TSLS",str(tsls))
			
				callpoint!.setColumnEnabled("SAM_DISTCODE.YEAR",0)
				callpoint!.setColumnEnabled("SAM_DISTCODE.AR_DIST_CODE",0)
				callpoint!.setColumnEnabled("SAM_DISTCODE.PRODUCT_TYPE",0)
				callpoint!.setColumnEnabled("SAM_DISTCODE.ITEM_ID",0)
				callpoint!.setOptionEnabled("SUMM",0)
				callpoint!.setStatus("REFRESH-CLEAR")
		break
		case fnstr_pos(pad("SAM_DISTCODE.ARAR",40),callpoint_event_str$,40)			
			rem --- Create totals
			
				gosub calc_totals
		break
		case fnstr_pos(pad("SAM_DISTCODE.AREC",40),callpoint_event_str$,40)			
			rem --- Enable key fields
				ctl_name$="SAM_DISTCODE.YEAR"
				ctl_stat$=""
				gosub disable_fields
				ctl_name$="SAM_DISTCODE.AR_DIST_CODE"
				ctl_stat$=""
				gosub disable_fields
				ctl_name$="SAM_DISTCODE.PRODUCT_TYPE"
				ctl_stat$=""
				gosub disable_fields
				ctl_name$="SAM_DISTCODE.ITEM_ID"
				ctl_stat$=""
				gosub disable_fields
				callpoint!.setColumnData("<<DISPLAY>>.TCST","0")
				callpoint!.setColumnData("<<DISPLAY>>.TQTY","0")
				callpoint!.setColumnData("<<DISPLAY>>.TSLS","0")
				callpoint!.setStatus("REFRESH")
		break
		case fnstr_pos(pad("SAM_DISTCODE.AR_DIST_CODE.AVAL",40),callpoint_event_str$,40)			
			rem --- Enable/Disable Summary button
				dist_code$=callpoint!.getUserInput()
				prod_type$=callpoint!.getColumnData("SAM_DISTCODE.PRODUCT_TYPE")
				item_no$=callpoint!.getColumnData("SAM_DISTCODE.ITEM_ID")
				gosub summ_button
		break
		case fnstr_pos(pad("SAM_DISTCODE.BSHO",40),callpoint_event_str$,40)			
			rem --- Check for parameter record
				num_files=1
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]="SAS_PARAMS",open_opts$[1]="OTA"
				gosub open_tables
				sas01_dev=num(open_chans$[1]),sas01a$=open_tpls$[1]
			
				dim sas01a$:sas01a$
				read record (sas01_dev,key=firm_id$+"SA00")sas01a$
				if sas01a.by_dist_code$<>"Y"
					msg_id$="INVALID_SA"
					dim msg_tokens$[1]
					msg_tokens$[1]="Dist Code"
					gosub disp_message
					bbjAPI!=bbjAPI()
					rdFuncSpace!=bbjAPI!.getGroupNamespace()
					rdFuncSpace!.setValue("+build_task","OFF")
					release
				endif
			
			rem --- disable total elements
				ctl_name$="<<DISPLAY>>.TQTY"
				ctl_stat$="I"
				gosub disable_fields
				ctl_name$="<<DISPLAY>>.TCST"
				ctl_stat$="I"
				gosub disable_fields
				ctl_name$="<<DISPLAY>>.TSLS"
				ctl_stat$="I"
				gosub disable_fields
				callpoint!.setStatus("ABLEMAP-ACTIVATE-REFRESH")
			
			rem --- Disable Summary Button
				callpoint!.setOptionEnabled("SUMM",0)
		break
		case fnstr_pos(pad("SAM_DISTCODE.ITEM_ID.AVAL",40),callpoint_event_str$,40)			
			rem --- Enable/Disable Summary button
				dist_code$=callpoint!.getColumnData("SAM_DISTCODE.AR_DIST_CODE")
				prod_type$=callpoint!.getColumnData("SAM_DISTCODE.PRODUCT_TYPE")
				item_no$=callpoint!.getUserInput()
				gosub summ_button
		break
		case fnstr_pos(pad("SAM_DISTCODE.PRODUCT_TYPE.AVAL",40),callpoint_event_str$,40)			
			rem --- Enable/Disable Summary button
				dist_code$=callpoint!.getColumnData("SAM_DISTCODE.AR_DIST_CODE")
				prod_type$=callpoint!.getUserInput()
				item_no$=callpoint!.getColumnData("SAM_DISTCODE.ITEM_ID")
				gosub summ_button
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[SAM_DISTCODE.<CUSTOM>]]

disable_fields:
rem --- used to disable/enable controls depending on parameter settings
rem --- send in control to toggle (format "ALIAS.CONTROL_NAME"), and D or space to disable/enable

	wctl$=str(num(callpoint!.getTableColumnAttribute(ctl_name$,"CTLI")):"00000")
	wmap$=callpoint!.getAbleMap()
	wpos=pos(wctl$=wmap$,8)
	wmap$(wpos+6,1)=ctl_stat$
	callpoint!.setAbleMap(wmap$)

	return

calc_totals:
	
	tcst=0
	tqty=0
	tsls=0
	For x=1 to 13
		tcst=tcst+num(callpoint!.getColumnData("SAM_DISTCODE.TOTAL_COST_"+str(x:"00")))
		tqty=tqty+num(callpoint!.getColumnData("SAM_DISTCODE.QTY_SHIPPED_"+str(x:"00")))
		tsls=tsls+num(callpoint!.getColumnData("SAM_DISTCODE.TOTAL_SALES_"+str(x:"00")))
	next x
	callpoint!.setColumnData("<<DISPLAY>>.TCST",str(tcst))
	callpoint!.setColumnData("<<DISPLAY>>.TQTY",str(tqty))
	callpoint!.setColumnData("<<DISPLAY>>.TSLS",str(tsls))
	callpoint!.setStatus("REFRESH")

	return

rem --- Enable/Disable Summary Button
summ_button:
	callpoint!.setOptionEnabled("SUMM",1)
	if cvs(dist_code$,2)=""
		callpoint!.setOptionEnabled("SUMM",0)
	else
		if cvs(prod_type$,2)=""
			if cvs(item_no$,2)<>""
				callpoint!.setOptionEnabled("SUMM",0)
			endif
		else
			if cvs(item_no$,2)<>""
				callpoint!.setOptionEnabled("SUMM",0)
			endif
		endif
	endif
	return


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

