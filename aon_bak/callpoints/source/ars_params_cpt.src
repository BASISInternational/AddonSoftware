rem Callpoint program for ARS_PARAMS - AR Parameters
rem Program ars_params_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("ARS_PARAMS.AREC",40)+
:		pad("ARS_PARAMS.ARNF",40)+
:		pad("ARS_PARAMS.AUTO_NO.AVAL",40)+
:		pad("ARS_PARAMS.BR_INTERFACE.AVAL",40)+
:		pad("ARS_PARAMS.BSHO",40)+
:		pad("ARS_PARAMS.CURRENT_PER.AVAL",40)+
:		pad("ARS_PARAMS.CUSTOMER_INPUT.AVAL",40)+
:		pad("ARS_PARAMS.DIST_BY_ITEM.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("ARS_PARAMS.AREC",40),callpoint_event_str$,40)			
			callpoint!.setColumnData("ARS_PARAMS.INV_HIST_FLG","Y")
		break
		case fnstr_pos(pad("ARS_PARAMS.ARNF",40),callpoint_event_str$,40)			
			rem --- param rec (firm+AR00) doesn't yet exist; set some defaults
			callpoint!.setColumnData("ARS_PARAMS.CURRENT_PER",user_tpl.gl_curr_per$)
			callpoint!.setColumnUndoData("ARS_PARAMS.CURRENT_PER",user_tpl.gl_curr_per$)
			callpoint!.setColumnData("ARS_PARAMS.CURRENT_YEAR",user_tpl.gl_curr_year$)
			callpoint!.setColumnUndoData("ARS_PARAMS.CURRENT_YEAR",user_tpl.gl_curr_year$)
			callpoint!.setColumnData("ARS_PARAMS.CUSTOMER_SIZE",
:				callpoint!.getColumnData("ARS_PARAMS.MAX_CUSTOMER_LEN"))
			callpoint!.setColumnUndoData("ARS_PARAMS.CUSTOMER_SIZE",
:			                     callpoint!.getColumnData("ARS_PARAMS.MAX_CUSTOMER_LEN"))
			if ap$="Y" and gl$="Y" and br$="Y" 
				callpoint!.setColumnData("ARS_PARAMS.BR_INTERFACE","Y")
				callpoint!.setColumnUndoData("ARS_PARAMS.BR_INTERFACE","Y")
			endif
			callpoint!.setStatus("MODIFIED-REFRESH")
		break
		case fnstr_pos(pad("ARS_PARAMS.AUTO_NO.AVAL",40),callpoint_event_str$,40)			
			rem --- check here and be sure seq #'s rec exists, if auto-number got checked
			if callpoint!.getUserInput()="Y"
				dim open_tables$[1],open_chans$[1],open_opts$[1],open_tpls$[1]
				open_beg=1,open_end=1,open_status$=""
				open_tables$[1]="ADS_SEQUENCES"
				open_opts$[1]="OTA"
				gosub open_tables
				dim ads_sequences$:open_tpls$[1]
				ads_sequences.firm_id$=firm_id$,ads_sequences.seq_id$="CUSTOMER_ID"
				read record (num(open_chans$[1]),key=ads_sequences.firm_id$+
:			                               ads_sequences_seq_id$,dom=*next)ads_sequences$;break
				if ads_sequences.firm_id$<>firm_id$ or cvs(ads_sequences.seq_id$,2)<>"CUSTOMER_ID"
					msg_id$="AR_CUST_SEQ"
					dim msg_tokens$[1]
					gosub disp_message
					callpoint!.setStatus("ABORT")
				endif
			endif
		break
		case fnstr_pos(pad("ARS_PARAMS.BR_INTERFACE.AVAL",40),callpoint_event_str$,40)			
			if user_tpl.ap_installed$<>"Y" or user_tpl.gl_installed$<>"Y" or user_tpl.bank_rec$<>"Y"
				if callpoint!.getUserInput()<>"N"
					msg_id$="AR_BANKREC_ERR"
					dim msg_tokens$[1]
					msg_opt$=""
					gosub disp_message
					callpoint!.setUserInput("N")
					callpoint!.setStatus("REFRESH")
				endif
			endif
		break
		case fnstr_pos(pad("ARS_PARAMS.BSHO",40),callpoint_event_str$,40)			
			num_files=1
			dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
			open_tables$[1]="GLS_PARAMS",open_opts$[1]="OTA"
			gosub open_tables
			gls01_dev=num(open_chans$[1])
			rem --- Dimension string templates
				dim gls01a$:open_tpls$[1]
			rem --- Retrieve parameter data
				dim info$[20]
				gls01a_key$=firm_id$+"GL00"
				find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$  
				call stbl("+DIR_PGM")+"adc_application.aon","GL",info$[all]
				gl$=info$[20]
				call stbl("+DIR_PGM")+"adc_application.aon","AP",info$[all]
				ap$=info$[20],br$=info$[9]
				call stbl("+DIR_PGM")+"adc_application.aon","IV",info$[all]
				iv$=info$[20]
				dim user_tpl$:"app:c(2),gl_pers:c(2),gl_curr_per:c(2),gl_curr_year:c(4),gl_installed:c(1),"+
:			                  "ap_installed:c(1),iv_installed:c(1),bank_rec:c(1)"
				user_tpl.app$="AR"
				user_tpl.gl_pers$=gls01a.total_pers$
				user_tpl.gl_installed$=gl$
				user_tpl.ap_installed$=ap$
				user_tpl.iv_installed$=iv$
				user_tpl.bank_rec$=br$
				user_tpl.gl_curr_per$=gls01a.current_per$
				user_tpl.gl_curr_year$=gls01a.current_year$
		break
		case fnstr_pos(pad("ARS_PARAMS.CURRENT_PER.AVAL",40),callpoint_event_str$,40)			
			if num(callpoint!.getUserInput())<1 or num(callpoint!.getUserInput())>num(user_tpl.gl_pers$)
				msg_id$="AR_INVALID_PER"
				dim msg_tokens$[1];msg_tokens$[1]=user_tpl.gl_pers$
				msg_opt$=""
				gosub disp_message
				callpoint!.setUserInput(
:			                           callpoint!.getColumnUndoData("ARS_PARAMS.CURRENT_PER"))
				callpoint!.setStatus("REFRESH-ABORT")
			endif
		break
		case fnstr_pos(pad("ARS_PARAMS.CUSTOMER_INPUT.AVAL",40),callpoint_event_str$,40)			
			wkdata$=callpoint!.getUserInput()
			gosub format_cust_outmask
			if cust_sz > maxsz
				msg_id$="AR_CUSTNO_MAX"
				dim msg_tokens$[1];msg_tokens$[1]=str(maxsz)
				msg_opt$=""
				gosub disp_message
				callpoint!.setUserInput(
:			                           callpoint!.getColumnUndoData("ARS_PARAMS.CUSTOMER_INPUT"))
				callpoint!.setStatus("REFRESH")
			else
				rem --- set customer_size and customer_output based on input mask entered
				rem --- i.e., same as 6200 logic in ARP.AB
				callpoint!.setColumnData("ARS_PARAMS.CUSTOMER_SIZE",str(cust_sz:"00"))
				callpoint!.setColumnData("ARS_PARAMS.CUSTOMER_OUTPUT",cust_out$)
			endif
		break
		case fnstr_pos(pad("ARS_PARAMS.DIST_BY_ITEM.AVAL",40),callpoint_event_str$,40)			
			if user_tpl.iv_installed$<>"Y"
				if callpoint!.getUserInput()<>"N"
					msg_id$="AR_DISTITEM_ERR"
					dim msg_tokens$[1]
					msg_opt$=""
					gosub disp_message
					callpoint!.setUserInput("N")
					callpoint!.setStatus("REFRESH")
				endif
			endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[ARS_PARAMS.<CUSTOM>]]

format_cust_outmask:
	maxsz=num(callpoint!.getColumnData("ARS_PARAMS.MAX_CUSTOMER_LEN")),cust_sz=0,cust_out$=""
	for wk=1 to len(wkdata$)
		if pos("#"=wkdata$(wk,1))<>0 then let cust_sz=cust_sz+1,cust_out$=cust_out$+"0"
		if pos("#"=wkdata$(wk,1))=0 then let cust_out$=cust_out$+wkdata$(wk,1)
	next wk
return
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src




open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

