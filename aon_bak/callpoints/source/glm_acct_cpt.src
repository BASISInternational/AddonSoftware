rem Callpoint program for GLM_ACCT - Account Master
rem Program glm_acct_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("GLM_ACCT.AOPT-SUMM",40)+
:		pad("GLM_ACCT.AOPT-TRAN",40)+
:		pad("GLM_ACCT.BDEL",40)+
:		pad("GLM_ACCT.BSHO",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("GLM_ACCT.AOPT-SUMM",40),callpoint_event_str$,40)			
			rem Summary Activity Inquiry
			
			cp_acct$=""
			
			rem --- need to set cp_acct$ from grid if we're running glm_acct as maint grid
			while 1
				gridObj!=Form!.getControl(5000,err=*break)
				cp_acct$=gridObj!.getCellText(gridObj!.getSelectedRow(),0)
				break
			wend
			
			rem --- or set cp_acct$ by getting column data if we did an expand on a validated GL acct in some other form
			if cp_acct$="" then cp_acct$=callpoint!.getColumnData("GLM_ACCT.GL_ACCOUNT")
			
			user_id$=stbl("+USER_ID")
			dim dflt_data$[2,1]
			dflt_data$[1,0]="GL_ACCOUNT"
			dflt_data$[1,1]=cp_acct$
			call stbl("+DIR_SYP")+"bam_run_prog.bbj",
:			                       "GLM_SUMMACTIVITY",
:			                       user_id$,
:			                   	  "",
:			                       "",
:			                       table_chans$[all],
:			                       "",
:			                       dflt_data$[all]
		break
		case fnstr_pos(pad("GLM_ACCT.AOPT-TRAN",40),callpoint_event_str$,40)			
			rem Transaction History Inquiry
			
			cp_acct$=""
			
			rem --- need to set cp_acct$ from grid if we're running glm_acct as maint grid
			while 1
				gridObj!=Form!.getControl(5000,err=*break)
				cp_acct$=gridObj!.getCellText(gridObj!.getSelectedRow(),0)
				break
			wend
			
			rem --- or set cp_acct$ by getting column data if we did an expand on a validated GL acct in some other form
			if cp_acct$="" then cp_acct$=callpoint!.getColumnData("GLM_ACCT.GL_ACCOUNT")
			
			user_id$=stbl("+USER_ID")
			dim dflt_data$[2,1]
			dflt_data$[1,0]="GL_ACCOUNT_1"
			dflt_data$[1,1]=cp_acct$
			dflt_data$[2,0]="GL_ACCOUNT_2"
			dflt_data$[2,1]=cp_acct$
			call stbl("+DIR_SYP")+"bam_run_prog.bbj",
:			                       "GLR_TRANSHISTORY",
:			                       user_id$,
:			                   	  "",
:			                       "",
:			                       table_chans$[all],
:			                       "",
:			                       dflt_data$[all]
		break
		case fnstr_pos(pad("GLM_ACCT.BDEL",40),callpoint_event_str$,40)			
			rem --- Check for activity
				okay$="Y"
				mp=13
				reason$=""
			
			rem --- Check glm-02 for activity
				glm02_dev=fnget_dev("GLM_ACCTSUMMARY")
				dim glm02a$:fnget_tpl$("GLM_ACCTSUMMARY")
				this_acct$=callpoint!.getColumnData("GLM_ACCT.GL_ACCOUNT")
				read(glm02_dev,key=firm_id$+this_acct$,dom=*next)
				while 1
					readrecord (glm02_dev,end=*break)glm02a$
					if pos(firm_id$+this_acct$=glm02a.firm_id$+glm02a.gl_account$)<>1 break
					if glm02a.begin_amt<>0 break
					if glm02a.begin_units<>0 break
					for x=1 to mp
						if nfield(glm02a$,"period_amt_"+str(x:"00"))<>0 okay$="N"
						if nfield(glm02a$,"period_units_"+str(x:"00"))<>0 okay$="N"
					next x
					if okay$="N"
						reason$="Account Summary"
						break
					endif
				wend
			
			rem --- Check glt-06 for history
				if okay$="Y"
					glt06_dev=fnget_dev("GLT_TRANSDETAIL")
					read (glt06_dev,key=firm_id$+this_acct$,dom=*next)
					while 1
						glt06_key$=key(glt06_dev,end=*break)
						if pos(firm_id$+this_acct$=glt06_key$)=1
							okay$="N"
							reason$="Transaction History"
						endif
						break
					wend
				endif
			
			rem ---Check Journal Entries for activity
				if okay$="Y"
					gle11_dev=fnget_dev("GLE_JRNLDET")
					read (gle11_dev,key=firm_id$+this_acct$,knum=1,dom=*next)
					while 1
						gle11_key$=key(gle11_dev,end=*break)
						if pos(firm_id$+this_acct$=gle11_key$)=1
							okay$="N"
							reason$="Journal Entry"
						endif
						break
					wend
				endif
			
			rem ---Check Recurring Journal Entries for activity
				if okay$="Y"
					gle12_dev=fnget_dev("GLE_RECJEDET")
					read (gle12_dev,key=firm_id$+this_acct$,knum=1,dom=*next)
					while 1
						gle12_key$=key(gle12_dev,end=*break)
						if pos(firm_id$+this_acct$=gle12_key$)=1
							okay$="N"
							reason$="Recurring Journal Entry"
						endif
						break
					wend
				endif
			
			rem ---Check Allocation Detail for activity
				if okay$="Y"
					gle13_dev=fnget_dev("GLE_ALLOCDET")
					read (gle13_dev,key=firm_id$+this_acct$,dom=*next)
					while 1
						gle13_key$=key(gle13_dev,end=*break)
						if pos(firm_id$+this_acct$=gle13_key$)=1
							okay$="N"
							reason$="Account Allocation"
						endif
						break
					wend
					if okay$="Y"
						read (gle13_dev,key=firm_id$+this_acct$,knum=1,dom=*next)
						while 1
							gle13_key$=key(gle13_dev,end=*break)
							if pos(firm_id$+this_acct$=gle13_key$)=1
								okay$="N"
								reason$="Account Allocation"
							endif
							break
						wend
					endif
				endif
			
			rem ---Check Daily Detail for activity
				if okay$="Y"
					glt04_dev=fnget_dev("GLE_DAILYDETAIL")
					read (glt04_dev,key=firm_id$+this_acct$,knum=1,dom=*next)
					while 1
						glt04_key$=key(glt04_dev,end=*break)
						if pos(firm_id$+this_acct$=glt04_key$)=1
							okay$="N"
							reason$="Daily Detail"
						endif
						break
					wend
				endif
			
			rem --- Check Retained Earnings Account
				if okay$="Y"
					gls_earnings_dev=fnget_dev("GLS_EARNINGS")
					dim gls01b$:fnget_tpl$("GLS_EARNINGS")
					read record(gls_earnings_dev,key=firm_id$+"GL01")gls01b$
					if gls01b.gl_account$=this_acct$
						okay$="N"
						reason$="Retained Earnings Account"
					endif
				endif
			
			rem --- Disallow delete if flag is set
				if okay$="N"
					msg_id$="ACTIVITY_EXISTS"
					dim msg_tokens$[1]
					msg_tokens$[1]=reason$
					gosub disp_message
					callpoint!.setStatus("ABORT")
				else
					msg_id$="ENTRY_DTL_DELETE"
					msg_opt$=""
					gosub disp_message
					if msg_opt$="N"
						callpoint!.setStatus("ABORT")
					endif
				endif
		break
		case fnstr_pos(pad("GLM_ACCT.BSHO",40),callpoint_event_str$,40)			
			rem --- Open/Lock files
			
			files=8,begfile=1,endfile=files
			dim files$[files],options$[files],chans$[files],templates$[files]
			files$[1]="GLS_PARAMS"
			files$[2]="GLM_ACCTSUMMARY"
			files$[3]="GLT_TRANSDETAIL"
			files$[4]="GLE_JRNLDET"
			files$[5]="GLE_RECJEDET"
			files$[6]="GLE_ALLOCDET"
			files$[7]="GLS_EARNINGS"
			files$[8]="GLE_DAILYDETAIL"
			
			
			for wkx=begfile to endfile
				options$[wkx]="OTA"
			next wkx
			
			call dir_pgm$+"bac_open_tables.bbj",begfile,endfile,files$[all],options$[all],
:			                                 chans$[all],templates$[all],table_chans$[all],batch,status$
			
			if status$<>"" then
				remove_process_bar:
				bbjAPI!=bbjAPI()
				rdFuncSpace!=bbjAPI!.getGroupNamespace()
				rdFuncSpace!.setValue("+build_task","OFF")
				release
			endif
			
			gls01_dev=num(chans$[1])
			dim gls01a$:templates$[1]
			
			
			rem --- init/parameters
			
			gls01a_key$=firm_id$+"GL00"
			find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[GLM_ACCT.<CUSTOM>]]

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src



open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

