rem Callpoint program for ARM_CUSTMAST - Customer Master
rem Program arm_custmast_cpt.bbj

rem Barista Version 9.0
rem Copyright (c) 2007-2009 BASIS International Ltd.
rem All Rights Reserved

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Callpoints and tables handled by this program

	callpoint_event$=Callpoint!.getCallpointEvent()

	callpoint_event_str$=
:		pad("ARM_CUSTMAST.AOPT-IDTL",40)+
:		pad("ARM_CUSTMAST.AOPT-ORIV",40)+
:		pad("ARM_CUSTMAST.AREA",40)+
:		pad("ARM_CUSTMAST.AREC",40)+
:		pad("ARM_CUSTMAST.BDEL",40)+
:		pad("ARM_CUSTMAST.BREC",40)+
:		pad("ARM_CUSTMAST.BSHO",40)+
:		pad("ARM_CUSTMAST.CUSTOMER_ID.AVAL",40)+
:		pad("ARM_CUSTMAST.CUSTOMER_NAME.AVAL",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("ARM_CUSTMAST.AOPT-IDTL",40),callpoint_event_str$,40)			
			rem Invoice Dtl Inquiry
			cp_cust_id$=callpoint!.getColumnData("ARM_CUSTMAST.CUSTOMER_ID")
			user_id$=stbl("+USER_ID")
			dim dflt_data$[2,1]
			dflt_data$[1,0]="CUSTOMER_ID"
			dflt_data$[1,1]=cp_cust_id$
			call stbl("+DIR_SYP")+"bam_run_prog.bbj",
:			                       "ARR_INVDETAIL",
:			                       user_id$,
:			                   	"",
:			                       "",
:			                       table_chans$[all],
:			                       "",
:			                       dflt_data$[all]
		break
		case fnstr_pos(pad("ARM_CUSTMAST.AOPT-ORIV",40),callpoint_event_str$,40)			
			rem Order/Invoice History Inq
			rem --- assume this should only run if OP installed...
				if user_tpl.op_installed$="Y"
					cp_cust_id$=callpoint!.getColumnData("ARM_CUSTMAST.CUSTOMER_ID")
					user_id$=stbl("+USER_ID")
					dim dflt_data$[2,1]
					dflt_data$[1,0]="CUSTOMER_ID"
					dflt_data$[1,1]=cp_cust_id$
					call stbl("+DIR_SYP")+"bam_run_prog.bbj",
:			                           "ARR_ORDINVHIST",
:			                           user_id$,
:			                   	    "",
:			                           "",
:			                           table_chans$[all],
:			                           "",
:			                           dflt_data$[all]
				else
					msg_id$="AD_NO_OP"
					dim msg_tokens$[1]
					msg_opt$=""
					gosub disp_message
				endif
		break
		case fnstr_pos(pad("ARM_CUSTMAST.AREA",40),callpoint_event_str$,40)			
			rem --- Set New Customer flag
				user_tpl.new_cust$="N"
		break
		case fnstr_pos(pad("ARM_CUSTMAST.AREC",40),callpoint_event_str$,40)			
			rem --- notes about defaults, other init:
			rem --- if cm$ installed, and ars01c.hold_new$ is "Y", then default arm02a.cred_hold$ to "Y"
			rem --- default arm02a.slspsn_code$,ar_terms_code$,disc_code$,ar_dist_code$,territory$,tax_code$
			rem --- and inv_hist_flg$ per defaults in ops10d
			dim ars10d$:user_tpl.cust_dflt_tpl$
			ars10d$=user_tpl.cust_dflt_rec$
			callpoint!.setColumnData("ARM_CUSTDET.AR_TERMS_CODE",ars10d.ar_terms_code$)
			callpoint!.setColumnUndoData("ARM_CUSTDET.AR_TERMS_CODE",ars10d.ar_terms_code$)
			callpoint!.setColumnData("ARM_CUSTDET.AR_DIST_CODE",ars10d.ar_dist_code$)
			callpoint!.setColumnUndoData("ARM_CUSTDET.AR_DIST_CODE",ars10d.ar_dist_code$)
			callpoint!.setColumnData("ARM_CUSTDET.SLSPSN_CODE",ars10d.slspsn_code$)
			callpoint!.setColumnUndoData("ARM_CUSTDET.SLSPSN_CODE",ars10d.slspsn_code$)
			callpoint!.setColumnData("ARM_CUSTDET.DISC_CODE",ars10d.disc_code$)
			callpoint!.setColumnUndoData("ARM_CUSTDET.DISC_CODE",ars10d.disc_code$)
			callpoint!.setColumnData("ARM_CUSTDET.TERRITORY",ars10d.territory$)
			callpoint!.setColumnUndoData("ARM_CUSTDET.TERRITORY",ars10d.territory$)
			callpoint!.setColumnData("ARM_CUSTDET.TAX_CODE",ars10d.tax_code$)
			callpoint!.setColumnUndoData("ARM_CUSTDET.TAX_CODE",ars10d.tax_code$)
			callpoint!.setColumnData("ARM_CUSTDET.INV_HIST_FLG","Y")
			callpoint!.setColumnUndoData("ARM_CUSTDET.INV_HIST_FLG","Y")
			callpoint!.setColumnData("ARM_CUSTMAST.OPENED_DATE",date(0:"%Yd%Mz%Dz"))
			callpoint!.setColumnData("ARM_CUSTMAST.RETAIN_CUST","Y")
			if user_tpl.cm_installed$="Y" and user_tpl.dflt_cred_hold$="Y" 
				callpoint!.setColumnData("ARM_CUSTDET.CRED_HOLD","Y")
				callpoint!.setColumnUndoData("ARM_CUSTDET.CRED_HOLD","Y")
			endif              
		break
		case fnstr_pos(pad("ARM_CUSTMAST.BDEL",40),callpoint_event_str$,40)			
			rem  --- Check for Open AR Invoices
				delete_msg$=""
				cust$=callpoint!.getColumnData("ARM_CUSTMAST.CUSTOMER_ID")
				read(user_tpl.art01_dev,key=firm_id$+"  "+cust$,dom=*next)
				art01_key$=key(user_tpl.art01_dev,end=check_op_ord)
				if pos(firm_id$+"  "+cust$=art01_key$)<>1 goto check_op_ord
				delete_msg$="Open Invoices exist - Customer deletion not allowed"
				goto done_checking	
			check_op_ord:
				if user_tpl.op_installed$<>"Y" goto done_checking
				num_files=2
				dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
				open_tables$[1]="OPE_INVHDR",open_opts$[1]="OTA"
				open_tables$[2]="OPT_INVHDR",open_opts$[2]="OTA"
				gosub open_tables
				ope01_dev=num(open_chans$[1])
				opt01_dev=num(open_chans$[2])
				read (ope01_dev,key=firm_id$+"  "+cust$,dom=*next)
				ope01_key$=key(ope01_dev,end=check_op_inv)
				if pos(firm_id$+"  "+cust$=ope01_key$)<>1 goto check_op_inv
				delete_msg$="Open Orders exist - Customer deletion not allowed"
				goto done_checking	
			check_op_inv:
				read (opt01_dev,key=firm_id$+"  "+cust$,dom=*next)
				opt01_key$=key(opt01_dev,end=done_checking)              
				if pos(firm_id$+"  "+cust$=opt01_key$)<>1 goto done_checking
				delete_msg$="Historical Invoices exist - Customer deletion not allowed"
			done_checking:
				if delete_msg$<>""
					callpoint!.setMessage("NO_DELETE:"+delete_msg$)
					callpoint!.setStatus("ABORT")
				endif
		break
		case fnstr_pos(pad("ARM_CUSTMAST.BREC",40),callpoint_event_str$,40)			
			rem --- Set New Customer flag
				user_tpl.new_cust$="Y"
		break
		case fnstr_pos(pad("ARM_CUSTMAST.BSHO",40),callpoint_event_str$,40)			
			rem --- Open/Lock files
				dir_pgm$=stbl("+DIR_PGM")
				sys_pgm$=stbl("+DIR_SYP")
				num_files=6
				dim files$[num_files],options$[num_files],ids$[num_files],templates$[num_files],channels[num_files]
				files$[1]="gls_params",ids$[1]="GLS_PARAMS",options$[1]="OTA"
				files$[2]="ars_params",ids$[2]="ARS_PARAMS",options$[2]="OTA"
				files$[3]="ars_custdflt",ids$[3]="ARS_CUSTDFLT",options$[3]="OTA"; rem ars-10D
				files$[4]="ars_credit",ids$[4]="ARS_CREDIT",options$[4]="OTA"; rem ars-01C
				files$[5]="arm-02",ids$[5]="ARM_CUSTDET",options$[5]="OTA"
				files$[6]="art-01",ids$[6]="ART_INVHDR",options$[6]="OTA"
				call stbl("+DIR_PGM")+"adc_fileopen.aon",action,1,num_files,files$[all],options$[all],
:			                              ids$[all],templates$[all],channels[all],batch,status
			
				if status then
					remove_process_bar:
					bbjAPI!=bbjAPI()
					rdFuncSpace!=bbjAPI!.getGroupNamespace()
					rdFuncSpace!.setValue("+build_task","OFF")
				 	release
				endif
			
				gls01_dev=channels[1]
				ars01_dev=channels[2]
				ars10_dev=channels[3]
				ars01c_dev=channels[4]
				arm02_dev=channels[5],arm02_tpl$=templates$[5]
			rem --- Dimension miscellaneous string templates
				dim gls01a$:templates$[1],ars01a$:templates$[2],ars10d$:templates$[3],ars01c$:templates$[4]
			rem --- Retrieve parameter data
				dim info$[20]
				ars01a_key$=firm_id$+"AR00"
				find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$ 
				ars01c_key$=firm_id$+"AR01"
				find record (ars01c_dev,key=ars01c_key$,err=std_missing_params) ars01c$                
				cm$=ars01c.sys_install$
				dflt_cred_hold$=ars01c.hold_new$
				gls01a_key$=firm_id$+"GL00"
				find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$ 
				find record (ars10_dev,key=firm_id$+"D",err=std_missing_params) ars10d$
				call stbl("+DIR_PGM")+"adc_application.aon","GL",info$[all]
				gl$=info$[20]
				call stbl("+DIR_PGM")+"adc_application.aon","OP",info$[all]
				op$=info$[20]
				call stbl("+DIR_PGM")+"adc_application.aon","IV",info$[all]
				iv$=info$[20]
				call stbl("+DIR_PGM")+"adc_application.aon","SA",info$[all]
				sa$=info$[20]
				dim user_tpl$:"app:c(2),gl_installed:c(1),op_installed:c(1),sa_installed:c(1),iv_installed:c(1),"+
:					"cm_installed:c(1),dflt_cred_hold:c(1),cust_dflt_tpl:c(1024),cust_dflt_rec:c(1024),new_cust:c(1),"+
:					"art01_dev:n(5)"
				user_tpl.app$="AR"
				user_tpl.gl_installed$=gl$
				user_tpl.op_installed$=op$
				user_tpl.iv_installed$=iv$
				user_tpl.sa_installed$=sa$
				user_tpl.cm_installed$=cm$
				user_tpl.dflt_cred_hold$=dflt_cred_hold$
				user_tpl.cust_dflt_tpl$=fattr(ars10d$)
				user_tpl.cust_dflt_rec$=ars10d$
				user_tpl.art01_dev=channels[6]
				dim dctl$[17]
				if user_tpl.cm_installed$="Y"
			 		dctl$[1]="ARM_CUSTDET.CREDIT_LIMIT"              
				endif
				if user_tpl.sa_installed$<>"Y" or user_tpl.op_installed$<>"Y"
			 		dctl$[2]="ARM_CUSTDET.SA_FLAG"
				endif
				if ars01a.inv_hist_flg$="N"
					dctl$[3]="ARM_CUSTDET.INV_HIST_FLG"
				endif
				if user_tpl.op_installed$<>"Y"
					dctl$[3]="ARM_CUSTDET.INV_HIST_FLG"
					dctl$[4]="ARM_CUSTDET.TAX_CODE"
					dctl$[5]="ARM_CUSTDET.FRT_TERMS"
					dctl$[6]="ARM_CUSTDET.MESSAGE_CODE"
					dctl$[7]="ARM_CUSTDET.DISC_CODE"
					dctl$[8]="ARM_CUSTDET.PRICING_CODE"
				endif
				dctl$[9]="<<DISPLAY>>.DSP_BALANCE"
				dctl$[10]="<<DISPLAY>>.DSP_MTD_PROFIT"
				dctl$[11]="<<DISPLAY>>.DSP_YTD_PROFIT"
				dctl$[12]="<<DISPLAY>>.DSP_PRI_PROFIT"
				dctl$[13]="<<DISPLAY>>.DSP_NXT_PROFIT"
				dctl$[14]="<<DISPLAY>>.DSP_MTD_PROF_PCT"
				dctl$[15]="<<DISPLAY>>.DSP_YTD_PROF_PCT"
				dctl$[16]="<<DISPLAY>>.DSP_PRI_PROF_PCT"
				dctl$[17]="<<DISPLAY>>.DSP_NXT_PROF_PCT"
				gosub disable_ctls
			rem --- Disable Option for Jobs if OP not installed or Job flag not set
				if op$<>"Y" or ars01a.job_nos$<>"Y"
					enable_str$=""
					disable_str$="OPM_CUSTJOBS"
					call stbl("+DIR_SYP")+"bam_enable_pop.bbj",Form!,enable_str$,disable_str$
				endif
		break
		case fnstr_pos(pad("ARM_CUSTMAST.CUSTOMER_ID.AVAL",40),callpoint_event_str$,40)			
			rem --- Validate Customer Number
				if num(callpoint!.getUserInput(),err=*next)=0 callpoint!.setStatus("ABORT")
		break
		case fnstr_pos(pad("ARM_CUSTMAST.CUSTOMER_NAME.AVAL",40),callpoint_event_str$,40)			
			rem --- Set Alternate Sequence for new customers
				if user_tpl.new_cust$="Y"
					callpoint!.setColumnData("ARM_CUSTMAST.ALT_SEQUENCE",callpoint!.getUserInput())
					callpoint!.setStatus("REFRESH")
				endif
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[ARM_CUSTMAST.<CUSTOM>]]

disable_ctls:rem --- disable selected control
    for dctl=1 to 17
        dctl$=dctl$[dctl]
        if dctl$<>""
            wctl$=str(num(callpoint!.getTableColumnAttribute(dctl$,"CTLI")):"00000")
	 wmap$=callpoint!.getAbleMap()
            wpos=pos(wctl$=wmap$,8)
            wmap$(wpos+6,1)="I"
	 callpoint!.setAbleMap(wmap$)
            callpoint!.setStatus("ABLEMAP")
        endif
    next dctl
    return
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src




open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5) and pgm(-1)=pgm(-2) then err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

